pathexpr::[
    nested::[
        parse::{
            name: "dot case one insensitive component",
            statement: "a.b",
            assert: [
                {
                    result: ParseOk
                },
            ]
        },
        parse::{
            name: "dot case two insensitive components",
            statement: "a.b.c",
            assert: [
                {
                    result: ParseOk
                },
            ]
        },
        parse::{
            name: "dot case three insensitive components",
            statement: "a.b.c.d",
            assert: [
                {
                    result: ParseOk
                },
            ]
        },
        parse::{
            name: "dot case sensitive",
            statement: ''' "a"."b" ''',
            assert: [
                {
                    result: ParseOk
                },
            ]
        },
        parse::{
            name: "dot case sensitive component",
            statement: ''' a."b" ''',
            assert: [
                {
                    result: ParseOk
                },
            ]
        },
        parse::{
            name: "path with one square bracket",
            statement: "a[5]",
            assert: [
                {
                    result: ParseOk
                },
            ]
        },
        parse::{
            name: "complicated nested path",
            statement: ''' a.b.c['item']."d"[5].e['s'].f[1+2] ''',
            assert: [
                {
                    result: ParseOk
                },
            ]
        },
        parse::{
            name: "path with at identifer",
            statement: "@a.b[*]",
            assert: [
                {
                    result: ParseOk
                },
            ]
        },
        parse::{
            name: "dot star",
            statement: "a.*",
            assert: [
                {
                    result: ParseOk
                },
            ]
        },
        parse::{
            name: "dot two star",
            statement: "a.b.*",
            assert: [
                {
                    result: ParseOk
                },
            ]
        },
        parse::{
            name: "dot wildcard",
            statement: "a[*]",
            assert: [
                {
                    result: ParseOk
                },
            ]
        },
        parse::{
            name: "dot two wildcard",
            statement: "a.b[*]",
            assert: [
                {
                    result: ParseOk
                },
            ]
        },
        parse::{
            name: "dot and bracket star",
            statement: "x.a[*].b",
            assert: [
                {
                    result: ParseOk
                },
            ]
        }
    ],
    'function-call'::[
        parse::{
            name: "path with call",
            statement: "foo(x, y).a",
            assert: [
                {
                    result: ParseOk
                },
            ]
        },
        parse::{
            name: "path with call nested with star and array",
            statement: "foo(x, y)[*].*.b[5]",
            assert: [
                {
                    result: ParseOk
                },
            ]
        }
    ],
    'tuple-nested'::[
        parse::{
            name: "path expression on tuple",
            statement: "{'a': 1, 'b': 1}.a",
            assert: [
                {
                    result: ParseOk
                },
            ]
        },
        parse::{
            name: "path expression on tuple with string",
            statement: "{'a': 1, 'b': 1}.'a'",
            assert: [
                {
                    result: ParseOk
                },
            ]
        },
        parse::{
            name: "path expression on tuple with dot star",
            statement: ''' {'a': 1, 'b': 1}.* ''',
            assert: [
                {
                    result: ParseOk
                },
            ]
        },
        parse::{
            name: "tuple navigation with array notation",
            statement: "{'a': 1, 'b': 2}['a']",
            assert: [
                {
                    result: ParseOk
                },
            ]
        },
        parse::{
            name: "tuple navigation with array case sensitive",
            statement: ''' {'a': 1, 'b': 2}["A"] ''',
            assert: [
                {
                    result: ParseOk
                },
            ]
        },
        parse::{
            name: "tuple navigation with array concat",
            statement: ''' {'a': 1, 'b': 2}[v || w] ''',
            assert: [
                {
                    result: ParseOk
                },
            ]
        },
        parse::{
            name: "tuple navigation with array notation with CAST",
            statement: " {'attr': 1, 'b':2}[CAST('at' || 'tr' AS STRING)]",
            assert: [
                {
                    result: ParseOk
                },
            ]
        }
    ],
    'query'::[
        parse::{
            name: "group dot",
            statement: "(a).b",
            assert: [
                {
                    result: ParseOk
                },
            ]
        },
        parse::{
            name: "path expression on select query",
            statement: "(SELECT a FROM en).b",
            assert: [
                {
                    result: ParseOk
                },
            ]
        }
    ],
    'array'::[
        parse::{
            name: "array with literal index",
            statement: "[1,2,3][0]",
            assert: [
                {
                    result: ParseOk
                },
            ]
        },
        parse::{
            name: "array with expression index",
            statement: "[1,2,3][1+1]",
            assert: [
                {
                    result: ParseOk
                },
            ]
        },
        parse::{
            name: "array with star index",
            statement: "[1,2,3][*]",
            assert: [
                {
                    result: ParseOk
                },
            ]
        }
    ]
]

