envs::{
  a:{
    b:{
      c:{
        d:{
          e:5,
          f:6
        }
      }
    }
  },
  stores:[
    {
      id:"5",
      books:[
        {
          title:"A",
          price:5.0,
          categories:[
            "sci-fi",
            "action"
          ]
        },
        {
          title:"B",
          price:2.0,
          categories:[
            "sci-fi",
            "comedy"
          ]
        },
        {
          title:"C",
          price:7.0,
          categories:[
            "action",
            "suspense"
          ]
        },
        {
          title:"D",
          price:9.0,
          categories:[
            "suspense"
          ]
        }
      ]
    },
    {
      id:"6",
      books:[
        {
          title:"A",
          price:5.0,
          categories:[
            "sci-fi",
            "action"
          ]
        },
        {
          title:"E",
          price:9.5,
          categories:[
            "fantasy",
            "comedy"
          ]
        },
        {
          title:"F",
          price:10.0,
          categories:[
            "history"
          ]
        }
      ]
    },
    {
      id:"7",
      books:[
      ]
    }
  ],
}

'path in from clause'::[
  {
    name:"selectFromScalarAndAtUnpivotWildCardOverScalar",
    statement:"SELECT VALUE [n, v] FROM (100).* AS v AT n",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:$bag::[
        [
          "_1",
          100
        ]
      ]
    }
  },
  {
    name:"selectFromListAndAtUnpivotWildCardOverScalar",
    statement:"SELECT VALUE [n, (SELECT VALUE [i, x] FROM @v AS x AT i)] FROM [100, 200].*.*.* AS v AT n",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:$bag::[
        [
          "_1",
          $bag::[
            [
              0,
              100
            ],
            [
              1,
              200
            ]
          ]
        ]
      ]
    }
  },
  {
    name:"selectFromBagAndAtUnpivotWildCardOverScalar",
    statement:"SELECT VALUE [n, (SELECT VALUE [i IS MISSING, i, x] FROM @v AS x AT i)] FROM <<100, 200>>.* AS v AT n",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:$bag::[
        [
          "_1",
          $bag::[
            [
              true,
              $missing::null,
              100
            ],
            [
              true,
              $missing::null,
              200
            ]
          ]
        ]
      ]
    }
  },
  {
    name:"selectPathUnpivotWildCardOverStructMultiple",
    statement:"SELECT name, val FROM a.*.*.*.* AS val AT name",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:$bag::[
        {
          name:"e",
          val:5
        },
        {
          name:"f",
          val:6
        }
      ]
    }
  },
  {
    name:"selectStarSingleSourceHoisted",
    statement:"SELECT * FROM stores[*].books[*] AS b WHERE b.price >= 9.0",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:$bag::[
        {
          title:"D",
          price:9.0,
          categories:[
            "suspense"
          ]
        },
        {
          title:"E",
          price:9.5,
          categories:[
            "fantasy",
            "comedy"
          ]
        },
        {
          title:"F",
          price:10.0,
          categories:[
            "history"
          ]
        }
      ]
    }
  },
  {
    name:"ordinalAccessWithNegativeIndex",
    statement:"SELECT temp[-2] FROM <<[1,2,3,4]>> AS temp",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:$bag::[
        {
        }
      ]
    }
  },
  {
    name:"ordinalAccessWithNegativeIndexAndBindings",
    statement:"SELECT temp[-2] FROM [[1,2,3,4]] AS temp",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:$bag::[
        {
        }
      ]
    }
  }
]

'various types in from clause'::[
  {
    name:"rangeOverScalar",
    statement:"SELECT VALUE v FROM 1 AS v",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:$bag::[
        1
      ]
    }
  },
  {
    name:"rangeTwiceOverScalar",
    statement:"SELECT VALUE [v1, v2] FROM 1 AS v1, @v1 AS v2",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:$bag::[
        [
          1,
          1
        ]
      ]
    }
  },
  {
    name:"rangeOverSexp",
    statement:"SELECT VALUE v FROM `(a b c)` AS v",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:$bag::[
        (
          a
          b
          c
        )
      ]
    }
  },
  {
    name:"rangeOverStruct",
    statement:"SELECT VALUE v FROM `{a:5}` AS v",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:$bag::[
        {
          a:5
        }
      ]
    }
  },
  {
    name:"rangeOverList",
    statement:"SELECT VALUE v FROM `[1, 2, 3]` AS v",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:$bag::[
        1,
        2,
        3
      ]
    }
  },
  {
    name:"rangeOverListWithAt",
    statement:"SELECT VALUE i FROM `[1, 2, 3]` AT i",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:$bag::[
        0,
        1,
        2
      ]
    }
  },
  {
    name:"rangeOverListWithAsAndAt",
    statement:"SELECT VALUE [i, v] FROM `[1, 2, 3]` AS v AT i",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:$bag::[
        [
          0,
          1
        ],
        [
          1,
          2
        ],
        [
          2,
          3
        ]
      ]
    }
  },
  {
    name:"rangeOverListConstructorWithAt",
    statement:"SELECT VALUE i FROM [1, 2, 3] AT i",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:$bag::[
        0,
        1,
        2
      ]
    }
  },
  {
    name:"rangeOverListConstructorWithAsAndAt",
    statement:"SELECT VALUE [i, v] FROM [1, 2, 3] AS v AT i",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:$bag::[
        [
          0,
          1
        ],
        [
          1,
          2
        ],
        [
          2,
          3
        ]
      ]
    }
  },
  {
    name:"rangeOverBagWithAt",
    statement:"SELECT VALUE [i, v] FROM <<1, 2, 3>> AS v AT i",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:$bag::[
        [
          $missing::null,
          1
        ],
        [
          $missing::null,
          2
        ],
        [
          $missing::null,
          3
        ]
      ]
    }
  },
  {
    name:"rangeOverNestedWithAt",
    statement:"SELECT VALUE [i, v] FROM (SELECT VALUE v FROM `[1, 2, 3]` AS v) AS v AT i",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:$bag::[
        [
          $missing::null,
          1
        ],
        [
          $missing::null,
          2
        ],
        [
          $missing::null,
          3
        ]
      ]
    }
  }
]
