
char_length::[
  {
    name:"char_length valid cases{in:\"\",result:(success 0)}",
    statement:"char_length('')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"char_length valid cases{in:\"a\",result:(success 1)}",
    statement:"char_length('a')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"char_length valid cases{in:\"123456789\",result:(success 9)}",
    statement:"char_length('123456789')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:9
    }
  },
  {
    name:"char_length valid cases{in:\"avi\\xe3o\",result:(success 5)}",
    statement:"char_length('avi√£o')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"char_length valid cases{in:\"e\\u082b\",result:(success 2)}",
    statement:"char_length('e‡†´')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"char_length valid cases{in:\"\\U0001f601\\U0001f61e\\U0001f638\\U0001f638\",result:(success 4)}",
    statement:"char_length('üòÅüòûüò∏üò∏')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"char_length valid cases{in:\"\\u8a71\\u5bb6\\u8eab\\u5727\\u8cbb\\u8c37\\u6599\\u6751\\u80fd\\u8a08\\u7a0e\\u91d1\",result:(success 12)}",
    statement:"char_length('Ë©±ÂÆ∂Ë∫´ÂúßË≤ªË∞∑ÊñôÊùëËÉΩË®àÁ®éÈáë')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:12
    }
  },
  {
    name:"char_length valid cases{in:\"undefined\",result:(success 9)}",
    statement:"char_length('undefined')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:9
    }
  },
  {
    name:"char_length valid cases{in:\"undef\",result:(success 5)}",
    statement:"char_length('undef')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"char_length valid cases{in:\"null\",result:(success 4)}",
    statement:"char_length('null')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"char_length valid cases{in:\"NULL\",result:(success 4)}",
    statement:"char_length('NULL')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"char_length valid cases{in:\"(null)\",result:(success 6)}",
    statement:"char_length('(null)')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:6
    }
  },
  {
    name:"char_length valid cases{in:\"nil\",result:(success 3)}",
    statement:"char_length('nil')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3
    }
  },
  {
    name:"char_length valid cases{in:\"NIL\",result:(success 3)}",
    statement:"char_length('NIL')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3
    }
  },
  {
    name:"char_length valid cases{in:\"true\",result:(success 4)}",
    statement:"char_length('true')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"char_length valid cases{in:\"false\",result:(success 5)}",
    statement:"char_length('false')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"char_length valid cases{in:\"True\",result:(success 4)}",
    statement:"char_length('True')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"char_length valid cases{in:\"False\",result:(success 5)}",
    statement:"char_length('False')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"char_length valid cases{in:\"TRUE\",result:(success 4)}",
    statement:"char_length('TRUE')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"char_length valid cases{in:\"FALSE\",result:(success 5)}",
    statement:"char_length('FALSE')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"char_length valid cases{in:\"None\",result:(success 4)}",
    statement:"char_length('None')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"char_length valid cases{in:\"hasOwnProperty\",result:(success 14)}",
    statement:"char_length('hasOwnProperty')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:14
    }
  },
  {
    name:"char_length valid cases{in:\"999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\",result:(success 96)}",
    statement:"char_length('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:96
    }
  },
  {
    name:"char_length valid cases{in:\"123456789012345678901234567890123456789\",result:(success 39)}",
    statement:"char_length('123456789012345678901234567890123456789')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:39
    }
  },
  {
    name:"char_length valid cases{in:\"0\",result:(success 1)}",
    statement:"char_length('0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"char_length valid cases{in:\"1\",result:(success 1)}",
    statement:"char_length('1')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"char_length valid cases{in:\"1.00\",result:(success 4)}",
    statement:"char_length('1.00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"char_length valid cases{in:\"1.00\",result:(success 5)}",
    statement:"char_length('$1.00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"char_length valid cases{in:\"1/2\",result:(success 3)}",
    statement:"char_length('1/2')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3
    }
  },
  {
    name:"char_length valid cases{in:\"1E2\",result:(success 3)}",
    statement:"char_length('1E2')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3
    }
  },
  {
    name:"char_length valid cases{in:\"1E02\",result:(success 4)}",
    statement:"char_length('1E02')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"char_length valid cases{in:\"1E+02\",result:(success 5)}",
    statement:"char_length('1E+02')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"char_length valid cases{in:\"-1\",result:(success 2)}",
    statement:"char_length('-1')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"char_length valid cases{in:\"-1.00\",result:(success 5)}",
    statement:"char_length('-1.00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"char_length valid cases{in:\"-1.00\",result:(success 6)}",
    statement:"char_length('-$1.00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:6
    }
  },
  {
    name:"char_length valid cases{in:\"-1/2\",result:(success 4)}",
    statement:"char_length('-1/2')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"char_length valid cases{in:\"-1E2\",result:(success 4)}",
    statement:"char_length('-1E2')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"char_length valid cases{in:\"-1E02\",result:(success 5)}",
    statement:"char_length('-1E02')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"char_length valid cases{in:\"-1E+02\",result:(success 6)}",
    statement:"char_length('-1E+02')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:6
    }
  },
  {
    name:"char_length valid cases{in:\"1/0\",result:(success 3)}",
    statement:"char_length('1/0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3
    }
  },
  {
    name:"char_length valid cases{in:\"0/0\",result:(success 3)}",
    statement:"char_length('0/0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3
    }
  },
  {
    name:"char_length valid cases{in:\"-2147483648/-1\",result:(success 14)}",
    statement:"char_length('-2147483648/-1')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:14
    }
  },
  {
    name:"char_length valid cases{in:\"-9223372036854775808/-1\",result:(success 23)}",
    statement:"char_length('-9223372036854775808/-1')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:23
    }
  },
  {
    name:"char_length valid cases{in:\"-0\",result:(success 2)}",
    statement:"char_length('-0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"char_length valid cases{in:\"-0.0\",result:(success 4)}",
    statement:"char_length('-0.0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"char_length valid cases{in:\"+0\",result:(success 2)}",
    statement:"char_length('+0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"char_length valid cases{in:\"+0.0\",result:(success 4)}",
    statement:"char_length('+0.0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"char_length valid cases{in:\"0.00\",result:(success 4)}",
    statement:"char_length('0.00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"char_length valid cases{in:\"0..0\",result:(success 4)}",
    statement:"char_length('0..0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"char_length valid cases{in:\".\",result:(success 1)}",
    statement:"char_length('.')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"char_length valid cases{in:\"0.0.0\",result:(success 5)}",
    statement:"char_length('0.0.0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"char_length valid cases{in:\"0,00\",result:(success 4)}",
    statement:"char_length('0,00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"char_length valid cases{in:\"0,,0\",result:(success 4)}",
    statement:"char_length('0,,0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"char_length valid cases{in:\",\",result:(success 1)}",
    statement:"char_length(',')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"char_length valid cases{in:\"0,0,0\",result:(success 5)}",
    statement:"char_length('0,0,0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"char_length valid cases{in:\"0.0/0\",result:(success 5)}",
    statement:"char_length('0.0/0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"char_length valid cases{in:\"1.0/0.0\",result:(success 7)}",
    statement:"char_length('1.0/0.0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:7
    }
  },
  {
    name:"char_length valid cases{in:\"0.0/0.0\",result:(success 7)}",
    statement:"char_length('0.0/0.0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:7
    }
  },
  {
    name:"char_length valid cases{in:\"1,0/0,0\",result:(success 7)}",
    statement:"char_length('1,0/0,0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:7
    }
  },
  {
    name:"char_length valid cases{in:\"0,0/0,0\",result:(success 7)}",
    statement:"char_length('0,0/0,0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:7
    }
  },
  {
    name:"char_length valid cases{in:\"--1\",result:(success 3)}",
    statement:"char_length('--1')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3
    }
  },
  {
    name:"char_length valid cases{in:\"-\",result:(success 1)}",
    statement:"char_length('-')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"char_length valid cases{in:\"-.\",result:(success 2)}",
    statement:"char_length('-.')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"char_length valid cases{in:\"-,\",result:(success 2)}",
    statement:"char_length('-,')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"char_length valid cases{in:\"NaN\",result:(success 3)}",
    statement:"char_length('NaN')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3
    }
  },
  {
    name:"char_length valid cases{in:\"Infinity\",result:(success 8)}",
    statement:"char_length('Infinity')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:8
    }
  },
  {
    name:"char_length valid cases{in:\"-Infinity\",result:(success 9)}",
    statement:"char_length('-Infinity')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:9
    }
  },
  {
    name:"char_length valid cases{in:\"INF\",result:(success 3)}",
    statement:"char_length('INF')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3
    }
  },
  {
    name:"char_length valid cases{in:\"1#INF\",result:(success 5)}",
    statement:"char_length('1#INF')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"char_length valid cases{in:\"-1#IND\",result:(success 6)}",
    statement:"char_length('-1#IND')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:6
    }
  },
  {
    name:"char_length valid cases{in:\"1#QNAN\",result:(success 6)}",
    statement:"char_length('1#QNAN')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:6
    }
  },
  {
    name:"char_length valid cases{in:\"1#SNAN\",result:(success 6)}",
    statement:"char_length('1#SNAN')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:6
    }
  },
  {
    name:"char_length valid cases{in:\"1#IND\",result:(success 5)}",
    statement:"char_length('1#IND')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"char_length valid cases{in:\"0x0\",result:(success 3)}",
    statement:"char_length('0x0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3
    }
  },
  {
    name:"char_length valid cases{in:\"0xffffffff\",result:(success 10)}",
    statement:"char_length('0xffffffff')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:10
    }
  },
  {
    name:"char_length valid cases{in:\"0xffffffffffffffff\",result:(success 18)}",
    statement:"char_length('0xffffffffffffffff')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:18
    }
  },
  {
    name:"char_length valid cases{in:\"0xabad1dea\",result:(success 10)}",
    statement:"char_length('0xabad1dea')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:10
    }
  },
  {
    name:"char_length valid cases{in:\"1,000.00\",result:(success 8)}",
    statement:"char_length('1,000.00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:8
    }
  },
  {
    name:"char_length valid cases{in:\"1 000.00\",result:(success 8)}",
    statement:"char_length('1 000.00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:8
    }
  },
  {
    name:"char_length valid cases{in:\"1,000,000.00\",result:(success 12)}",
    statement:"char_length('1,000,000.00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:12
    }
  },
  {
    name:"char_length valid cases{in:\"1 000 000.00\",result:(success 12)}",
    statement:"char_length('1 000 000.00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:12
    }
  },
  {
    name:"char_length valid cases{in:\"1.000,00\",result:(success 8)}",
    statement:"char_length('1.000,00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:8
    }
  },
  {
    name:"char_length valid cases{in:\"1 000,00\",result:(success 8)}",
    statement:"char_length('1 000,00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:8
    }
  },
  {
    name:"char_length valid cases{in:\"1.000.000,00\",result:(success 12)}",
    statement:"char_length('1.000.000,00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:12
    }
  },
  {
    name:"char_length valid cases{in:\"1 000 000,00\",result:(success 12)}",
    statement:"char_length('1 000 000,00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:12
    }
  },
  {
    name:"char_length valid cases{in:\"01000\",result:(success 5)}",
    statement:"char_length('01000')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"char_length valid cases{in:\"08\",result:(success 2)}",
    statement:"char_length('08')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"char_length valid cases{in:\"09\",result:(success 2)}",
    statement:"char_length('09')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"char_length valid cases{in:\"2.2250738585072011e-308\",result:(success 23)}",
    statement:"char_length('2.2250738585072011e-308')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:23
    }
  },
  {
    name:"char_length valid cases{in:\"\\u0401\\u0402\\u0403\\u0404\\u0405\\u0406\\u0407\\u0408\\u0409\\u040a\\u040b\\u040c\\u040d\\u040e\\u040f\\u0410\\u0411\\u0412\\u0413\\u0414\\u0415\\u0416\\u0417\\u0418\\u0419\\u041a\\u041b\\u041c\\u041d\\u041e\\u041f\\u0420\\u0421\\u0422\\u0423\\u0424\\u0425\\u0426\\u0427\\u0428\\u0429\\u042a\\u042b\\u042c\\u042d\\u042e\\u042f\\u0430\\u0431\\u0432\\u0433\\u0434\\u0435\\u0436\\u0437\\u0438\\u0439\\u043a\\u043b\\u043c\\u043d\\u043e\\u043f\\u0440\\u0441\\u0442\\u0443\\u0444\\u0445\\u0446\\u0447\\u0448\\u0449\\u044a\\u044b\\u044c\\u044d\\u044e\\u044f\",result:(success 79)}",
    statement:"char_length('–Å–Ç–É–Ñ–Ö–Ü–á–à–â–ä–ã–å–ç–é–è–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:79
    }
  },
  {
    name:"char_length valid cases{in:\"<>?:\\\"{}|_+\",result:(success 10)}",
    statement:"char_length('<>?:\"{}|_+')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:10
    }
  },
  {
    name:"char_length valid cases{in:\"!@#%^&*()`~\",result:(success 12)}",
    statement:"char_length('!@#$%^&*()`~')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:12
    }
  },
  {
    name:"char_length valid cases{in:\"\\u03a9\\u2248\\xe7\\u221a\\u222b\\u02dc\\xb5\\u2264\\u2265\\xf7\",result:(success 10)}",
    statement:"char_length('Œ©‚âà√ß‚àö‚à´Àú¬µ‚â§‚â•√∑')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:10
    }
  },
  {
    name:"char_length valid cases{in:\"\\xe5\\xdf\\u2202\\u0192\\xa9\\u02d9\\u2206\\u02da\\xac\\u2026\\xe6\",result:(success 11)}",
    statement:"char_length('√•√ü‚àÇ∆í¬©Àô‚àÜÀö¬¨‚Ä¶√¶')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:11
    }
  },
  {
    name:"char_length valid cases{in:\"\\u0153\\u2211\\xb4\\xae\\u2020\\xa5\\xa8\\u02c6\\xf8\\u03c0\\u201c\\u2018\",result:(success 12)}",
    statement:"char_length('≈ì‚àë¬¥¬Æ‚Ä†¬•¬®ÀÜ√∏œÄ‚Äú‚Äò')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:12
    }
  },
  {
    name:"char_length valid cases{in:\"\\xa1\\u2122\\xa3\\xa2\\u221e\\xa7\\xb6\\u2022\\xaa\\xba\\u2013\\u2260\",result:(success 12)}",
    statement:"char_length('¬°‚Ñ¢¬£¬¢‚àû¬ß¬∂‚Ä¢¬™¬∫‚Äì‚â†')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:12
    }
  },
  {
    name:"char_length valid cases{in:\"\\xb8\\u02db\\xc7\\u25ca\\u0131\\u02dc\\xc2\\xaf\\u02d8\\xbf\",result:(success 10)}",
    statement:"char_length('¬∏Àõ√á‚óäƒ±Àú√Ç¬ØÀò¬ø')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:10
    }
  },
  {
    name:"char_length valid cases{in:\"\\xc5\\xcd\\xce\\xcf\\u02dd\\xd3\\xd4\\uf8ff\\xd2\\xda\\xc6\\u2603\",result:(success 12)}",
    statement:"char_length('√Ö√ç√é√èÀù√ì√îÔ£ø√í√ö√Ü‚òÉ')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:12
    }
  },
  {
    name:"char_length valid cases{in:\"\\u0152\\u201e\\xb4\\u2030\\u02c7\\xc1\\xa8\\u02c6\\xd8\\u220f\\u201d\\u2019\",result:(success 12)}",
    statement:"char_length('≈í‚Äû¬¥‚Ä∞Àá√Å¬®ÀÜ√ò‚àè‚Äù‚Äô')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:12
    }
  },
  {
    name:"char_length valid cases{in:\"`\\u2044\\u20ac\\u2039\\u203a\\ufb01\\ufb02\\u2021\\xb0\\xb7\\u201a\\u2014\\xb1\",result:(success 13)}",
    statement:"char_length('`‚ÅÑ‚Ç¨‚Äπ‚Ä∫Ô¨ÅÔ¨Ç‚Ä°¬∞¬∑‚Äö‚Äî¬±')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:13
    }
  },
  {
    name:"char_length valid cases{in:\"\\u215b\\u215c\\u215d\\u215e\",result:(success 4)}",
    statement:"char_length('‚Öõ‚Öú‚Öù‚Öû')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"char_length valid cases{in:\"\\u0660\\u0661\\u0662\\u0663\\u0664\\u0665\\u0666\\u0667\\u0668\\u0669\",result:(success 10)}",
    statement:"char_length('Ÿ†Ÿ°Ÿ¢Ÿ£Ÿ§Ÿ•Ÿ¶ŸßŸ®Ÿ©')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:10
    }
  },
  {
    name:"char_length valid cases{in:\"\\u7530\\u4e2d\\u3055\\u3093\\u306b\\u3042\\u3052\\u3066\\u4e0b\\u3055\\u3044\",result:(success 11)}",
    statement:"char_length('Áî∞‰∏≠„Åï„Çì„Å´„ÅÇ„Åí„Å¶‰∏ã„Åï„ÅÑ')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:11
    }
  },
  {
    name:"char_length valid cases{in:\"\\u30d1\\u30fc\\u30c6\\u30a3\\u30fc\\u3078\\u884c\\u304b\\u306a\\u3044\\u304b\",result:(success 11)}",
    statement:"char_length('„Éë„Éº„ÉÜ„Ç£„Éº„Å∏Ë°å„Åã„Å™„ÅÑ„Åã')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:11
    }
  },
  {
    name:"char_length valid cases{in:\"\\u548c\\u88fd\\u6f22\\u8a9e\",result:(success 4)}",
    statement:"char_length('ÂíåË£ΩÊº¢Ë™û')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"char_length valid cases{in:\"\\u90e8\\u843d\\u683c\",result:(success 3)}",
    statement:"char_length('ÈÉ®ËêΩÊ†º')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3
    }
  },
  {
    name:"char_length valid cases{in:\"\\uc0ac\\ud68c\\uacfc\\ud559\\uc6d0 \\uc5b4\\ud559\\uc5f0\\uad6c\\uc18c\",result:(success 11)}",
    statement:"char_length('ÏÇ¨ÌöåÍ≥ºÌïôÏõê Ïñ¥ÌïôÏó∞Íµ¨ÏÜå')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:11
    }
  },
  {
    name:"char_length valid cases{in:\"\\ucc26\\ucc28\\ub97c \\ud0c0\\uace0 \\uc628 \\ud3b2\\uc2dc\\ub9e8\\uacfc \\uc45b\\ub2e4\\ub9ac \\ub620\\ubc29\\uac01\\ud558\",result:(success 22)}",
    statement:"char_length('Ï∞¶Ï∞®Î•º ÌÉÄÍ≥† Ïò® Ìé≤ÏãúÎß®Í≥º ÏëõÎã§Î¶¨ Îò†Î∞©Í∞ÅÌïò')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:22
    }
  },
  {
    name:"char_length valid cases{in:\"\\u793e\\u6703\\u79d1\\u5b78\\u9662\\u8a9e\\u5b78\\u7814\\u7a76\\u6240\",result:(success 10)}",
    statement:"char_length('Á§æÊúÉÁßëÂ≠∏Èô¢Ë™ûÂ≠∏Á†îÁ©∂ÊâÄ')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:10
    }
  },
  {
    name:"char_length valid cases{in:\"\\uc6b8\\ub780\\ubc14\\ud1a0\\ub974\",result:(success 5)}",
    statement:"char_length('Ïö∏ÎûÄÎ∞îÌÜ†Î•¥')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"char_length valid cases{in:\"\\U0002070e\\U00020731\\U00020779\\U00020c53\\U00020c78\\U00020c96\\U00020ccf\",result:(success 7)}",
    statement:"char_length('†úé†ú±†ùπ†±ì†±∏†≤ñ†≥è')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:7
    }
  },
  {
    name:"char_length valid cases{in:\"\\u023a\",result:(success 1)}",
    statement:"char_length('»∫')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"char_length valid cases{in:\"\\u023e\",result:(success 1)}",
    statement:"char_length('»æ')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"char_length valid cases{in:\"\\u30fd\\u0f3c\\u0e88\\u0644\\u035c\\u0e88\\u0f3d\\uff89 \\u30fd\\u0f3c\\u0e88\\u0644\\u035c\\u0e88\\u0f3d\\uff89\",result:(success 17)}",
    statement:"char_length('„ÉΩ‡ºº‡∫àŸÑÕú‡∫à‡ºΩÔæâ „ÉΩ‡ºº‡∫àŸÑÕú‡∫à‡ºΩÔæâ')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:17
    }
  },
  {
    name:"char_length valid cases{in:\"(\\uff61\\u25d5 \\u2200 \\u25d5\\uff61)\",result:(success 9)}",
    statement:"char_length('(ÔΩ°‚óï ‚àÄ ‚óïÔΩ°)')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:9
    }
  },
  {
    name:"char_length valid cases{in:\"\\uff40\\uff68(\\xb4\\u2200\\uff40\\u2229\",result:(success 7)}",
    statement:"char_length('ÔΩÄÔΩ®(¬¥‚àÄÔΩÄ‚à©')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:7
    }
  },
  {
    name:"char_length valid cases{in:\"__\\uff9b(,_,*)\",result:(success 9)}",
    statement:"char_length('__Ôæõ(,_,*)')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:9
    }
  },
  {
    name:"char_length valid cases{in:\"\\u30fb(\\uffe3\\u2200\\uffe3)\\u30fb:*:\",result:(success 10)}",
    statement:"char_length('„Éª(Ôø£‚àÄÔø£)„Éª:*:')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:10
    }
  },
  {
    name:"char_length valid cases{in:\"\\uff9f\\uff65\\u273f\\u30fe\\u2572(\\uff61\\u25d5\\u203f\\u25d5\\uff61)\\u2571\\u273f\\uff65\\uff9f\",result:(success 16)}",
    statement:"char_length('ÔæüÔΩ•‚úø„Éæ‚ï≤(ÔΩ°‚óï‚Äø‚óïÔΩ°)‚ï±‚úøÔΩ•Ôæü')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:16
    }
  },
  {
    name:"char_length valid cases{in:\",\\u3002\\u30fb:*:\\u30fb\\u309c\\u2019( \\u263b \\u03c9 \\u263b )\\u3002\\u30fb:*:\\u30fb\\u309c\\u2019\",result:(success 26)}",
    statement:"char_length(',„ÄÇ„Éª:*:„Éª„Çú‚Äô( ‚òª œâ ‚òª )„ÄÇ„Éª:*:„Éª„Çú‚Äô')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:26
    }
  },
  {
    name:"char_length valid cases{in:\"(\\u256f\\xb0\\u25a1\\xb0\\uff09\\u256f\\ufe35 \\u253b\\u2501\\u253b)\",result:(success 13)}",
    statement:"char_length('(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª)')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:13
    }
  },
  {
    name:"char_length valid cases{in:\"(\\uff89\\u0ca5\\u76ca\\u0ca5\\uff09\\uff89\\ufeff \\u253b\\u2501\\u253b\",result:(success 12)}",
    statement:"char_length('(Ôæâ‡≤•Áõä‡≤•ÔºâÔæâÔªø ‚îª‚îÅ‚îª')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:12
    }
  },
  {
    name:"char_length valid cases{in:\"\\u252c\\u2500\\u252c\\u30ce( \\xba _ \\xba\\u30ce)\",result:(success 13)}",
    statement:"char_length('‚î¨‚îÄ‚î¨„Éé( ¬∫ _ ¬∫„Éé)')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:13
    }
  },
  {
    name:"char_length valid cases{in:\"( \\u0361\\xb0 \\u035c\\u0296 \\u0361\\xb0)\",result:(success 11)}",
    statement:"char_length('( Õ°¬∞ Õú ñ Õ°¬∞)')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:11
    }
  },
  {
    name:"char_length valid cases{in:\"\\U0001f60d\",result:(success 1)}",
    statement:"char_length('üòç')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"char_length valid cases{in:\"\\U0001f469\\U0001f3fd\",result:(success 2)}",
    statement:"char_length('üë©üèΩ')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"char_length valid cases{in:\"\\U0001f47e \\U0001f647 \\U0001f481 \\U0001f645 \\U0001f646 \\U0001f64b \\U0001f64e \\U0001f64d\",result:(success 15)}",
    statement:"char_length('üëæ üôá üíÅ üôÖ üôÜ üôã üôé üôç')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:15
    }
  },
  {
    name:"char_length valid cases{in:\"\\U0001f435 \\U0001f648 \\U0001f649 \\U0001f64a\",result:(success 7)}",
    statement:"char_length('üêµ üôà üôâ üôä')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:7
    }
  },
  {
    name:"char_length valid cases{in:\"\\u2764\\ufe0f \\U0001f494 \\U0001f48c \\U0001f495 \\U0001f49e \\U0001f493 \\U0001f497 \\U0001f496 \\U0001f498 \\U0001f49d \\U0001f49f \\U0001f49c \\U0001f49b \\U0001f49a \\U0001f499\",result:(success 30)}",
    statement:"char_length('‚ù§Ô∏è üíî üíå üíï üíû üíì üíó üíñ üíò üíù üíü üíú üíõ üíö üíô')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:30
    }
  },
  {
    name:"char_length valid cases{in:\"\\u270b\\U0001f3ff \\U0001f4aa\\U0001f3ff \\U0001f450\\U0001f3ff \\U0001f64c\\U0001f3ff \\U0001f44f\\U0001f3ff \\U0001f64f\\U0001f3ff\",result:(success 17)}",
    statement:"char_length('‚úãüèø üí™üèø üëêüèø üôåüèø üëèüèø üôèüèø')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:17
    }
  },
  {
    name:"char_length valid cases{in:\"\\U0001f6be \\U0001f192 \\U0001f193 \\U0001f195 \\U0001f196 \\U0001f197 \\U0001f199 \\U0001f3e7\",result:(success 15)}",
    statement:"char_length('üöæ üÜí üÜì üÜï üÜñ üÜó üÜô üèß')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:15
    }
  },
  {
    name:"char_length valid cases{in:\"0\\ufe0f\\u20e3 1\\ufe0f\\u20e3 2\\ufe0f\\u20e3 3\\ufe0f\\u20e3 4\\ufe0f\\u20e3 5\\ufe0f\\u20e3 6\\ufe0f\\u20e3 7\\ufe0f\\u20e3 8\\ufe0f\\u20e3 9\\ufe0f\\u20e3 \\U0001f51f\",result:(success 41)}",
    statement:"char_length('0Ô∏è‚É£ 1Ô∏è‚É£ 2Ô∏è‚É£ 3Ô∏è‚É£ 4Ô∏è‚É£ 5Ô∏è‚É£ 6Ô∏è‚É£ 7Ô∏è‚É£ 8Ô∏è‚É£ 9Ô∏è‚É£ üîü')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:41
    }
  },
  {
    name:"char_length valid cases{in:\"\\U0001f1fa\\U0001f1f8\\U0001f1f7\\U0001f1fa\\U0001f1f8 \\U0001f1e6\\U0001f1eb\\U0001f1e6\\U0001f1f2\\U0001f1f8\",result:(success 11)}",
    statement:"char_length('üá∫üá∏üá∑üá∫üá∏ üá¶üá´üá¶üá≤üá∏')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:11
    }
  },
  {
    name:"char_length valid cases{in:\"\\U0001f1fa\\U0001f1f8\\U0001f1f7\\U0001f1fa\\U0001f1f8\\U0001f1e6\\U0001f1eb\\U0001f1e6\\U0001f1f2\",result:(success 9)}",
    statement:"char_length('üá∫üá∏üá∑üá∫üá∏üá¶üá´üá¶üá≤')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:9
    }
  },
  {
    name:"char_length valid cases{in:\"\\U0001f1fa\\U0001f1f8\\U0001f1f7\\U0001f1fa\\U0001f1f8\\U0001f1e6\",result:(success 6)}",
    statement:"char_length('üá∫üá∏üá∑üá∫üá∏üá¶')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:6
    }
  },
  {
    name:"char_length valid cases{in:\"\\uff34\\uff48\\uff45 \\uff51\\uff55\\uff49\\uff43\\uff4b \\uff42\\uff52\\uff4f\\uff57\\uff4e \\uff46\\uff4f\\uff58 \\uff4a\\uff55\\uff4d\\uff50\\uff53 \\uff4f\\uff56\\uff45\\uff52 \\uff54\\uff48\\uff45 \\uff4c\\uff41\\uff5a\\uff59 \\uff44\\uff4f\\uff47\",result:(success 43)}",
    statement:"char_length('Ôº¥ÔΩàÔΩÖ ÔΩëÔΩïÔΩâÔΩÉÔΩã ÔΩÇÔΩíÔΩèÔΩóÔΩé ÔΩÜÔΩèÔΩò ÔΩäÔΩïÔΩçÔΩêÔΩì ÔΩèÔΩñÔΩÖÔΩí ÔΩîÔΩàÔΩÖ ÔΩåÔΩÅÔΩöÔΩô ÔΩÑÔΩèÔΩá')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:43
    }
  },
  {
    name:"char_length valid cases{in:\"\\U0001d413\\U0001d421\\U0001d41e \\U0001d42a\\U0001d42e\\U0001d422\\U0001d41c\\U0001d424 \\U0001d41b\\U0001d42b\\U0001d428\\U0001d430\\U0001d427 \\U0001d41f\\U0001d428\\U0001d431 \\U0001d423\\U0001d42e\\U0001d426\\U0001d429\\U0001d42c \\U0001d428\\U0001d42f\\U0001d41e\\U0001d42b \\U0001d42d\\U0001d421\\U0001d41e \\U0001d425\\U0001d41a\\U0001d433\\U0001d432 \\U0001d41d\\U0001d428\\U0001d420\",result:(success 43)}",
    statement:"char_length('ùêìùê°ùêû ùê™ùêÆùê¢ùêúùê§ ùêõùê´ùê®ùê∞ùêß ùêüùê®ùê± ùê£ùêÆùê¶ùê©ùê¨ ùê®ùêØùêûùê´ ùê≠ùê°ùêû ùê•ùêöùê≥ùê≤ ùêùùê®ùê†')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:43
    }
  },
  {
    name:"char_length valid cases{in:\"\\U0001d57f\\U0001d58d\\U0001d58a \\U0001d596\\U0001d59a\\U0001d58e\\U0001d588\\U0001d590 \\U0001d587\\U0001d597\\U0001d594\\U0001d59c\\U0001d593 \\U0001d58b\\U0001d594\\U0001d59d \\U0001d58f\\U0001d59a\\U0001d592\\U0001d595\\U0001d598 \\U0001d594\\U0001d59b\\U0001d58a\\U0001d597 \\U0001d599\\U0001d58d\\U0001d58a \\U0001d591\\U0001d586\\U0001d59f\\U0001d59e \\U0001d589\\U0001d594\\U0001d58c\",result:(success 43)}",
    statement:"char_length('ùïøùñçùñä ùññùñöùñéùñàùñê ùñáùñóùñîùñúùñì ùñãùñîùñù ùñèùñöùñíùñïùñò ùñîùñõùñäùñó ùñôùñçùñä ùñëùñÜùñüùñû ùñâùñîùñå')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:43
    }
  },
  {
    name:"char_length valid cases{in:\"\\U0001d47b\\U0001d489\\U0001d486 \\U0001d492\\U0001d496\\U0001d48a\\U0001d484\\U0001d48c \\U0001d483\\U0001d493\\U0001d490\\U0001d498\\U0001d48f \\U0001d487\\U0001d490\\U0001d499 \\U0001d48b\\U0001d496\\U0001d48e\\U0001d491\\U0001d494 \\U0001d490\\U0001d497\\U0001d486\\U0001d493 \\U0001d495\\U0001d489\\U0001d486 \\U0001d48d\\U0001d482\\U0001d49b\\U0001d49a \\U0001d485\\U0001d490\\U0001d488\",result:(success 43)}",
    statement:"char_length('ùëªùíâùíÜ ùííùíñùíäùíÑùíå ùíÉùíìùíêùíòùíè ùíáùíêùíô ùíãùíñùíéùíëùíî ùíêùíóùíÜùíì ùíïùíâùíÜ ùíçùíÇùíõùíö ùíÖùíêùíà')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:43
    }
  },
  {
    name:"char_length valid cases{in:\"\\U0001d4e3\\U0001d4f1\\U0001d4ee \\U0001d4fa\\U0001d4fe\\U0001d4f2\\U0001d4ec\\U0001d4f4 \\U0001d4eb\\U0001d4fb\\U0001d4f8\\U0001d500\\U0001d4f7 \\U0001d4ef\\U0001d4f8\\U0001d501 \\U0001d4f3\\U0001d4fe\\U0001d4f6\\U0001d4f9\\U0001d4fc \\U0001d4f8\\U0001d4ff\\U0001d4ee\\U0001d4fb \\U0001d4fd\\U0001d4f1\\U0001d4ee \\U0001d4f5\\U0001d4ea\\U0001d503\\U0001d502 \\U0001d4ed\\U0001d4f8\\U0001d4f0\",result:(success 43)}",
    statement:"char_length('ùì£ùì±ùìÆ ùì∫ùìæùì≤ùì¨ùì¥ ùì´ùìªùì∏ùîÄùì∑ ùìØùì∏ùîÅ ùì≥ùìæùì∂ùìπùìº ùì∏ùìøùìÆùìª ùìΩùì±ùìÆ ùìµùì™ùîÉùîÇ ùì≠ùì∏ùì∞')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:43
    }
  },
  {
    name:"char_length valid cases{in:\"\\U0001d54b\\U0001d559\\U0001d556 \\U0001d562\\U0001d566\\U0001d55a\\U0001d554\\U0001d55c \\U0001d553\\U0001d563\\U0001d560\\U0001d568\\U0001d55f \\U0001d557\\U0001d560\\U0001d569 \\U0001d55b\\U0001d566\\U0001d55e\\U0001d561\\U0001d564 \\U0001d560\\U0001d567\\U0001d556\\U0001d563 \\U0001d565\\U0001d559\\U0001d556 \\U0001d55d\\U0001d552\\U0001d56b\\U0001d56a \\U0001d555\\U0001d560\\U0001d558\",result:(success 43)}",
    statement:"char_length('ùïãùïôùïñ ùï¢ùï¶ùïöùïîùïú ùïìùï£ùï†ùï®ùïü ùïóùï†ùï© ùïõùï¶ùïûùï°ùï§ ùï†ùïßùïñùï£ ùï•ùïôùïñ ùïùùïíùï´ùï™ ùïïùï†ùïò')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:43
    }
  },
  {
    name:"char_length valid cases{in:\"\\U0001d683\\U0001d691\\U0001d68e \\U0001d69a\\U0001d69e\\U0001d692\\U0001d68c\\U0001d694 \\U0001d68b\\U0001d69b\\U0001d698\\U0001d6a0\\U0001d697 \\U0001d68f\\U0001d698\\U0001d6a1 \\U0001d693\\U0001d69e\\U0001d696\\U0001d699\\U0001d69c \\U0001d698\\U0001d69f\\U0001d68e\\U0001d69b \\U0001d69d\\U0001d691\\U0001d68e \\U0001d695\\U0001d68a\\U0001d6a3\\U0001d6a2 \\U0001d68d\\U0001d698\\U0001d690\",result:(success 43)}",
    statement:"char_length('ùöÉùöëùöé ùööùöûùöíùöåùöî ùöãùöõùöòùö†ùöó ùöèùöòùö° ùöìùöûùöñùöôùöú ùöòùöüùöéùöõ ùöùùöëùöé ùöïùöäùö£ùö¢ ùöçùöòùöê')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:43
    }
  },
  {
    name:"char_length valid cases{in:\"\\u24af\\u24a3\\u24a0 \\u24ac\\u24b0\\u24a4\\u249e\\u24a6 \\u249d\\u24ad\\u24aa\\u24b2\\u24a9 \\u24a1\\u24aa\\u24b3 \\u24a5\\u24b0\\u24a8\\u24ab\\u24ae \\u24aa\\u24b1\\u24a0\\u24ad \\u24af\\u24a3\\u24a0 \\u24a7\\u249c\\u24b5\\u24b4 \\u249f\\u24aa\\u24a2\",result:(success 43)}",
    statement:"char_length('‚íØ‚í£‚í† ‚í¨‚í∞‚í§‚íû‚í¶ ‚íù‚í≠‚í™‚í≤‚í© ‚í°‚í™‚í≥ ‚í•‚í∞‚í®‚í´‚íÆ ‚í™‚í±‚í†‚í≠ ‚íØ‚í£‚í† ‚íß‚íú‚íµ‚í¥ ‚íü‚í™‚í¢')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:43
    }
  },
  {
    name:"character_length valid cases{in:\"\",result:(success 0)}",
    statement:"character_length('')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"character_length valid cases{in:\"a\",result:(success 1)}",
    statement:"character_length('a')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"character_length valid cases{in:\"123456789\",result:(success 9)}",
    statement:"character_length('123456789')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:9
    }
  },
  {
    name:"character_length valid cases{in:\"avi\\xe3o\",result:(success 5)}",
    statement:"character_length('avi√£o')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"character_length valid cases{in:\"e\\u082b\",result:(success 2)}",
    statement:"character_length('e‡†´')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"character_length valid cases{in:\"\\U0001f601\\U0001f61e\\U0001f638\\U0001f638\",result:(success 4)}",
    statement:"character_length('üòÅüòûüò∏üò∏')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"character_length valid cases{in:\"\\u8a71\\u5bb6\\u8eab\\u5727\\u8cbb\\u8c37\\u6599\\u6751\\u80fd\\u8a08\\u7a0e\\u91d1\",result:(success 12)}",
    statement:"character_length('Ë©±ÂÆ∂Ë∫´ÂúßË≤ªË∞∑ÊñôÊùëËÉΩË®àÁ®éÈáë')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:12
    }
  },
  {
    name:"character_length valid cases{in:\"undefined\",result:(success 9)}",
    statement:"character_length('undefined')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:9
    }
  },
  {
    name:"character_length valid cases{in:\"undef\",result:(success 5)}",
    statement:"character_length('undef')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"character_length valid cases{in:\"null\",result:(success 4)}",
    statement:"character_length('null')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"character_length valid cases{in:\"NULL\",result:(success 4)}",
    statement:"character_length('NULL')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"character_length valid cases{in:\"(null)\",result:(success 6)}",
    statement:"character_length('(null)')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:6
    }
  },
  {
    name:"character_length valid cases{in:\"nil\",result:(success 3)}",
    statement:"character_length('nil')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3
    }
  },
  {
    name:"character_length valid cases{in:\"NIL\",result:(success 3)}",
    statement:"character_length('NIL')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3
    }
  },
  {
    name:"character_length valid cases{in:\"true\",result:(success 4)}",
    statement:"character_length('true')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"character_length valid cases{in:\"false\",result:(success 5)}",
    statement:"character_length('false')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"character_length valid cases{in:\"True\",result:(success 4)}",
    statement:"character_length('True')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"character_length valid cases{in:\"False\",result:(success 5)}",
    statement:"character_length('False')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"character_length valid cases{in:\"TRUE\",result:(success 4)}",
    statement:"character_length('TRUE')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"character_length valid cases{in:\"FALSE\",result:(success 5)}",
    statement:"character_length('FALSE')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"character_length valid cases{in:\"None\",result:(success 4)}",
    statement:"character_length('None')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"character_length valid cases{in:\"hasOwnProperty\",result:(success 14)}",
    statement:"character_length('hasOwnProperty')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:14
    }
  },
  {
    name:"character_length valid cases{in:\"999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\",result:(success 96)}",
    statement:"character_length('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:96
    }
  },
  {
    name:"character_length valid cases{in:\"123456789012345678901234567890123456789\",result:(success 39)}",
    statement:"character_length('123456789012345678901234567890123456789')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:39
    }
  },
  {
    name:"character_length valid cases{in:\"0\",result:(success 1)}",
    statement:"character_length('0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"character_length valid cases{in:\"1\",result:(success 1)}",
    statement:"character_length('1')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"character_length valid cases{in:\"1.00\",result:(success 4)}",
    statement:"character_length('1.00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"character_length valid cases{in:\"1.00\",result:(success 5)}",
    statement:"character_length('$1.00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"character_length valid cases{in:\"1/2\",result:(success 3)}",
    statement:"character_length('1/2')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3
    }
  },
  {
    name:"character_length valid cases{in:\"1E2\",result:(success 3)}",
    statement:"character_length('1E2')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3
    }
  },
  {
    name:"character_length valid cases{in:\"1E02\",result:(success 4)}",
    statement:"character_length('1E02')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"character_length valid cases{in:\"1E+02\",result:(success 5)}",
    statement:"character_length('1E+02')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"character_length valid cases{in:\"-1\",result:(success 2)}",
    statement:"character_length('-1')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"character_length valid cases{in:\"-1.00\",result:(success 5)}",
    statement:"character_length('-1.00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"character_length valid cases{in:\"-1.00\",result:(success 6)}",
    statement:"character_length('-$1.00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:6
    }
  },
  {
    name:"character_length valid cases{in:\"-1/2\",result:(success 4)}",
    statement:"character_length('-1/2')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"character_length valid cases{in:\"-1E2\",result:(success 4)}",
    statement:"character_length('-1E2')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"character_length valid cases{in:\"-1E02\",result:(success 5)}",
    statement:"character_length('-1E02')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"character_length valid cases{in:\"-1E+02\",result:(success 6)}",
    statement:"character_length('-1E+02')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:6
    }
  },
  {
    name:"character_length valid cases{in:\"1/0\",result:(success 3)}",
    statement:"character_length('1/0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3
    }
  },
  {
    name:"character_length valid cases{in:\"0/0\",result:(success 3)}",
    statement:"character_length('0/0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3
    }
  },
  {
    name:"character_length valid cases{in:\"-2147483648/-1\",result:(success 14)}",
    statement:"character_length('-2147483648/-1')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:14
    }
  },
  {
    name:"character_length valid cases{in:\"-9223372036854775808/-1\",result:(success 23)}",
    statement:"character_length('-9223372036854775808/-1')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:23
    }
  },
  {
    name:"character_length valid cases{in:\"-0\",result:(success 2)}",
    statement:"character_length('-0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"character_length valid cases{in:\"-0.0\",result:(success 4)}",
    statement:"character_length('-0.0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"character_length valid cases{in:\"+0\",result:(success 2)}",
    statement:"character_length('+0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"character_length valid cases{in:\"+0.0\",result:(success 4)}",
    statement:"character_length('+0.0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"character_length valid cases{in:\"0.00\",result:(success 4)}",
    statement:"character_length('0.00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"character_length valid cases{in:\"0..0\",result:(success 4)}",
    statement:"character_length('0..0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"character_length valid cases{in:\".\",result:(success 1)}",
    statement:"character_length('.')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"character_length valid cases{in:\"0.0.0\",result:(success 5)}",
    statement:"character_length('0.0.0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"character_length valid cases{in:\"0,00\",result:(success 4)}",
    statement:"character_length('0,00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"character_length valid cases{in:\"0,,0\",result:(success 4)}",
    statement:"character_length('0,,0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"character_length valid cases{in:\",\",result:(success 1)}",
    statement:"character_length(',')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"character_length valid cases{in:\"0,0,0\",result:(success 5)}",
    statement:"character_length('0,0,0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"character_length valid cases{in:\"0.0/0\",result:(success 5)}",
    statement:"character_length('0.0/0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"character_length valid cases{in:\"1.0/0.0\",result:(success 7)}",
    statement:"character_length('1.0/0.0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:7
    }
  },
  {
    name:"character_length valid cases{in:\"0.0/0.0\",result:(success 7)}",
    statement:"character_length('0.0/0.0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:7
    }
  },
  {
    name:"character_length valid cases{in:\"1,0/0,0\",result:(success 7)}",
    statement:"character_length('1,0/0,0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:7
    }
  },
  {
    name:"character_length valid cases{in:\"0,0/0,0\",result:(success 7)}",
    statement:"character_length('0,0/0,0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:7
    }
  },
  {
    name:"character_length valid cases{in:\"--1\",result:(success 3)}",
    statement:"character_length('--1')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3
    }
  },
  {
    name:"character_length valid cases{in:\"-\",result:(success 1)}",
    statement:"character_length('-')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"character_length valid cases{in:\"-.\",result:(success 2)}",
    statement:"character_length('-.')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"character_length valid cases{in:\"-,\",result:(success 2)}",
    statement:"character_length('-,')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"character_length valid cases{in:\"NaN\",result:(success 3)}",
    statement:"character_length('NaN')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3
    }
  },
  {
    name:"character_length valid cases{in:\"Infinity\",result:(success 8)}",
    statement:"character_length('Infinity')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:8
    }
  },
  {
    name:"character_length valid cases{in:\"-Infinity\",result:(success 9)}",
    statement:"character_length('-Infinity')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:9
    }
  },
  {
    name:"character_length valid cases{in:\"INF\",result:(success 3)}",
    statement:"character_length('INF')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3
    }
  },
  {
    name:"character_length valid cases{in:\"1#INF\",result:(success 5)}",
    statement:"character_length('1#INF')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"character_length valid cases{in:\"-1#IND\",result:(success 6)}",
    statement:"character_length('-1#IND')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:6
    }
  },
  {
    name:"character_length valid cases{in:\"1#QNAN\",result:(success 6)}",
    statement:"character_length('1#QNAN')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:6
    }
  },
  {
    name:"character_length valid cases{in:\"1#SNAN\",result:(success 6)}",
    statement:"character_length('1#SNAN')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:6
    }
  },
  {
    name:"character_length valid cases{in:\"1#IND\",result:(success 5)}",
    statement:"character_length('1#IND')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"character_length valid cases{in:\"0x0\",result:(success 3)}",
    statement:"character_length('0x0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3
    }
  },
  {
    name:"character_length valid cases{in:\"0xffffffff\",result:(success 10)}",
    statement:"character_length('0xffffffff')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:10
    }
  },
  {
    name:"character_length valid cases{in:\"0xffffffffffffffff\",result:(success 18)}",
    statement:"character_length('0xffffffffffffffff')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:18
    }
  },
  {
    name:"character_length valid cases{in:\"0xabad1dea\",result:(success 10)}",
    statement:"character_length('0xabad1dea')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:10
    }
  },
  {
    name:"character_length valid cases{in:\"1,000.00\",result:(success 8)}",
    statement:"character_length('1,000.00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:8
    }
  },
  {
    name:"character_length valid cases{in:\"1 000.00\",result:(success 8)}",
    statement:"character_length('1 000.00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:8
    }
  },
  {
    name:"character_length valid cases{in:\"1,000,000.00\",result:(success 12)}",
    statement:"character_length('1,000,000.00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:12
    }
  },
  {
    name:"character_length valid cases{in:\"1 000 000.00\",result:(success 12)}",
    statement:"character_length('1 000 000.00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:12
    }
  },
  {
    name:"character_length valid cases{in:\"1.000,00\",result:(success 8)}",
    statement:"character_length('1.000,00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:8
    }
  },
  {
    name:"character_length valid cases{in:\"1 000,00\",result:(success 8)}",
    statement:"character_length('1 000,00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:8
    }
  },
  {
    name:"character_length valid cases{in:\"1.000.000,00\",result:(success 12)}",
    statement:"character_length('1.000.000,00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:12
    }
  },
  {
    name:"character_length valid cases{in:\"1 000 000,00\",result:(success 12)}",
    statement:"character_length('1 000 000,00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:12
    }
  },
  {
    name:"character_length valid cases{in:\"01000\",result:(success 5)}",
    statement:"character_length('01000')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"character_length valid cases{in:\"08\",result:(success 2)}",
    statement:"character_length('08')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"character_length valid cases{in:\"09\",result:(success 2)}",
    statement:"character_length('09')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"character_length valid cases{in:\"2.2250738585072011e-308\",result:(success 23)}",
    statement:"character_length('2.2250738585072011e-308')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:23
    }
  },
  {
    name:"character_length valid cases{in:\"\\u0401\\u0402\\u0403\\u0404\\u0405\\u0406\\u0407\\u0408\\u0409\\u040a\\u040b\\u040c\\u040d\\u040e\\u040f\\u0410\\u0411\\u0412\\u0413\\u0414\\u0415\\u0416\\u0417\\u0418\\u0419\\u041a\\u041b\\u041c\\u041d\\u041e\\u041f\\u0420\\u0421\\u0422\\u0423\\u0424\\u0425\\u0426\\u0427\\u0428\\u0429\\u042a\\u042b\\u042c\\u042d\\u042e\\u042f\\u0430\\u0431\\u0432\\u0433\\u0434\\u0435\\u0436\\u0437\\u0438\\u0439\\u043a\\u043b\\u043c\\u043d\\u043e\\u043f\\u0440\\u0441\\u0442\\u0443\\u0444\\u0445\\u0446\\u0447\\u0448\\u0449\\u044a\\u044b\\u044c\\u044d\\u044e\\u044f\",result:(success 79)}",
    statement:"character_length('–Å–Ç–É–Ñ–Ö–Ü–á–à–â–ä–ã–å–ç–é–è–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:79
    }
  },
  {
    name:"character_length valid cases{in:\"<>?:\\\"{}|_+\",result:(success 10)}",
    statement:"character_length('<>?:\"{}|_+')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:10
    }
  },
  {
    name:"character_length valid cases{in:\"!@#%^&*()`~\",result:(success 12)}",
    statement:"character_length('!@#$%^&*()`~')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:12
    }
  },
  {
    name:"character_length valid cases{in:\"\\u03a9\\u2248\\xe7\\u221a\\u222b\\u02dc\\xb5\\u2264\\u2265\\xf7\",result:(success 10)}",
    statement:"character_length('Œ©‚âà√ß‚àö‚à´Àú¬µ‚â§‚â•√∑')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:10
    }
  },
  {
    name:"character_length valid cases{in:\"\\xe5\\xdf\\u2202\\u0192\\xa9\\u02d9\\u2206\\u02da\\xac\\u2026\\xe6\",result:(success 11)}",
    statement:"character_length('√•√ü‚àÇ∆í¬©Àô‚àÜÀö¬¨‚Ä¶√¶')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:11
    }
  },
  {
    name:"character_length valid cases{in:\"\\u0153\\u2211\\xb4\\xae\\u2020\\xa5\\xa8\\u02c6\\xf8\\u03c0\\u201c\\u2018\",result:(success 12)}",
    statement:"character_length('≈ì‚àë¬¥¬Æ‚Ä†¬•¬®ÀÜ√∏œÄ‚Äú‚Äò')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:12
    }
  },
  {
    name:"character_length valid cases{in:\"\\xa1\\u2122\\xa3\\xa2\\u221e\\xa7\\xb6\\u2022\\xaa\\xba\\u2013\\u2260\",result:(success 12)}",
    statement:"character_length('¬°‚Ñ¢¬£¬¢‚àû¬ß¬∂‚Ä¢¬™¬∫‚Äì‚â†')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:12
    }
  },
  {
    name:"character_length valid cases{in:\"\\xb8\\u02db\\xc7\\u25ca\\u0131\\u02dc\\xc2\\xaf\\u02d8\\xbf\",result:(success 10)}",
    statement:"character_length('¬∏Àõ√á‚óäƒ±Àú√Ç¬ØÀò¬ø')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:10
    }
  },
  {
    name:"character_length valid cases{in:\"\\xc5\\xcd\\xce\\xcf\\u02dd\\xd3\\xd4\\uf8ff\\xd2\\xda\\xc6\\u2603\",result:(success 12)}",
    statement:"character_length('√Ö√ç√é√èÀù√ì√îÔ£ø√í√ö√Ü‚òÉ')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:12
    }
  },
  {
    name:"character_length valid cases{in:\"\\u0152\\u201e\\xb4\\u2030\\u02c7\\xc1\\xa8\\u02c6\\xd8\\u220f\\u201d\\u2019\",result:(success 12)}",
    statement:"character_length('≈í‚Äû¬¥‚Ä∞Àá√Å¬®ÀÜ√ò‚àè‚Äù‚Äô')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:12
    }
  },
  {
    name:"character_length valid cases{in:\"`\\u2044\\u20ac\\u2039\\u203a\\ufb01\\ufb02\\u2021\\xb0\\xb7\\u201a\\u2014\\xb1\",result:(success 13)}",
    statement:"character_length('`‚ÅÑ‚Ç¨‚Äπ‚Ä∫Ô¨ÅÔ¨Ç‚Ä°¬∞¬∑‚Äö‚Äî¬±')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:13
    }
  },
  {
    name:"character_length valid cases{in:\"\\u215b\\u215c\\u215d\\u215e\",result:(success 4)}",
    statement:"character_length('‚Öõ‚Öú‚Öù‚Öû')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"character_length valid cases{in:\"\\u0660\\u0661\\u0662\\u0663\\u0664\\u0665\\u0666\\u0667\\u0668\\u0669\",result:(success 10)}",
    statement:"character_length('Ÿ†Ÿ°Ÿ¢Ÿ£Ÿ§Ÿ•Ÿ¶ŸßŸ®Ÿ©')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:10
    }
  },
  {
    name:"character_length valid cases{in:\"\\u7530\\u4e2d\\u3055\\u3093\\u306b\\u3042\\u3052\\u3066\\u4e0b\\u3055\\u3044\",result:(success 11)}",
    statement:"character_length('Áî∞‰∏≠„Åï„Çì„Å´„ÅÇ„Åí„Å¶‰∏ã„Åï„ÅÑ')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:11
    }
  },
  {
    name:"character_length valid cases{in:\"\\u30d1\\u30fc\\u30c6\\u30a3\\u30fc\\u3078\\u884c\\u304b\\u306a\\u3044\\u304b\",result:(success 11)}",
    statement:"character_length('„Éë„Éº„ÉÜ„Ç£„Éº„Å∏Ë°å„Åã„Å™„ÅÑ„Åã')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:11
    }
  },
  {
    name:"character_length valid cases{in:\"\\u548c\\u88fd\\u6f22\\u8a9e\",result:(success 4)}",
    statement:"character_length('ÂíåË£ΩÊº¢Ë™û')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"character_length valid cases{in:\"\\u90e8\\u843d\\u683c\",result:(success 3)}",
    statement:"character_length('ÈÉ®ËêΩÊ†º')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3
    }
  },
  {
    name:"character_length valid cases{in:\"\\uc0ac\\ud68c\\uacfc\\ud559\\uc6d0 \\uc5b4\\ud559\\uc5f0\\uad6c\\uc18c\",result:(success 11)}",
    statement:"character_length('ÏÇ¨ÌöåÍ≥ºÌïôÏõê Ïñ¥ÌïôÏó∞Íµ¨ÏÜå')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:11
    }
  },
  {
    name:"character_length valid cases{in:\"\\ucc26\\ucc28\\ub97c \\ud0c0\\uace0 \\uc628 \\ud3b2\\uc2dc\\ub9e8\\uacfc \\uc45b\\ub2e4\\ub9ac \\ub620\\ubc29\\uac01\\ud558\",result:(success 22)}",
    statement:"character_length('Ï∞¶Ï∞®Î•º ÌÉÄÍ≥† Ïò® Ìé≤ÏãúÎß®Í≥º ÏëõÎã§Î¶¨ Îò†Î∞©Í∞ÅÌïò')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:22
    }
  },
  {
    name:"character_length valid cases{in:\"\\u793e\\u6703\\u79d1\\u5b78\\u9662\\u8a9e\\u5b78\\u7814\\u7a76\\u6240\",result:(success 10)}",
    statement:"character_length('Á§æÊúÉÁßëÂ≠∏Èô¢Ë™ûÂ≠∏Á†îÁ©∂ÊâÄ')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:10
    }
  },
  {
    name:"character_length valid cases{in:\"\\uc6b8\\ub780\\ubc14\\ud1a0\\ub974\",result:(success 5)}",
    statement:"character_length('Ïö∏ÎûÄÎ∞îÌÜ†Î•¥')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"character_length valid cases{in:\"\\U0002070e\\U00020731\\U00020779\\U00020c53\\U00020c78\\U00020c96\\U00020ccf\",result:(success 7)}",
    statement:"character_length('†úé†ú±†ùπ†±ì†±∏†≤ñ†≥è')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:7
    }
  },
  {
    name:"character_length valid cases{in:\"\\u023a\",result:(success 1)}",
    statement:"character_length('»∫')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"character_length valid cases{in:\"\\u023e\",result:(success 1)}",
    statement:"character_length('»æ')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"character_length valid cases{in:\"\\u30fd\\u0f3c\\u0e88\\u0644\\u035c\\u0e88\\u0f3d\\uff89 \\u30fd\\u0f3c\\u0e88\\u0644\\u035c\\u0e88\\u0f3d\\uff89\",result:(success 17)}",
    statement:"character_length('„ÉΩ‡ºº‡∫àŸÑÕú‡∫à‡ºΩÔæâ „ÉΩ‡ºº‡∫àŸÑÕú‡∫à‡ºΩÔæâ')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:17
    }
  },
  {
    name:"character_length valid cases{in:\"(\\uff61\\u25d5 \\u2200 \\u25d5\\uff61)\",result:(success 9)}",
    statement:"character_length('(ÔΩ°‚óï ‚àÄ ‚óïÔΩ°)')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:9
    }
  },
  {
    name:"character_length valid cases{in:\"\\uff40\\uff68(\\xb4\\u2200\\uff40\\u2229\",result:(success 7)}",
    statement:"character_length('ÔΩÄÔΩ®(¬¥‚àÄÔΩÄ‚à©')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:7
    }
  },
  {
    name:"character_length valid cases{in:\"__\\uff9b(,_,*)\",result:(success 9)}",
    statement:"character_length('__Ôæõ(,_,*)')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:9
    }
  },
  {
    name:"character_length valid cases{in:\"\\u30fb(\\uffe3\\u2200\\uffe3)\\u30fb:*:\",result:(success 10)}",
    statement:"character_length('„Éª(Ôø£‚àÄÔø£)„Éª:*:')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:10
    }
  },
  {
    name:"character_length valid cases{in:\"\\uff9f\\uff65\\u273f\\u30fe\\u2572(\\uff61\\u25d5\\u203f\\u25d5\\uff61)\\u2571\\u273f\\uff65\\uff9f\",result:(success 16)}",
    statement:"character_length('ÔæüÔΩ•‚úø„Éæ‚ï≤(ÔΩ°‚óï‚Äø‚óïÔΩ°)‚ï±‚úøÔΩ•Ôæü')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:16
    }
  },
  {
    name:"character_length valid cases{in:\",\\u3002\\u30fb:*:\\u30fb\\u309c\\u2019( \\u263b \\u03c9 \\u263b )\\u3002\\u30fb:*:\\u30fb\\u309c\\u2019\",result:(success 26)}",
    statement:"character_length(',„ÄÇ„Éª:*:„Éª„Çú‚Äô( ‚òª œâ ‚òª )„ÄÇ„Éª:*:„Éª„Çú‚Äô')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:26
    }
  },
  {
    name:"character_length valid cases{in:\"(\\u256f\\xb0\\u25a1\\xb0\\uff09\\u256f\\ufe35 \\u253b\\u2501\\u253b)\",result:(success 13)}",
    statement:"character_length('(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª)')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:13
    }
  },
  {
    name:"character_length valid cases{in:\"(\\uff89\\u0ca5\\u76ca\\u0ca5\\uff09\\uff89\\ufeff \\u253b\\u2501\\u253b\",result:(success 12)}",
    statement:"character_length('(Ôæâ‡≤•Áõä‡≤•ÔºâÔæâÔªø ‚îª‚îÅ‚îª')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:12
    }
  },
  {
    name:"character_length valid cases{in:\"\\u252c\\u2500\\u252c\\u30ce( \\xba _ \\xba\\u30ce)\",result:(success 13)}",
    statement:"character_length('‚î¨‚îÄ‚î¨„Éé( ¬∫ _ ¬∫„Éé)')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:13
    }
  },
  {
    name:"character_length valid cases{in:\"( \\u0361\\xb0 \\u035c\\u0296 \\u0361\\xb0)\",result:(success 11)}",
    statement:"character_length('( Õ°¬∞ Õú ñ Õ°¬∞)')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:11
    }
  },
  {
    name:"character_length valid cases{in:\"\\U0001f60d\",result:(success 1)}",
    statement:"character_length('üòç')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"character_length valid cases{in:\"\\U0001f469\\U0001f3fd\",result:(success 2)}",
    statement:"character_length('üë©üèΩ')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"character_length valid cases{in:\"\\U0001f47e \\U0001f647 \\U0001f481 \\U0001f645 \\U0001f646 \\U0001f64b \\U0001f64e \\U0001f64d\",result:(success 15)}",
    statement:"character_length('üëæ üôá üíÅ üôÖ üôÜ üôã üôé üôç')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:15
    }
  },
  {
    name:"character_length valid cases{in:\"\\U0001f435 \\U0001f648 \\U0001f649 \\U0001f64a\",result:(success 7)}",
    statement:"character_length('üêµ üôà üôâ üôä')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:7
    }
  },
  {
    name:"character_length valid cases{in:\"\\u2764\\ufe0f \\U0001f494 \\U0001f48c \\U0001f495 \\U0001f49e \\U0001f493 \\U0001f497 \\U0001f496 \\U0001f498 \\U0001f49d \\U0001f49f \\U0001f49c \\U0001f49b \\U0001f49a \\U0001f499\",result:(success 30)}",
    statement:"character_length('‚ù§Ô∏è üíî üíå üíï üíû üíì üíó üíñ üíò üíù üíü üíú üíõ üíö üíô')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:30
    }
  },
  {
    name:"character_length valid cases{in:\"\\u270b\\U0001f3ff \\U0001f4aa\\U0001f3ff \\U0001f450\\U0001f3ff \\U0001f64c\\U0001f3ff \\U0001f44f\\U0001f3ff \\U0001f64f\\U0001f3ff\",result:(success 17)}",
    statement:"character_length('‚úãüèø üí™üèø üëêüèø üôåüèø üëèüèø üôèüèø')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:17
    }
  },
  {
    name:"character_length valid cases{in:\"\\U0001f6be \\U0001f192 \\U0001f193 \\U0001f195 \\U0001f196 \\U0001f197 \\U0001f199 \\U0001f3e7\",result:(success 15)}",
    statement:"character_length('üöæ üÜí üÜì üÜï üÜñ üÜó üÜô üèß')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:15
    }
  },
  {
    name:"character_length valid cases{in:\"0\\ufe0f\\u20e3 1\\ufe0f\\u20e3 2\\ufe0f\\u20e3 3\\ufe0f\\u20e3 4\\ufe0f\\u20e3 5\\ufe0f\\u20e3 6\\ufe0f\\u20e3 7\\ufe0f\\u20e3 8\\ufe0f\\u20e3 9\\ufe0f\\u20e3 \\U0001f51f\",result:(success 41)}",
    statement:"character_length('0Ô∏è‚É£ 1Ô∏è‚É£ 2Ô∏è‚É£ 3Ô∏è‚É£ 4Ô∏è‚É£ 5Ô∏è‚É£ 6Ô∏è‚É£ 7Ô∏è‚É£ 8Ô∏è‚É£ 9Ô∏è‚É£ üîü')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:41
    }
  },
  {
    name:"character_length valid cases{in:\"\\U0001f1fa\\U0001f1f8\\U0001f1f7\\U0001f1fa\\U0001f1f8 \\U0001f1e6\\U0001f1eb\\U0001f1e6\\U0001f1f2\\U0001f1f8\",result:(success 11)}",
    statement:"character_length('üá∫üá∏üá∑üá∫üá∏ üá¶üá´üá¶üá≤üá∏')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:11
    }
  },
  {
    name:"character_length valid cases{in:\"\\U0001f1fa\\U0001f1f8\\U0001f1f7\\U0001f1fa\\U0001f1f8\\U0001f1e6\\U0001f1eb\\U0001f1e6\\U0001f1f2\",result:(success 9)}",
    statement:"character_length('üá∫üá∏üá∑üá∫üá∏üá¶üá´üá¶üá≤')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:9
    }
  },
  {
    name:"character_length valid cases{in:\"\\U0001f1fa\\U0001f1f8\\U0001f1f7\\U0001f1fa\\U0001f1f8\\U0001f1e6\",result:(success 6)}",
    statement:"character_length('üá∫üá∏üá∑üá∫üá∏üá¶')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:6
    }
  },
  {
    name:"character_length valid cases{in:\"\\uff34\\uff48\\uff45 \\uff51\\uff55\\uff49\\uff43\\uff4b \\uff42\\uff52\\uff4f\\uff57\\uff4e \\uff46\\uff4f\\uff58 \\uff4a\\uff55\\uff4d\\uff50\\uff53 \\uff4f\\uff56\\uff45\\uff52 \\uff54\\uff48\\uff45 \\uff4c\\uff41\\uff5a\\uff59 \\uff44\\uff4f\\uff47\",result:(success 43)}",
    statement:"character_length('Ôº¥ÔΩàÔΩÖ ÔΩëÔΩïÔΩâÔΩÉÔΩã ÔΩÇÔΩíÔΩèÔΩóÔΩé ÔΩÜÔΩèÔΩò ÔΩäÔΩïÔΩçÔΩêÔΩì ÔΩèÔΩñÔΩÖÔΩí ÔΩîÔΩàÔΩÖ ÔΩåÔΩÅÔΩöÔΩô ÔΩÑÔΩèÔΩá')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:43
    }
  },
  {
    name:"character_length valid cases{in:\"\\U0001d413\\U0001d421\\U0001d41e \\U0001d42a\\U0001d42e\\U0001d422\\U0001d41c\\U0001d424 \\U0001d41b\\U0001d42b\\U0001d428\\U0001d430\\U0001d427 \\U0001d41f\\U0001d428\\U0001d431 \\U0001d423\\U0001d42e\\U0001d426\\U0001d429\\U0001d42c \\U0001d428\\U0001d42f\\U0001d41e\\U0001d42b \\U0001d42d\\U0001d421\\U0001d41e \\U0001d425\\U0001d41a\\U0001d433\\U0001d432 \\U0001d41d\\U0001d428\\U0001d420\",result:(success 43)}",
    statement:"character_length('ùêìùê°ùêû ùê™ùêÆùê¢ùêúùê§ ùêõùê´ùê®ùê∞ùêß ùêüùê®ùê± ùê£ùêÆùê¶ùê©ùê¨ ùê®ùêØùêûùê´ ùê≠ùê°ùêû ùê•ùêöùê≥ùê≤ ùêùùê®ùê†')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:43
    }
  },
  {
    name:"character_length valid cases{in:\"\\U0001d57f\\U0001d58d\\U0001d58a \\U0001d596\\U0001d59a\\U0001d58e\\U0001d588\\U0001d590 \\U0001d587\\U0001d597\\U0001d594\\U0001d59c\\U0001d593 \\U0001d58b\\U0001d594\\U0001d59d \\U0001d58f\\U0001d59a\\U0001d592\\U0001d595\\U0001d598 \\U0001d594\\U0001d59b\\U0001d58a\\U0001d597 \\U0001d599\\U0001d58d\\U0001d58a \\U0001d591\\U0001d586\\U0001d59f\\U0001d59e \\U0001d589\\U0001d594\\U0001d58c\",result:(success 43)}",
    statement:"character_length('ùïøùñçùñä ùññùñöùñéùñàùñê ùñáùñóùñîùñúùñì ùñãùñîùñù ùñèùñöùñíùñïùñò ùñîùñõùñäùñó ùñôùñçùñä ùñëùñÜùñüùñû ùñâùñîùñå')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:43
    }
  },
  {
    name:"character_length valid cases{in:\"\\U0001d47b\\U0001d489\\U0001d486 \\U0001d492\\U0001d496\\U0001d48a\\U0001d484\\U0001d48c \\U0001d483\\U0001d493\\U0001d490\\U0001d498\\U0001d48f \\U0001d487\\U0001d490\\U0001d499 \\U0001d48b\\U0001d496\\U0001d48e\\U0001d491\\U0001d494 \\U0001d490\\U0001d497\\U0001d486\\U0001d493 \\U0001d495\\U0001d489\\U0001d486 \\U0001d48d\\U0001d482\\U0001d49b\\U0001d49a \\U0001d485\\U0001d490\\U0001d488\",result:(success 43)}",
    statement:"character_length('ùëªùíâùíÜ ùííùíñùíäùíÑùíå ùíÉùíìùíêùíòùíè ùíáùíêùíô ùíãùíñùíéùíëùíî ùíêùíóùíÜùíì ùíïùíâùíÜ ùíçùíÇùíõùíö ùíÖùíêùíà')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:43
    }
  },
  {
    name:"character_length valid cases{in:\"\\U0001d4e3\\U0001d4f1\\U0001d4ee \\U0001d4fa\\U0001d4fe\\U0001d4f2\\U0001d4ec\\U0001d4f4 \\U0001d4eb\\U0001d4fb\\U0001d4f8\\U0001d500\\U0001d4f7 \\U0001d4ef\\U0001d4f8\\U0001d501 \\U0001d4f3\\U0001d4fe\\U0001d4f6\\U0001d4f9\\U0001d4fc \\U0001d4f8\\U0001d4ff\\U0001d4ee\\U0001d4fb \\U0001d4fd\\U0001d4f1\\U0001d4ee \\U0001d4f5\\U0001d4ea\\U0001d503\\U0001d502 \\U0001d4ed\\U0001d4f8\\U0001d4f0\",result:(success 43)}",
    statement:"character_length('ùì£ùì±ùìÆ ùì∫ùìæùì≤ùì¨ùì¥ ùì´ùìªùì∏ùîÄùì∑ ùìØùì∏ùîÅ ùì≥ùìæùì∂ùìπùìº ùì∏ùìøùìÆùìª ùìΩùì±ùìÆ ùìµùì™ùîÉùîÇ ùì≠ùì∏ùì∞')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:43
    }
  },
  {
    name:"character_length valid cases{in:\"\\U0001d54b\\U0001d559\\U0001d556 \\U0001d562\\U0001d566\\U0001d55a\\U0001d554\\U0001d55c \\U0001d553\\U0001d563\\U0001d560\\U0001d568\\U0001d55f \\U0001d557\\U0001d560\\U0001d569 \\U0001d55b\\U0001d566\\U0001d55e\\U0001d561\\U0001d564 \\U0001d560\\U0001d567\\U0001d556\\U0001d563 \\U0001d565\\U0001d559\\U0001d556 \\U0001d55d\\U0001d552\\U0001d56b\\U0001d56a \\U0001d555\\U0001d560\\U0001d558\",result:(success 43)}",
    statement:"character_length('ùïãùïôùïñ ùï¢ùï¶ùïöùïîùïú ùïìùï£ùï†ùï®ùïü ùïóùï†ùï© ùïõùï¶ùïûùï°ùï§ ùï†ùïßùïñùï£ ùï•ùïôùïñ ùïùùïíùï´ùï™ ùïïùï†ùïò')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:43
    }
  },
  {
    name:"character_length valid cases{in:\"\\U0001d683\\U0001d691\\U0001d68e \\U0001d69a\\U0001d69e\\U0001d692\\U0001d68c\\U0001d694 \\U0001d68b\\U0001d69b\\U0001d698\\U0001d6a0\\U0001d697 \\U0001d68f\\U0001d698\\U0001d6a1 \\U0001d693\\U0001d69e\\U0001d696\\U0001d699\\U0001d69c \\U0001d698\\U0001d69f\\U0001d68e\\U0001d69b \\U0001d69d\\U0001d691\\U0001d68e \\U0001d695\\U0001d68a\\U0001d6a3\\U0001d6a2 \\U0001d68d\\U0001d698\\U0001d690\",result:(success 43)}",
    statement:"character_length('ùöÉùöëùöé ùööùöûùöíùöåùöî ùöãùöõùöòùö†ùöó ùöèùöòùö° ùöìùöûùöñùöôùöú ùöòùöüùöéùöõ ùöùùöëùöé ùöïùöäùö£ùö¢ ùöçùöòùöê')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:43
    }
  },
  {
    name:"character_length valid cases{in:\"\\u24af\\u24a3\\u24a0 \\u24ac\\u24b0\\u24a4\\u249e\\u24a6 \\u249d\\u24ad\\u24aa\\u24b2\\u24a9 \\u24a1\\u24aa\\u24b3 \\u24a5\\u24b0\\u24a8\\u24ab\\u24ae \\u24aa\\u24b1\\u24a0\\u24ad \\u24af\\u24a3\\u24a0 \\u24a7\\u249c\\u24b5\\u24b4 \\u249f\\u24aa\\u24a2\",result:(success 43)}",
    statement:"character_length('‚íØ‚í£‚í† ‚í¨‚í∞‚í§‚íû‚í¶ ‚íù‚í≠‚í™‚í≤‚í© ‚í°‚í™‚í≥ ‚í•‚í∞‚í®‚í´‚íÆ ‚í™‚í±‚í†‚í≠ ‚íØ‚í£‚í† ‚íß‚íú‚íµ‚í¥ ‚íü‚í™‚í¢')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:43
    }
  },
  {
    name:"char_length null and missing propagation{in:\"null\",result:(success null)}",
    statement:"char_length(null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"char_length null and missing propagation{in:\"missing\",result:(success missing::null)}",
    statement:"char_length(missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"character_length null and missing propagation{in:\"null\",result:(success null)}",
    statement:"character_length(null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"character_length null and missing propagation{in:\"missing\",result:(success missing::null)}",
    statement:"character_length(missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"char_length wrong types{in:\"1\"}",
    statement:"char_length(1)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"char_length wrong types{in:\"`2000T`\"}",
    statement:"char_length(`2000T`)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"char_length wrong types{in:\"1.0\"}",
    statement:"char_length(1.0)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"char_length wrong types{in:\"1e0\"}",
    statement:"char_length(1e0)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"char_length wrong types{in:\"true\"}",
    statement:"char_length(true)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"char_length wrong types{in:\"[]\"}",
    statement:"char_length([])",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"char_length wrong types{in:\"`()`\"}",
    statement:"char_length(`()`)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"char_length wrong types{in:\"<<>>\"}",
    statement:"char_length(<<>>)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"char_length wrong types{in:\"`{}`\"}",
    statement:"char_length(`{}`)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"character_length wrong types{in:\"1\"}",
    statement:"character_length(1)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"character_length wrong types{in:\"`2000T`\"}",
    statement:"character_length(`2000T`)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"character_length wrong types{in:\"1.0\"}",
    statement:"character_length(1.0)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"character_length wrong types{in:\"1e0\"}",
    statement:"character_length(1e0)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"character_length wrong types{in:\"true\"}",
    statement:"character_length(true)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"character_length wrong types{in:\"[]\"}",
    statement:"character_length([])",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"character_length wrong types{in:\"`()`\"}",
    statement:"character_length(`()`)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"character_length wrong types{in:\"<<>>\"}",
    statement:"character_length(<<>>)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"character_length wrong types{in:\"`{}`\"}",
    statement:"character_length(`{}`)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
]
date_add::[
  {
    name:"date_add valid cases{time_part:year,quantity:1,timestamp:\"2017T\",result:(success 2018T)}",
    statement:"date_add(year, 1, `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2018T
    }
  },
  {
    name:"date_add valid cases{time_part:month,quantity:1,timestamp:\"2017T\",result:(success 2017-02T)}",
    statement:"date_add(month, 1, `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-02T
    }
  },
  {
    name:"date_add valid cases{time_part:day,quantity:1,timestamp:\"2017T\",result:(success 2017-01-02)}",
    statement:"date_add(day, 1, `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-01-02
    }
  },
  {
    name:"date_add valid cases{time_part:hour,quantity:1,timestamp:\"2017T\",result:(success 2017-01-01T01:00-00:00)}",
    statement:"date_add(hour, 1, `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-01-01T01:00-00:00
    }
  },
  {
    name:"date_add valid cases{time_part:minute,quantity:1,timestamp:\"2017T\",result:(success 2017-01-01T00:01-00:00)}",
    statement:"date_add(minute, 1, `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-01-01T00:01-00:00
    }
  },
  {
    name:"date_add valid cases{time_part:second,quantity:1,timestamp:\"2017T\",result:(success 2017-01-01T00:00:01-00:00)}",
    statement:"date_add(second, 1, `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-01-01T00:00:01-00:00
    }
  },
  {
    name:"date_add valid cases{time_part:year,quantity:1,timestamp:\"2017-01T\",result:(success 2018-01T)}",
    statement:"date_add(year, 1, `2017-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2018-01T
    }
  },
  {
    name:"date_add valid cases{time_part:month,quantity:1,timestamp:\"2017-01T\",result:(success 2017-02T)}",
    statement:"date_add(month, 1, `2017-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-02T
    }
  },
  {
    name:"date_add valid cases{time_part:day,quantity:1,timestamp:\"2017-01T\",result:(success 2017-01-02)}",
    statement:"date_add(day, 1, `2017-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-01-02
    }
  },
  {
    name:"date_add valid cases{time_part:hour,quantity:1,timestamp:\"2017-01T\",result:(success 2017-01-01T01:00-00:00)}",
    statement:"date_add(hour, 1, `2017-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-01-01T01:00-00:00
    }
  },
  {
    name:"date_add valid cases{time_part:minute,quantity:1,timestamp:\"2017-01T\",result:(success 2017-01-01T00:01-00:00)}",
    statement:"date_add(minute, 1, `2017-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-01-01T00:01-00:00
    }
  },
  {
    name:"date_add valid cases{time_part:second,quantity:1,timestamp:\"2017-01T\",result:(success 2017-01-01T00:00:01-00:00)}",
    statement:"date_add(second, 1, `2017-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-01-01T00:00:01-00:00
    }
  },
  {
    name:"date_add valid cases{time_part:year,quantity:1,timestamp:\"2017-01-02T\",result:(success 2018-01-02)}",
    statement:"date_add(year, 1, `2017-01-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2018-01-02
    }
  },
  {
    name:"date_add valid cases{time_part:month,quantity:1,timestamp:\"2017-01-02T\",result:(success 2017-02-02)}",
    statement:"date_add(month, 1, `2017-01-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-02-02
    }
  },
  {
    name:"date_add valid cases{time_part:day,quantity:1,timestamp:\"2017-01-02T\",result:(success 2017-01-03)}",
    statement:"date_add(day, 1, `2017-01-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-01-03
    }
  },
  {
    name:"date_add valid cases{time_part:hour,quantity:1,timestamp:\"2017-01-02T\",result:(success 2017-01-02T01:00-00:00)}",
    statement:"date_add(hour, 1, `2017-01-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-01-02T01:00-00:00
    }
  },
  {
    name:"date_add valid cases{time_part:minute,quantity:1,timestamp:\"2017-01-02T\",result:(success 2017-01-02T00:01-00:00)}",
    statement:"date_add(minute, 1, `2017-01-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-01-02T00:01-00:00
    }
  },
  {
    name:"date_add valid cases{time_part:second,quantity:1,timestamp:\"2017-01-02T\",result:(success 2017-01-02T00:00:01-00:00)}",
    statement:"date_add(second, 1, `2017-01-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-01-02T00:00:01-00:00
    }
  },
  {
    name:"date_add valid cases{time_part:year,quantity:1,timestamp:\"2017-01-02T03:04Z\",result:(success 2018-01-02T03:04Z)}",
    statement:"date_add(year, 1, `2017-01-02T03:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2018-01-02T03:04Z
    }
  },
  {
    name:"date_add valid cases{time_part:month,quantity:1,timestamp:\"2017-01-02T03:04Z\",result:(success 2017-02-02T03:04Z)}",
    statement:"date_add(month, 1, `2017-01-02T03:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-02-02T03:04Z
    }
  },
  {
    name:"date_add valid cases{time_part:day,quantity:1,timestamp:\"2017-01-02T03:04Z\",result:(success 2017-01-03T03:04Z)}",
    statement:"date_add(day, 1, `2017-01-02T03:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-01-03T03:04Z
    }
  },
  {
    name:"date_add valid cases{time_part:hour,quantity:1,timestamp:\"2017-01-02T03:04Z\",result:(success 2017-01-02T04:04Z)}",
    statement:"date_add(hour, 1, `2017-01-02T03:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-01-02T04:04Z
    }
  },
  {
    name:"date_add valid cases{time_part:minute,quantity:1,timestamp:\"2017-01-02T03:04Z\",result:(success 2017-01-02T03:05Z)}",
    statement:"date_add(minute, 1, `2017-01-02T03:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-01-02T03:05Z
    }
  },
  {
    name:"date_add valid cases{time_part:second,quantity:1,timestamp:\"2017-01-02T03:04Z\",result:(success 2017-01-02T03:04:01Z)}",
    statement:"date_add(second, 1, `2017-01-02T03:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-01-02T03:04:01Z
    }
  },
  {
    name:"date_add valid cases{time_part:year,quantity:1,timestamp:\"2017-01-02T03:04:05Z\",result:(success 2018-01-02T03:04:05Z)}",
    statement:"date_add(year, 1, `2017-01-02T03:04:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2018-01-02T03:04:05Z
    }
  },
  {
    name:"date_add valid cases{time_part:month,quantity:1,timestamp:\"2017-01-02T03:04:05Z\",result:(success 2017-02-02T03:04:05Z)}",
    statement:"date_add(month, 1, `2017-01-02T03:04:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-02-02T03:04:05Z
    }
  },
  {
    name:"date_add valid cases{time_part:day,quantity:1,timestamp:\"2017-01-02T03:04:05Z\",result:(success 2017-01-03T03:04:05Z)}",
    statement:"date_add(day, 1, `2017-01-02T03:04:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-01-03T03:04:05Z
    }
  },
  {
    name:"date_add valid cases{time_part:hour,quantity:1,timestamp:\"2017-01-02T03:04:05Z\",result:(success 2017-01-02T04:04:05Z)}",
    statement:"date_add(hour, 1, `2017-01-02T03:04:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-01-02T04:04:05Z
    }
  },
  {
    name:"date_add valid cases{time_part:minute,quantity:1,timestamp:\"2017-01-02T03:04:05Z\",result:(success 2017-01-02T03:05:05Z)}",
    statement:"date_add(minute, 1, `2017-01-02T03:04:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-01-02T03:05:05Z
    }
  },
  {
    name:"date_add valid cases{time_part:second,quantity:1,timestamp:\"2017-01-02T03:04:05Z\",result:(success 2017-01-02T03:04:06Z)}",
    statement:"date_add(second, 1, `2017-01-02T03:04:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-01-02T03:04:06Z
    }
  },
  {
    name:"date_add valid cases{time_part:year,quantity:1,timestamp:\"2017-01-02T03:04:05.006Z\",result:(success 2018-01-02T03:04:05.006Z)}",
    statement:"date_add(year, 1, `2017-01-02T03:04:05.006Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2018-01-02T03:04:05.006Z
    }
  },
  {
    name:"date_add valid cases{time_part:month,quantity:1,timestamp:\"2017-01-02T03:04:05.006Z\",result:(success 2017-02-02T03:04:05.006Z)}",
    statement:"date_add(month, 1, `2017-01-02T03:04:05.006Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-02-02T03:04:05.006Z
    }
  },
  {
    name:"date_add valid cases{time_part:day,quantity:1,timestamp:\"2017-01-02T03:04:05.006Z\",result:(success 2017-01-03T03:04:05.006Z)}",
    statement:"date_add(day, 1, `2017-01-02T03:04:05.006Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-01-03T03:04:05.006Z
    }
  },
  {
    name:"date_add valid cases{time_part:hour,quantity:1,timestamp:\"2017-01-02T03:04:05.006Z\",result:(success 2017-01-02T04:04:05.006Z)}",
    statement:"date_add(hour, 1, `2017-01-02T03:04:05.006Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-01-02T04:04:05.006Z
    }
  },
  {
    name:"date_add valid cases{time_part:minute,quantity:1,timestamp:\"2017-01-02T03:04:05.006Z\",result:(success 2017-01-02T03:05:05.006Z)}",
    statement:"date_add(minute, 1, `2017-01-02T03:04:05.006Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-01-02T03:05:05.006Z
    }
  },
  {
    name:"date_add valid cases{time_part:second,quantity:1,timestamp:\"2017-01-02T03:04:05.006Z\",result:(success 2017-01-02T03:04:06.006Z)}",
    statement:"date_add(second, 1, `2017-01-02T03:04:05.006Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-01-02T03:04:06.006Z
    }
  },
  {
    name:"date_add valid cases{time_part:month,quantity:12,timestamp:\"2017T\",result:(success 2018-01T)}",
    statement:"date_add(month, 12, `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2018-01T
    }
  },
  {
    name:"date_add valid cases{time_part:day,quantity:420,timestamp:\"2017T\",result:(success 2018-02-25)}",
    statement:"date_add(day, 420, `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2018-02-25
    }
  },
  {
    name:"date_add valid cases{time_part:hour,quantity:10080,timestamp:\"2017T\",result:(success 2018-02-25T00:00-00:00)}",
    statement:"date_add(hour, 10080, `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2018-02-25T00:00-00:00
    }
  },
  {
    name:"date_add valid cases{time_part:minute,quantity:604800,timestamp:\"2017T\",result:(success 2018-02-25T00:00-00:00)}",
    statement:"date_add(minute, 604800, `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2018-02-25T00:00-00:00
    }
  },
  {
    name:"date_add valid cases{time_part:second,quantity:36288000,timestamp:\"2017T\",result:(success 2018-02-25T00:00:00-00:00)}",
    statement:"date_add(second, 36288000, `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2018-02-25T00:00:00-00:00
    }
  },
  {
    name:"date_add valid cases{time_part:day,quantity:35,timestamp:\"2017-01T\",result:(success 2017-02-05)}",
    statement:"date_add(day, 35, `2017-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-02-05
    }
  },
  {
    name:"date_add valid cases{time_part:hour,quantity:840,timestamp:\"2017-01T\",result:(success 2017-02-05T00:00-00:00)}",
    statement:"date_add(hour, 840, `2017-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-02-05T00:00-00:00
    }
  },
  {
    name:"date_add valid cases{time_part:minute,quantity:50400,timestamp:\"2017-01T\",result:(success 2017-02-05T00:00-00:00)}",
    statement:"date_add(minute, 50400, `2017-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-02-05T00:00-00:00
    }
  },
  {
    name:"date_add valid cases{time_part:second,quantity:3024000,timestamp:\"2017-01T\",result:(success 2017-02-05T00:00:00-00:00)}",
    statement:"date_add(second, 3024000, `2017-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-02-05T00:00:00-00:00
    }
  },
  {
    name:"date_add valid cases{time_part:hour,quantity:24,timestamp:\"2017-02-03T\",result:(success 2017-02-04T00:00-00:00)}",
    statement:"date_add(hour, 24, `2017-02-03T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-02-04T00:00-00:00
    }
  },
  {
    name:"date_add valid cases{time_part:minute,quantity:1440,timestamp:\"2017-02-03T\",result:(success 2017-02-04T00:00-00:00)}",
    statement:"date_add(minute, 1440, `2017-02-03T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-02-04T00:00-00:00
    }
  },
  {
    name:"date_add valid cases{time_part:second,quantity:86400,timestamp:\"2017-02-03T\",result:(success 2017-02-04T00:00:00-00:00)}",
    statement:"date_add(second, 86400, `2017-02-03T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-02-04T00:00:00-00:00
    }
  },
  {
    name:"date_add valid cases{time_part:minute,quantity:60,timestamp:\"2017-02-04T05:06Z\",result:(success 2017-02-04T06:06Z)}",
    statement:"date_add(minute, 60, `2017-02-04T05:06Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-02-04T06:06Z
    }
  },
  {
    name:"date_add valid cases{time_part:second,quantity:3600,timestamp:\"2017-02-04T05:06Z\",result:(success 2017-02-04T06:06:00Z)}",
    statement:"date_add(second, 3600, `2017-02-04T05:06Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-02-04T06:06:00Z
    }
  },
  {
    name:"date_add valid cases{time_part:second,quantity:60,timestamp:\"2017-02-04T05:06Z\",result:(success 2017-02-04T05:07:00Z)}",
    statement:"date_add(second, 60, `2017-02-04T05:06Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-02-04T05:07:00Z
    }
  },
  {
    name:"date_add valid cases{time_part:year,quantity:-1,timestamp:\"2017T\",result:(success 2016T)}",
    statement:"date_add(year, -1, `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2016T
    }
  },
  {
    name:"date_add valid cases{time_part:month,quantity:-1,timestamp:\"2017T\",result:(success 2016-12T)}",
    statement:"date_add(month, -1, `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2016-12T
    }
  },
  {
    name:"date_add valid cases{time_part:day,quantity:-1,timestamp:\"2017T\",result:(success 2016-12-31)}",
    statement:"date_add(day, -1, `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2016-12-31
    }
  },
  {
    name:"date_add valid cases{time_part:hour,quantity:-1,timestamp:\"2017T\",result:(success 2016-12-31T23:00-00:00)}",
    statement:"date_add(hour, -1, `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2016-12-31T23:00-00:00
    }
  },
  {
    name:"date_add valid cases{time_part:minute,quantity:-1,timestamp:\"2017T\",result:(success 2016-12-31T23:59-00:00)}",
    statement:"date_add(minute, -1, `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2016-12-31T23:59-00:00
    }
  },
  {
    name:"date_add valid cases{time_part:second,quantity:-1,timestamp:\"2017T\",result:(success 2016-12-31T23:59:59-00:00)}",
    statement:"date_add(second, -1, `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2016-12-31T23:59:59-00:00
    }
  },
  {
    name:"date_add valid cases{time_part:year,quantity:-1,timestamp:\"2017-02T\",result:(success 2016-02T)}",
    statement:"date_add(year, -1, `2017-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2016-02T
    }
  },
  {
    name:"date_add valid cases{time_part:month,quantity:-1,timestamp:\"2017-02T\",result:(success 2017-01T)}",
    statement:"date_add(month, -1, `2017-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-01T
    }
  },
  {
    name:"date_add valid cases{time_part:day,quantity:-1,timestamp:\"2017-02T\",result:(success 2017-01-31)}",
    statement:"date_add(day, -1, `2017-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-01-31
    }
  },
  {
    name:"date_add valid cases{time_part:hour,quantity:-1,timestamp:\"2017-02T\",result:(success 2017-01-31T23:00-00:00)}",
    statement:"date_add(hour, -1, `2017-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-01-31T23:00-00:00
    }
  },
  {
    name:"date_add valid cases{time_part:minute,quantity:-1,timestamp:\"2017-02T\",result:(success 2017-01-31T23:59-00:00)}",
    statement:"date_add(minute, -1, `2017-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-01-31T23:59-00:00
    }
  },
  {
    name:"date_add valid cases{time_part:second,quantity:-1,timestamp:\"2017-02T\",result:(success 2017-01-31T23:59:59-00:00)}",
    statement:"date_add(second, -1, `2017-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-01-31T23:59:59-00:00
    }
  },
  {
    name:"date_add valid cases{time_part:year,quantity:-1,timestamp:\"2017-02-03T\",result:(success 2016-02-03)}",
    statement:"date_add(year, -1, `2017-02-03T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2016-02-03
    }
  },
  {
    name:"date_add valid cases{time_part:month,quantity:-1,timestamp:\"2017-02-03T\",result:(success 2017-01-03)}",
    statement:"date_add(month, -1, `2017-02-03T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-01-03
    }
  },
  {
    name:"date_add valid cases{time_part:day,quantity:-1,timestamp:\"2017-02-03T\",result:(success 2017-02-02)}",
    statement:"date_add(day, -1, `2017-02-03T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-02-02
    }
  },
  {
    name:"date_add valid cases{time_part:hour,quantity:-1,timestamp:\"2017-02-03T\",result:(success 2017-02-02T23:00-00:00)}",
    statement:"date_add(hour, -1, `2017-02-03T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-02-02T23:00-00:00
    }
  },
  {
    name:"date_add valid cases{time_part:minute,quantity:-1,timestamp:\"2017-02-03T\",result:(success 2017-02-02T23:59-00:00)}",
    statement:"date_add(minute, -1, `2017-02-03T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-02-02T23:59-00:00
    }
  },
  {
    name:"date_add valid cases{time_part:second,quantity:-1,timestamp:\"2017-02-03T\",result:(success 2017-02-02T23:59:59-00:00)}",
    statement:"date_add(second, -1, `2017-02-03T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-02-02T23:59:59-00:00
    }
  },
  {
    name:"date_add valid cases{time_part:year,quantity:-1,timestamp:\"2017-02-03T04:05Z\",result:(success 2016-02-03T04:05Z)}",
    statement:"date_add(year, -1, `2017-02-03T04:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2016-02-03T04:05Z
    }
  },
  {
    name:"date_add valid cases{time_part:month,quantity:-1,timestamp:\"2017-02-03T04:05Z\",result:(success 2017-01-03T04:05Z)}",
    statement:"date_add(month, -1, `2017-02-03T04:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-01-03T04:05Z
    }
  },
  {
    name:"date_add valid cases{time_part:day,quantity:-1,timestamp:\"2017-02-03T04:05Z\",result:(success 2017-02-02T04:05Z)}",
    statement:"date_add(day, -1, `2017-02-03T04:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-02-02T04:05Z
    }
  },
  {
    name:"date_add valid cases{time_part:hour,quantity:-1,timestamp:\"2017-02-03T04:05Z\",result:(success 2017-02-03T03:05Z)}",
    statement:"date_add(hour, -1, `2017-02-03T04:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-02-03T03:05Z
    }
  },
  {
    name:"date_add valid cases{time_part:minute,quantity:-1,timestamp:\"2017-02-03T04:05Z\",result:(success 2017-02-03T04:04Z)}",
    statement:"date_add(minute, -1, `2017-02-03T04:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-02-03T04:04Z
    }
  },
  {
    name:"date_add valid cases{time_part:second,quantity:-1,timestamp:\"2017-02-03T04:05Z\",result:(success 2017-02-03T04:04:59Z)}",
    statement:"date_add(second, -1, `2017-02-03T04:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-02-03T04:04:59Z
    }
  },
  {
    name:"date_add valid cases{time_part:year,quantity:-1,timestamp:\"2017-02-03T04:05:06Z\",result:(success 2016-02-03T04:05:06Z)}",
    statement:"date_add(year, -1, `2017-02-03T04:05:06Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2016-02-03T04:05:06Z
    }
  },
  {
    name:"date_add valid cases{time_part:month,quantity:-1,timestamp:\"2017-02-03T04:05:06Z\",result:(success 2017-01-03T04:05:06Z)}",
    statement:"date_add(month, -1, `2017-02-03T04:05:06Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-01-03T04:05:06Z
    }
  },
  {
    name:"date_add valid cases{time_part:day,quantity:-1,timestamp:\"2017-02-03T04:05:06Z\",result:(success 2017-02-02T04:05:06Z)}",
    statement:"date_add(day, -1, `2017-02-03T04:05:06Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-02-02T04:05:06Z
    }
  },
  {
    name:"date_add valid cases{time_part:hour,quantity:-1,timestamp:\"2017-02-03T04:05:06Z\",result:(success 2017-02-03T03:05:06Z)}",
    statement:"date_add(hour, -1, `2017-02-03T04:05:06Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-02-03T03:05:06Z
    }
  },
  {
    name:"date_add valid cases{time_part:minute,quantity:-1,timestamp:\"2017-02-03T04:05:06Z\",result:(success 2017-02-03T04:04:06Z)}",
    statement:"date_add(minute, -1, `2017-02-03T04:05:06Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-02-03T04:04:06Z
    }
  },
  {
    name:"date_add valid cases{time_part:second,quantity:-1,timestamp:\"2017-02-03T04:05:06Z\",result:(success 2017-02-03T04:05:05Z)}",
    statement:"date_add(second, -1, `2017-02-03T04:05:06Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-02-03T04:05:05Z
    }
  },
  {
    name:"date_add valid cases{time_part:year,quantity:-1,timestamp:\"2017-02-03T04:05:06.007Z\",result:(success 2016-02-03T04:05:06.007Z)}",
    statement:"date_add(year, -1, `2017-02-03T04:05:06.007Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2016-02-03T04:05:06.007Z
    }
  },
  {
    name:"date_add valid cases{time_part:month,quantity:-1,timestamp:\"2017-02-03T04:05:06.007Z\",result:(success 2017-01-03T04:05:06.007Z)}",
    statement:"date_add(month, -1, `2017-02-03T04:05:06.007Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-01-03T04:05:06.007Z
    }
  },
  {
    name:"date_add valid cases{time_part:day,quantity:-1,timestamp:\"2017-02-03T04:05:06.007Z\",result:(success 2017-02-02T04:05:06.007Z)}",
    statement:"date_add(day, -1, `2017-02-03T04:05:06.007Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-02-02T04:05:06.007Z
    }
  },
  {
    name:"date_add valid cases{time_part:hour,quantity:-1,timestamp:\"2017-02-03T04:05:06.007Z\",result:(success 2017-02-03T03:05:06.007Z)}",
    statement:"date_add(hour, -1, `2017-02-03T04:05:06.007Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-02-03T03:05:06.007Z
    }
  },
  {
    name:"date_add valid cases{time_part:minute,quantity:-1,timestamp:\"2017-02-03T04:05:06.007Z\",result:(success 2017-02-03T04:04:06.007Z)}",
    statement:"date_add(minute, -1, `2017-02-03T04:05:06.007Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-02-03T04:04:06.007Z
    }
  },
  {
    name:"date_add valid cases{time_part:second,quantity:-1,timestamp:\"2017-02-03T04:05:06.007Z\",result:(success 2017-02-03T04:05:05.007Z)}",
    statement:"date_add(second, -1, `2017-02-03T04:05:06.007Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017-02-03T04:05:05.007Z
    }
  },
  {
    name:"date_add null and missing propagation{time_part:year,quantity:\"null\",timestamp:\"`2017T`\",result:(success null)}",
    statement:"date_add(year, null, `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"date_add null and missing propagation{time_part:year,quantity:1,timestamp:\"null\",result:(success null)}",
    statement:"date_add(year, 1, null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"date_add null and missing propagation{time_part:year,quantity:\"missing\",timestamp:\"`2017T`\",result:(success missing::null)}",
    statement:"date_add(year, missing, `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"date_add null and missing propagation{time_part:year,quantity:1,timestamp:\"missing\",result:(success missing::null)}",
    statement:"date_add(year, 1, missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"date_add null and missing propagation{time_part:year,quantity:\"null\",timestamp:\"missing\",result:(success missing::null)}",
    statement:"date_add(year, null, missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"date_add null and missing propagation{time_part:year,quantity:\"missing\",timestamp:\"null\",result:(success missing::null)}",
    statement:"date_add(year, missing, null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"date_add invalid quantity{time_part:\"year\",quantity:9999}",
    statement:"date_add(year, 9999, `9999-12-31T23:59:59Z`)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"date_add invalid quantity{time_part:\"second\",quantity:1}",
    statement:"date_add(second, 1, `9999-12-31T23:59:59Z`)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"date_add invalid quantity{time_part:\"year\",quantity:-10000}",
    statement:"date_add(year, -10000, `9999-12-31T23:59:59Z`)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"date_add invalid time part{time_part:\"'foobar'\"}",
    statement:"date_add('foobar', 1, `1986T`)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"date_add invalid time part{time_part:1}",
    statement:"date_add(1, 1, `1986T`)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"date_add invalid time part{time_part:[]}",
    statement:"date_add([], 1, `1986T`)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"date_add invalid time part{time_part:\"timezone_hour\"}",
    statement:"date_add(timezone_hour, 1, `1986T`)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"date_add invalid time part{time_part:\"timezone_minute\"}",
    statement:"date_add(timezone_minute, 1, `1986T`)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
]
coalesce::[
  {
    name:"coalesce valid cases{args:\"1\",result:(success 1)}",
    statement:"coalesce(1)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"coalesce valid cases{args:\"1, 2\",result:(success 1)}",
    statement:"coalesce(1, 2)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"coalesce valid cases{args:\"null, 2\",result:(success 2)}",
    statement:"coalesce(null, 2)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"coalesce valid cases{args:\"missing, 3\",result:(success 3)}",
    statement:"coalesce(missing, 3)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3
    }
  },
  {
    name:"coalesce valid cases{args:\"null, null, 3\",result:(success 3)}",
    statement:"coalesce(null, null, 3)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3
    }
  },
  {
    name:"coalesce valid cases{args:\"null, missing, 3\",result:(success 3)}",
    statement:"coalesce(null, missing, 3)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3
    }
  },
  {
    name:"coalesce valid cases{args:\"null, missing, null, null, missing, 9, 4, 5, 6\",result:(success 9)}",
    statement:"coalesce(null, missing, null, null, missing, 9, 4, 5, 6)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:9
    }
  },
]
exists::[
  {
    name:"exists valid cases{param:\"`[]`\",result:false}",
    statement:"exists(`[]`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"exists valid cases{param:\"`()`\",result:false}",
    statement:"exists(`()`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"exists valid cases{param:\"`{}`\",result:false}",
    statement:"exists(`{}`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"exists valid cases{param:\"<<>>\",result:false}",
    statement:"exists(<<>>)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"exists valid cases{param:\"`[1]`\",result:true}",
    statement:"exists(`[1]`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"exists valid cases{param:\"`(1)`\",result:true}",
    statement:"exists(`(1)`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"exists valid cases{param:\"`{a: 1}`\",result:true}",
    statement:"exists(`{a: 1}`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"exists valid cases{param:\"<<1>>\",result:true}",
    statement:"exists(<<1>>)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"exists valid cases{param:\"`[null]`\",result:true}",
    statement:"exists(`[null]`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"exists valid cases{param:\"`[missing]`\",result:true}",
    statement:"exists(`[missing]`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"exists valid cases{param:\"`(null)`\",result:true}",
    statement:"exists(`(null)`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"exists valid cases{param:\"`(missing)`\",result:true}",
    statement:"exists(`(missing)`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"exists valid cases{param:\"`{a: null}`\",result:true}",
    statement:"exists(`{a: null}`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"exists valid cases{param:\"`{a: missing}`\",result:true}",
    statement:"exists(`{a: missing}`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"exists valid cases{param:\"<<null>>\",result:true}",
    statement:"exists(<<null>>)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"exists valid cases{param:\"<<missing>>\",result:true}",
    statement:"exists(<<missing>>)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
]
trim::[
  {
    name:"trim valid cases{spec:\"both\",to_remove:\"\\U0001f4a9\",target:\"\\U0001f4a9\\U0001f4a9\\U0001f4a9\\U0001f4a9\\U0001f601\\U0001f4a9\\U0001f4a9\\U0001f4a9\\U0001f4a9\",result:\"\\U0001f601\"}",
    statement:"trim(both 'üí©' from 'üí©üí©üí©üí©üòÅüí©üí©üí©üí©')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"üòÅ"
    }
  },
  {
    name:"trim valid cases{spec:\"leading\",to_remove:\"\\U0001f4a9\",target:\"\\U0001f4a9\\U0001f4a9\\U0001f4a9\\U0001f4a9\\U0001f601\\U0001f4a9\\U0001f4a9\\U0001f4a9\\U0001f4a9\",result:\"\\U0001f601\\U0001f4a9\\U0001f4a9\\U0001f4a9\\U0001f4a9\"}",
    statement:"trim(leading 'üí©' from 'üí©üí©üí©üí©üòÅüí©üí©üí©üí©')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"üòÅüí©üí©üí©üí©"
    }
  },
  {
    name:"trim valid cases{spec:\"trailing\",to_remove:\"\\U0001f4a9\",target:\"\\U0001f4a9\\U0001f4a9\\U0001f4a9\\U0001f4a9\\U0001f601\\U0001f4a9\\U0001f4a9\\U0001f4a9\\U0001f4a9\",result:\"\\U0001f4a9\\U0001f4a9\\U0001f4a9\\U0001f4a9\\U0001f601\"}",
    statement:"trim(trailing 'üí©' from 'üí©üí©üí©üí©üòÅüí©üí©üí©üí©')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"üí©üí©üí©üí©üòÅ"
    }
  },
  {
    name:"trim valid cases{spec:\"both\",to_remove:\"12\",target:\"111112a1212121211\",result:\"a\"}",
    statement:"trim(both '12' from '111112a1212121211')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"a"
    }
  },
  {
    name:"trim valid cases{spec:\"leading\",to_remove:\"12\",target:\"111112a1212121211\",result:\"a1212121211\"}",
    statement:"trim(leading '12' from '111112a1212121211')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"a1212121211"
    }
  },
  {
    name:"trim valid cases{spec:\"trailing\",to_remove:\"12\",target:\"111112a1212121211\",result:\"111112a\"}",
    statement:"trim(trailing '12' from '111112a1212121211')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"111112a"
    }
  },
  {
    name:"trim valid cases{spec:\"both\",to_remove:\"\\U0001f4a9\\U0001f638\",target:\"\\U0001f4a9\\U0001f4a9\\U0001f4a9\\U0001f638\\U0001f638\\U0001f6381\\U0001f4a9\\U0001f4a9\\U0001f4a9\\U0001f638\\U0001f638\\U0001f638a\\U0001f4a9\\U0001f4a9\\U0001f4a9\\U0001f638\\U0001f638\\U0001f6381\\U0001f4a9\\U0001f4a9\\U0001f4a9\\U0001f638\\U0001f638\\U0001f638\",result:\"1\\U0001f4a9\\U0001f4a9\\U0001f4a9\\U0001f638\\U0001f638\\U0001f638a\\U0001f4a9\\U0001f4a9\\U0001f4a9\\U0001f638\\U0001f638\\U0001f6381\"}",
    statement:"trim(both 'üí©üò∏' from 'üí©üí©üí©üò∏üò∏üò∏1üí©üí©üí©üò∏üò∏üò∏aüí©üí©üí©üò∏üò∏üò∏1üí©üí©üí©üò∏üò∏üò∏')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1üí©üí©üí©üò∏üò∏üò∏aüí©üí©üí©üò∏üò∏üò∏1"
    }
  },
  {
    name:"trim valid cases{spec:\"leading\",to_remove:\"\\U0001f4a9\\U0001f638\",target:\"\\U0001f4a9\\U0001f4a9\\U0001f4a9\\U0001f638\\U0001f638\\U0001f6381\\U0001f4a9\\U0001f4a9\\U0001f4a9\\U0001f638\\U0001f638\\U0001f638a\\U0001f4a9\\U0001f4a9\\U0001f4a9\\U0001f638\\U0001f638\\U0001f6381\\U0001f4a9\\U0001f4a9\\U0001f4a9\\U0001f638\\U0001f638\\U0001f638\",result:\"1\\U0001f4a9\\U0001f4a9\\U0001f4a9\\U0001f638\\U0001f638\\U0001f638a\\U0001f4a9\\U0001f4a9\\U0001f4a9\\U0001f638\\U0001f638\\U0001f6381\\U0001f4a9\\U0001f4a9\\U0001f4a9\\U0001f638\\U0001f638\\U0001f638\"}",
    statement:"trim(leading 'üí©üò∏' from 'üí©üí©üí©üò∏üò∏üò∏1üí©üí©üí©üò∏üò∏üò∏aüí©üí©üí©üò∏üò∏üò∏1üí©üí©üí©üò∏üò∏üò∏')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1üí©üí©üí©üò∏üò∏üò∏aüí©üí©üí©üò∏üò∏üò∏1üí©üí©üí©üò∏üò∏üò∏"
    }
  },
  {
    name:"trim valid cases{spec:\"trailing\",to_remove:\"\\U0001f4a9\\U0001f638\",target:\"\\U0001f4a9\\U0001f4a9\\U0001f4a9\\U0001f638\\U0001f638\\U0001f6381\\U0001f4a9\\U0001f4a9\\U0001f4a9\\U0001f638\\U0001f638\\U0001f638a\\U0001f4a9\\U0001f4a9\\U0001f4a9\\U0001f638\\U0001f638\\U0001f6381\\U0001f4a9\\U0001f4a9\\U0001f4a9\\U0001f638\\U0001f638\\U0001f638\",result:\"\\U0001f4a9\\U0001f4a9\\U0001f4a9\\U0001f638\\U0001f638\\U0001f6381\\U0001f4a9\\U0001f4a9\\U0001f4a9\\U0001f638\\U0001f638\\U0001f638a\\U0001f4a9\\U0001f4a9\\U0001f4a9\\U0001f638\\U0001f638\\U0001f6381\"}",
    statement:"trim(trailing 'üí©üò∏' from 'üí©üí©üí©üò∏üò∏üò∏1üí©üí©üí©üò∏üò∏üò∏aüí©üí©üí©üò∏üò∏üò∏1üí©üí©üí©üò∏üò∏üò∏')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"üí©üí©üí©üò∏üò∏üò∏1üí©üí©üí©üò∏üò∏üò∏aüí©üí©üí©üò∏üò∏üò∏1"
    }
  },
  {
    name:"trim valid cases{spec:\"both\",to_remove:\"\\u8a71 \",target:\"\\u8a71\\u8a71 \\u8a71\\u8a71\\u8a71\\u8a71\\u8a71\\u8a71\\u8cbb\\u8c37\\u6599\\u6751\\u80fd\\u8a71\\u8a71\\u8a71\\u8a71 \\u8a71\\u8a71\\u8a71\\u8a71    \",result:\"\\u8cbb\\u8c37\\u6599\\u6751\\u80fd\"}",
    statement:"trim(both 'Ë©± ' from 'Ë©±Ë©± Ë©±Ë©±Ë©±Ë©±Ë©±Ë©±Ë≤ªË∞∑ÊñôÊùëËÉΩË©±Ë©±Ë©±Ë©± Ë©±Ë©±Ë©±Ë©± ')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Ë≤ªË∞∑ÊñôÊùëËÉΩ"
    }
  },
  {
    name:"trim valid cases{spec:\"leading\",to_remove:\"\\u8a71 \",target:\"\\u8a71\\u8a71 \\u8a71\\u8a71\\u8a71\\u8a71\\u8a71\\u8a71\\u8cbb\\u8c37\\u6599\\u6751\\u80fd\\u8a71\\u8a71\\u8a71\\u8a71 \\u8a71\\u8a71\\u8a71\\u8a71    \",result:\"\\u8cbb\\u8c37\\u6599\\u6751\\u80fd\\u8a71\\u8a71\\u8a71\\u8a71 \\u8a71\\u8a71\\u8a71\\u8a71    \"}",
    statement:"trim(leading 'Ë©± ' from 'Ë©±Ë©± Ë©±Ë©±Ë©±Ë©±Ë©±Ë©±Ë≤ªË∞∑ÊñôÊùëËÉΩË©±Ë©±Ë©±Ë©± Ë©±Ë©±Ë©±Ë©± ')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Ë≤ªË∞∑ÊñôÊùëËÉΩË©±Ë©±Ë©±Ë©± Ë©±Ë©±Ë©±Ë©±    "
    }
  },
  {
    name:"trim valid cases{spec:\"trailing\",to_remove:\"\\u8a71 \",target:\"\\u8a71\\u8a71 \\u8a71\\u8a71\\u8a71\\u8a71\\u8a71\\u8a71\\u8cbb\\u8c37\\u6599\\u6751\\u80fd\\u8a71\\u8a71\\u8a71\\u8a71 \\u8a71\\u8a71\\u8a71\\u8a71    \",result:\"\\u8a71\\u8a71 \\u8a71\\u8a71\\u8a71\\u8a71\\u8a71\\u8a71\\u8cbb\\u8c37\\u6599\\u6751\\u80fd\"}",
    statement:"trim(trailing 'Ë©± ' from 'Ë©±Ë©± Ë©±Ë©±Ë©±Ë©±Ë©±Ë©±Ë≤ªË∞∑ÊñôÊùëËÉΩË©±Ë©±Ë©±Ë©± Ë©±Ë©±Ë©±Ë©± ')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Ë©±Ë©± Ë©±Ë©±Ë©±Ë©±Ë©±Ë©±Ë≤ªË∞∑ÊñôÊùëËÉΩ"
    }
  },
  {
    name:"trim valid cases{spec:\"both\",to_remove:\"\\xb0\\xba\\u25a1(\\uff09)\\u256f\\u30ce\\ufe35_ \",target:\"(\\u256f\\xb0\\u25a1\\xb0\\uff09\\u256f\\ufe35 \\u253b\\u2501\\u253b \\u252c\\u2500\\u252c\\u30ce( \\xba _ \\xba\\u30ce)\",result:\"\\u253b\\u2501\\u253b \\u252c\\u2500\\u252c\"}",
    statement:"trim(both '¬∞¬∫‚ñ°(Ôºâ)‚ïØ„ÉéÔ∏µ_ ' from '(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª ‚î¨‚îÄ‚î¨„Éé( ¬∫ _ ¬∫„Éé)')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"‚îª‚îÅ‚îª ‚î¨‚îÄ‚î¨"
    }
  },
  {
    name:"trim valid cases{spec:\"leading\",to_remove:\"\\xb0\\xba\\u25a1(\\uff09)\\u256f\\u30ce\\ufe35_ \",target:\"(\\u256f\\xb0\\u25a1\\xb0\\uff09\\u256f\\ufe35 \\u253b\\u2501\\u253b \\u252c\\u2500\\u252c\\u30ce( \\xba _ \\xba\\u30ce)\",result:\"\\u253b\\u2501\\u253b \\u252c\\u2500\\u252c\\u30ce( \\xba _ \\xba\\u30ce)\"}",
    statement:"trim(leading '¬∞¬∫‚ñ°(Ôºâ)‚ïØ„ÉéÔ∏µ_ ' from '(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª ‚î¨‚îÄ‚î¨„Éé( ¬∫ _ ¬∫„Éé)')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"‚îª‚îÅ‚îª ‚î¨‚îÄ‚î¨„Éé( ¬∫ _ ¬∫„Éé)"
    }
  },
  {
    name:"trim valid cases{spec:\"trailing\",to_remove:\"\\xb0\\xba\\u25a1(\\uff09)\\u256f\\u30ce\\ufe35_ \",target:\"(\\u256f\\xb0\\u25a1\\xb0\\uff09\\u256f\\ufe35 \\u253b\\u2501\\u253b \\u252c\\u2500\\u252c\\u30ce( \\xba _ \\xba\\u30ce)\",result:\"(\\u256f\\xb0\\u25a1\\xb0\\uff09\\u256f\\ufe35 \\u253b\\u2501\\u253b \\u252c\\u2500\\u252c\"}",
    statement:"trim(trailing '¬∞¬∫‚ñ°(Ôºâ)‚ïØ„ÉéÔ∏µ_ ' from '(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª ‚î¨‚îÄ‚î¨„Éé( ¬∫ _ ¬∫„Éé)')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª ‚î¨‚îÄ‚î¨"
    }
  },
  {
    name:"trim valid cases{spec:\"both\",to_remove:\"\\U0001f476\\U0001f3fb\",target:\"\\U0001f476\\U0001f3fb\\U0001f469\\U0001f476\\U0001f3fb\",result:\"\\U0001f469\"}",
    statement:"trim(both 'üë∂üèª' from 'üë∂üèªüë©üë∂üèª')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"üë©"
    }
  },
  {
    name:"trim valid cases{spec:\"leading\",to_remove:\"\\U0001f476\\U0001f3fb\",target:\"\\U0001f476\\U0001f3fb\\U0001f469\\U0001f476\\U0001f3fb\",result:\"\\U0001f469\\U0001f476\\U0001f3fb\"}",
    statement:"trim(leading 'üë∂üèª' from 'üë∂üèªüë©üë∂üèª')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"üë©üë∂üèª"
    }
  },
  {
    name:"trim valid cases{spec:\"trailing\",to_remove:\"\\U0001f476\\U0001f3fb\",target:\"\\U0001f476\\U0001f3fb\\U0001f469\\U0001f476\\U0001f3fb\",result:\"\\U0001f476\\U0001f3fb\\U0001f469\"}",
    statement:"trim(trailing 'üë∂üèª' from 'üë∂üèªüë©üë∂üèª')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"üë∂üèªüë©"
    }
  },
  {
    name:"trim valid cases{spec:\"both\",to_remove:\" \",target:\"            \",result:\"\"}",
    statement:"trim(both ' ' from ' ')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:""
    }
  },
  {
    name:"trim valid cases{spec:\"leading\",to_remove:\" \",target:\"            \",result:\"\"}",
    statement:"trim(leading ' ' from ' ')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:""
    }
  },
  {
    name:"trim valid cases{spec:\"trailing\",to_remove:\" \",target:\"            \",result:\"\"}",
    statement:"trim(trailing ' ' from ' ')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:""
    }
  },
  {
    name:"trim variations on valid syntax{sql:\"trim('      foobar       ')\"}",
    statement:"trim(' foobar ')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"foobar"
    }
  },
  {
    name:"trim variations on valid syntax{sql:\"trim(from '      foobar       ')\"}",
    statement:"trim(from ' foobar ')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"foobar"
    }
  },
  {
    name:"trim variations on valid syntax{sql:\"trim(both from '      foobar       ')\"}",
    statement:"trim(both from ' foobar ')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"foobar"
    }
  },
  {
    name:"trim variations on valid syntax{sql:\"trim(both ' ' from '      foobar       ')\"}",
    statement:"trim(both ' ' from ' foobar ')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"foobar"
    }
  },
  {
    name:"trim variations on valid syntax{sql:\"trim('12' from '1212foobar1212')\"}",
    statement:"trim('12' from '1212foobar1212')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"foobar"
    }
  },
  {
    name:"trim variations on valid syntax{sql:\"trim('12' from 'foobar1212')\"}",
    statement:"trim('12' from 'foobar1212')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"foobar"
    }
  },
  {
    name:"trim variations on valid syntax{sql:\"trim('12' from '1212foobar')\"}",
    statement:"trim('12' from '1212foobar')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"foobar"
    }
  },
  {
    name:"trim null and missing propagation{sql:\"trim(null)\"}",
    statement:"trim(null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"trim null and missing propagation{sql:\"trim(missing)\"}",
    statement:"trim(missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"trim null and missing propagation{sql:\"trim(leading from null)\"}",
    statement:"trim(leading from null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"trim null and missing propagation{sql:\"trim(trailing from null)\"}",
    statement:"trim(trailing from null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"trim null and missing propagation{sql:\"trim(both from null)\"}",
    statement:"trim(both from null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"trim null and missing propagation{sql:\"trim(leading from missing)\"}",
    statement:"trim(leading from missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"trim null and missing propagation{sql:\"trim(trailing from missing)\"}",
    statement:"trim(trailing from missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"trim null and missing propagation{sql:\"trim(both from missing)\"}",
    statement:"trim(both from missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"trim null and missing propagation{sql:\"trim(leading '' from null)\"}",
    statement:"trim(leading '' from null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"trim null and missing propagation{sql:\"trim(trailing '' from null)\"}",
    statement:"trim(trailing '' from null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"trim null and missing propagation{sql:\"trim(both '' from null)\"}",
    statement:"trim(both '' from null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"trim null and missing propagation{sql:\"trim(leading '' from missing)\"}",
    statement:"trim(leading '' from missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"trim null and missing propagation{sql:\"trim(trailing '' from missing)\"}",
    statement:"trim(trailing '' from missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"trim null and missing propagation{sql:\"trim(both '' from missing)\"}",
    statement:"trim(both '' from missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"trim null and missing propagation{sql:\"trim(leading null from '')\"}",
    statement:"trim(leading null from '')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"trim null and missing propagation{sql:\"trim(trailing null from '')\"}",
    statement:"trim(trailing null from '')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"trim null and missing propagation{sql:\"trim(both null from '')\"}",
    statement:"trim(both null from '')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"trim null and missing propagation{sql:\"trim(leading missing from '')\"}",
    statement:"trim(leading missing from '')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"trim null and missing propagation{sql:\"trim(trailing missing from '')\"}",
    statement:"trim(trailing missing from '')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"trim null and missing propagation{sql:\"trim(both missing from '')\"}",
    statement:"trim(both missing from '')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"trim null and missing propagation{sql:\"trim(leading null from missing)\"}",
    statement:"trim(leading null from missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"trim null and missing propagation{sql:\"trim(trailing null from missing)\"}",
    statement:"trim(trailing null from missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"trim null and missing propagation{sql:\"trim(both null from missing)\"}",
    statement:"trim(both null from missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"trim null and missing propagation{sql:\"trim(leading missing from null)\"}",
    statement:"trim(leading missing from null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"trim null and missing propagation{sql:\"trim(trailing missing from null)\"}",
    statement:"trim(trailing missing from null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"trim null and missing propagation{sql:\"trim(both missing from null)\"}",
    statement:"trim(both missing from null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"trim null and missing propagation{sql:\"trim(leading null from null)\"}",
    statement:"trim(leading null from null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"trim null and missing propagation{sql:\"trim(trailing null from null)\"}",
    statement:"trim(trailing null from null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"trim null and missing propagation{sql:\"trim(both null from null)\"}",
    statement:"trim(both null from null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"trim null and missing propagation{sql:\"trim(leading missing from missing)\"}",
    statement:"trim(leading missing from missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"trim null and missing propagation{sql:\"trim(trailing missing from missing)\"}",
    statement:"trim(trailing missing from missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"trim null and missing propagation{sql:\"trim(both missing from missing)\"}",
    statement:"trim(both missing from missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  }
]
substring::[
  {
    name:"substring valid cases 2 arguments with FROM syntax{target:\"123456789\",start:\"0\",result:\"123456789\"}",
    statement:"substring('123456789' FROM 0)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"123456789"
    }
  },
  {
    name:"substring valid cases 2 arguments with FROM syntax{target:\"123456789\",start:\"1\",result:\"123456789\"}",
    statement:"substring('123456789' FROM 1)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"123456789"
    }
  },
  {
    name:"substring valid cases 2 arguments with FROM syntax{target:\"123456789\",start:\"2\",result:\"23456789\"}",
    statement:"substring('123456789' FROM 2)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"23456789"
    }
  },
  {
    name:"substring valid cases 2 arguments with FROM syntax{target:\"123456789\",start:\"-4\",result:\"123456789\"}",
    statement:"substring('123456789' FROM -4)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"123456789"
    }
  },
  {
    name:"substring valid cases 2 arguments with FROM syntax{target:\"\",start:\"-1\",result:\"\"}",
    statement:"substring('' FROM -1)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:""
    }
  },
  {
    name:"substring valid cases 2 arguments with FROM syntax{target:\"\",start:\"0\",result:\"\"}",
    statement:"substring('' FROM 0)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:""
    }
  },
  {
    name:"substring valid cases 2 arguments with FROM syntax{target:\"\\U0001f601\\U0001f61e\\U0001f638\\U0001f638\",start:\"3\",result:\"\\U0001f638\\U0001f638\"}",
    statement:"substring('üòÅüòûüò∏üò∏' FROM 3)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"üò∏üò∏"
    }
  },
  {
    name:"substring valid cases 2 arguments with FROM syntax{target:\"\\u8a71\\u5bb6\\u8eab\\u5727\\u8cbb\\u8c37\\u6599\\u6751\\u80fd\\u8a08\\u7a0e\\u91d1\",start:\"6\",result:\"\\u8c37\\u6599\\u6751\\u80fd\\u8a08\\u7a0e\\u91d1\"}",
    statement:"substring('Ë©±ÂÆ∂Ë∫´ÂúßË≤ªË∞∑ÊñôÊùëËÉΩË®àÁ®éÈáë' FROM 6)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Ë∞∑ÊñôÊùëËÉΩË®àÁ®éÈáë"
    }
  },
  {
    name:"substring valid cases 2 arguments with FROM syntax{target:\"\\u0401\\u0402\\u0403\\u0404\\u0405\\u0406\\u0407\\u0408\\u0409\\u040a\\u040b\\u040c\\u040d\\u040e\\u040f\\u0410\\u0411\\u0412\\u0413\\u0414\\u0415\\u0416\\u0417\\u0418\\u0419\\u041a\\u041b\\u041c\\u041d\\u041e\\u041f\\u0420\\u0421\\u0422\\u0423\\u0424\\u0425\\u0426\\u0427\\u0428\\u0429\\u042a\\u042b\\u042c\\u042d\\u042e\\u042f\\u0430\\u0431\\u0432\\u0433\\u0434\\u0435\\u0436\\u0437\\u0438\\u0439\\u043a\\u043b\\u043c\\u043d\\u043e\\u043f\\u0440\\u0441\\u0442\\u0443\\u0444\\u0445\\u0446\\u0447\\u0448\\u0449\\u044a\\u044b\\u044c\\u044d\\u044e\\u044f\",start:\"40\",result:\"\\u0428\\u0429\\u042a\\u042b\\u042c\\u042d\\u042e\\u042f\\u0430\\u0431\\u0432\\u0433\\u0434\\u0435\\u0436\\u0437\\u0438\\u0439\\u043a\\u043b\\u043c\\u043d\\u043e\\u043f\\u0440\\u0441\\u0442\\u0443\\u0444\\u0445\\u0446\\u0447\\u0448\\u0449\\u044a\\u044b\\u044c\\u044d\\u044e\\u044f\"}",
    statement:"substring('–Å–Ç–É–Ñ–Ö–Ü–á–à–â–ä–ã–å–ç–é–è–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è' FROM 40)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è"
    }
  },
  {
    name:"substring valid cases 2 arguments with FROM syntax{target:\"( \\u0361\\xb0 \\u035c\\u0296 \\u0361\\xb0)\\u252c\\u2500\\u252c\\u30ce( \\xba _ \\xba\\u30ce)\",start:\"16\",result:\"( \\xba _ \\xba\\u30ce)\"}",
    statement:"substring('( Õ°¬∞ Õú ñ Õ°¬∞)‚î¨‚îÄ‚î¨„Éé( ¬∫ _ ¬∫„Éé)' FROM 16)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"( ¬∫ _ ¬∫„Éé)"
    }
  },
  {
    name:"substring valid cases 2 arguments with FROM syntax{target:\"\\U0001d42a\\U0001d42e\\U0001d422\\U0001d41c\\U0001d424 \\U0001d41b\\U0001d42b\\U0001d428\\U0001d430\\U0001d427 \\U0001d41f\\U0001d428\\U0001d431 \\U0001d423\\U0001d42e\\U0001d426\\U0001d429\\U0001d42c \\U0001d428\\U0001d42f\\U0001d41e\\U0001d42b\",start:\"17\",result:\"\\U0001d423\\U0001d42e\\U0001d426\\U0001d429\\U0001d42c \\U0001d428\\U0001d42f\\U0001d41e\\U0001d42b\"}",
    statement:"substring('ùê™ùêÆùê¢ùêúùê§ ùêõùê´ùê®ùê∞ùêß ùêüùê®ùê± ùê£ùêÆùê¶ùê©ùê¨ ùê®ùêØùêûùê´' FROM 17)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"ùê£ùêÆùê¶ùê©ùê¨ ùê®ùêØùêûùê´"
    }
  },
  {
    name:"substring valid cases 2 arguments with FROM syntax{target:\"\\U0001f469\\U0001f3fd\",start:\"2\",result:\"\\U0001f3fd\"}",
    statement:"substring('üë©üèΩ' FROM 2)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"üèΩ"
    }
  },
  {
    name:"substring valid cases 2 arguments{target:\"123456789\",start:\"0\",result:\"123456789\"}",
    statement:"substring('123456789', 0)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"123456789"
    }
  },
  {
    name:"substring valid cases 2 arguments{target:\"123456789\",start:\"1\",result:\"123456789\"}",
    statement:"substring('123456789', 1)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"123456789"
    }
  },
  {
    name:"substring valid cases 2 arguments{target:\"123456789\",start:\"2\",result:\"23456789\"}",
    statement:"substring('123456789', 2)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"23456789"
    }
  },
  {
    name:"substring valid cases 2 arguments{target:\"123456789\",start:\"-4\",result:\"123456789\"}",
    statement:"substring('123456789', -4)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"123456789"
    }
  },
  {
    name:"substring valid cases 2 arguments{target:\"\",start:\"-1\",result:\"\"}",
    statement:"substring('', -1)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:""
    }
  },
  {
    name:"substring valid cases 2 arguments{target:\"\",start:\"0\",result:\"\"}",
    statement:"substring('', 0)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:""
    }
  },
  {
    name:"substring valid cases 2 arguments{target:\"\\U0001f601\\U0001f61e\\U0001f638\\U0001f638\",start:\"3\",result:\"\\U0001f638\\U0001f638\"}",
    statement:"substring('üòÅüòûüò∏üò∏', 3)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"üò∏üò∏"
    }
  },
  {
    name:"substring valid cases 2 arguments{target:\"\\u8a71\\u5bb6\\u8eab\\u5727\\u8cbb\\u8c37\\u6599\\u6751\\u80fd\\u8a08\\u7a0e\\u91d1\",start:\"6\",result:\"\\u8c37\\u6599\\u6751\\u80fd\\u8a08\\u7a0e\\u91d1\"}",
    statement:"substring('Ë©±ÂÆ∂Ë∫´ÂúßË≤ªË∞∑ÊñôÊùëËÉΩË®àÁ®éÈáë', 6)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Ë∞∑ÊñôÊùëËÉΩË®àÁ®éÈáë"
    }
  },
  {
    name:"substring valid cases 2 arguments{target:\"\\u0401\\u0402\\u0403\\u0404\\u0405\\u0406\\u0407\\u0408\\u0409\\u040a\\u040b\\u040c\\u040d\\u040e\\u040f\\u0410\\u0411\\u0412\\u0413\\u0414\\u0415\\u0416\\u0417\\u0418\\u0419\\u041a\\u041b\\u041c\\u041d\\u041e\\u041f\\u0420\\u0421\\u0422\\u0423\\u0424\\u0425\\u0426\\u0427\\u0428\\u0429\\u042a\\u042b\\u042c\\u042d\\u042e\\u042f\\u0430\\u0431\\u0432\\u0433\\u0434\\u0435\\u0436\\u0437\\u0438\\u0439\\u043a\\u043b\\u043c\\u043d\\u043e\\u043f\\u0440\\u0441\\u0442\\u0443\\u0444\\u0445\\u0446\\u0447\\u0448\\u0449\\u044a\\u044b\\u044c\\u044d\\u044e\\u044f\",start:\"40\",result:\"\\u0428\\u0429\\u042a\\u042b\\u042c\\u042d\\u042e\\u042f\\u0430\\u0431\\u0432\\u0433\\u0434\\u0435\\u0436\\u0437\\u0438\\u0439\\u043a\\u043b\\u043c\\u043d\\u043e\\u043f\\u0440\\u0441\\u0442\\u0443\\u0444\\u0445\\u0446\\u0447\\u0448\\u0449\\u044a\\u044b\\u044c\\u044d\\u044e\\u044f\"}",
    statement:"substring('–Å–Ç–É–Ñ–Ö–Ü–á–à–â–ä–ã–å–ç–é–è–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è', 40)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è"
    }
  },
  {
    name:"substring valid cases 2 arguments{target:\"( \\u0361\\xb0 \\u035c\\u0296 \\u0361\\xb0)\\u252c\\u2500\\u252c\\u30ce( \\xba _ \\xba\\u30ce)\",start:\"16\",result:\"( \\xba _ \\xba\\u30ce)\"}",
    statement:"substring('( Õ°¬∞ Õú ñ Õ°¬∞)‚î¨‚îÄ‚î¨„Éé( ¬∫ _ ¬∫„Éé)', 16)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"( ¬∫ _ ¬∫„Éé)"
    }
  },
  {
    name:"substring valid cases 2 arguments{target:\"\\U0001d42a\\U0001d42e\\U0001d422\\U0001d41c\\U0001d424 \\U0001d41b\\U0001d42b\\U0001d428\\U0001d430\\U0001d427 \\U0001d41f\\U0001d428\\U0001d431 \\U0001d423\\U0001d42e\\U0001d426\\U0001d429\\U0001d42c \\U0001d428\\U0001d42f\\U0001d41e\\U0001d42b\",start:\"17\",result:\"\\U0001d423\\U0001d42e\\U0001d426\\U0001d429\\U0001d42c \\U0001d428\\U0001d42f\\U0001d41e\\U0001d42b\"}",
    statement:"substring('ùê™ùêÆùê¢ùêúùê§ ùêõùê´ùê®ùê∞ùêß ùêüùê®ùê± ùê£ùêÆùê¶ùê©ùê¨ ùê®ùêØùêûùê´', 17)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"ùê£ùêÆùê¶ùê©ùê¨ ùê®ùêØùêûùê´"
    }
  },
  {
    name:"substring valid cases 2 arguments{target:\"\\U0001f469\\U0001f3fd\",start:\"2\",result:\"\\U0001f3fd\"}",
    statement:"substring('üë©üèΩ', 2)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"üèΩ"
    }
  },
  {
    name:"substring valid cases 3 arguments using FROM syntax{target:\"123456789\",start:\"0\",quantity:\"999\",result:\"123456789\"}",
    statement:"substring('123456789' FROM 0 FOR 999)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"123456789"
    }
  },
  {
    name:"substring valid cases 3 arguments using FROM syntax{target:\"123456789\",start:\"0\",quantity:\"2\",result:\"1\"}",
    statement:"substring('123456789' FROM 0 FOR 2)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1"
    }
  },
  {
    name:"substring valid cases 3 arguments using FROM syntax{target:\"123456789\",start:\"1\",quantity:\"999\",result:\"123456789\"}",
    statement:"substring('123456789' FROM 1 FOR 999)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"123456789"
    }
  },
  {
    name:"substring valid cases 3 arguments using FROM syntax{target:\"123456789\",start:\"1\",quantity:\"2\",result:\"12\"}",
    statement:"substring('123456789' FROM 1 FOR 2)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"12"
    }
  },
  {
    name:"substring valid cases 3 arguments using FROM syntax{target:\"123456789\",start:\"2\",quantity:\"999\",result:\"23456789\"}",
    statement:"substring('123456789' FROM 2 FOR 999)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"23456789"
    }
  },
  {
    name:"substring valid cases 3 arguments using FROM syntax{target:\"123456789\",start:\"2\",quantity:\"3\",result:\"234\"}",
    statement:"substring('123456789' FROM 2 FOR 3)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"234"
    }
  },
  {
    name:"substring valid cases 3 arguments using FROM syntax{target:\"123456789\",start:\"-4\",quantity:\"999\",result:\"123456789\"}",
    statement:"substring('123456789' FROM -4 FOR 999)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"123456789"
    }
  },
  {
    name:"substring valid cases 3 arguments using FROM syntax{target:\"123456789\",start:\"-4\",quantity:\"6\",result:\"1\"}",
    statement:"substring('123456789' FROM -4 FOR 6)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1"
    }
  },
  {
    name:"substring valid cases 3 arguments using FROM syntax{target:\"\",start:\"-1\",quantity:\"999\",result:\"\"}",
    statement:"substring('' FROM -1 FOR 999)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:""
    }
  },
  {
    name:"substring valid cases 3 arguments using FROM syntax{target:\"\",start:\"0\",quantity:\"999\",result:\"\"}",
    statement:"substring('' FROM 0 FOR 999)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:""
    }
  },
  {
    name:"substring valid cases 3 arguments using FROM syntax{target:\"1\",start:\"-4\",quantity:\"1\",result:\"\"}",
    statement:"substring('1' FROM -4 FOR 1)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:""
    }
  },
  {
    name:"substring valid cases 3 arguments using FROM syntax{target:\"1\",start:\"-4\",quantity:\"0\",result:\"\"}",
    statement:"substring('1' FROM -4 FOR 0)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:""
    }
  },
  {
    name:"substring valid cases 3 arguments using FROM syntax{target:\"1\",start:\"1\",quantity:\"0\",result:\"\"}",
    statement:"substring('1' FROM 1 FOR 0)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:""
    }
  },
  {
    name:"substring valid cases 3 arguments using FROM syntax{target:\"1\",start:\"0\",quantity:\"0\",result:\"\"}",
    statement:"substring('1' FROM 0 FOR 0)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:""
    }
  },
  {
    name:"substring valid cases 3 arguments using FROM syntax{target:\"\\U0001f601\\U0001f61e\\U0001f638\\U0001f638\",start:\"3\",quantity:\"999\",result:\"\\U0001f638\\U0001f638\"}",
    statement:"substring('üòÅüòûüò∏üò∏' FROM 3 FOR 999)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"üò∏üò∏"
    }
  },
  {
    name:"substring valid cases 3 arguments using FROM syntax{target:\"\\U0001f601\\U0001f61e\\U0001f638\\U0001f638\",start:\"3\",quantity:\"1\",result:\"\\U0001f638\"}",
    statement:"substring('üòÅüòûüò∏üò∏' FROM 3 FOR 1)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"üò∏"
    }
  },
  {
    name:"substring valid cases 3 arguments using FROM syntax{target:\"\\u8a71\\u5bb6\\u8eab\\u5727\\u8cbb\\u8c37\\u6599\\u6751\\u80fd\\u8a08\\u7a0e\\u91d1\",start:\"6\",quantity:\"999\",result:\"\\u8c37\\u6599\\u6751\\u80fd\\u8a08\\u7a0e\\u91d1\"}",
    statement:"substring('Ë©±ÂÆ∂Ë∫´ÂúßË≤ªË∞∑ÊñôÊùëËÉΩË®àÁ®éÈáë' FROM 6 FOR 999)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Ë∞∑ÊñôÊùëËÉΩË®àÁ®éÈáë"
    }
  },
  {
    name:"substring valid cases 3 arguments using FROM syntax{target:\"\\u8a71\\u5bb6\\u8eab\\u5727\\u8cbb\\u8c37\\u6599\\u6751\\u80fd\\u8a08\\u7a0e\\u91d1\",start:\"6\",quantity:\"2\",result:\"\\u8c37\\u6599\"}",
    statement:"substring('Ë©±ÂÆ∂Ë∫´ÂúßË≤ªË∞∑ÊñôÊùëËÉΩË®àÁ®éÈáë' FROM 6 FOR 2)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Ë∞∑Êñô"
    }
  },
  {
    name:"substring valid cases 3 arguments using FROM syntax{target:\"\\u0401\\u0402\\u0403\\u0404\\u0405\\u0406\\u0407\\u0408\\u0409\\u040a\\u040b\\u040c\\u040d\\u040e\\u040f\\u0410\\u0411\\u0412\\u0413\\u0414\\u0415\\u0416\\u0417\\u0418\\u0419\\u041a\\u041b\\u041c\\u041d\\u041e\\u041f\\u0420\\u0421\\u0422\\u0423\\u0424\\u0425\\u0426\\u0427\\u0428\\u0429\\u042a\\u042b\\u042c\\u042d\\u042e\\u042f\\u0430\\u0431\\u0432\\u0433\\u0434\\u0435\\u0436\\u0437\\u0438\\u0439\\u043a\\u043b\\u043c\\u043d\\u043e\\u043f\\u0440\\u0441\\u0442\\u0443\\u0444\\u0445\\u0446\\u0447\\u0448\\u0449\\u044a\\u044b\\u044c\\u044d\\u044e\\u044f\",start:\"40\",quantity:\"999\",result:\"\\u0428\\u0429\\u042a\\u042b\\u042c\\u042d\\u042e\\u042f\\u0430\\u0431\\u0432\\u0433\\u0434\\u0435\\u0436\\u0437\\u0438\\u0439\\u043a\\u043b\\u043c\\u043d\\u043e\\u043f\\u0440\\u0441\\u0442\\u0443\\u0444\\u0445\\u0446\\u0447\\u0448\\u0449\\u044a\\u044b\\u044c\\u044d\\u044e\\u044f\"}",
    statement:"substring('–Å–Ç–É–Ñ–Ö–Ü–á–à–â–ä–ã–å–ç–é–è–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è' FROM 40 FOR 999)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è"
    }
  },
  {
    name:"substring valid cases 3 arguments using FROM syntax{target:\"\\u0401\\u0402\\u0403\\u0404\\u0405\\u0406\\u0407\\u0408\\u0409\\u040a\\u040b\\u040c\\u040d\\u040e\\u040f\\u0410\\u0411\\u0412\\u0413\\u0414\\u0415\\u0416\\u0417\\u0418\\u0419\\u041a\\u041b\\u041c\\u041d\\u041e\\u041f\\u0420\\u0421\\u0422\\u0423\\u0424\\u0425\\u0426\\u0427\\u0428\\u0429\\u042a\\u042b\\u042c\\u042d\\u042e\\u042f\\u0430\\u0431\\u0432\\u0433\\u0434\\u0435\\u0436\\u0437\\u0438\\u0439\\u043a\\u043b\\u043c\\u043d\\u043e\\u043f\\u0440\\u0441\\u0442\\u0443\\u0444\\u0445\\u0446\\u0447\\u0448\\u0449\\u044a\\u044b\\u044c\\u044d\\u044e\\u044f\",start:\"40\",quantity:\"4\",result:\"\\u0428\\u0429\\u042a\\u042b\"}",
    statement:"substring('–Å–Ç–É–Ñ–Ö–Ü–á–à–â–ä–ã–å–ç–é–è–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è' FROM 40 FOR 4)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"–®–©–™–´"
    }
  },
  {
    name:"substring valid cases 3 arguments using FROM syntax{target:\"( \\u0361\\xb0 \\u035c\\u0296 \\u0361\\xb0)\\u252c\\u2500\\u252c\\u30ce( \\xba _ \\xba\\u30ce)\",start:\"16\",quantity:\"999\",result:\"( \\xba _ \\xba\\u30ce)\"}",
    statement:"substring('( Õ°¬∞ Õú ñ Õ°¬∞)‚î¨‚îÄ‚î¨„Éé( ¬∫ _ ¬∫„Éé)' FROM 16 FOR 999)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"( ¬∫ _ ¬∫„Éé)"
    }
  },
  {
    name:"substring valid cases 3 arguments using FROM syntax{target:\"( \\u0361\\xb0 \\u035c\\u0296 \\u0361\\xb0)\\u252c\\u2500\\u252c\\u30ce( \\xba _ \\xba\\u30ce)\",start:\"18\",quantity:\"5\",result:\"\\xba _ \\xba\"}",
    statement:"substring('( Õ°¬∞ Õú ñ Õ°¬∞)‚î¨‚îÄ‚î¨„Éé( ¬∫ _ ¬∫„Éé)' FROM 18 FOR 5)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"¬∫ _ ¬∫"
    }
  },
  {
    name:"substring valid cases 3 arguments using FROM syntax{target:\"\\U0001d42a\\U0001d42e\\U0001d422\\U0001d41c\\U0001d424 \\U0001d41b\\U0001d42b\\U0001d428\\U0001d430\\U0001d427 \\U0001d41f\\U0001d428\\U0001d431 \\U0001d423\\U0001d42e\\U0001d426\\U0001d429\\U0001d42c \\U0001d428\\U0001d42f\\U0001d41e\\U0001d42b\",start:\"17\",quantity:\"999\",result:\"\\U0001d423\\U0001d42e\\U0001d426\\U0001d429\\U0001d42c \\U0001d428\\U0001d42f\\U0001d41e\\U0001d42b\"}",
    statement:"substring('ùê™ùêÆùê¢ùêúùê§ ùêõùê´ùê®ùê∞ùêß ùêüùê®ùê± ùê£ùêÆùê¶ùê©ùê¨ ùê®ùêØùêûùê´' FROM 17 FOR 999)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"ùê£ùêÆùê¶ùê©ùê¨ ùê®ùêØùêûùê´"
    }
  },
  {
    name:"substring valid cases 3 arguments using FROM syntax{target:\"\\U0001d42a\\U0001d42e\\U0001d422\\U0001d41c\\U0001d424 \\U0001d41b\\U0001d42b\\U0001d428\\U0001d430\\U0001d427 \\U0001d41f\\U0001d428\\U0001d431 \\U0001d423\\U0001d42e\\U0001d426\\U0001d429\\U0001d42c \\U0001d428\\U0001d42f\\U0001d41e\\U0001d42b\",start:\"17\",quantity:\"5\",result:\"\\U0001d423\\U0001d42e\\U0001d426\\U0001d429\\U0001d42c\"}",
    statement:"substring('ùê™ùêÆùê¢ùêúùê§ ùêõùê´ùê®ùê∞ùêß ùêüùê®ùê± ùê£ùêÆùê¶ùê©ùê¨ ùê®ùêØùêûùê´' FROM 17 FOR 5)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"ùê£ùêÆùê¶ùê©ùê¨"
    }
  },
  {
    name:"substring valid cases 3 arguments using FROM syntax{target:\"\\U0001f469\\U0001f3fd\",start:\"1\",quantity:\"1\",result:\"\\U0001f469\"}",
    statement:"substring('üë©üèΩ' FROM 1 FOR 1)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"üë©"
    }
  },
  {
    name:"substring valid cases 3 arguments{target:\"123456789\",start:\"0\",quantity:\"999\",result:\"123456789\"}",
    statement:"substring('123456789', 0, 999)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"123456789"
    }
  },
  {
    name:"substring valid cases 3 arguments{target:\"123456789\",start:\"0\",quantity:\"2\",result:\"1\"}",
    statement:"substring('123456789', 0, 2)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1"
    }
  },
  {
    name:"substring valid cases 3 arguments{target:\"123456789\",start:\"1\",quantity:\"999\",result:\"123456789\"}",
    statement:"substring('123456789', 1, 999)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"123456789"
    }
  },
  {
    name:"substring valid cases 3 arguments{target:\"123456789\",start:\"1\",quantity:\"2\",result:\"12\"}",
    statement:"substring('123456789', 1, 2)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"12"
    }
  },
  {
    name:"substring valid cases 3 arguments{target:\"123456789\",start:\"2\",quantity:\"999\",result:\"23456789\"}",
    statement:"substring('123456789', 2, 999)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"23456789"
    }
  },
  {
    name:"substring valid cases 3 arguments{target:\"123456789\",start:\"2\",quantity:\"3\",result:\"234\"}",
    statement:"substring('123456789', 2, 3)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"234"
    }
  },
  {
    name:"substring valid cases 3 arguments{target:\"123456789\",start:\"-4\",quantity:\"999\",result:\"123456789\"}",
    statement:"substring('123456789', -4, 999)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"123456789"
    }
  },
  {
    name:"substring valid cases 3 arguments{target:\"123456789\",start:\"-4\",quantity:\"6\",result:\"1\"}",
    statement:"substring('123456789', -4, 6)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1"
    }
  },
  {
    name:"substring valid cases 3 arguments{target:\"\",start:\"-1\",quantity:\"999\",result:\"\"}",
    statement:"substring('', -1, 999)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:""
    }
  },
  {
    name:"substring valid cases 3 arguments{target:\"\",start:\"0\",quantity:\"999\",result:\"\"}",
    statement:"substring('', 0, 999)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:""
    }
  },
  {
    name:"substring valid cases 3 arguments{target:\"1\",start:\"-4\",quantity:\"1\",result:\"\"}",
    statement:"substring('1', -4, 1)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:""
    }
  },
  {
    name:"substring valid cases 3 arguments{target:\"1\",start:\"-4\",quantity:\"0\",result:\"\"}",
    statement:"substring('1', -4, 0)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:""
    }
  },
  {
    name:"substring valid cases 3 arguments{target:\"1\",start:\"1\",quantity:\"0\",result:\"\"}",
    statement:"substring('1', 1, 0)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:""
    }
  },
  {
    name:"substring valid cases 3 arguments{target:\"1\",start:\"0\",quantity:\"0\",result:\"\"}",
    statement:"substring('1', 0, 0)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:""
    }
  },
  {
    name:"substring valid cases 3 arguments{target:\"\\U0001f601\\U0001f61e\\U0001f638\\U0001f638\",start:\"3\",quantity:\"999\",result:\"\\U0001f638\\U0001f638\"}",
    statement:"substring('üòÅüòûüò∏üò∏', 3, 999)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"üò∏üò∏"
    }
  },
  {
    name:"substring valid cases 3 arguments{target:\"\\U0001f601\\U0001f61e\\U0001f638\\U0001f638\",start:\"3\",quantity:\"1\",result:\"\\U0001f638\"}",
    statement:"substring('üòÅüòûüò∏üò∏', 3, 1)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"üò∏"
    }
  },
  {
    name:"substring valid cases 3 arguments{target:\"\\u8a71\\u5bb6\\u8eab\\u5727\\u8cbb\\u8c37\\u6599\\u6751\\u80fd\\u8a08\\u7a0e\\u91d1\",start:\"6\",quantity:\"999\",result:\"\\u8c37\\u6599\\u6751\\u80fd\\u8a08\\u7a0e\\u91d1\"}",
    statement:"substring('Ë©±ÂÆ∂Ë∫´ÂúßË≤ªË∞∑ÊñôÊùëËÉΩË®àÁ®éÈáë', 6, 999)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Ë∞∑ÊñôÊùëËÉΩË®àÁ®éÈáë"
    }
  },
  {
    name:"substring valid cases 3 arguments{target:\"\\u8a71\\u5bb6\\u8eab\\u5727\\u8cbb\\u8c37\\u6599\\u6751\\u80fd\\u8a08\\u7a0e\\u91d1\",start:\"6\",quantity:\"2\",result:\"\\u8c37\\u6599\"}",
    statement:"substring('Ë©±ÂÆ∂Ë∫´ÂúßË≤ªË∞∑ÊñôÊùëËÉΩË®àÁ®éÈáë', 6, 2)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Ë∞∑Êñô"
    }
  },
  {
    name:"substring valid cases 3 arguments{target:\"\\u0401\\u0402\\u0403\\u0404\\u0405\\u0406\\u0407\\u0408\\u0409\\u040a\\u040b\\u040c\\u040d\\u040e\\u040f\\u0410\\u0411\\u0412\\u0413\\u0414\\u0415\\u0416\\u0417\\u0418\\u0419\\u041a\\u041b\\u041c\\u041d\\u041e\\u041f\\u0420\\u0421\\u0422\\u0423\\u0424\\u0425\\u0426\\u0427\\u0428\\u0429\\u042a\\u042b\\u042c\\u042d\\u042e\\u042f\\u0430\\u0431\\u0432\\u0433\\u0434\\u0435\\u0436\\u0437\\u0438\\u0439\\u043a\\u043b\\u043c\\u043d\\u043e\\u043f\\u0440\\u0441\\u0442\\u0443\\u0444\\u0445\\u0446\\u0447\\u0448\\u0449\\u044a\\u044b\\u044c\\u044d\\u044e\\u044f\",start:\"40\",quantity:\"999\",result:\"\\u0428\\u0429\\u042a\\u042b\\u042c\\u042d\\u042e\\u042f\\u0430\\u0431\\u0432\\u0433\\u0434\\u0435\\u0436\\u0437\\u0438\\u0439\\u043a\\u043b\\u043c\\u043d\\u043e\\u043f\\u0440\\u0441\\u0442\\u0443\\u0444\\u0445\\u0446\\u0447\\u0448\\u0449\\u044a\\u044b\\u044c\\u044d\\u044e\\u044f\"}",
    statement:"substring('–Å–Ç–É–Ñ–Ö–Ü–á–à–â–ä–ã–å–ç–é–è–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è', 40, 999)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è"
    }
  },
  {
    name:"substring valid cases 3 arguments{target:\"\\u0401\\u0402\\u0403\\u0404\\u0405\\u0406\\u0407\\u0408\\u0409\\u040a\\u040b\\u040c\\u040d\\u040e\\u040f\\u0410\\u0411\\u0412\\u0413\\u0414\\u0415\\u0416\\u0417\\u0418\\u0419\\u041a\\u041b\\u041c\\u041d\\u041e\\u041f\\u0420\\u0421\\u0422\\u0423\\u0424\\u0425\\u0426\\u0427\\u0428\\u0429\\u042a\\u042b\\u042c\\u042d\\u042e\\u042f\\u0430\\u0431\\u0432\\u0433\\u0434\\u0435\\u0436\\u0437\\u0438\\u0439\\u043a\\u043b\\u043c\\u043d\\u043e\\u043f\\u0440\\u0441\\u0442\\u0443\\u0444\\u0445\\u0446\\u0447\\u0448\\u0449\\u044a\\u044b\\u044c\\u044d\\u044e\\u044f\",start:\"40\",quantity:\"4\",result:\"\\u0428\\u0429\\u042a\\u042b\"}",
    statement:"substring('–Å–Ç–É–Ñ–Ö–Ü–á–à–â–ä–ã–å–ç–é–è–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è', 40, 4)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"–®–©–™–´"
    }
  },
  {
    name:"substring valid cases 3 arguments{target:\"( \\u0361\\xb0 \\u035c\\u0296 \\u0361\\xb0)\\u252c\\u2500\\u252c\\u30ce( \\xba _ \\xba\\u30ce)\",start:\"16\",quantity:\"999\",result:\"( \\xba _ \\xba\\u30ce)\"}",
    statement:"substring('( Õ°¬∞ Õú ñ Õ°¬∞)‚î¨‚îÄ‚î¨„Éé( ¬∫ _ ¬∫„Éé)', 16, 999)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"( ¬∫ _ ¬∫„Éé)"
    }
  },
  {
    name:"substring valid cases 3 arguments{target:\"( \\u0361\\xb0 \\u035c\\u0296 \\u0361\\xb0)\\u252c\\u2500\\u252c\\u30ce( \\xba _ \\xba\\u30ce)\",start:\"18\",quantity:\"5\",result:\"\\xba _ \\xba\"}",
    statement:"substring('( Õ°¬∞ Õú ñ Õ°¬∞)‚î¨‚îÄ‚î¨„Éé( ¬∫ _ ¬∫„Éé)', 18, 5)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"¬∫ _ ¬∫"
    }
  },
  {
    name:"substring valid cases 3 arguments{target:\"\\U0001d42a\\U0001d42e\\U0001d422\\U0001d41c\\U0001d424 \\U0001d41b\\U0001d42b\\U0001d428\\U0001d430\\U0001d427 \\U0001d41f\\U0001d428\\U0001d431 \\U0001d423\\U0001d42e\\U0001d426\\U0001d429\\U0001d42c \\U0001d428\\U0001d42f\\U0001d41e\\U0001d42b\",start:\"17\",quantity:\"999\",result:\"\\U0001d423\\U0001d42e\\U0001d426\\U0001d429\\U0001d42c \\U0001d428\\U0001d42f\\U0001d41e\\U0001d42b\"}",
    statement:"substring('ùê™ùêÆùê¢ùêúùê§ ùêõùê´ùê®ùê∞ùêß ùêüùê®ùê± ùê£ùêÆùê¶ùê©ùê¨ ùê®ùêØùêûùê´', 17, 999)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"ùê£ùêÆùê¶ùê©ùê¨ ùê®ùêØùêûùê´"
    }
  },
  {
    name:"substring valid cases 3 arguments{target:\"\\U0001d42a\\U0001d42e\\U0001d422\\U0001d41c\\U0001d424 \\U0001d41b\\U0001d42b\\U0001d428\\U0001d430\\U0001d427 \\U0001d41f\\U0001d428\\U0001d431 \\U0001d423\\U0001d42e\\U0001d426\\U0001d429\\U0001d42c \\U0001d428\\U0001d42f\\U0001d41e\\U0001d42b\",start:\"17\",quantity:\"5\",result:\"\\U0001d423\\U0001d42e\\U0001d426\\U0001d429\\U0001d42c\"}",
    statement:"substring('ùê™ùêÆùê¢ùêúùê§ ùêõùê´ùê®ùê∞ùêß ùêüùê®ùê± ùê£ùêÆùê¶ùê©ùê¨ ùê®ùêØùêûùê´', 17, 5)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"ùê£ùêÆùê¶ùê©ùê¨"
    }
  },
  {
    name:"substring valid cases 3 arguments{target:\"\\U0001f469\\U0001f3fd\",start:\"1\",quantity:\"1\",result:\"\\U0001f469\"}",
    statement:"substring('üë©üèΩ', 1, 1)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"üë©"
    }
  },
  {
    name:"substring null and missing propagation 2 arguments{target:\"null\",start_pos:\"1\"}",
    statement:"substring(null, 1)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"substring null and missing propagation 2 arguments{target:\"''\",start_pos:\"null\"}",
    statement:"substring('', null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"substring null and missing propagation 2 arguments{target:\"null\",start_pos:\"null\"}",
    statement:"substring(null, null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"substring null and missing propagation 2 arguments{target:\"missing\",start_pos:\"1\"}",
    statement:"substring(missing, 1)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"substring null and missing propagation 2 arguments{target:\"''\",start_pos:\"missing\"}",
    statement:"substring('', missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"substring null and missing propagation 2 arguments{target:\"missing\",start_pos:\"missing\"}",
    statement:"substring(missing, missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"substring null and missing propagation 2 arguments{target:\"null\",start_pos:\"missing\"}",
    statement:"substring(null, missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"substring null and missing propagation 2 arguments{target:\"missing\",start_pos:\"null\"}",
    statement:"substring(missing, null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"substring null and missing propagation 3 arguments{target:\"null\",start_pos:\"1\",quantity:\"1\"}",
    statement:"substring(null, 1, 1)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"substring null and missing propagation 3 arguments{target:\"null\",start_pos:\"1\",quantity:\"null\"}",
    statement:"substring(null, 1, null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"substring null and missing propagation 3 arguments{target:\"null\",start_pos:\"1\",quantity:\"missing\"}",
    statement:"substring(null, 1, missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"substring null and missing propagation 3 arguments{target:\"null\",start_pos:\"null\",quantity:\"1\"}",
    statement:"substring(null, null, 1)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"substring null and missing propagation 3 arguments{target:\"null\",start_pos:\"null\",quantity:\"null\"}",
    statement:"substring(null, null, null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"substring null and missing propagation 3 arguments{target:\"null\",start_pos:\"null\",quantity:\"missing\"}",
    statement:"substring(null, null, missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"substring null and missing propagation 3 arguments{target:\"null\",start_pos:\"missing\",quantity:\"1\"}",
    statement:"substring(null, missing, 1)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"substring null and missing propagation 3 arguments{target:\"null\",start_pos:\"missing\",quantity:\"null\"}",
    statement:"substring(null, missing, null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"substring null and missing propagation 3 arguments{target:\"null\",start_pos:\"missing\",quantity:\"missing\"}",
    statement:"substring(null, missing, missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"substring null and missing propagation 3 arguments{target:\"missing\",start_pos:\"1\",quantity:\"1\"}",
    statement:"substring(missing, 1, 1)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"substring null and missing propagation 3 arguments{target:\"missing\",start_pos:\"1\",quantity:\"null\"}",
    statement:"substring(missing, 1, null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"substring null and missing propagation 3 arguments{target:\"missing\",start_pos:\"1\",quantity:\"missing\"}",
    statement:"substring(missing, 1, missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"substring null and missing propagation 3 arguments{target:\"missing\",start_pos:\"null\",quantity:\"1\"}",
    statement:"substring(missing, null, 1)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"substring null and missing propagation 3 arguments{target:\"missing\",start_pos:\"null\",quantity:\"null\"}",
    statement:"substring(missing, null, null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"substring null and missing propagation 3 arguments{target:\"missing\",start_pos:\"null\",quantity:\"missing\"}",
    statement:"substring(missing, null, missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"substring null and missing propagation 3 arguments{target:\"missing\",start_pos:\"missing\",quantity:\"1\"}",
    statement:"substring(missing, missing, 1)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"substring null and missing propagation 3 arguments{target:\"missing\",start_pos:\"missing\",quantity:\"null\"}",
    statement:"substring(missing, missing, null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"substring null and missing propagation 3 arguments{target:\"missing\",start_pos:\"missing\",quantity:\"missing\"}",
    statement:"substring(missing, missing, missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"substring null and missing propagation 3 arguments{target:\"''\",start_pos:\"1\",quantity:\"null\"}",
    statement:"substring('', 1, null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"substring null and missing propagation 3 arguments{target:\"''\",start_pos:\"1\",quantity:\"missing\"}",
    statement:"substring('', 1, missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"substring null and missing propagation 3 arguments{target:\"''\",start_pos:\"null\",quantity:\"1\"}",
    statement:"substring('', null, 1)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"substring null and missing propagation 3 arguments{target:\"''\",start_pos:\"null\",quantity:\"null\"}",
    statement:"substring('', null, null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"substring null and missing propagation 3 arguments{target:\"''\",start_pos:\"null\",quantity:\"missing\"}",
    statement:"substring('', null, missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"substring null and missing propagation 3 arguments{target:\"''\",start_pos:\"missing\",quantity:\"1\"}",
    statement:"substring('', missing, 1)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"substring null and missing propagation 3 arguments{target:\"''\",start_pos:\"missing\",quantity:\"null\"}",
    statement:"substring('', missing, null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"substring null and missing propagation 3 arguments{target:\"''\",start_pos:\"missing\",quantity:\"missing\"}",
    statement:"substring('', missing, missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"substring wrong type of arguments{sql:\"substring('', `{}`)\"}",
    statement:"substring('', `{}`)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"substring wrong type of arguments{sql:\"substring(1, 1)\"}",
    statement:"substring(1, 1)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"substring wrong type of arguments{sql:\"substring(1, 1, 1)\"}",
    statement:"substring(1, 1, 1)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"substring wrong type of arguments{sql:\"substring('', [], 1)\"}",
    statement:"substring('', [], 1)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"substring wrong type of arguments{sql:\"substring('', 1.1, 1)\"}",
    statement:"substring('', 1.1, 1)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"substring wrong type of arguments{sql:\"substring('', 1e1, 1)\"}",
    statement:"substring('', 1e1, 1)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"substring wrong type of arguments{sql:\"substring('', 1, 1.1)\"}",
    statement:"substring('', 1, 1.1)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"substring invalid quantity",
    statement:"substring('1', 4, -11)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  }
]
nullif::[
  {
    name:"nullif valid cases{first:\"1\",second:\"1\",result:null}",
    statement:"nullif(1, 1)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"nullif valid cases{first:\"1.0\",second:\"1\",result:null}",
    statement:"nullif(1.0, 1)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"nullif valid cases{first:\"1\",second:\"2\",result:1}",
    statement:"nullif(1, 2)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"nullif valid cases{first:\"2\",second:\"'2'\",result:2}",
    statement:"nullif(2, '2')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"nullif valid cases{first:\"{}\",second:\"{}\",result:null}",
    statement:"nullif({}, {})",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"nullif valid cases{first:\"[]\",second:\"[]\",result:null}",
    statement:"nullif([], [])",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"nullif valid cases{first:\"{}\",second:\"[]\",result:{}}",
    statement:"nullif({}, [])",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
      }
    }
  },
  {
    name:"nullif valid cases{first:\"1\",second:\"null\",result:1}",
    statement:"nullif(1, null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"nullif valid cases{first:\"null\",second:\"1\",result:null}",
    statement:"nullif(null, 1)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"nullif valid cases{first:\"null\",second:\"null\",result:null}",
    statement:"nullif(null, null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"nullif valid cases{first:\"1\",second:\"missing\",result:1}",
    statement:"nullif(1, missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"nullif valid cases{first:\"missing\",second:\"1\",result:missing::null}",
    statement:"nullif(missing, 1)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"nullif valid cases{first:\"missing\",second:\"missing\",result:null}",
    statement:"nullif(missing, missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
]
upper::[
  {
    name:"upper valid cases{in:\" !\\\"#%&()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\",result:\" !\\\"#%&()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`ABCDEFGHIJKLMNOPQRSTUVWXYZ{|}~\"}",
    statement:"upper(' !\"#$%&()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:" !\"#$%&()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`ABCDEFGHIJKLMNOPQRSTUVWXYZ{|}~"
    }
  },
  {
    name:"upper valid cases{in:\"\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff\",result:\"\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\u039c\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xf7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\u0178\"}",
    statement:"upper('¬°¬¢¬£¬§¬•¬¶¬ß¬®¬©¬™¬´¬¨¬≠¬Æ¬Ø¬∞¬±¬≤¬≥¬¥¬µ¬∂¬∑¬∏¬π¬∫¬ª¬º¬Ω¬æ¬ø√Ä√Å√Ç√É√Ñ√Ö√Ü√á√à√â√ä√ã√å√ç√é√è√ê√ë√í√ì√î√ï√ñ√ó√ò√ô√ö√õ√ú√ù√û√†√°√¢√£√§√•√¶√ß√®√©√™√´√¨√≠√Æ√Ø√∞√±√≤√≥√¥√µ√∂√∑√∏√π√∫√ª√º√Ω√æ√ø')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"¬°¬¢¬£¬§¬•¬¶¬ß¬®¬©¬™¬´¬¨¬≠¬Æ¬Ø¬∞¬±¬≤¬≥¬¥Œú¬∂¬∑¬∏¬π¬∫¬ª¬º¬Ω¬æ¬ø√Ä√Å√Ç√É√Ñ√Ö√Ü√á√à√â√ä√ã√å√ç√é√è√ê√ë√í√ì√î√ï√ñ√ó√ò√ô√ö√õ√ú√ù√û√Ä√Å√Ç√É√Ñ√Ö√Ü√á√à√â√ä√ã√å√ç√é√è√ê√ë√í√ì√î√ï√ñ√∑√ò√ô√ö√õ√ú√ù√û≈∏"
    }
  },
  {
    name:"upper valid cases{in:\"\\u0100\\u0101\\u0102\\u0103\\u0104\\u0105\\u0106\\u0107\\u0108\\u0109\\u010a\\u010b\\u010c\\u010d\\u010e\\u010f\\u0110\\u0111\\u0112\\u0113\\u0114\\u0115\\u0116\\u0117\\u0118\\u0119\\u011a\\u011b\\u011c\\u011d\\u011e\\u011f\\u0120\\u0121\\u0122\\u0123\\u0124\\u0125\\u0126\\u0127\\u0128\\u0129\\u012a\\u012b\\u012c\\u012d\\u012e\\u012f\\u0131\\u0132\\u0133\\u0134\\u0135\\u0136\\u0137\\u0138\\u0139\\u013a\\u013b\\u013c\\u013d\\u013e\\u013f\\u0140\\u0141\\u0142\\u0143\\u0144\\u0145\\u0146\\u0147\\u0148\\u014a\\u014b\\u014c\\u014d\\u014e\\u014f\\u0150\\u0151\\u0152\\u0153\\u0154\\u0155\\u0156\\u0157\\u0158\\u0159\\u015a\\u015b\\u015c\\u015d\\u015e\\u015f\\u0160\\u0161\\u0162\\u0163\\u0164\\u0165\\u0166\\u0167\\u0168\\u0169\\u016a\\u016b\\u016c\\u016d\\u016e\\u016f\\u0170\\u0171\\u0172\\u0173\\u0174\\u0175\\u0176\\u0177\\u0178\\u0179\\u017a\\u017b\\u017c\\u017d\\u017e\",result:\"\\u0100\\u0100\\u0102\\u0102\\u0104\\u0104\\u0106\\u0106\\u0108\\u0108\\u010a\\u010a\\u010c\\u010c\\u010e\\u010e\\u0110\\u0110\\u0112\\u0112\\u0114\\u0114\\u0116\\u0116\\u0118\\u0118\\u011a\\u011a\\u011c\\u011c\\u011e\\u011e\\u0120\\u0120\\u0122\\u0122\\u0124\\u0124\\u0126\\u0126\\u0128\\u0128\\u012a\\u012a\\u012c\\u012c\\u012e\\u012eI\\u0132\\u0132\\u0134\\u0134\\u0136\\u0136\\u0138\\u0139\\u0139\\u013b\\u013b\\u013d\\u013d\\u013f\\u013f\\u0141\\u0141\\u0143\\u0143\\u0145\\u0145\\u0147\\u0147\\u014a\\u014a\\u014c\\u014c\\u014e\\u014e\\u0150\\u0150\\u0152\\u0152\\u0154\\u0154\\u0156\\u0156\\u0158\\u0158\\u015a\\u015a\\u015c\\u015c\\u015e\\u015e\\u0160\\u0160\\u0162\\u0162\\u0164\\u0164\\u0166\\u0166\\u0168\\u0168\\u016a\\u016a\\u016c\\u016c\\u016e\\u016e\\u0170\\u0170\\u0172\\u0172\\u0174\\u0174\\u0176\\u0176\\u0178\\u0179\\u0179\\u017b\\u017b\\u017d\\u017d\"}",
    statement:"upper('ƒÄƒÅƒÇƒÉƒÑƒÖƒÜƒáƒàƒâƒäƒãƒåƒçƒéƒèƒêƒëƒíƒìƒîƒïƒñƒóƒòƒôƒöƒõƒúƒùƒûƒüƒ†ƒ°ƒ¢ƒ£ƒ§ƒ•ƒ¶ƒßƒ®ƒ©ƒ™ƒ´ƒ¨ƒ≠ƒÆƒØƒ±ƒ≤ƒ≥ƒ¥ƒµƒ∂ƒ∑ƒ∏ƒπƒ∫ƒªƒºƒΩƒæƒø≈Ä≈Å≈Ç≈É≈Ñ≈Ö≈Ü≈á≈à≈ä≈ã≈å≈ç≈é≈è≈ê≈ë≈í≈ì≈î≈ï≈ñ≈ó≈ò≈ô≈ö≈õ≈ú≈ù≈û≈ü≈†≈°≈¢≈£≈§≈•≈¶≈ß≈®≈©≈™≈´≈¨≈≠≈Æ≈Ø≈∞≈±≈≤≈≥≈¥≈µ≈∂≈∑≈∏≈π≈∫≈ª≈º≈Ω≈æ')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"ƒÄƒÄƒÇƒÇƒÑƒÑƒÜƒÜƒàƒàƒäƒäƒåƒåƒéƒéƒêƒêƒíƒíƒîƒîƒñƒñƒòƒòƒöƒöƒúƒúƒûƒûƒ†ƒ†ƒ¢ƒ¢ƒ§ƒ§ƒ¶ƒ¶ƒ®ƒ®ƒ™ƒ™ƒ¨ƒ¨ƒÆƒÆIƒ≤ƒ≤ƒ¥ƒ¥ƒ∂ƒ∂ƒ∏ƒπƒπƒªƒªƒΩƒΩƒøƒø≈Å≈Å≈É≈É≈Ö≈Ö≈á≈á≈ä≈ä≈å≈å≈é≈é≈ê≈ê≈í≈í≈î≈î≈ñ≈ñ≈ò≈ò≈ö≈ö≈ú≈ú≈û≈û≈†≈†≈¢≈¢≈§≈§≈¶≈¶≈®≈®≈™≈™≈¨≈¨≈Æ≈Æ≈∞≈∞≈≤≈≤≈¥≈¥≈∂≈∂≈∏≈π≈π≈ª≈ª≈Ω≈Ω"
    }
  },
  {
    name:"upper valid cases{in:\"\\u0180\\u0181\\u0182\\u0183\\u0184\\u0185\\u0186\\u0187\\u0188\\u0189\\u018a\\u018b\\u018c\\u018d\\u018e\\u018f\\u0190\\u0191\\u0192\\u0193\\u0194\\u0195\\u0196\\u0197\\u0198\\u0199\\u019a\\u019b\\u019c\\u019d\\u019e\\u019f\\u01a0\\u01a1\\u01a2\\u01a3\\u01a4\\u01a5\\u01a6\\u01a7\\u01a8\\u01a9\\u01aa\\u01ab\\u01ac\\u01ad\\u01ae\\u01af\\u01b0\\u01b1\\u01b2\\u01b3\\u01b4\\u01b5\\u01b6\\u01b7\\u01b8\\u01b9\\u01ba\\u01bb\\u01bc\\u01bd\\u01be\\u01bf\\u01c0\\u01c1\\u01c2\\u01c3\\u01c4\\u01c5\\u01c6\\u01c7\\u01c8\\u01c9\\u01ca\\u01cb\\u01cc\\u01cd\\u01ce\\u01cf\\u01d0\\u01d1\\u01d2\\u01d3\\u01d4\\u01d5\\u01d6\\u01d7\\u01d8\\u01d9\\u01da\\u01db\\u01dc\\u01dd\\u01de\\u01df\\u01e0\\u01e1\\u01e2\\u01e3\\u01e4\\u01e5\\u01e6\\u01e7\\u01e8\\u01e9\\u01ea\\u01eb\\u01ec\\u01ed\\u01ee\\u01ef\\u01f0\\u01f1\\u01f2\\u01f3\\u01f4\\u01f5\\u01f6\\u01f7\\u01f8\\u01f9\\u01fa\\u01fb\\u01fc\\u01fd\\u01fe\\u01ff\\u0200\\u0201\\u0202\\u0203\\u0204\\u0205\\u0206\\u0207\\u0208\\u0209\\u020a\\u020b\\u020c\\u020d\\u020e\\u020f\\u0210\\u0211\\u0212\\u0213\\u0214\\u0215\\u0216\\u0217\\u0218\\u0219\\u021a\\u021b\\u021c\\u021d\\u021e\\u021f\\u0220\\u0221\\u0222\\u0223\\u0224\\u0225\\u0226\\u0227\\u0228\\u0229\\u022a\\u022b\\u022c\\u022d\\u022e\\u022f\\u0230\\u0231\\u0232\\u0233\\u0234\\u0235\\u0236\\u0237\\u0238\\u0239\\u023a\\u023b\\u023c\\u023d\\u023e\\u023f\\u0240\\u0241\\u0242\\u0243\\u0244\\u0245\\u0246\\u0247\\u0248\\u0249\\u024a\\u024b\\u024c\\u024d\\u024e\\u024f\",result:\"\\u0243\\u0181\\u0182\\u0182\\u0184\\u0184\\u0186\\u0187\\u0187\\u0189\\u018a\\u018b\\u018b\\u018d\\u018e\\u018f\\u0190\\u0191\\u0191\\u0193\\u0194\\u01f6\\u0196\\u0197\\u0198\\u0198\\u023d\\u019b\\u019c\\u019d\\u0220\\u019f\\u01a0\\u01a0\\u01a2\\u01a2\\u01a4\\u01a4\\u01a6\\u01a7\\u01a7\\u01a9\\u01aa\\u01ab\\u01ac\\u01ac\\u01ae\\u01af\\u01af\\u01b1\\u01b2\\u01b3\\u01b3\\u01b5\\u01b5\\u01b7\\u01b8\\u01b8\\u01ba\\u01bb\\u01bc\\u01bc\\u01be\\u01f7\\u01c0\\u01c1\\u01c2\\u01c3\\u01c4\\u01c4\\u01c4\\u01c7\\u01c7\\u01c7\\u01ca\\u01ca\\u01ca\\u01cd\\u01cd\\u01cf\\u01cf\\u01d1\\u01d1\\u01d3\\u01d3\\u01d5\\u01d5\\u01d7\\u01d7\\u01d9\\u01d9\\u01db\\u01db\\u018e\\u01de\\u01de\\u01e0\\u01e0\\u01e2\\u01e2\\u01e4\\u01e4\\u01e6\\u01e6\\u01e8\\u01e8\\u01ea\\u01ea\\u01ec\\u01ec\\u01ee\\u01eeJ\\u030c\\u01f1\\u01f1\\u01f1\\u01f4\\u01f4\\u01f6\\u01f7\\u01f8\\u01f8\\u01fa\\u01fa\\u01fc\\u01fc\\u01fe\\u01fe\\u0200\\u0200\\u0202\\u0202\\u0204\\u0204\\u0206\\u0206\\u0208\\u0208\\u020a\\u020a\\u020c\\u020c\\u020e\\u020e\\u0210\\u0210\\u0212\\u0212\\u0214\\u0214\\u0216\\u0216\\u0218\\u0218\\u021a\\u021a\\u021c\\u021c\\u021e\\u021e\\u0220\\u0221\\u0222\\u0222\\u0224\\u0224\\u0226\\u0226\\u0228\\u0228\\u022a\\u022a\\u022c\\u022c\\u022e\\u022e\\u0230\\u0230\\u0232\\u0232\\u0234\\u0235\\u0236\\u0237\\u0238\\u0239\\u023a\\u023b\\u023b\\u023d\\u023e\\u2c7e\\u2c7f\\u0241\\u0241\\u0243\\u0244\\u0245\\u0246\\u0246\\u0248\\u0248\\u024a\\u024a\\u024c\\u024c\\u024e\\u024e\"}",
    statement:"upper('∆Ä∆Å∆Ç∆É∆Ñ∆Ö∆Ü∆á∆à∆â∆ä∆ã∆å∆ç∆é∆è∆ê∆ë∆í∆ì∆î∆ï∆ñ∆ó∆ò∆ô∆ö∆õ∆ú∆ù∆û∆ü∆†∆°∆¢∆£∆§∆•∆¶∆ß∆®∆©∆™∆´∆¨∆≠∆Æ∆Ø∆∞∆±∆≤∆≥∆¥∆µ∆∂∆∑∆∏∆π∆∫∆ª∆º∆Ω∆æ∆ø«Ä«Å«Ç«É«Ñ«Ö«Ü«á«à«â«ä«ã«å«ç«é«è«ê«ë«í«ì«î«ï«ñ«ó«ò«ô«ö«õ«ú«ù«û«ü«†«°«¢«£«§«•«¶«ß«®«©«™«´«¨«≠«Æ«Ø«∞«±«≤«≥«¥«µ«∂«∑«∏«π«∫«ª«º«Ω«æ«ø»Ä»Å»Ç»É»Ñ»Ö»Ü»á»à»â»ä»ã»å»ç»é»è»ê»ë»í»ì»î»ï»ñ»ó»ò»ô»ö»õ»ú»ù»û»ü»†»°»¢»£»§»•»¶»ß»®»©»™»´»¨»≠»Æ»Ø»∞»±»≤»≥»¥»µ»∂»∑»∏»π»∫»ª»º»Ω»æ»ø…Ä…Å…Ç…É…Ñ…Ö…Ü…á…à…â…ä…ã…å…ç…é…è')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"…É∆Å∆Ç∆Ç∆Ñ∆Ñ∆Ü∆á∆á∆â∆ä∆ã∆ã∆ç∆é∆è∆ê∆ë∆ë∆ì∆î«∂∆ñ∆ó∆ò∆ò»Ω∆õ∆ú∆ù»†∆ü∆†∆†∆¢∆¢∆§∆§∆¶∆ß∆ß∆©∆™∆´∆¨∆¨∆Æ∆Ø∆Ø∆±∆≤∆≥∆≥∆µ∆µ∆∑∆∏∆∏∆∫∆ª∆º∆º∆æ«∑«Ä«Å«Ç«É«Ñ«Ñ«Ñ«á«á«á«ä«ä«ä«ç«ç«è«è«ë«ë«ì«ì«ï«ï«ó«ó«ô«ô«õ«õ∆é«û«û«†«†«¢«¢«§«§«¶«¶«®«®«™«™«¨«¨«Æ«ÆJÃå«±«±«±«¥«¥«∂«∑«∏«∏«∫«∫«º«º«æ«æ»Ä»Ä»Ç»Ç»Ñ»Ñ»Ü»Ü»à»à»ä»ä»å»å»é»é»ê»ê»í»í»î»î»ñ»ñ»ò»ò»ö»ö»ú»ú»û»û»†»°»¢»¢»§»§»¶»¶»®»®»™»™»¨»¨»Æ»Æ»∞»∞»≤»≤»¥»µ»∂»∑»∏»π»∫»ª»ª»Ω»æ‚±æ‚±ø…Å…Å…É…Ñ…Ö…Ü…Ü…à…à…ä…ä…å…å…é…é"
    }
  },
  {
    name:"upper valid cases{in:\"\\u2c60\\u2c61\\u2c62\\u2c63\\u2c64\\u2c65\\u2c66\\u2c67\\u2c68\\u2c69\\u2c6a\\u2c6b\\u2c6c\\u2c6d\\u2c6e\\u2c6f\\u2c70\\u2c71\\u2c72\\u2c73\\u2c74\\u2c75\\u2c76\\u2c77\\u2c78\\u2c79\\u2c7a\\u2c7b\\u2c7c\\u2c7d\\u2c7e\\u2c7f\",result:\"\\u2c60\\u2c60\\u2c62\\u2c63\\u2c64\\u023a\\u023e\\u2c67\\u2c67\\u2c69\\u2c69\\u2c6b\\u2c6b\\u2c6d\\u2c6e\\u2c6f\\u2c70\\u2c71\\u2c72\\u2c72\\u2c74\\u2c75\\u2c75\\u2c77\\u2c78\\u2c79\\u2c7a\\u2c7b\\u2c7c\\u2c7d\\u2c7e\\u2c7f\"}",
    statement:"upper('‚±†‚±°‚±¢‚±£‚±§‚±•‚±¶‚±ß‚±®‚±©‚±™‚±´‚±¨‚±≠‚±Æ‚±Ø‚±∞‚±±‚±≤‚±≥‚±¥‚±µ‚±∂‚±∑‚±∏‚±π‚±∫‚±ª‚±º‚±Ω‚±æ‚±ø')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"‚±†‚±†‚±¢‚±£‚±§»∫»æ‚±ß‚±ß‚±©‚±©‚±´‚±´‚±≠‚±Æ‚±Ø‚±∞‚±±‚±≤‚±≤‚±¥‚±µ‚±µ‚±∑‚±∏‚±π‚±∫‚±ª‚±º‚±Ω‚±æ‚±ø"
    }
  },
  {
    name:"upper valid cases{in:\"\\u8a71\\u5bb6\\u8eab\\u5727\\u8cbb\\u8c37\\u6599\\u6751\\u80fd\\u8a08\\u7a0e\\u91d1\\u3041\\u3066\\u30c8\\u30ad\\u307b\\u30c3\\u0394\\u03d5\\u03be\\u0391\",result:\"\\u8a71\\u5bb6\\u8eab\\u5727\\u8cbb\\u8c37\\u6599\\u6751\\u80fd\\u8a08\\u7a0e\\u91d1\\u3041\\u3066\\u30c8\\u30ad\\u307b\\u30c3\\u0394\\u03a6\\u039e\\u0391\"}",
    statement:"upper('Ë©±ÂÆ∂Ë∫´ÂúßË≤ªË∞∑ÊñôÊùëËÉΩË®àÁ®éÈáë„ÅÅ„Å¶„Éà„Ç≠„Åª„ÉÉŒîœïŒæŒë')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Ë©±ÂÆ∂Ë∫´ÂúßË≤ªË∞∑ÊñôÊùëËÉΩË®àÁ®éÈáë„ÅÅ„Å¶„Éà„Ç≠„Åª„ÉÉŒîŒ¶ŒûŒë"
    }
  },
  {
    name:"upper valid cases{in:\"undefined\",result:\"UNDEFINED\"}",
    statement:"upper('undefined')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"UNDEFINED"
    }
  },
  {
    name:"upper valid cases{in:\"undef\",result:\"UNDEF\"}",
    statement:"upper('undef')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"UNDEF"
    }
  },
  {
    name:"upper valid cases{in:\"null\",result:\"NULL\"}",
    statement:"upper('null')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"NULL"
    }
  },
  {
    name:"upper valid cases{in:\"NULL\",result:\"NULL\"}",
    statement:"upper('NULL')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"NULL"
    }
  },
  {
    name:"upper valid cases{in:\"(null)\",result:\"(NULL)\"}",
    statement:"upper('(null)')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"(NULL)"
    }
  },
  {
    name:"upper valid cases{in:\"nil\",result:\"NIL\"}",
    statement:"upper('nil')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"NIL"
    }
  },
  {
    name:"upper valid cases{in:\"NIL\",result:\"NIL\"}",
    statement:"upper('NIL')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"NIL"
    }
  },
  {
    name:"upper valid cases{in:\"true\",result:\"TRUE\"}",
    statement:"upper('true')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"TRUE"
    }
  },
  {
    name:"upper valid cases{in:\"false\",result:\"FALSE\"}",
    statement:"upper('false')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"FALSE"
    }
  },
  {
    name:"upper valid cases{in:\"True\",result:\"TRUE\"}",
    statement:"upper('True')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"TRUE"
    }
  },
  {
    name:"upper valid cases{in:\"False\",result:\"FALSE\"}",
    statement:"upper('False')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"FALSE"
    }
  },
  {
    name:"upper valid cases{in:\"TRUE\",result:\"TRUE\"}",
    statement:"upper('TRUE')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"TRUE"
    }
  },
  {
    name:"upper valid cases{in:\"FALSE\",result:\"FALSE\"}",
    statement:"upper('FALSE')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"FALSE"
    }
  },
  {
    name:"upper valid cases{in:\"None\",result:\"NONE\"}",
    statement:"upper('None')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"NONE"
    }
  },
  {
    name:"upper valid cases{in:\"hasOwnProperty\",result:\"HASOWNPROPERTY\"}",
    statement:"upper('hasOwnProperty')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"HASOWNPROPERTY"
    }
  },
  {
    name:"upper valid cases{in:\"999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\",result:\"999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\"}",
    statement:"upper('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
    }
  },
  {
    name:"upper valid cases{in:\"123456789012345678901234567890123456789\",result:\"123456789012345678901234567890123456789\"}",
    statement:"upper('123456789012345678901234567890123456789')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"123456789012345678901234567890123456789"
    }
  },
  {
    name:"upper valid cases{in:\"0\",result:\"0\"}",
    statement:"upper('0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0"
    }
  },
  {
    name:"upper valid cases{in:\"1\",result:\"1\"}",
    statement:"upper('1')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1"
    }
  },
  {
    name:"upper valid cases{in:\"1.00\",result:\"1.00\"}",
    statement:"upper('1.00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1.00"
    }
  },
  {
    name:"upper valid cases{in:\"1.00\",result:\"1.00\"}",
    statement:"upper('$1.00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"$1.00"
    }
  },
  {
    name:"upper valid cases{in:\"1/2\",result:\"1/2\"}",
    statement:"upper('1/2')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1/2"
    }
  },
  {
    name:"upper valid cases{in:\"1E2\",result:\"1E2\"}",
    statement:"upper('1E2')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1E2"
    }
  },
  {
    name:"upper valid cases{in:\"1E02\",result:\"1E02\"}",
    statement:"upper('1E02')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1E02"
    }
  },
  {
    name:"upper valid cases{in:\"1E+02\",result:\"1E+02\"}",
    statement:"upper('1E+02')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1E+02"
    }
  },
  {
    name:"upper valid cases{in:\"-1\",result:\"-1\"}",
    statement:"upper('-1')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"-1"
    }
  },
  {
    name:"upper valid cases{in:\"-1.00\",result:\"-1.00\"}",
    statement:"upper('-1.00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"-1.00"
    }
  },
  {
    name:"upper valid cases{in:\"-1.00\",result:\"-1.00\"}",
    statement:"upper('-$1.00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"-$1.00"
    }
  },
  {
    name:"upper valid cases{in:\"-1/2\",result:\"-1/2\"}",
    statement:"upper('-1/2')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"-1/2"
    }
  },
  {
    name:"upper valid cases{in:\"-1E2\",result:\"-1E2\"}",
    statement:"upper('-1E2')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"-1E2"
    }
  },
  {
    name:"upper valid cases{in:\"-1E02\",result:\"-1E02\"}",
    statement:"upper('-1E02')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"-1E02"
    }
  },
  {
    name:"upper valid cases{in:\"-1E+02\",result:\"-1E+02\"}",
    statement:"upper('-1E+02')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"-1E+02"
    }
  },
  {
    name:"upper valid cases{in:\"1/0\",result:\"1/0\"}",
    statement:"upper('1/0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1/0"
    }
  },
  {
    name:"upper valid cases{in:\"0/0\",result:\"0/0\"}",
    statement:"upper('0/0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0/0"
    }
  },
  {
    name:"upper valid cases{in:\"-2147483648/-1\",result:\"-2147483648/-1\"}",
    statement:"upper('-2147483648/-1')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"-2147483648/-1"
    }
  },
  {
    name:"upper valid cases{in:\"-9223372036854775808/-1\",result:\"-9223372036854775808/-1\"}",
    statement:"upper('-9223372036854775808/-1')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"-9223372036854775808/-1"
    }
  },
  {
    name:"upper valid cases{in:\"-0\",result:\"-0\"}",
    statement:"upper('-0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"-0"
    }
  },
  {
    name:"upper valid cases{in:\"-0.0\",result:\"-0.0\"}",
    statement:"upper('-0.0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"-0.0"
    }
  },
  {
    name:"upper valid cases{in:\"+0\",result:\"+0\"}",
    statement:"upper('+0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+0"
    }
  },
  {
    name:"upper valid cases{in:\"+0.0\",result:\"+0.0\"}",
    statement:"upper('+0.0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+0.0"
    }
  },
  {
    name:"upper valid cases{in:\"0.00\",result:\"0.00\"}",
    statement:"upper('0.00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0.00"
    }
  },
  {
    name:"upper valid cases{in:\"0..0\",result:\"0..0\"}",
    statement:"upper('0..0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0..0"
    }
  },
  {
    name:"upper valid cases{in:\".\",result:\".\"}",
    statement:"upper('.')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"."
    }
  },
  {
    name:"upper valid cases{in:\"0.0.0\",result:\"0.0.0\"}",
    statement:"upper('0.0.0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0.0.0"
    }
  },
  {
    name:"upper valid cases{in:\"0,00\",result:\"0,00\"}",
    statement:"upper('0,00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0,00"
    }
  },
  {
    name:"upper valid cases{in:\"0,,0\",result:\"0,,0\"}",
    statement:"upper('0,,0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0,,0"
    }
  },
  {
    name:"upper valid cases{in:\",\",result:\",\"}",
    statement:"upper(',')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:","
    }
  },
  {
    name:"upper valid cases{in:\"0,0,0\",result:\"0,0,0\"}",
    statement:"upper('0,0,0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0,0,0"
    }
  },
  {
    name:"upper valid cases{in:\"0.0/0\",result:\"0.0/0\"}",
    statement:"upper('0.0/0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0.0/0"
    }
  },
  {
    name:"upper valid cases{in:\"1.0/0.0\",result:\"1.0/0.0\"}",
    statement:"upper('1.0/0.0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1.0/0.0"
    }
  },
  {
    name:"upper valid cases{in:\"0.0/0.0\",result:\"0.0/0.0\"}",
    statement:"upper('0.0/0.0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0.0/0.0"
    }
  },
  {
    name:"upper valid cases{in:\"1,0/0,0\",result:\"1,0/0,0\"}",
    statement:"upper('1,0/0,0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1,0/0,0"
    }
  },
  {
    name:"upper valid cases{in:\"0,0/0,0\",result:\"0,0/0,0\"}",
    statement:"upper('0,0/0,0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0,0/0,0"
    }
  },
  {
    name:"upper valid cases{in:\"--1\",result:\"--1\"}",
    statement:"upper('--1')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"--1"
    }
  },
  {
    name:"upper valid cases{in:\"-\",result:\"-\"}",
    statement:"upper('-')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"-"
    }
  },
  {
    name:"upper valid cases{in:\"-.\",result:\"-.\"}",
    statement:"upper('-.')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"-."
    }
  },
  {
    name:"upper valid cases{in:\"-,\",result:\"-,\"}",
    statement:"upper('-,')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"-,"
    }
  },
  {
    name:"upper valid cases{in:\"NaN\",result:\"NAN\"}",
    statement:"upper('NaN')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"NAN"
    }
  },
  {
    name:"upper valid cases{in:\"Infinity\",result:\"INFINITY\"}",
    statement:"upper('Infinity')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"INFINITY"
    }
  },
  {
    name:"upper valid cases{in:\"-Infinity\",result:\"-INFINITY\"}",
    statement:"upper('-Infinity')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"-INFINITY"
    }
  },
  {
    name:"upper valid cases{in:\"INF\",result:\"INF\"}",
    statement:"upper('INF')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"INF"
    }
  },
  {
    name:"upper valid cases{in:\"1#INF\",result:\"1#INF\"}",
    statement:"upper('1#INF')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1#INF"
    }
  },
  {
    name:"upper valid cases{in:\"-1#IND\",result:\"-1#IND\"}",
    statement:"upper('-1#IND')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"-1#IND"
    }
  },
  {
    name:"upper valid cases{in:\"1#QNAN\",result:\"1#QNAN\"}",
    statement:"upper('1#QNAN')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1#QNAN"
    }
  },
  {
    name:"upper valid cases{in:\"1#SNAN\",result:\"1#SNAN\"}",
    statement:"upper('1#SNAN')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1#SNAN"
    }
  },
  {
    name:"upper valid cases{in:\"1#IND\",result:\"1#IND\"}",
    statement:"upper('1#IND')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1#IND"
    }
  },
  {
    name:"upper valid cases{in:\"0x0\",result:\"0X0\"}",
    statement:"upper('0x0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0X0"
    }
  },
  {
    name:"upper valid cases{in:\"0xffffffff\",result:\"0XFFFFFFFF\"}",
    statement:"upper('0xffffffff')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0XFFFFFFFF"
    }
  },
  {
    name:"upper valid cases{in:\"0xffffffffffffffff\",result:\"0XFFFFFFFFFFFFFFFF\"}",
    statement:"upper('0xffffffffffffffff')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0XFFFFFFFFFFFFFFFF"
    }
  },
  {
    name:"upper valid cases{in:\"0xabad1dea\",result:\"0XABAD1DEA\"}",
    statement:"upper('0xabad1dea')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0XABAD1DEA"
    }
  },
  {
    name:"upper valid cases{in:\"1,000.00\",result:\"1,000.00\"}",
    statement:"upper('1,000.00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1,000.00"
    }
  },
  {
    name:"upper valid cases{in:\"1 000.00\",result:\"1 000.00\"}",
    statement:"upper('1 000.00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1 000.00"
    }
  },
  {
    name:"upper valid cases{in:\"1,000,000.00\",result:\"1,000,000.00\"}",
    statement:"upper('1,000,000.00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1,000,000.00"
    }
  },
  {
    name:"upper valid cases{in:\"1 000 000.00\",result:\"1 000 000.00\"}",
    statement:"upper('1 000 000.00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1 000 000.00"
    }
  },
  {
    name:"upper valid cases{in:\"1.000,00\",result:\"1.000,00\"}",
    statement:"upper('1.000,00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1.000,00"
    }
  },
  {
    name:"upper valid cases{in:\"1 000,00\",result:\"1 000,00\"}",
    statement:"upper('1 000,00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1 000,00"
    }
  },
  {
    name:"upper valid cases{in:\"1.000.000,00\",result:\"1.000.000,00\"}",
    statement:"upper('1.000.000,00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1.000.000,00"
    }
  },
  {
    name:"upper valid cases{in:\"1 000 000,00\",result:\"1 000 000,00\"}",
    statement:"upper('1 000 000,00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1 000 000,00"
    }
  },
  {
    name:"upper valid cases{in:\"01000\",result:\"01000\"}",
    statement:"upper('01000')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"01000"
    }
  },
  {
    name:"upper valid cases{in:\"08\",result:\"08\"}",
    statement:"upper('08')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"08"
    }
  },
  {
    name:"upper valid cases{in:\"09\",result:\"09\"}",
    statement:"upper('09')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"09"
    }
  },
  {
    name:"upper valid cases{in:\"2.2250738585072011e-308\",result:\"2.2250738585072011E-308\"}",
    statement:"upper('2.2250738585072011e-308')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"2.2250738585072011E-308"
    }
  },
  {
    name:"upper valid cases{in:\"\\u0401\\u0402\\u0403\\u0404\\u0405\\u0406\\u0407\\u0408\\u0409\\u040a\\u040b\\u040c\\u040d\\u040e\\u040f\\u0410\\u0411\\u0412\\u0413\\u0414\\u0415\\u0416\\u0417\\u0418\\u0419\\u041a\\u041b\\u041c\\u041d\\u041e\\u041f\\u0420\\u0421\\u0422\\u0423\\u0424\\u0425\\u0426\\u0427\\u0428\\u0429\\u042a\\u042b\\u042c\\u042d\\u042e\\u042f\\u0430\\u0431\\u0432\\u0433\\u0434\\u0435\\u0436\\u0437\\u0438\\u0439\\u043a\\u043b\\u043c\\u043d\\u043e\\u043f\\u0440\\u0441\\u0442\\u0443\\u0444\\u0445\\u0446\\u0447\\u0448\\u0449\\u044a\\u044b\\u044c\\u044d\\u044e\\u044f\",result:\"\\u0401\\u0402\\u0403\\u0404\\u0405\\u0406\\u0407\\u0408\\u0409\\u040a\\u040b\\u040c\\u040d\\u040e\\u040f\\u0410\\u0411\\u0412\\u0413\\u0414\\u0415\\u0416\\u0417\\u0418\\u0419\\u041a\\u041b\\u041c\\u041d\\u041e\\u041f\\u0420\\u0421\\u0422\\u0423\\u0424\\u0425\\u0426\\u0427\\u0428\\u0429\\u042a\\u042b\\u042c\\u042d\\u042e\\u042f\\u0410\\u0411\\u0412\\u0413\\u0414\\u0415\\u0416\\u0417\\u0418\\u0419\\u041a\\u041b\\u041c\\u041d\\u041e\\u041f\\u0420\\u0421\\u0422\\u0423\\u0424\\u0425\\u0426\\u0427\\u0428\\u0429\\u042a\\u042b\\u042c\\u042d\\u042e\\u042f\"}",
    statement:"upper('–Å–Ç–É–Ñ–Ö–Ü–á–à–â–ä–ã–å–ç–é–è–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"–Å–Ç–É–Ñ–Ö–Ü–á–à–â–ä–ã–å–ç–é–è–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø"
    }
  },
  {
    name:"upper valid cases{in:\"<>?:\\\"{}|_+\",result:\"<>?:\\\"{}|_+\"}",
    statement:"upper('<>?:\"{}|_+')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"<>?:\"{}|_+"
    }
  },
  {
    name:"upper valid cases{in:\"!@#%^&*()`~\",result:\"!@#%^&*()`~\"}",
    statement:"upper('!@#$%^&*()`~')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"!@#$%^&*()`~"
    }
  },
  {
    name:"upper valid cases{in:\"\\u03a9\\u2248\\xe7\\u221a\\u222b\\u02dc\\xb5\\u2264\\u2265\\xf7\",result:\"\\u03a9\\u2248\\xc7\\u221a\\u222b\\u02dc\\u039c\\u2264\\u2265\\xf7\"}",
    statement:"upper('Œ©‚âà√ß‚àö‚à´Àú¬µ‚â§‚â•√∑')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Œ©‚âà√á‚àö‚à´ÀúŒú‚â§‚â•√∑"
    }
  },
  {
    name:"upper valid cases{in:\"\\xe5\\xdf\\u2202\\u0192\\xa9\\u02d9\\u2206\\u02da\\xac\\u2026\\xe6\",result:\"\\xc5SS\\u2202\\u0191\\xa9\\u02d9\\u2206\\u02da\\xac\\u2026\\xc6\"}",
    statement:"upper('√•√ü‚àÇ∆í¬©Àô‚àÜÀö¬¨‚Ä¶√¶')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"√ÖSS‚àÇ∆ë¬©Àô‚àÜÀö¬¨‚Ä¶√Ü"
    }
  },
  {
    name:"upper valid cases{in:\"\\u0153\\u2211\\xb4\\xae\\u2020\\xa5\\xa8\\u02c6\\xf8\\u03c0\\u201c\\u2018\",result:\"\\u0152\\u2211\\xb4\\xae\\u2020\\xa5\\xa8\\u02c6\\xd8\\u03a0\\u201c\\u2018\"}",
    statement:"upper('≈ì‚àë¬¥¬Æ‚Ä†¬•¬®ÀÜ√∏œÄ‚Äú‚Äò')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"≈í‚àë¬¥¬Æ‚Ä†¬•¬®ÀÜ√òŒ†‚Äú‚Äò"
    }
  },
  {
    name:"upper valid cases{in:\"\\xa1\\u2122\\xa3\\xa2\\u221e\\xa7\\xb6\\u2022\\xaa\\xba\\u2013\\u2260\",result:\"\\xa1\\u2122\\xa3\\xa2\\u221e\\xa7\\xb6\\u2022\\xaa\\xba\\u2013\\u2260\"}",
    statement:"upper('¬°‚Ñ¢¬£¬¢‚àû¬ß¬∂‚Ä¢¬™¬∫‚Äì‚â†')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"¬°‚Ñ¢¬£¬¢‚àû¬ß¬∂‚Ä¢¬™¬∫‚Äì‚â†"
    }
  },
  {
    name:"upper valid cases{in:\"\\xb8\\u02db\\xc7\\u25ca\\u0131\\u02dc\\xc2\\xaf\\u02d8\\xbf\",result:\"\\xb8\\u02db\\xc7\\u25caI\\u02dc\\xc2\\xaf\\u02d8\\xbf\"}",
    statement:"upper('¬∏Àõ√á‚óäƒ±Àú√Ç¬ØÀò¬ø')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"¬∏Àõ√á‚óäIÀú√Ç¬ØÀò¬ø"
    }
  },
  {
    name:"upper valid cases{in:\"\\xc5\\xcd\\xce\\xcf\\u02dd\\xd3\\xd4\\uf8ff\\xd2\\xda\\xc6\\u2603\",result:\"\\xc5\\xcd\\xce\\xcf\\u02dd\\xd3\\xd4\\uf8ff\\xd2\\xda\\xc6\\u2603\"}",
    statement:"upper('√Ö√ç√é√èÀù√ì√îÔ£ø√í√ö√Ü‚òÉ')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"√Ö√ç√é√èÀù√ì√îÔ£ø√í√ö√Ü‚òÉ"
    }
  },
  {
    name:"upper valid cases{in:\"\\u0152\\u201e\\xb4\\u2030\\u02c7\\xc1\\xa8\\u02c6\\xd8\\u220f\\u201d\\u2019\",result:\"\\u0152\\u201e\\xb4\\u2030\\u02c7\\xc1\\xa8\\u02c6\\xd8\\u220f\\u201d\\u2019\"}",
    statement:"upper('≈í‚Äû¬¥‚Ä∞Àá√Å¬®ÀÜ√ò‚àè‚Äù‚Äô')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"≈í‚Äû¬¥‚Ä∞Àá√Å¬®ÀÜ√ò‚àè‚Äù‚Äô"
    }
  },
  {
    name:"upper valid cases{in:\"`\\u2044\\u20ac\\u2039\\u203a\\ufb01\\ufb02\\u2021\\xb0\\xb7\\u201a\\u2014\\xb1\",result:\"`\\u2044\\u20ac\\u2039\\u203aFIFL\\u2021\\xb0\\xb7\\u201a\\u2014\\xb1\"}",
    statement:"upper('`‚ÅÑ‚Ç¨‚Äπ‚Ä∫Ô¨ÅÔ¨Ç‚Ä°¬∞¬∑‚Äö‚Äî¬±')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"`‚ÅÑ‚Ç¨‚Äπ‚Ä∫FIFL‚Ä°¬∞¬∑‚Äö‚Äî¬±"
    }
  },
  {
    name:"upper valid cases{in:\"\\u215b\\u215c\\u215d\\u215e\",result:\"\\u215b\\u215c\\u215d\\u215e\"}",
    statement:"upper('‚Öõ‚Öú‚Öù‚Öû')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"‚Öõ‚Öú‚Öù‚Öû"
    }
  },
  {
    name:"upper valid cases{in:\"\\u0660\\u0661\\u0662\\u0663\\u0664\\u0665\\u0666\\u0667\\u0668\\u0669\",result:\"\\u0660\\u0661\\u0662\\u0663\\u0664\\u0665\\u0666\\u0667\\u0668\\u0669\"}",
    statement:"upper('Ÿ†Ÿ°Ÿ¢Ÿ£Ÿ§Ÿ•Ÿ¶ŸßŸ®Ÿ©')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Ÿ†Ÿ°Ÿ¢Ÿ£Ÿ§Ÿ•Ÿ¶ŸßŸ®Ÿ©"
    }
  },
  {
    name:"upper valid cases{in:\"\\u7530\\u4e2d\\u3055\\u3093\\u306b\\u3042\\u3052\\u3066\\u4e0b\\u3055\\u3044\",result:\"\\u7530\\u4e2d\\u3055\\u3093\\u306b\\u3042\\u3052\\u3066\\u4e0b\\u3055\\u3044\"}",
    statement:"upper('Áî∞‰∏≠„Åï„Çì„Å´„ÅÇ„Åí„Å¶‰∏ã„Åï„ÅÑ')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Áî∞‰∏≠„Åï„Çì„Å´„ÅÇ„Åí„Å¶‰∏ã„Åï„ÅÑ"
    }
  },
  {
    name:"upper valid cases{in:\"\\u30d1\\u30fc\\u30c6\\u30a3\\u30fc\\u3078\\u884c\\u304b\\u306a\\u3044\\u304b\",result:\"\\u30d1\\u30fc\\u30c6\\u30a3\\u30fc\\u3078\\u884c\\u304b\\u306a\\u3044\\u304b\"}",
    statement:"upper('„Éë„Éº„ÉÜ„Ç£„Éº„Å∏Ë°å„Åã„Å™„ÅÑ„Åã')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"„Éë„Éº„ÉÜ„Ç£„Éº„Å∏Ë°å„Åã„Å™„ÅÑ„Åã"
    }
  },
  {
    name:"upper valid cases{in:\"\\u548c\\u88fd\\u6f22\\u8a9e\",result:\"\\u548c\\u88fd\\u6f22\\u8a9e\"}",
    statement:"upper('ÂíåË£ΩÊº¢Ë™û')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"ÂíåË£ΩÊº¢Ë™û"
    }
  },
  {
    name:"upper valid cases{in:\"\\u90e8\\u843d\\u683c\",result:\"\\u90e8\\u843d\\u683c\"}",
    statement:"upper('ÈÉ®ËêΩÊ†º')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"ÈÉ®ËêΩÊ†º"
    }
  },
  {
    name:"upper valid cases{in:\"\\uc0ac\\ud68c\\uacfc\\ud559\\uc6d0 \\uc5b4\\ud559\\uc5f0\\uad6c\\uc18c\",result:\"\\uc0ac\\ud68c\\uacfc\\ud559\\uc6d0 \\uc5b4\\ud559\\uc5f0\\uad6c\\uc18c\"}",
    statement:"upper('ÏÇ¨ÌöåÍ≥ºÌïôÏõê Ïñ¥ÌïôÏó∞Íµ¨ÏÜå')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"ÏÇ¨ÌöåÍ≥ºÌïôÏõê Ïñ¥ÌïôÏó∞Íµ¨ÏÜå"
    }
  },
  {
    name:"upper valid cases{in:\"\\ucc26\\ucc28\\ub97c \\ud0c0\\uace0 \\uc628 \\ud3b2\\uc2dc\\ub9e8\\uacfc \\uc45b\\ub2e4\\ub9ac \\ub620\\ubc29\\uac01\\ud558\",result:\"\\ucc26\\ucc28\\ub97c \\ud0c0\\uace0 \\uc628 \\ud3b2\\uc2dc\\ub9e8\\uacfc \\uc45b\\ub2e4\\ub9ac \\ub620\\ubc29\\uac01\\ud558\"}",
    statement:"upper('Ï∞¶Ï∞®Î•º ÌÉÄÍ≥† Ïò® Ìé≤ÏãúÎß®Í≥º ÏëõÎã§Î¶¨ Îò†Î∞©Í∞ÅÌïò')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Ï∞¶Ï∞®Î•º ÌÉÄÍ≥† Ïò® Ìé≤ÏãúÎß®Í≥º ÏëõÎã§Î¶¨ Îò†Î∞©Í∞ÅÌïò"
    }
  },
  {
    name:"upper valid cases{in:\"\\u793e\\u6703\\u79d1\\u5b78\\u9662\\u8a9e\\u5b78\\u7814\\u7a76\\u6240\",result:\"\\u793e\\u6703\\u79d1\\u5b78\\u9662\\u8a9e\\u5b78\\u7814\\u7a76\\u6240\"}",
    statement:"upper('Á§æÊúÉÁßëÂ≠∏Èô¢Ë™ûÂ≠∏Á†îÁ©∂ÊâÄ')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Á§æÊúÉÁßëÂ≠∏Èô¢Ë™ûÂ≠∏Á†îÁ©∂ÊâÄ"
    }
  },
  {
    name:"upper valid cases{in:\"\\uc6b8\\ub780\\ubc14\\ud1a0\\ub974\",result:\"\\uc6b8\\ub780\\ubc14\\ud1a0\\ub974\"}",
    statement:"upper('Ïö∏ÎûÄÎ∞îÌÜ†Î•¥')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Ïö∏ÎûÄÎ∞îÌÜ†Î•¥"
    }
  },
  {
    name:"upper valid cases{in:\"\\U0002070e\\U00020731\\U00020779\\U00020c53\\U00020c78\\U00020c96\\U00020ccf\",result:\"\\U0002070e\\U00020731\\U00020779\\U00020c53\\U00020c78\\U00020c96\\U00020ccf\"}",
    statement:"upper('†úé†ú±†ùπ†±ì†±∏†≤ñ†≥è')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"†úé†ú±†ùπ†±ì†±∏†≤ñ†≥è"
    }
  },
  {
    name:"upper valid cases{in:\"\\u023a\",result:\"\\u023a\"}",
    statement:"upper('»∫')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"»∫"
    }
  },
  {
    name:"upper valid cases{in:\"\\u023e\",result:\"\\u023e\"}",
    statement:"upper('»æ')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"»æ"
    }
  },
  {
    name:"upper valid cases{in:\"\\u30fd\\u0f3c\\u0e88\\u0644\\u035c\\u0e88\\u0f3d\\uff89 \\u30fd\\u0f3c\\u0e88\\u0644\\u035c\\u0e88\\u0f3d\\uff89\",result:\"\\u30fd\\u0f3c\\u0e88\\u0644\\u035c\\u0e88\\u0f3d\\uff89 \\u30fd\\u0f3c\\u0e88\\u0644\\u035c\\u0e88\\u0f3d\\uff89\"}",
    statement:"upper('„ÉΩ‡ºº‡∫àŸÑÕú‡∫à‡ºΩÔæâ „ÉΩ‡ºº‡∫àŸÑÕú‡∫à‡ºΩÔæâ')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"„ÉΩ‡ºº‡∫àŸÑÕú‡∫à‡ºΩÔæâ „ÉΩ‡ºº‡∫àŸÑÕú‡∫à‡ºΩÔæâ"
    }
  },
  {
    name:"upper valid cases{in:\"(\\uff61\\u25d5 \\u2200 \\u25d5\\uff61)\",result:\"(\\uff61\\u25d5 \\u2200 \\u25d5\\uff61)\"}",
    statement:"upper('(ÔΩ°‚óï ‚àÄ ‚óïÔΩ°)')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"(ÔΩ°‚óï ‚àÄ ‚óïÔΩ°)"
    }
  },
  {
    name:"upper valid cases{in:\"\\uff40\\uff68(\\xb4\\u2200\\uff40\\u2229\",result:\"\\uff40\\uff68(\\xb4\\u2200\\uff40\\u2229\"}",
    statement:"upper('ÔΩÄÔΩ®(¬¥‚àÄÔΩÄ‚à©')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"ÔΩÄÔΩ®(¬¥‚àÄÔΩÄ‚à©"
    }
  },
  {
    name:"upper valid cases{in:\"__\\uff9b(,_,*)\",result:\"__\\uff9b(,_,*)\"}",
    statement:"upper('__Ôæõ(,_,*)')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"__Ôæõ(,_,*)"
    }
  },
  {
    name:"upper valid cases{in:\"\\u30fb(\\uffe3\\u2200\\uffe3)\\u30fb:*:\",result:\"\\u30fb(\\uffe3\\u2200\\uffe3)\\u30fb:*:\"}",
    statement:"upper('„Éª(Ôø£‚àÄÔø£)„Éª:*:')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"„Éª(Ôø£‚àÄÔø£)„Éª:*:"
    }
  },
  {
    name:"upper valid cases{in:\"\\uff9f\\uff65\\u273f\\u30fe\\u2572(\\uff61\\u25d5\\u203f\\u25d5\\uff61)\\u2571\\u273f\\uff65\\uff9f\",result:\"\\uff9f\\uff65\\u273f\\u30fe\\u2572(\\uff61\\u25d5\\u203f\\u25d5\\uff61)\\u2571\\u273f\\uff65\\uff9f\"}",
    statement:"upper('ÔæüÔΩ•‚úø„Éæ‚ï≤(ÔΩ°‚óï‚Äø‚óïÔΩ°)‚ï±‚úøÔΩ•Ôæü')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"ÔæüÔΩ•‚úø„Éæ‚ï≤(ÔΩ°‚óï‚Äø‚óïÔΩ°)‚ï±‚úøÔΩ•Ôæü"
    }
  },
  {
    name:"upper valid cases{in:\",\\u3002\\u30fb:*:\\u30fb\\u309c\\u2019( \\u263b \\u03c9 \\u263b )\\u3002\\u30fb:*:\\u30fb\\u309c\\u2019\",result:\",\\u3002\\u30fb:*:\\u30fb\\u309c\\u2019( \\u263b \\u03a9 \\u263b )\\u3002\\u30fb:*:\\u30fb\\u309c\\u2019\"}",
    statement:"upper(',„ÄÇ„Éª:*:„Éª„Çú‚Äô( ‚òª œâ ‚òª )„ÄÇ„Éª:*:„Éª„Çú‚Äô')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:",„ÄÇ„Éª:*:„Éª„Çú‚Äô( ‚òª Œ© ‚òª )„ÄÇ„Éª:*:„Éª„Çú‚Äô"
    }
  },
  {
    name:"upper valid cases{in:\"(\\u256f\\xb0\\u25a1\\xb0\\uff09\\u256f\\ufe35 \\u253b\\u2501\\u253b)\",result:\"(\\u256f\\xb0\\u25a1\\xb0\\uff09\\u256f\\ufe35 \\u253b\\u2501\\u253b)\"}",
    statement:"upper('(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª)')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª)"
    }
  },
  {
    name:"upper valid cases{in:\"(\\uff89\\u0ca5\\u76ca\\u0ca5\\uff09\\uff89\\ufeff \\u253b\\u2501\\u253b\",result:\"(\\uff89\\u0ca5\\u76ca\\u0ca5\\uff09\\uff89\\ufeff \\u253b\\u2501\\u253b\"}",
    statement:"upper('(Ôæâ‡≤•Áõä‡≤•ÔºâÔæâÔªø ‚îª‚îÅ‚îª')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"(Ôæâ‡≤•Áõä‡≤•ÔºâÔæâÔªø ‚îª‚îÅ‚îª"
    }
  },
  {
    name:"upper valid cases{in:\"\\u252c\\u2500\\u252c\\u30ce( \\xba _ \\xba\\u30ce)\",result:\"\\u252c\\u2500\\u252c\\u30ce( \\xba _ \\xba\\u30ce)\"}",
    statement:"upper('‚î¨‚îÄ‚î¨„Éé( ¬∫ _ ¬∫„Éé)')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"‚î¨‚îÄ‚î¨„Éé( ¬∫ _ ¬∫„Éé)"
    }
  },
  {
    name:"upper valid cases{in:\"( \\u0361\\xb0 \\u035c\\u0296 \\u0361\\xb0)\",result:\"( \\u0361\\xb0 \\u035c\\u0296 \\u0361\\xb0)\"}",
    statement:"upper('( Õ°¬∞ Õú ñ Õ°¬∞)')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"( Õ°¬∞ Õú ñ Õ°¬∞)"
    }
  },
  {
    name:"upper valid cases{in:\"\\U0001f60d\",result:\"\\U0001f60d\"}",
    statement:"upper('üòç')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"üòç"
    }
  },
  {
    name:"upper valid cases{in:\"\\U0001f469\\U0001f3fd\",result:\"\\U0001f469\\U0001f3fd\"}",
    statement:"upper('üë©üèΩ')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"üë©üèΩ"
    }
  },
  {
    name:"upper valid cases{in:\"\\U0001f47e \\U0001f647 \\U0001f481 \\U0001f645 \\U0001f646 \\U0001f64b \\U0001f64e \\U0001f64d\",result:\"\\U0001f47e \\U0001f647 \\U0001f481 \\U0001f645 \\U0001f646 \\U0001f64b \\U0001f64e \\U0001f64d\"}",
    statement:"upper('üëæ üôá üíÅ üôÖ üôÜ üôã üôé üôç')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"üëæ üôá üíÅ üôÖ üôÜ üôã üôé üôç"
    }
  },
  {
    name:"upper valid cases{in:\"\\U0001f435 \\U0001f648 \\U0001f649 \\U0001f64a\",result:\"\\U0001f435 \\U0001f648 \\U0001f649 \\U0001f64a\"}",
    statement:"upper('üêµ üôà üôâ üôä')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"üêµ üôà üôâ üôä"
    }
  },
  {
    name:"upper valid cases{in:\"\\u2764\\ufe0f \\U0001f494 \\U0001f48c \\U0001f495 \\U0001f49e \\U0001f493 \\U0001f497 \\U0001f496 \\U0001f498 \\U0001f49d \\U0001f49f \\U0001f49c \\U0001f49b \\U0001f49a \\U0001f499\",result:\"\\u2764\\ufe0f \\U0001f494 \\U0001f48c \\U0001f495 \\U0001f49e \\U0001f493 \\U0001f497 \\U0001f496 \\U0001f498 \\U0001f49d \\U0001f49f \\U0001f49c \\U0001f49b \\U0001f49a \\U0001f499\"}",
    statement:"upper('‚ù§Ô∏è üíî üíå üíï üíû üíì üíó üíñ üíò üíù üíü üíú üíõ üíö üíô')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"‚ù§Ô∏è üíî üíå üíï üíû üíì üíó üíñ üíò üíù üíü üíú üíõ üíö üíô"
    }
  },
  {
    name:"upper valid cases{in:\"\\u270b\\U0001f3ff \\U0001f4aa\\U0001f3ff \\U0001f450\\U0001f3ff \\U0001f64c\\U0001f3ff \\U0001f44f\\U0001f3ff \\U0001f64f\\U0001f3ff\",result:\"\\u270b\\U0001f3ff \\U0001f4aa\\U0001f3ff \\U0001f450\\U0001f3ff \\U0001f64c\\U0001f3ff \\U0001f44f\\U0001f3ff \\U0001f64f\\U0001f3ff\"}",
    statement:"upper('‚úãüèø üí™üèø üëêüèø üôåüèø üëèüèø üôèüèø')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"‚úãüèø üí™üèø üëêüèø üôåüèø üëèüèø üôèüèø"
    }
  },
  {
    name:"upper valid cases{in:\"\\U0001f6be \\U0001f192 \\U0001f193 \\U0001f195 \\U0001f196 \\U0001f197 \\U0001f199 \\U0001f3e7\",result:\"\\U0001f6be \\U0001f192 \\U0001f193 \\U0001f195 \\U0001f196 \\U0001f197 \\U0001f199 \\U0001f3e7\"}",
    statement:"upper('üöæ üÜí üÜì üÜï üÜñ üÜó üÜô üèß')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"üöæ üÜí üÜì üÜï üÜñ üÜó üÜô üèß"
    }
  },
  {
    name:"upper valid cases{in:\"0\\ufe0f\\u20e3 1\\ufe0f\\u20e3 2\\ufe0f\\u20e3 3\\ufe0f\\u20e3 4\\ufe0f\\u20e3 5\\ufe0f\\u20e3 6\\ufe0f\\u20e3 7\\ufe0f\\u20e3 8\\ufe0f\\u20e3 9\\ufe0f\\u20e3 \\U0001f51f\",result:\"0\\ufe0f\\u20e3 1\\ufe0f\\u20e3 2\\ufe0f\\u20e3 3\\ufe0f\\u20e3 4\\ufe0f\\u20e3 5\\ufe0f\\u20e3 6\\ufe0f\\u20e3 7\\ufe0f\\u20e3 8\\ufe0f\\u20e3 9\\ufe0f\\u20e3 \\U0001f51f\"}",
    statement:"upper('0Ô∏è‚É£ 1Ô∏è‚É£ 2Ô∏è‚É£ 3Ô∏è‚É£ 4Ô∏è‚É£ 5Ô∏è‚É£ 6Ô∏è‚É£ 7Ô∏è‚É£ 8Ô∏è‚É£ 9Ô∏è‚É£ üîü')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0Ô∏è‚É£ 1Ô∏è‚É£ 2Ô∏è‚É£ 3Ô∏è‚É£ 4Ô∏è‚É£ 5Ô∏è‚É£ 6Ô∏è‚É£ 7Ô∏è‚É£ 8Ô∏è‚É£ 9Ô∏è‚É£ üîü"
    }
  },
  {
    name:"upper valid cases{in:\"\\U0001f1fa\\U0001f1f8\\U0001f1f7\\U0001f1fa\\U0001f1f8 \\U0001f1e6\\U0001f1eb\\U0001f1e6\\U0001f1f2\\U0001f1f8\",result:\"\\U0001f1fa\\U0001f1f8\\U0001f1f7\\U0001f1fa\\U0001f1f8 \\U0001f1e6\\U0001f1eb\\U0001f1e6\\U0001f1f2\\U0001f1f8\"}",
    statement:"upper('üá∫üá∏üá∑üá∫üá∏ üá¶üá´üá¶üá≤üá∏')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"üá∫üá∏üá∑üá∫üá∏ üá¶üá´üá¶üá≤üá∏"
    }
  },
  {
    name:"upper valid cases{in:\"\\U0001f1fa\\U0001f1f8\\U0001f1f7\\U0001f1fa\\U0001f1f8\\U0001f1e6\\U0001f1eb\\U0001f1e6\\U0001f1f2\",result:\"\\U0001f1fa\\U0001f1f8\\U0001f1f7\\U0001f1fa\\U0001f1f8\\U0001f1e6\\U0001f1eb\\U0001f1e6\\U0001f1f2\"}",
    statement:"upper('üá∫üá∏üá∑üá∫üá∏üá¶üá´üá¶üá≤')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"üá∫üá∏üá∑üá∫üá∏üá¶üá´üá¶üá≤"
    }
  },
  {
    name:"upper valid cases{in:\"\\U0001f1fa\\U0001f1f8\\U0001f1f7\\U0001f1fa\\U0001f1f8\\U0001f1e6\",result:\"\\U0001f1fa\\U0001f1f8\\U0001f1f7\\U0001f1fa\\U0001f1f8\\U0001f1e6\"}",
    statement:"upper('üá∫üá∏üá∑üá∫üá∏üá¶')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"üá∫üá∏üá∑üá∫üá∏üá¶"
    }
  },
  {
    name:"upper valid cases{in:\"\\uff34\\uff48\\uff45 \\uff51\\uff55\\uff49\\uff43\\uff4b \\uff42\\uff52\\uff4f\\uff57\\uff4e \\uff46\\uff4f\\uff58 \\uff4a\\uff55\\uff4d\\uff50\\uff53 \\uff2f\\uff36\\uff25\\uff32 \\uff34\\uff28\\uff25 \\uff4c\\uff41\\uff5a\\uff59 \\uff44\\uff4f\\uff47\",result:\"\\uff34\\uff28\\uff25 \\uff31\\uff35\\uff29\\uff23\\uff2b \\uff22\\uff32\\uff2f\\uff37\\uff2e \\uff26\\uff2f\\uff38 \\uff2a\\uff35\\uff2d\\uff30\\uff33 \\uff2f\\uff36\\uff25\\uff32 \\uff34\\uff28\\uff25 \\uff2c\\uff21\\uff3a\\uff39 \\uff24\\uff2f\\uff27\"}",
    statement:"upper('Ôº¥ÔΩàÔΩÖ ÔΩëÔΩïÔΩâÔΩÉÔΩã ÔΩÇÔΩíÔΩèÔΩóÔΩé ÔΩÜÔΩèÔΩò ÔΩäÔΩïÔΩçÔΩêÔΩì ÔºØÔº∂Ôº•Ôº≤ Ôº¥Ôº®Ôº• ÔΩåÔΩÅÔΩöÔΩô ÔΩÑÔΩèÔΩá')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Ôº¥Ôº®Ôº• Ôº±ÔºµÔº©Ôº£Ôº´ Ôº¢Ôº≤ÔºØÔº∑ÔºÆ Ôº¶ÔºØÔº∏ Ôº™ÔºµÔº≠Ôº∞Ôº≥ ÔºØÔº∂Ôº•Ôº≤ Ôº¥Ôº®Ôº• Ôº¨Ôº°Ôº∫Ôºπ Ôº§ÔºØÔºß"
    }
  },
  {
    name:"upper null and missing propagation{param:\"null\"}",
    statement:"upper(null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"upper null and missing propagation{param:\"missing\"}",
    statement:"upper(missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"upper wrong type of arguments{param:\"1\"}",
    statement:"upper(1)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"upper wrong type of arguments{param:\"1.0\"}",
    statement:"upper(1.0)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"upper wrong type of arguments{param:\"1e0\"}",
    statement:"upper(1e0)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"upper wrong type of arguments{param:\"`()`\"}",
    statement:"upper(`()`)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"upper wrong type of arguments{param:\"true\"}",
    statement:"upper(true)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"upper wrong type of arguments{param:\"`[]`\"}",
    statement:"upper(`[]`)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"upper wrong type of arguments{param:\"`{}`\"}",
    statement:"upper(`{}`)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  }
]
lower::[
  {
    name:"lower valid cases{in:\" !\\\"#%&()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\",result:\" !\\\"#%&()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\"}",
    statement:"lower(' !\"#$%&()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:" !\"#$%&()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    }
  },
  {
    name:"lower valid cases{in:\"\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff\",result:\"\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xd7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff\"}",
    statement:"lower('¬°¬¢¬£¬§¬•¬¶¬ß¬®¬©¬™¬´¬¨¬≠¬Æ¬Ø¬∞¬±¬≤¬≥¬¥¬µ¬∂¬∑¬∏¬π¬∫¬ª¬º¬Ω¬æ¬ø√Ä√Å√Ç√É√Ñ√Ö√Ü√á√à√â√ä√ã√å√ç√é√è√ê√ë√í√ì√î√ï√ñ√ó√ò√ô√ö√õ√ú√ù√û√†√°√¢√£√§√•√¶√ß√®√©√™√´√¨√≠√Æ√Ø√∞√±√≤√≥√¥√µ√∂√∑√∏√π√∫√ª√º√Ω√æ√ø')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"¬°¬¢¬£¬§¬•¬¶¬ß¬®¬©¬™¬´¬¨¬≠¬Æ¬Ø¬∞¬±¬≤¬≥¬¥¬µ¬∂¬∑¬∏¬π¬∫¬ª¬º¬Ω¬æ¬ø√†√°√¢√£√§√•√¶√ß√®√©√™√´√¨√≠√Æ√Ø√∞√±√≤√≥√¥√µ√∂√ó√∏√π√∫√ª√º√Ω√æ√†√°√¢√£√§√•√¶√ß√®√©√™√´√¨√≠√Æ√Ø√∞√±√≤√≥√¥√µ√∂√∑√∏√π√∫√ª√º√Ω√æ√ø"
    }
  },
  {
    name:"lower valid cases{in:\"\\u0100\\u0101\\u0102\\u0103\\u0104\\u0105\\u0106\\u0107\\u0108\\u0109\\u010a\\u010b\\u010c\\u010d\\u010e\\u010f\\u0110\\u0111\\u0112\\u0113\\u0114\\u0115\\u0116\\u0117\\u0118\\u0119\\u011a\\u011b\\u011c\\u011d\\u011e\\u011f\\u0120\\u0121\\u0122\\u0123\\u0124\\u0125\\u0126\\u0127\\u0128\\u0129\\u012a\\u012b\\u012c\\u012d\\u012e\\u012f\\u0130\\u0131\\u0132\\u0133\\u0134\\u0135\\u0136\\u0137\\u0138\\u0139\\u013a\\u013b\\u013c\\u013d\\u013e\\u013f\\u0140\\u0141\\u0142\\u0143\\u0144\\u0145\\u0146\\u0147\\u0148\\u014a\\u014b\\u014c\\u014d\\u014e\\u014f\\u0150\\u0151\\u0152\\u0153\\u0154\\u0155\\u0156\\u0157\\u0158\\u0159\\u015a\\u015b\\u015c\\u015d\\u015e\\u015f\\u0160\\u0161\\u0162\\u0163\\u0164\\u0165\\u0166\\u0167\\u0168\\u0169\\u016a\\u016b\\u016c\\u016d\\u016e\\u016f\\u0170\\u0171\\u0172\\u0173\\u0174\\u0175\\u0176\\u0177\\u0178\\u0179\\u017a\\u017b\\u017c\\u017d\\u017e\",result:\"\\u0101\\u0101\\u0103\\u0103\\u0105\\u0105\\u0107\\u0107\\u0109\\u0109\\u010b\\u010b\\u010d\\u010d\\u010f\\u010f\\u0111\\u0111\\u0113\\u0113\\u0115\\u0115\\u0117\\u0117\\u0119\\u0119\\u011b\\u011b\\u011d\\u011d\\u011f\\u011f\\u0121\\u0121\\u0123\\u0123\\u0125\\u0125\\u0127\\u0127\\u0129\\u0129\\u012b\\u012b\\u012d\\u012d\\u012f\\u012fi\\u0307\\u0131\\u0133\\u0133\\u0135\\u0135\\u0137\\u0137\\u0138\\u013a\\u013a\\u013c\\u013c\\u013e\\u013e\\u0140\\u0140\\u0142\\u0142\\u0144\\u0144\\u0146\\u0146\\u0148\\u0148\\u014b\\u014b\\u014d\\u014d\\u014f\\u014f\\u0151\\u0151\\u0153\\u0153\\u0155\\u0155\\u0157\\u0157\\u0159\\u0159\\u015b\\u015b\\u015d\\u015d\\u015f\\u015f\\u0161\\u0161\\u0163\\u0163\\u0165\\u0165\\u0167\\u0167\\u0169\\u0169\\u016b\\u016b\\u016d\\u016d\\u016f\\u016f\\u0171\\u0171\\u0173\\u0173\\u0175\\u0175\\u0177\\u0177\\xff\\u017a\\u017a\\u017c\\u017c\\u017e\\u017e\"}",
    statement:"lower('ƒÄƒÅƒÇƒÉƒÑƒÖƒÜƒáƒàƒâƒäƒãƒåƒçƒéƒèƒêƒëƒíƒìƒîƒïƒñƒóƒòƒôƒöƒõƒúƒùƒûƒüƒ†ƒ°ƒ¢ƒ£ƒ§ƒ•ƒ¶ƒßƒ®ƒ©ƒ™ƒ´ƒ¨ƒ≠ƒÆƒØƒ∞ƒ±ƒ≤ƒ≥ƒ¥ƒµƒ∂ƒ∑ƒ∏ƒπƒ∫ƒªƒºƒΩƒæƒø≈Ä≈Å≈Ç≈É≈Ñ≈Ö≈Ü≈á≈à≈ä≈ã≈å≈ç≈é≈è≈ê≈ë≈í≈ì≈î≈ï≈ñ≈ó≈ò≈ô≈ö≈õ≈ú≈ù≈û≈ü≈†≈°≈¢≈£≈§≈•≈¶≈ß≈®≈©≈™≈´≈¨≈≠≈Æ≈Ø≈∞≈±≈≤≈≥≈¥≈µ≈∂≈∑≈∏≈π≈∫≈ª≈º≈Ω≈æ')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"ƒÅƒÅƒÉƒÉƒÖƒÖƒáƒáƒâƒâƒãƒãƒçƒçƒèƒèƒëƒëƒìƒìƒïƒïƒóƒóƒôƒôƒõƒõƒùƒùƒüƒüƒ°ƒ°ƒ£ƒ£ƒ•ƒ•ƒßƒßƒ©ƒ©ƒ´ƒ´ƒ≠ƒ≠ƒØƒØiÃáƒ±ƒ≥ƒ≥ƒµƒµƒ∑ƒ∑ƒ∏ƒ∫ƒ∫ƒºƒºƒæƒæ≈Ä≈Ä≈Ç≈Ç≈Ñ≈Ñ≈Ü≈Ü≈à≈à≈ã≈ã≈ç≈ç≈è≈è≈ë≈ë≈ì≈ì≈ï≈ï≈ó≈ó≈ô≈ô≈õ≈õ≈ù≈ù≈ü≈ü≈°≈°≈£≈£≈•≈•≈ß≈ß≈©≈©≈´≈´≈≠≈≠≈Ø≈Ø≈±≈±≈≥≈≥≈µ≈µ≈∑≈∑√ø≈∫≈∫≈º≈º≈æ≈æ"
    }
  },
  {
    name:"lower valid cases{in:\"\\u0180\\u0181\\u0182\\u0183\\u0184\\u0185\\u0186\\u0187\\u0188\\u0189\\u018a\\u018b\\u018c\\u018d\\u018e\\u018f\\u0190\\u0191\\u0192\\u0193\\u0194\\u0195\\u0196\\u0197\\u0198\\u0199\\u019a\\u019b\\u019c\\u019d\\u019e\\u019f\\u01a0\\u01a1\\u01a2\\u01a3\\u01a4\\u01a5\\u01a6\\u01a7\\u01a8\\u01a9\\u01aa\\u01ab\\u01ac\\u01ad\\u01ae\\u01af\\u01b0\\u01b1\\u01b2\\u01b3\\u01b4\\u01b5\\u01b6\\u01b7\\u01b8\\u01b9\\u01ba\\u01bb\\u01bc\\u01bd\\u01be\\u01bf\\u01c0\\u01c1\\u01c2\\u01c3\\u01c4\\u01c5\\u01c6\\u01c7\\u01c8\\u01c9\\u01ca\\u01cb\\u01cc\\u01cd\\u01ce\\u01cf\\u01d0\\u01d1\\u01d2\\u01d3\\u01d4\\u01d5\\u01d6\\u01d7\\u01d8\\u01d9\\u01da\\u01db\\u01dc\\u01dd\\u01de\\u01df\\u01e0\\u01e1\\u01e2\\u01e3\\u01e4\\u01e5\\u01e6\\u01e7\\u01e8\\u01e9\\u01ea\\u01eb\\u01ec\\u01ed\\u01ee\\u01ef\\u01f0\\u01f1\\u01f2\\u01f3\\u01f4\\u01f5\\u01f6\\u01f7\\u01f8\\u01f9\\u01fa\\u01fb\\u01fc\\u01fd\\u01fe\\u01ff\\u0200\\u0201\\u0202\\u0203\\u0204\\u0205\\u0206\\u0207\\u0208\\u0209\\u020a\\u020b\\u020c\\u020d\\u020e\\u020f\\u0210\\u0211\\u0212\\u0213\\u0214\\u0215\\u0216\\u0217\\u0218\\u0219\\u021a\\u021b\\u021c\\u021d\\u021e\\u021f\\u0220\\u0221\\u0222\\u0223\\u0224\\u0225\\u0226\\u0227\\u0228\\u0229\\u022a\\u022b\\u022c\\u022d\\u022e\\u022f\\u0230\\u0231\\u0232\\u0233\\u0234\\u0235\\u0236\\u0237\\u0238\\u0239\\u023a\\u023b\\u023c\\u023d\\u023e\\u023f\\u0240\\u0241\\u0242\\u0243\\u0244\\u0245\\u0246\\u0247\\u0248\\u0249\\u024a\\u024b\\u024c\\u024d\\u024e\\u024f\",result:\"\\u0180\\u0253\\u0183\\u0183\\u0185\\u0185\\u0254\\u0188\\u0188\\u0256\\u0257\\u018c\\u018c\\u018d\\u01dd\\u0259\\u025b\\u0192\\u0192\\u0260\\u0263\\u0195\\u0269\\u0268\\u0199\\u0199\\u019a\\u019b\\u026f\\u0272\\u019e\\u0275\\u01a1\\u01a1\\u01a3\\u01a3\\u01a5\\u01a5\\u0280\\u01a8\\u01a8\\u0283\\u01aa\\u01ab\\u01ad\\u01ad\\u0288\\u01b0\\u01b0\\u028a\\u028b\\u01b4\\u01b4\\u01b6\\u01b6\\u0292\\u01b9\\u01b9\\u01ba\\u01bb\\u01bd\\u01bd\\u01be\\u01bf\\u01c0\\u01c1\\u01c2\\u01c3\\u01c6\\u01c6\\u01c6\\u01c9\\u01c9\\u01c9\\u01cc\\u01cc\\u01cc\\u01ce\\u01ce\\u01d0\\u01d0\\u01d2\\u01d2\\u01d4\\u01d4\\u01d6\\u01d6\\u01d8\\u01d8\\u01da\\u01da\\u01dc\\u01dc\\u01dd\\u01df\\u01df\\u01e1\\u01e1\\u01e3\\u01e3\\u01e5\\u01e5\\u01e7\\u01e7\\u01e9\\u01e9\\u01eb\\u01eb\\u01ed\\u01ed\\u01ef\\u01ef\\u01f0\\u01f3\\u01f3\\u01f3\\u01f5\\u01f5\\u0195\\u01bf\\u01f9\\u01f9\\u01fb\\u01fb\\u01fd\\u01fd\\u01ff\\u01ff\\u0201\\u0201\\u0203\\u0203\\u0205\\u0205\\u0207\\u0207\\u0209\\u0209\\u020b\\u020b\\u020d\\u020d\\u020f\\u020f\\u0211\\u0211\\u0213\\u0213\\u0215\\u0215\\u0217\\u0217\\u0219\\u0219\\u021b\\u021b\\u021d\\u021d\\u021f\\u021f\\u019e\\u0221\\u0223\\u0223\\u0225\\u0225\\u0227\\u0227\\u0229\\u0229\\u022b\\u022b\\u022d\\u022d\\u022f\\u022f\\u0231\\u0231\\u0233\\u0233\\u0234\\u0235\\u0236\\u0237\\u0238\\u0239\\u2c65\\u023c\\u023c\\u019a\\u2c66\\u023f\\u0240\\u0242\\u0242\\u0180\\u0289\\u028c\\u0247\\u0247\\u0249\\u0249\\u024b\\u024b\\u024d\\u024d\\u024f\\u024f\"}",
    statement:"lower('∆Ä∆Å∆Ç∆É∆Ñ∆Ö∆Ü∆á∆à∆â∆ä∆ã∆å∆ç∆é∆è∆ê∆ë∆í∆ì∆î∆ï∆ñ∆ó∆ò∆ô∆ö∆õ∆ú∆ù∆û∆ü∆†∆°∆¢∆£∆§∆•∆¶∆ß∆®∆©∆™∆´∆¨∆≠∆Æ∆Ø∆∞∆±∆≤∆≥∆¥∆µ∆∂∆∑∆∏∆π∆∫∆ª∆º∆Ω∆æ∆ø«Ä«Å«Ç«É«Ñ«Ö«Ü«á«à«â«ä«ã«å«ç«é«è«ê«ë«í«ì«î«ï«ñ«ó«ò«ô«ö«õ«ú«ù«û«ü«†«°«¢«£«§«•«¶«ß«®«©«™«´«¨«≠«Æ«Ø«∞«±«≤«≥«¥«µ«∂«∑«∏«π«∫«ª«º«Ω«æ«ø»Ä»Å»Ç»É»Ñ»Ö»Ü»á»à»â»ä»ã»å»ç»é»è»ê»ë»í»ì»î»ï»ñ»ó»ò»ô»ö»õ»ú»ù»û»ü»†»°»¢»£»§»•»¶»ß»®»©»™»´»¨»≠»Æ»Ø»∞»±»≤»≥»¥»µ»∂»∑»∏»π»∫»ª»º»Ω»æ»ø…Ä…Å…Ç…É…Ñ…Ö…Ü…á…à…â…ä…ã…å…ç…é…è')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"∆Ä…ì∆É∆É∆Ö∆Ö…î∆à∆à…ñ…ó∆å∆å∆ç«ù…ô…õ∆í∆í…†…£∆ï…©…®∆ô∆ô∆ö∆õ…Ø…≤∆û…µ∆°∆°∆£∆£∆•∆• Ä∆®∆® É∆™∆´∆≠∆≠ à∆∞∆∞ ä ã∆¥∆¥∆∂∆∂ í∆π∆π∆∫∆ª∆Ω∆Ω∆æ∆ø«Ä«Å«Ç«É«Ü«Ü«Ü«â«â«â«å«å«å«é«é«ê«ê«í«í«î«î«ñ«ñ«ò«ò«ö«ö«ú«ú«ù«ü«ü«°«°«£«£«•«•«ß«ß«©«©«´«´«≠«≠«Ø«Ø«∞«≥«≥«≥«µ«µ∆ï∆ø«π«π«ª«ª«Ω«Ω«ø«ø»Å»Å»É»É»Ö»Ö»á»á»â»â»ã»ã»ç»ç»è»è»ë»ë»ì»ì»ï»ï»ó»ó»ô»ô»õ»õ»ù»ù»ü»ü∆û»°»£»£»•»•»ß»ß»©»©»´»´»≠»≠»Ø»Ø»±»±»≥»≥»¥»µ»∂»∑»∏»π‚±•»º»º∆ö‚±¶»ø…Ä…Ç…Ç∆Ä â å…á…á…â…â…ã…ã…ç…ç…è…è"
    }
  },
  {
    name:"lower valid cases{in:\"\\u2c60\\u2c61\\u2c62\\u2c63\\u2c64\\u2c65\\u2c66\\u2c67\\u2c68\\u2c69\\u2c6a\\u2c6b\\u2c6c\\u2c6d\\u2c6e\\u2c6f\\u2c70\\u2c71\\u2c72\\u2c73\\u2c74\\u2c75\\u2c76\\u2c77\\u2c78\\u2c79\\u2c7a\\u2c7b\\u2c7c\\u2c7d\\u2c7e\\u2c7f\",result:\"\\u2c61\\u2c61\\u026b\\u1d7d\\u027d\\u2c65\\u2c66\\u2c68\\u2c68\\u2c6a\\u2c6a\\u2c6c\\u2c6c\\u0251\\u0271\\u0250\\u0252\\u2c71\\u2c73\\u2c73\\u2c74\\u2c76\\u2c76\\u2c77\\u2c78\\u2c79\\u2c7a\\u2c7b\\u2c7c\\u2c7d\\u023f\\u0240\"}",
    statement:"lower('‚±†‚±°‚±¢‚±£‚±§‚±•‚±¶‚±ß‚±®‚±©‚±™‚±´‚±¨‚±≠‚±Æ‚±Ø‚±∞‚±±‚±≤‚±≥‚±¥‚±µ‚±∂‚±∑‚±∏‚±π‚±∫‚±ª‚±º‚±Ω‚±æ‚±ø')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"‚±°‚±°…´·µΩ…Ω‚±•‚±¶‚±®‚±®‚±™‚±™‚±¨‚±¨…ë…±…ê…í‚±±‚±≥‚±≥‚±¥‚±∂‚±∂‚±∑‚±∏‚±π‚±∫‚±ª‚±º‚±Ω»ø…Ä"
    }
  },
  {
    name:"lower valid cases{in:\"\\u8a71\\u5bb6\\u8eab\\u5727\\u8cbb\\u8c37\\u6599\\u6751\\u80fd\\u8a08\\u7a0e\\u91d1\\u3041\\u3066\\u30c8\\u30ad\\u307b\\u30c3\\u0394\\u03d5\\u03be\\u0391\",result:\"\\u8a71\\u5bb6\\u8eab\\u5727\\u8cbb\\u8c37\\u6599\\u6751\\u80fd\\u8a08\\u7a0e\\u91d1\\u3041\\u3066\\u30c8\\u30ad\\u307b\\u30c3\\u03b4\\u03d5\\u03be\\u03b1\"}",
    statement:"lower('Ë©±ÂÆ∂Ë∫´ÂúßË≤ªË∞∑ÊñôÊùëËÉΩË®àÁ®éÈáë„ÅÅ„Å¶„Éà„Ç≠„Åª„ÉÉŒîœïŒæŒë')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Ë©±ÂÆ∂Ë∫´ÂúßË≤ªË∞∑ÊñôÊùëËÉΩË®àÁ®éÈáë„ÅÅ„Å¶„Éà„Ç≠„Åª„ÉÉŒ¥œïŒæŒ±"
    }
  },
  {
    name:"lower valid cases{in:\"undefined\",result:\"undefined\"}",
    statement:"lower('undefined')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"undefined"
    }
  },
  {
    name:"lower valid cases{in:\"undef\",result:\"undef\"}",
    statement:"lower('undef')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"undef"
    }
  },
  {
    name:"lower valid cases{in:\"null\",result:\"null\"}",
    statement:"lower('null')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"null"
    }
  },
  {
    name:"lower valid cases{in:\"NULL\",result:\"null\"}",
    statement:"lower('NULL')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"null"
    }
  },
  {
    name:"lower valid cases{in:\"(null)\",result:\"(null)\"}",
    statement:"lower('(null)')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"(null)"
    }
  },
  {
    name:"lower valid cases{in:\"nil\",result:\"nil\"}",
    statement:"lower('nil')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"nil"
    }
  },
  {
    name:"lower valid cases{in:\"NIL\",result:\"nil\"}",
    statement:"lower('NIL')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"nil"
    }
  },
  {
    name:"lower valid cases{in:\"true\",result:\"true\"}",
    statement:"lower('true')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"true"
    }
  },
  {
    name:"lower valid cases{in:\"false\",result:\"false\"}",
    statement:"lower('false')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"false"
    }
  },
  {
    name:"lower valid cases{in:\"True\",result:\"true\"}",
    statement:"lower('True')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"true"
    }
  },
  {
    name:"lower valid cases{in:\"False\",result:\"false\"}",
    statement:"lower('False')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"false"
    }
  },
  {
    name:"lower valid cases{in:\"TRUE\",result:\"true\"}",
    statement:"lower('TRUE')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"true"
    }
  },
  {
    name:"lower valid cases{in:\"FALSE\",result:\"false\"}",
    statement:"lower('FALSE')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"false"
    }
  },
  {
    name:"lower valid cases{in:\"None\",result:\"none\"}",
    statement:"lower('None')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"none"
    }
  },
  {
    name:"lower valid cases{in:\"hasOwnProperty\",result:\"hasownproperty\"}",
    statement:"lower('hasOwnProperty')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"hasownproperty"
    }
  },
  {
    name:"lower valid cases{in:\"999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\",result:\"999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\"}",
    statement:"lower('999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
    }
  },
  {
    name:"lower valid cases{in:\"123456789012345678901234567890123456789\",result:\"123456789012345678901234567890123456789\"}",
    statement:"lower('123456789012345678901234567890123456789')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"123456789012345678901234567890123456789"
    }
  },
  {
    name:"lower valid cases{in:\"0\",result:\"0\"}",
    statement:"lower('0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0"
    }
  },
  {
    name:"lower valid cases{in:\"1\",result:\"1\"}",
    statement:"lower('1')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1"
    }
  },
  {
    name:"lower valid cases{in:\"1.00\",result:\"1.00\"}",
    statement:"lower('1.00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1.00"
    }
  },
  {
    name:"lower valid cases{in:\"1.00\",result:\"1.00\"}",
    statement:"lower('$1.00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"$1.00"
    }
  },
  {
    name:"lower valid cases{in:\"1/2\",result:\"1/2\"}",
    statement:"lower('1/2')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1/2"
    }
  },
  {
    name:"lower valid cases{in:\"1E2\",result:\"1e2\"}",
    statement:"lower('1E2')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1e2"
    }
  },
  {
    name:"lower valid cases{in:\"1E02\",result:\"1e02\"}",
    statement:"lower('1E02')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1e02"
    }
  },
  {
    name:"lower valid cases{in:\"1E+02\",result:\"1e+02\"}",
    statement:"lower('1E+02')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1e+02"
    }
  },
  {
    name:"lower valid cases{in:\"-1\",result:\"-1\"}",
    statement:"lower('-1')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"-1"
    }
  },
  {
    name:"lower valid cases{in:\"-1.00\",result:\"-1.00\"}",
    statement:"lower('-1.00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"-1.00"
    }
  },
  {
    name:"lower valid cases{in:\"-1.00\",result:\"-1.00\"}",
    statement:"lower('-$1.00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"-$1.00"
    }
  },
  {
    name:"lower valid cases{in:\"-1/2\",result:\"-1/2\"}",
    statement:"lower('-1/2')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"-1/2"
    }
  },
  {
    name:"lower valid cases{in:\"-1E2\",result:\"-1e2\"}",
    statement:"lower('-1E2')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"-1e2"
    }
  },
  {
    name:"lower valid cases{in:\"-1E02\",result:\"-1e02\"}",
    statement:"lower('-1E02')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"-1e02"
    }
  },
  {
    name:"lower valid cases{in:\"-1E+02\",result:\"-1e+02\"}",
    statement:"lower('-1E+02')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"-1e+02"
    }
  },
  {
    name:"lower valid cases{in:\"1/0\",result:\"1/0\"}",
    statement:"lower('1/0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1/0"
    }
  },
  {
    name:"lower valid cases{in:\"0/0\",result:\"0/0\"}",
    statement:"lower('0/0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0/0"
    }
  },
  {
    name:"lower valid cases{in:\"-2147483648/-1\",result:\"-2147483648/-1\"}",
    statement:"lower('-2147483648/-1')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"-2147483648/-1"
    }
  },
  {
    name:"lower valid cases{in:\"-9223372036854775808/-1\",result:\"-9223372036854775808/-1\"}",
    statement:"lower('-9223372036854775808/-1')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"-9223372036854775808/-1"
    }
  },
  {
    name:"lower valid cases{in:\"-0\",result:\"-0\"}",
    statement:"lower('-0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"-0"
    }
  },
  {
    name:"lower valid cases{in:\"-0.0\",result:\"-0.0\"}",
    statement:"lower('-0.0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"-0.0"
    }
  },
  {
    name:"lower valid cases{in:\"+0\",result:\"+0\"}",
    statement:"lower('+0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+0"
    }
  },
  {
    name:"lower valid cases{in:\"+0.0\",result:\"+0.0\"}",
    statement:"lower('+0.0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+0.0"
    }
  },
  {
    name:"lower valid cases{in:\"0.00\",result:\"0.00\"}",
    statement:"lower('0.00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0.00"
    }
  },
  {
    name:"lower valid cases{in:\"0..0\",result:\"0..0\"}",
    statement:"lower('0..0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0..0"
    }
  },
  {
    name:"lower valid cases{in:\".\",result:\".\"}",
    statement:"lower('.')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"."
    }
  },
  {
    name:"lower valid cases{in:\"0.0.0\",result:\"0.0.0\"}",
    statement:"lower('0.0.0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0.0.0"
    }
  },
  {
    name:"lower valid cases{in:\"0,00\",result:\"0,00\"}",
    statement:"lower('0,00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0,00"
    }
  },
  {
    name:"lower valid cases{in:\"0,,0\",result:\"0,,0\"}",
    statement:"lower('0,,0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0,,0"
    }
  },
  {
    name:"lower valid cases{in:\",\",result:\",\"}",
    statement:"lower(',')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:","
    }
  },
  {
    name:"lower valid cases{in:\"0,0,0\",result:\"0,0,0\"}",
    statement:"lower('0,0,0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0,0,0"
    }
  },
  {
    name:"lower valid cases{in:\"0.0/0\",result:\"0.0/0\"}",
    statement:"lower('0.0/0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0.0/0"
    }
  },
  {
    name:"lower valid cases{in:\"1.0/0.0\",result:\"1.0/0.0\"}",
    statement:"lower('1.0/0.0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1.0/0.0"
    }
  },
  {
    name:"lower valid cases{in:\"0.0/0.0\",result:\"0.0/0.0\"}",
    statement:"lower('0.0/0.0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0.0/0.0"
    }
  },
  {
    name:"lower valid cases{in:\"1,0/0,0\",result:\"1,0/0,0\"}",
    statement:"lower('1,0/0,0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1,0/0,0"
    }
  },
  {
    name:"lower valid cases{in:\"0,0/0,0\",result:\"0,0/0,0\"}",
    statement:"lower('0,0/0,0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0,0/0,0"
    }
  },
  {
    name:"lower valid cases{in:\"--1\",result:\"--1\"}",
    statement:"lower('--1')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"--1"
    }
  },
  {
    name:"lower valid cases{in:\"-\",result:\"-\"}",
    statement:"lower('-')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"-"
    }
  },
  {
    name:"lower valid cases{in:\"-.\",result:\"-.\"}",
    statement:"lower('-.')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"-."
    }
  },
  {
    name:"lower valid cases{in:\"-,\",result:\"-,\"}",
    statement:"lower('-,')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"-,"
    }
  },
  {
    name:"lower valid cases{in:\"NaN\",result:\"nan\"}",
    statement:"lower('NaN')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"nan"
    }
  },
  {
    name:"lower valid cases{in:\"Infinity\",result:\"infinity\"}",
    statement:"lower('Infinity')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"infinity"
    }
  },
  {
    name:"lower valid cases{in:\"-Infinity\",result:\"-infinity\"}",
    statement:"lower('-Infinity')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"-infinity"
    }
  },
  {
    name:"lower valid cases{in:\"INF\",result:\"inf\"}",
    statement:"lower('INF')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"inf"
    }
  },
  {
    name:"lower valid cases{in:\"1#INF\",result:\"1#inf\"}",
    statement:"lower('1#INF')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1#inf"
    }
  },
  {
    name:"lower valid cases{in:\"-1#IND\",result:\"-1#ind\"}",
    statement:"lower('-1#IND')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"-1#ind"
    }
  },
  {
    name:"lower valid cases{in:\"1#QNAN\",result:\"1#qnan\"}",
    statement:"lower('1#QNAN')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1#qnan"
    }
  },
  {
    name:"lower valid cases{in:\"1#SNAN\",result:\"1#snan\"}",
    statement:"lower('1#SNAN')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1#snan"
    }
  },
  {
    name:"lower valid cases{in:\"1#IND\",result:\"1#ind\"}",
    statement:"lower('1#IND')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1#ind"
    }
  },
  {
    name:"lower valid cases{in:\"0x0\",result:\"0x0\"}",
    statement:"lower('0x0')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0x0"
    }
  },
  {
    name:"lower valid cases{in:\"0xffffffff\",result:\"0xffffffff\"}",
    statement:"lower('0xffffffff')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0xffffffff"
    }
  },
  {
    name:"lower valid cases{in:\"0xffffffffffffffff\",result:\"0xffffffffffffffff\"}",
    statement:"lower('0xffffffffffffffff')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0xffffffffffffffff"
    }
  },
  {
    name:"lower valid cases{in:\"0xabad1dea\",result:\"0xabad1dea\"}",
    statement:"lower('0xabad1dea')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0xabad1dea"
    }
  },
  {
    name:"lower valid cases{in:\"1,000.00\",result:\"1,000.00\"}",
    statement:"lower('1,000.00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1,000.00"
    }
  },
  {
    name:"lower valid cases{in:\"1 000.00\",result:\"1 000.00\"}",
    statement:"lower('1 000.00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1 000.00"
    }
  },
  {
    name:"lower valid cases{in:\"1,000,000.00\",result:\"1,000,000.00\"}",
    statement:"lower('1,000,000.00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1,000,000.00"
    }
  },
  {
    name:"lower valid cases{in:\"1 000 000.00\",result:\"1 000 000.00\"}",
    statement:"lower('1 000 000.00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1 000 000.00"
    }
  },
  {
    name:"lower valid cases{in:\"1.000,00\",result:\"1.000,00\"}",
    statement:"lower('1.000,00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1.000,00"
    }
  },
  {
    name:"lower valid cases{in:\"1 000,00\",result:\"1 000,00\"}",
    statement:"lower('1 000,00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1 000,00"
    }
  },
  {
    name:"lower valid cases{in:\"1.000.000,00\",result:\"1.000.000,00\"}",
    statement:"lower('1.000.000,00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1.000.000,00"
    }
  },
  {
    name:"lower valid cases{in:\"1 000 000,00\",result:\"1 000 000,00\"}",
    statement:"lower('1 000 000,00')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1 000 000,00"
    }
  },
  {
    name:"lower valid cases{in:\"01000\",result:\"01000\"}",
    statement:"lower('01000')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"01000"
    }
  },
  {
    name:"lower valid cases{in:\"08\",result:\"08\"}",
    statement:"lower('08')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"08"
    }
  },
  {
    name:"lower valid cases{in:\"09\",result:\"09\"}",
    statement:"lower('09')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"09"
    }
  },
  {
    name:"lower valid cases{in:\"2.2250738585072011e-308\",result:\"2.2250738585072011e-308\"}",
    statement:"lower('2.2250738585072011e-308')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"2.2250738585072011e-308"
    }
  },
  {
    name:"lower valid cases{in:\"\\u0401\\u0402\\u0403\\u0404\\u0405\\u0406\\u0407\\u0408\\u0409\\u040a\\u040b\\u040c\\u040d\\u040e\\u040f\\u0410\\u0411\\u0412\\u0413\\u0414\\u0415\\u0416\\u0417\\u0418\\u0419\\u041a\\u041b\\u041c\\u041d\\u041e\\u041f\\u0420\\u0421\\u0422\\u0423\\u0424\\u0425\\u0426\\u0427\\u0428\\u0429\\u042a\\u042b\\u042c\\u042d\\u042e\\u042f\\u0430\\u0431\\u0432\\u0433\\u0434\\u0435\\u0436\\u0437\\u0438\\u0439\\u043a\\u043b\\u043c\\u043d\\u043e\\u043f\\u0440\\u0441\\u0442\\u0443\\u0444\\u0445\\u0446\\u0447\\u0448\\u0449\\u044a\\u044b\\u044c\\u044d\\u044e\\u044f\",result:\"\\u0451\\u0452\\u0453\\u0454\\u0455\\u0456\\u0457\\u0458\\u0459\\u045a\\u045b\\u045c\\u045d\\u045e\\u045f\\u0430\\u0431\\u0432\\u0433\\u0434\\u0435\\u0436\\u0437\\u0438\\u0439\\u043a\\u043b\\u043c\\u043d\\u043e\\u043f\\u0440\\u0441\\u0442\\u0443\\u0444\\u0445\\u0446\\u0447\\u0448\\u0449\\u044a\\u044b\\u044c\\u044d\\u044e\\u044f\\u0430\\u0431\\u0432\\u0433\\u0434\\u0435\\u0436\\u0437\\u0438\\u0439\\u043a\\u043b\\u043c\\u043d\\u043e\\u043f\\u0440\\u0441\\u0442\\u0443\\u0444\\u0445\\u0446\\u0447\\u0448\\u0449\\u044a\\u044b\\u044c\\u044d\\u044e\\u044f\"}",
    statement:"lower('–Å–Ç–É–Ñ–Ö–Ü–á–à–â–ä–ã–å–ç–é–è–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"—ë—í—ì—î—ï—ñ—ó—ò—ô—ö—õ—ú—ù—û—ü–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è"
    }
  },
  {
    name:"lower valid cases{in:\"<>?:\\\"{}|_+\",result:\"<>?:\\\"{}|_+\"}",
    statement:"lower('<>?:\"{}|_+')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"<>?:\"{}|_+"
    }
  },
  {
    name:"lower valid cases{in:\"!@#%^&*()`~\",result:\"!@#%^&*()`~\"}",
    statement:"lower('!@#$%^&*()`~')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"!@#$%^&*()`~"
    }
  },
  {
    name:"lower valid cases{in:\"\\u03a9\\u2248\\xe7\\u221a\\u222b\\u02dc\\xb5\\u2264\\u2265\\xf7\",result:\"\\u03c9\\u2248\\xe7\\u221a\\u222b\\u02dc\\xb5\\u2264\\u2265\\xf7\"}",
    statement:"lower('Œ©‚âà√ß‚àö‚à´Àú¬µ‚â§‚â•√∑')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"œâ‚âà√ß‚àö‚à´Àú¬µ‚â§‚â•√∑"
    }
  },
  {
    name:"lower valid cases{in:\"\\xe5\\xdf\\u2202\\u0192\\xa9\\u02d9\\u2206\\u02da\\xac\\u2026\\xe6\",result:\"\\xe5\\xdf\\u2202\\u0192\\xa9\\u02d9\\u2206\\u02da\\xac\\u2026\\xe6\"}",
    statement:"lower('√•√ü‚àÇ∆í¬©Àô‚àÜÀö¬¨‚Ä¶√¶')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"√•√ü‚àÇ∆í¬©Àô‚àÜÀö¬¨‚Ä¶√¶"
    }
  },
  {
    name:"lower valid cases{in:\"\\u0153\\u2211\\xb4\\xae\\u2020\\xa5\\xa8\\u02c6\\xf8\\u03c0\\u201c\\u2018\",result:\"\\u0153\\u2211\\xb4\\xae\\u2020\\xa5\\xa8\\u02c6\\xf8\\u03c0\\u201c\\u2018\"}",
    statement:"lower('≈ì‚àë¬¥¬Æ‚Ä†¬•¬®ÀÜ√∏œÄ‚Äú‚Äò')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"≈ì‚àë¬¥¬Æ‚Ä†¬•¬®ÀÜ√∏œÄ‚Äú‚Äò"
    }
  },
  {
    name:"lower valid cases{in:\"\\xa1\\u2122\\xa3\\xa2\\u221e\\xa7\\xb6\\u2022\\xaa\\xba\\u2013\\u2260\",result:\"\\xa1\\u2122\\xa3\\xa2\\u221e\\xa7\\xb6\\u2022\\xaa\\xba\\u2013\\u2260\"}",
    statement:"lower('¬°‚Ñ¢¬£¬¢‚àû¬ß¬∂‚Ä¢¬™¬∫‚Äì‚â†')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"¬°‚Ñ¢¬£¬¢‚àû¬ß¬∂‚Ä¢¬™¬∫‚Äì‚â†"
    }
  },
  {
    name:"lower valid cases{in:\"\\xb8\\u02db\\xc7\\u25ca\\u0131\\u02dc\\xc2\\xaf\\u02d8\\xbf\",result:\"\\xb8\\u02db\\xe7\\u25ca\\u0131\\u02dc\\xe2\\xaf\\u02d8\\xbf\"}",
    statement:"lower('¬∏Àõ√á‚óäƒ±Àú√Ç¬ØÀò¬ø')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"¬∏Àõ√ß‚óäƒ±Àú√¢¬ØÀò¬ø"
    }
  },
  {
    name:"lower valid cases{in:\"\\xc5\\xcd\\xce\\xcf\\u02dd\\xd3\\xd4\\uf8ff\\xd2\\xda\\xc6\\u2603\",result:\"\\xe5\\xed\\xee\\xef\\u02dd\\xf3\\xf4\\uf8ff\\xf2\\xfa\\xe6\\u2603\"}",
    statement:"lower('√Ö√ç√é√èÀù√ì√îÔ£ø√í√ö√Ü‚òÉ')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"√•√≠√Æ√ØÀù√≥√¥Ô£ø√≤√∫√¶‚òÉ"
    }
  },
  {
    name:"lower valid cases{in:\"\\u0152\\u201e\\xb4\\u2030\\u02c7\\xc1\\xa8\\u02c6\\xd8\\u220f\\u201d\\u2019\",result:\"\\u0153\\u201e\\xb4\\u2030\\u02c7\\xe1\\xa8\\u02c6\\xf8\\u220f\\u201d\\u2019\"}",
    statement:"lower('≈í‚Äû¬¥‚Ä∞Àá√Å¬®ÀÜ√ò‚àè‚Äù‚Äô')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"≈ì‚Äû¬¥‚Ä∞Àá√°¬®ÀÜ√∏‚àè‚Äù‚Äô"
    }
  },
  {
    name:"lower valid cases{in:\"`\\u2044\\u20ac\\u2039\\u203a\\ufb01\\ufb02\\u2021\\xb0\\xb7\\u201a\\u2014\\xb1\",result:\"`\\u2044\\u20ac\\u2039\\u203a\\ufb01\\ufb02\\u2021\\xb0\\xb7\\u201a\\u2014\\xb1\"}",
    statement:"lower('`‚ÅÑ‚Ç¨‚Äπ‚Ä∫Ô¨ÅÔ¨Ç‚Ä°¬∞¬∑‚Äö‚Äî¬±')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"`‚ÅÑ‚Ç¨‚Äπ‚Ä∫Ô¨ÅÔ¨Ç‚Ä°¬∞¬∑‚Äö‚Äî¬±"
    }
  },
  {
    name:"lower valid cases{in:\"\\u215b\\u215c\\u215d\\u215e\",result:\"\\u215b\\u215c\\u215d\\u215e\"}",
    statement:"lower('‚Öõ‚Öú‚Öù‚Öû')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"‚Öõ‚Öú‚Öù‚Öû"
    }
  },
  {
    name:"lower valid cases{in:\"\\u0660\\u0661\\u0662\\u0663\\u0664\\u0665\\u0666\\u0667\\u0668\\u0669\",result:\"\\u0660\\u0661\\u0662\\u0663\\u0664\\u0665\\u0666\\u0667\\u0668\\u0669\"}",
    statement:"lower('Ÿ†Ÿ°Ÿ¢Ÿ£Ÿ§Ÿ•Ÿ¶ŸßŸ®Ÿ©')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Ÿ†Ÿ°Ÿ¢Ÿ£Ÿ§Ÿ•Ÿ¶ŸßŸ®Ÿ©"
    }
  },
  {
    name:"lower valid cases{in:\"\\u7530\\u4e2d\\u3055\\u3093\\u306b\\u3042\\u3052\\u3066\\u4e0b\\u3055\\u3044\",result:\"\\u7530\\u4e2d\\u3055\\u3093\\u306b\\u3042\\u3052\\u3066\\u4e0b\\u3055\\u3044\"}",
    statement:"lower('Áî∞‰∏≠„Åï„Çì„Å´„ÅÇ„Åí„Å¶‰∏ã„Åï„ÅÑ')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Áî∞‰∏≠„Åï„Çì„Å´„ÅÇ„Åí„Å¶‰∏ã„Åï„ÅÑ"
    }
  },
  {
    name:"lower valid cases{in:\"\\u30d1\\u30fc\\u30c6\\u30a3\\u30fc\\u3078\\u884c\\u304b\\u306a\\u3044\\u304b\",result:\"\\u30d1\\u30fc\\u30c6\\u30a3\\u30fc\\u3078\\u884c\\u304b\\u306a\\u3044\\u304b\"}",
    statement:"lower('„Éë„Éº„ÉÜ„Ç£„Éº„Å∏Ë°å„Åã„Å™„ÅÑ„Åã')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"„Éë„Éº„ÉÜ„Ç£„Éº„Å∏Ë°å„Åã„Å™„ÅÑ„Åã"
    }
  },
  {
    name:"lower valid cases{in:\"\\u548c\\u88fd\\u6f22\\u8a9e\",result:\"\\u548c\\u88fd\\u6f22\\u8a9e\"}",
    statement:"lower('ÂíåË£ΩÊº¢Ë™û')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"ÂíåË£ΩÊº¢Ë™û"
    }
  },
  {
    name:"lower valid cases{in:\"\\u90e8\\u843d\\u683c\",result:\"\\u90e8\\u843d\\u683c\"}",
    statement:"lower('ÈÉ®ËêΩÊ†º')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"ÈÉ®ËêΩÊ†º"
    }
  },
  {
    name:"lower valid cases{in:\"\\uc0ac\\ud68c\\uacfc\\ud559\\uc6d0 \\uc5b4\\ud559\\uc5f0\\uad6c\\uc18c\",result:\"\\uc0ac\\ud68c\\uacfc\\ud559\\uc6d0 \\uc5b4\\ud559\\uc5f0\\uad6c\\uc18c\"}",
    statement:"lower('ÏÇ¨ÌöåÍ≥ºÌïôÏõê Ïñ¥ÌïôÏó∞Íµ¨ÏÜå')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"ÏÇ¨ÌöåÍ≥ºÌïôÏõê Ïñ¥ÌïôÏó∞Íµ¨ÏÜå"
    }
  },
  {
    name:"lower valid cases{in:\"\\ucc26\\ucc28\\ub97c \\ud0c0\\uace0 \\uc628 \\ud3b2\\uc2dc\\ub9e8\\uacfc \\uc45b\\ub2e4\\ub9ac \\ub620\\ubc29\\uac01\\ud558\",result:\"\\ucc26\\ucc28\\ub97c \\ud0c0\\uace0 \\uc628 \\ud3b2\\uc2dc\\ub9e8\\uacfc \\uc45b\\ub2e4\\ub9ac \\ub620\\ubc29\\uac01\\ud558\"}",
    statement:"lower('Ï∞¶Ï∞®Î•º ÌÉÄÍ≥† Ïò® Ìé≤ÏãúÎß®Í≥º ÏëõÎã§Î¶¨ Îò†Î∞©Í∞ÅÌïò')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Ï∞¶Ï∞®Î•º ÌÉÄÍ≥† Ïò® Ìé≤ÏãúÎß®Í≥º ÏëõÎã§Î¶¨ Îò†Î∞©Í∞ÅÌïò"
    }
  },
  {
    name:"lower valid cases{in:\"\\u793e\\u6703\\u79d1\\u5b78\\u9662\\u8a9e\\u5b78\\u7814\\u7a76\\u6240\",result:\"\\u793e\\u6703\\u79d1\\u5b78\\u9662\\u8a9e\\u5b78\\u7814\\u7a76\\u6240\"}",
    statement:"lower('Á§æÊúÉÁßëÂ≠∏Èô¢Ë™ûÂ≠∏Á†îÁ©∂ÊâÄ')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Á§æÊúÉÁßëÂ≠∏Èô¢Ë™ûÂ≠∏Á†îÁ©∂ÊâÄ"
    }
  },
  {
    name:"lower valid cases{in:\"\\uc6b8\\ub780\\ubc14\\ud1a0\\ub974\",result:\"\\uc6b8\\ub780\\ubc14\\ud1a0\\ub974\"}",
    statement:"lower('Ïö∏ÎûÄÎ∞îÌÜ†Î•¥')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Ïö∏ÎûÄÎ∞îÌÜ†Î•¥"
    }
  },
  {
    name:"lower valid cases{in:\"\\U0002070e\\U00020731\\U00020779\\U00020c53\\U00020c78\\U00020c96\\U00020ccf\",result:\"\\U0002070e\\U00020731\\U00020779\\U00020c53\\U00020c78\\U00020c96\\U00020ccf\"}",
    statement:"lower('†úé†ú±†ùπ†±ì†±∏†≤ñ†≥è')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"†úé†ú±†ùπ†±ì†±∏†≤ñ†≥è"
    }
  },
  {
    name:"lower valid cases{in:\"\\u023a\",result:\"\\u2c65\"}",
    statement:"lower('»∫')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"‚±•"
    }
  },
  {
    name:"lower valid cases{in:\"\\u023e\",result:\"\\u2c66\"}",
    statement:"lower('»æ')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"‚±¶"
    }
  },
  {
    name:"lower valid cases{in:\"\\u30fd\\u0f3c\\u0e88\\u0644\\u035c\\u0e88\\u0f3d\\uff89 \\u30fd\\u0f3c\\u0e88\\u0644\\u035c\\u0e88\\u0f3d\\uff89\",result:\"\\u30fd\\u0f3c\\u0e88\\u0644\\u035c\\u0e88\\u0f3d\\uff89 \\u30fd\\u0f3c\\u0e88\\u0644\\u035c\\u0e88\\u0f3d\\uff89\"}",
    statement:"lower('„ÉΩ‡ºº‡∫àŸÑÕú‡∫à‡ºΩÔæâ „ÉΩ‡ºº‡∫àŸÑÕú‡∫à‡ºΩÔæâ')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"„ÉΩ‡ºº‡∫àŸÑÕú‡∫à‡ºΩÔæâ „ÉΩ‡ºº‡∫àŸÑÕú‡∫à‡ºΩÔæâ"
    }
  },
  {
    name:"lower valid cases{in:\"(\\uff61\\u25d5 \\u2200 \\u25d5\\uff61)\",result:\"(\\uff61\\u25d5 \\u2200 \\u25d5\\uff61)\"}",
    statement:"lower('(ÔΩ°‚óï ‚àÄ ‚óïÔΩ°)')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"(ÔΩ°‚óï ‚àÄ ‚óïÔΩ°)"
    }
  },
  {
    name:"lower valid cases{in:\"\\uff40\\uff68(\\xb4\\u2200\\uff40\\u2229\",result:\"\\uff40\\uff68(\\xb4\\u2200\\uff40\\u2229\"}",
    statement:"lower('ÔΩÄÔΩ®(¬¥‚àÄÔΩÄ‚à©')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"ÔΩÄÔΩ®(¬¥‚àÄÔΩÄ‚à©"
    }
  },
  {
    name:"lower valid cases{in:\"__\\uff9b(,_,*)\",result:\"__\\uff9b(,_,*)\"}",
    statement:"lower('__Ôæõ(,_,*)')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"__Ôæõ(,_,*)"
    }
  },
  {
    name:"lower valid cases{in:\"\\u30fb(\\uffe3\\u2200\\uffe3)\\u30fb:*:\",result:\"\\u30fb(\\uffe3\\u2200\\uffe3)\\u30fb:*:\"}",
    statement:"lower('„Éª(Ôø£‚àÄÔø£)„Éª:*:')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"„Éª(Ôø£‚àÄÔø£)„Éª:*:"
    }
  },
  {
    name:"lower valid cases{in:\"\\uff9f\\uff65\\u273f\\u30fe\\u2572(\\uff61\\u25d5\\u203f\\u25d5\\uff61)\\u2571\\u273f\\uff65\\uff9f\",result:\"\\uff9f\\uff65\\u273f\\u30fe\\u2572(\\uff61\\u25d5\\u203f\\u25d5\\uff61)\\u2571\\u273f\\uff65\\uff9f\"}",
    statement:"lower('ÔæüÔΩ•‚úø„Éæ‚ï≤(ÔΩ°‚óï‚Äø‚óïÔΩ°)‚ï±‚úøÔΩ•Ôæü')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"ÔæüÔΩ•‚úø„Éæ‚ï≤(ÔΩ°‚óï‚Äø‚óïÔΩ°)‚ï±‚úøÔΩ•Ôæü"
    }
  },
  {
    name:"lower valid cases{in:\",\\u3002\\u30fb:*:\\u30fb\\u309c\\u2019( \\u263b \\u03c9 \\u263b )\\u3002\\u30fb:*:\\u30fb\\u309c\\u2019\",result:\",\\u3002\\u30fb:*:\\u30fb\\u309c\\u2019( \\u263b \\u03c9 \\u263b )\\u3002\\u30fb:*:\\u30fb\\u309c\\u2019\"}",
    statement:"lower(',„ÄÇ„Éª:*:„Éª„Çú‚Äô( ‚òª œâ ‚òª )„ÄÇ„Éª:*:„Éª„Çú‚Äô')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:",„ÄÇ„Éª:*:„Éª„Çú‚Äô( ‚òª œâ ‚òª )„ÄÇ„Éª:*:„Éª„Çú‚Äô"
    }
  },
  {
    name:"lower valid cases{in:\"(\\u256f\\xb0\\u25a1\\xb0\\uff09\\u256f\\ufe35 \\u253b\\u2501\\u253b)\",result:\"(\\u256f\\xb0\\u25a1\\xb0\\uff09\\u256f\\ufe35 \\u253b\\u2501\\u253b)\"}",
    statement:"lower('(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª)')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª)"
    }
  },
  {
    name:"lower valid cases{in:\"(\\uff89\\u0ca5\\u76ca\\u0ca5\\uff09\\uff89\\ufeff \\u253b\\u2501\\u253b\",result:\"(\\uff89\\u0ca5\\u76ca\\u0ca5\\uff09\\uff89\\ufeff \\u253b\\u2501\\u253b\"}",
    statement:"lower('(Ôæâ‡≤•Áõä‡≤•ÔºâÔæâÔªø ‚îª‚îÅ‚îª')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"(Ôæâ‡≤•Áõä‡≤•ÔºâÔæâÔªø ‚îª‚îÅ‚îª"
    }
  },
  {
    name:"lower valid cases{in:\"\\u252c\\u2500\\u252c\\u30ce( \\xba _ \\xba\\u30ce)\",result:\"\\u252c\\u2500\\u252c\\u30ce( \\xba _ \\xba\\u30ce)\"}",
    statement:"lower('‚î¨‚îÄ‚î¨„Éé( ¬∫ _ ¬∫„Éé)')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"‚î¨‚îÄ‚î¨„Éé( ¬∫ _ ¬∫„Éé)"
    }
  },
  {
    name:"lower valid cases{in:\"( \\u0361\\xb0 \\u035c\\u0296 \\u0361\\xb0)\",result:\"( \\u0361\\xb0 \\u035c\\u0296 \\u0361\\xb0)\"}",
    statement:"lower('( Õ°¬∞ Õú ñ Õ°¬∞)')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"( Õ°¬∞ Õú ñ Õ°¬∞)"
    }
  },
  {
    name:"lower valid cases{in:\"\\U0001f60d\",result:\"\\U0001f60d\"}",
    statement:"lower('üòç')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"üòç"
    }
  },
  {
    name:"lower valid cases{in:\"\\U0001f469\\U0001f3fd\",result:\"\\U0001f469\\U0001f3fd\"}",
    statement:"lower('üë©üèΩ')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"üë©üèΩ"
    }
  },
  {
    name:"lower valid cases{in:\"\\U0001f47e \\U0001f647 \\U0001f481 \\U0001f645 \\U0001f646 \\U0001f64b \\U0001f64e \\U0001f64d\",result:\"\\U0001f47e \\U0001f647 \\U0001f481 \\U0001f645 \\U0001f646 \\U0001f64b \\U0001f64e \\U0001f64d\"}",
    statement:"lower('üëæ üôá üíÅ üôÖ üôÜ üôã üôé üôç')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"üëæ üôá üíÅ üôÖ üôÜ üôã üôé üôç"
    }
  },
  {
    name:"lower valid cases{in:\"\\U0001f435 \\U0001f648 \\U0001f649 \\U0001f64a\",result:\"\\U0001f435 \\U0001f648 \\U0001f649 \\U0001f64a\"}",
    statement:"lower('üêµ üôà üôâ üôä')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"üêµ üôà üôâ üôä"
    }
  },
  {
    name:"lower valid cases{in:\"\\u2764\\ufe0f \\U0001f494 \\U0001f48c \\U0001f495 \\U0001f49e \\U0001f493 \\U0001f497 \\U0001f496 \\U0001f498 \\U0001f49d \\U0001f49f \\U0001f49c \\U0001f49b \\U0001f49a \\U0001f499\",result:\"\\u2764\\ufe0f \\U0001f494 \\U0001f48c \\U0001f495 \\U0001f49e \\U0001f493 \\U0001f497 \\U0001f496 \\U0001f498 \\U0001f49d \\U0001f49f \\U0001f49c \\U0001f49b \\U0001f49a \\U0001f499\"}",
    statement:"lower('‚ù§Ô∏è üíî üíå üíï üíû üíì üíó üíñ üíò üíù üíü üíú üíõ üíö üíô')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"‚ù§Ô∏è üíî üíå üíï üíû üíì üíó üíñ üíò üíù üíü üíú üíõ üíö üíô"
    }
  },
  {
    name:"lower valid cases{in:\"\\u270b\\U0001f3ff \\U0001f4aa\\U0001f3ff \\U0001f450\\U0001f3ff \\U0001f64c\\U0001f3ff \\U0001f44f\\U0001f3ff \\U0001f64f\\U0001f3ff\",result:\"\\u270b\\U0001f3ff \\U0001f4aa\\U0001f3ff \\U0001f450\\U0001f3ff \\U0001f64c\\U0001f3ff \\U0001f44f\\U0001f3ff \\U0001f64f\\U0001f3ff\"}",
    statement:"lower('‚úãüèø üí™üèø üëêüèø üôåüèø üëèüèø üôèüèø')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"‚úãüèø üí™üèø üëêüèø üôåüèø üëèüèø üôèüèø"
    }
  },
  {
    name:"lower valid cases{in:\"\\U0001f6be \\U0001f192 \\U0001f193 \\U0001f195 \\U0001f196 \\U0001f197 \\U0001f199 \\U0001f3e7\",result:\"\\U0001f6be \\U0001f192 \\U0001f193 \\U0001f195 \\U0001f196 \\U0001f197 \\U0001f199 \\U0001f3e7\"}",
    statement:"lower('üöæ üÜí üÜì üÜï üÜñ üÜó üÜô üèß')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"üöæ üÜí üÜì üÜï üÜñ üÜó üÜô üèß"
    }
  },
  {
    name:"lower valid cases{in:\"0\\ufe0f\\u20e3 1\\ufe0f\\u20e3 2\\ufe0f\\u20e3 3\\ufe0f\\u20e3 4\\ufe0f\\u20e3 5\\ufe0f\\u20e3 6\\ufe0f\\u20e3 7\\ufe0f\\u20e3 8\\ufe0f\\u20e3 9\\ufe0f\\u20e3 \\U0001f51f\",result:\"0\\ufe0f\\u20e3 1\\ufe0f\\u20e3 2\\ufe0f\\u20e3 3\\ufe0f\\u20e3 4\\ufe0f\\u20e3 5\\ufe0f\\u20e3 6\\ufe0f\\u20e3 7\\ufe0f\\u20e3 8\\ufe0f\\u20e3 9\\ufe0f\\u20e3 \\U0001f51f\"}",
    statement:"lower('0Ô∏è‚É£ 1Ô∏è‚É£ 2Ô∏è‚É£ 3Ô∏è‚É£ 4Ô∏è‚É£ 5Ô∏è‚É£ 6Ô∏è‚É£ 7Ô∏è‚É£ 8Ô∏è‚É£ 9Ô∏è‚É£ üîü')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0Ô∏è‚É£ 1Ô∏è‚É£ 2Ô∏è‚É£ 3Ô∏è‚É£ 4Ô∏è‚É£ 5Ô∏è‚É£ 6Ô∏è‚É£ 7Ô∏è‚É£ 8Ô∏è‚É£ 9Ô∏è‚É£ üîü"
    }
  },
  {
    name:"lower valid cases{in:\"\\U0001f1fa\\U0001f1f8\\U0001f1f7\\U0001f1fa\\U0001f1f8 \\U0001f1e6\\U0001f1eb\\U0001f1e6\\U0001f1f2\\U0001f1f8\",result:\"\\U0001f1fa\\U0001f1f8\\U0001f1f7\\U0001f1fa\\U0001f1f8 \\U0001f1e6\\U0001f1eb\\U0001f1e6\\U0001f1f2\\U0001f1f8\"}",
    statement:"lower('üá∫üá∏üá∑üá∫üá∏ üá¶üá´üá¶üá≤üá∏')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"üá∫üá∏üá∑üá∫üá∏ üá¶üá´üá¶üá≤üá∏"
    }
  },
  {
    name:"lower valid cases{in:\"\\U0001f1fa\\U0001f1f8\\U0001f1f7\\U0001f1fa\\U0001f1f8\\U0001f1e6\\U0001f1eb\\U0001f1e6\\U0001f1f2\",result:\"\\U0001f1fa\\U0001f1f8\\U0001f1f7\\U0001f1fa\\U0001f1f8\\U0001f1e6\\U0001f1eb\\U0001f1e6\\U0001f1f2\"}",
    statement:"lower('üá∫üá∏üá∑üá∫üá∏üá¶üá´üá¶üá≤')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"üá∫üá∏üá∑üá∫üá∏üá¶üá´üá¶üá≤"
    }
  },
  {
    name:"lower valid cases{in:\"\\U0001f1fa\\U0001f1f8\\U0001f1f7\\U0001f1fa\\U0001f1f8\\U0001f1e6\",result:\"\\U0001f1fa\\U0001f1f8\\U0001f1f7\\U0001f1fa\\U0001f1f8\\U0001f1e6\"}",
    statement:"lower('üá∫üá∏üá∑üá∫üá∏üá¶')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"üá∫üá∏üá∑üá∫üá∏üá¶"
    }
  },
  {
    name:"lower valid cases{in:\"\\uff34\\uff48\\uff45 \\uff51\\uff55\\uff49\\uff43\\uff4b \\uff42\\uff52\\uff4f\\uff57\\uff4e \\uff46\\uff4f\\uff58 \\uff4a\\uff55\\uff4d\\uff50\\uff53 \\uff2f\\uff36\\uff25\\uff32 \\uff34\\uff28\\uff25 \\uff4c\\uff41\\uff5a\\uff59 \\uff44\\uff4f\\uff47\",result:\"\\uff54\\uff48\\uff45 \\uff51\\uff55\\uff49\\uff43\\uff4b \\uff42\\uff52\\uff4f\\uff57\\uff4e \\uff46\\uff4f\\uff58 \\uff4a\\uff55\\uff4d\\uff50\\uff53 \\uff4f\\uff56\\uff45\\uff52 \\uff54\\uff48\\uff45 \\uff4c\\uff41\\uff5a\\uff59 \\uff44\\uff4f\\uff47\"}",
    statement:"lower('Ôº¥ÔΩàÔΩÖ ÔΩëÔΩïÔΩâÔΩÉÔΩã ÔΩÇÔΩíÔΩèÔΩóÔΩé ÔΩÜÔΩèÔΩò ÔΩäÔΩïÔΩçÔΩêÔΩì ÔºØÔº∂Ôº•Ôº≤ Ôº¥Ôº®Ôº• ÔΩåÔΩÅÔΩöÔΩô ÔΩÑÔΩèÔΩá')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"ÔΩîÔΩàÔΩÖ ÔΩëÔΩïÔΩâÔΩÉÔΩã ÔΩÇÔΩíÔΩèÔΩóÔΩé ÔΩÜÔΩèÔΩò ÔΩäÔΩïÔΩçÔΩêÔΩì ÔΩèÔΩñÔΩÖÔΩí ÔΩîÔΩàÔΩÖ ÔΩåÔΩÅÔΩöÔΩô ÔΩÑÔΩèÔΩá"
    }
  },
  {
    name:"lower null and missing propagation{param:\"null\"}",
    statement:"lower(null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"lower null and missing propagation{param:\"missing\"}",
    statement:"lower(missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"lower wrong type of arguments{param:\"1\"}",
    statement:"lower(1)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"lower wrong type of arguments{param:\"1.0\"}",
    statement:"lower(1.0)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"lower wrong type of arguments{param:\"1e0\"}",
    statement:"lower(1e0)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"lower wrong type of arguments{param:\"`()`\"}",
    statement:"lower(`()`)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"lower wrong type of arguments{param:\"true\"}",
    statement:"lower(true)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"lower wrong type of arguments{param:\"`[]`\"}",
    statement:"lower(`[]`)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"lower wrong type of arguments{param:\"`{}`\"}",
    statement:"lower(`{}`)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  }
]
to_timestamp::[
  {
    name:"to_timestamp valid cases{string:\"1\",pattern:\"y\",result:0001T}",
    statement:"to_timestamp('1', 'y')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"10\",pattern:\"y\",result:0010T}",
    statement:"to_timestamp('10', 'y')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0010T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"100\",pattern:\"y\",result:0100T}",
    statement:"to_timestamp('100', 'y')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0100T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1000\",pattern:\"y\",result:1000T}",
    statement:"to_timestamp('1000', 'y')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1000T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"9999\",pattern:\"y\",result:9999T}",
    statement:"to_timestamp('9999', 'y')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:9999T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"01\",pattern:\"yy\",result:2001T}",
    statement:"to_timestamp('01', 'yy')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2001T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"10\",pattern:\"yy\",result:2010T}",
    statement:"to_timestamp('10', 'yy')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2010T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"69\",pattern:\"yy\",result:2069T}",
    statement:"to_timestamp('69', 'yy')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2069T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"70\",pattern:\"yy\",result:1970T}",
    statement:"to_timestamp('70', 'yy')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1970T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"99\",pattern:\"yy\",result:1999T}",
    statement:"to_timestamp('99', 'yy')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1999T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"0001\",pattern:\"yyyy\",result:0001T}",
    statement:"to_timestamp('0001', 'yyyy')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"0010\",pattern:\"yyyy\",result:0010T}",
    statement:"to_timestamp('0010', 'yyyy')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0010T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"0069\",pattern:\"yyyy\",result:0069T}",
    statement:"to_timestamp('0069', 'yyyy')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0069T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1970\",pattern:\"yyyy\",result:1970T}",
    statement:"to_timestamp('1970', 'yyyy')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1970T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1999\",pattern:\"yyyy\",result:1999T}",
    statement:"to_timestamp('1999', 'yyyy')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1999T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"9999\",pattern:\"yyyy\",result:9999T}",
    statement:"to_timestamp('9999', 'yyyy')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:9999T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1\",pattern:\"y M\",result:0001-01T}",
    statement:"to_timestamp('1 1', 'y M')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 01\",pattern:\"y M\",result:0001-01T}",
    statement:"to_timestamp('1 01', 'y M')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 10\",pattern:\"y M\",result:0001-10T}",
    statement:"to_timestamp('1 10', 'y M')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-10T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 12\",pattern:\"y M\",result:0001-12T}",
    statement:"to_timestamp('1 12', 'y M')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-12T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 01\",pattern:\"y MM\",result:0001-01T}",
    statement:"to_timestamp('1 01', 'y MM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 10\",pattern:\"y MM\",result:0001-10T}",
    statement:"to_timestamp('1 10', 'y MM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-10T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 12\",pattern:\"y MM\",result:0001-12T}",
    statement:"to_timestamp('1 12', 'y MM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-12T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 Jan\",pattern:\"y MMM\",result:0001-01T}",
    statement:"to_timestamp('1 Jan', 'y MMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 Feb\",pattern:\"y MMM\",result:0001-02T}",
    statement:"to_timestamp('1 Feb', 'y MMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-02T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 Mar\",pattern:\"y MMM\",result:0001-03T}",
    statement:"to_timestamp('1 Mar', 'y MMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-03T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 Apr\",pattern:\"y MMM\",result:0001-04T}",
    statement:"to_timestamp('1 Apr', 'y MMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-04T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 May\",pattern:\"y MMM\",result:0001-05T}",
    statement:"to_timestamp('1 May', 'y MMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-05T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 Jun\",pattern:\"y MMM\",result:0001-06T}",
    statement:"to_timestamp('1 Jun', 'y MMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-06T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 Jul\",pattern:\"y MMM\",result:0001-07T}",
    statement:"to_timestamp('1 Jul', 'y MMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-07T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 Aug\",pattern:\"y MMM\",result:0001-08T}",
    statement:"to_timestamp('1 Aug', 'y MMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-08T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 Sep\",pattern:\"y MMM\",result:0001-09T}",
    statement:"to_timestamp('1 Sep', 'y MMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-09T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 Oct\",pattern:\"y MMM\",result:0001-10T}",
    statement:"to_timestamp('1 Oct', 'y MMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-10T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 Nov\",pattern:\"y MMM\",result:0001-11T}",
    statement:"to_timestamp('1 Nov', 'y MMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-11T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 Dec\",pattern:\"y MMM\",result:0001-12T}",
    statement:"to_timestamp('1 Dec', 'y MMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-12T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 January\",pattern:\"y MMMM\",result:0001-01T}",
    statement:"to_timestamp('1 January', 'y MMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 February\",pattern:\"y MMMM\",result:0001-02T}",
    statement:"to_timestamp('1 February', 'y MMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-02T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 March\",pattern:\"y MMMM\",result:0001-03T}",
    statement:"to_timestamp('1 March', 'y MMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-03T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 April\",pattern:\"y MMMM\",result:0001-04T}",
    statement:"to_timestamp('1 April', 'y MMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-04T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 May\",pattern:\"y MMMM\",result:0001-05T}",
    statement:"to_timestamp('1 May', 'y MMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-05T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 June\",pattern:\"y MMMM\",result:0001-06T}",
    statement:"to_timestamp('1 June', 'y MMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-06T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 July\",pattern:\"y MMMM\",result:0001-07T}",
    statement:"to_timestamp('1 July', 'y MMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-07T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 August\",pattern:\"y MMMM\",result:0001-08T}",
    statement:"to_timestamp('1 August', 'y MMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-08T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 September\",pattern:\"y MMMM\",result:0001-09T}",
    statement:"to_timestamp('1 September', 'y MMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-09T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 October\",pattern:\"y MMMM\",result:0001-10T}",
    statement:"to_timestamp('1 October', 'y MMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-10T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 November\",pattern:\"y MMMM\",result:0001-11T}",
    statement:"to_timestamp('1 November', 'y MMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-11T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 December\",pattern:\"y MMMM\",result:0001-12T}",
    statement:"to_timestamp('1 December', 'y MMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-12T
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 1\",pattern:\"y M d\",result:0001-01-01}",
    statement:"to_timestamp('1 1 1', 'y M d')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-01
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 01\",pattern:\"y M d\",result:0001-01-01}",
    statement:"to_timestamp('1 1 01', 'y M d')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-01
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 31\",pattern:\"y M d\",result:0001-01-31}",
    statement:"to_timestamp('1 1 31', 'y M d')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-31
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 01\",pattern:\"y M dd\",result:0001-01-01}",
    statement:"to_timestamp('1 1 01', 'y M dd')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-01
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 31\",pattern:\"y M dd\",result:0001-01-31}",
    statement:"to_timestamp('1 1 31', 'y M dd')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-31
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 1 0 0\",pattern:\"y M d H m\",result:0001-01-01T00:00-00:00}",
    statement:"to_timestamp('1 1 1 0 0', 'y M d H m')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-01T00:00-00:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 1 00 00\",pattern:\"y M d H m\",result:0001-01-01T00:00-00:00}",
    statement:"to_timestamp('1 1 1 00 00', 'y M d H m')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-01T00:00-00:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 1 23 59\",pattern:\"y M d H m\",result:0001-01-01T23:59-00:00}",
    statement:"to_timestamp('1 1 1 23 59', 'y M d H m')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-01T23:59-00:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 1 0\",pattern:\"y M d H\",result:0001-01-01T00:00-00:00}",
    statement:"to_timestamp('1 1 1 0', 'y M d H')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-01T00:00-00:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 1 00\",pattern:\"y M d H\",result:0001-01-01T00:00-00:00}",
    statement:"to_timestamp('1 1 1 00', 'y M d H')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-01T00:00-00:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 1 23\",pattern:\"y M d H\",result:0001-01-01T23:00-00:00}",
    statement:"to_timestamp('1 1 1 23', 'y M d H')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-01T23:00-00:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 1 00 0\",pattern:\"y M d HH m\",result:0001-01-01T00:00-00:00}",
    statement:"to_timestamp('1 1 1 00 0', 'y M d HH m')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-01T00:00-00:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 1 23 59\",pattern:\"y M d HH m\",result:0001-01-01T23:59-00:00}",
    statement:"to_timestamp('1 1 1 23 59', 'y M d HH m')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-01T23:59-00:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 1 0 00\",pattern:\"y M d H mm\",result:0001-01-01T00:00-00:00}",
    statement:"to_timestamp('1 1 1 0 00', 'y M d H mm')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-01T00:00-00:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 1 23 59\",pattern:\"y M d H mm\",result:0001-01-01T23:59-00:00}",
    statement:"to_timestamp('1 1 1 23 59', 'y M d H mm')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-01T23:59-00:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 1 1 0 AM\",pattern:\"y M d h m a\",result:0001-01-01T01:00-00:00}",
    statement:"to_timestamp('1 1 1 1 0 AM', 'y M d h m a')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-01T01:00-00:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 1 01 00 AM\",pattern:\"y M d h m a\",result:0001-01-01T01:00-00:00}",
    statement:"to_timestamp('1 1 1 01 00 AM', 'y M d h m a')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-01T01:00-00:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 1 11 59 PM\",pattern:\"y M d h m a\",result:0001-01-01T23:59-00:00}",
    statement:"to_timestamp('1 1 1 11 59 PM', 'y M d h m a')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-01T23:59-00:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 1 01 0 AM\",pattern:\"y M d hh m a\",result:0001-01-01T01:00-00:00}",
    statement:"to_timestamp('1 1 1 01 0 AM', 'y M d hh m a')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-01T01:00-00:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 1 11 59 PM\",pattern:\"y M d hh m a\",result:0001-01-01T23:59-00:00}",
    statement:"to_timestamp('1 1 1 11 59 PM', 'y M d hh m a')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-01T23:59-00:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 1 0 0 0\",pattern:\"y M d H m s\",result:0001-01-01T00:00:00-00:00}",
    statement:"to_timestamp('1 1 1 0 0 0', 'y M d H m s')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-01T00:00:00-00:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 1 0 0 1\",pattern:\"y M d H m s\",result:0001-01-01T00:00:01-00:00}",
    statement:"to_timestamp('1 1 1 0 0 1', 'y M d H m s')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-01T00:00:01-00:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 1 0 0 01\",pattern:\"y M d H m s\",result:0001-01-01T00:00:01-00:00}",
    statement:"to_timestamp('1 1 1 0 0 01', 'y M d H m s')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-01T00:00:01-00:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 1 0 0 59\",pattern:\"y M d H m s\",result:0001-01-01T00:00:59-00:00}",
    statement:"to_timestamp('1 1 1 0 0 59', 'y M d H m s')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-01T00:00:59-00:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 1 0 0 00\",pattern:\"y M d H m ss\",result:0001-01-01T00:00:00-00:00}",
    statement:"to_timestamp('1 1 1 0 0 00', 'y M d H m ss')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-01T00:00:00-00:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 1 0 0 01\",pattern:\"y M d H m ss\",result:0001-01-01T00:00:01-00:00}",
    statement:"to_timestamp('1 1 1 0 0 01', 'y M d H m ss')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-01T00:00:01-00:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 1 0 0 59\",pattern:\"y M d H m ss\",result:0001-01-01T00:00:59-00:00}",
    statement:"to_timestamp('1 1 1 0 0 59', 'y M d H m ss')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-01T00:00:59-00:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 1 0 0 0 0\",pattern:\"y M d H m s S\",result:0001-01-01T00:00:00-00:00}",
    statement:"to_timestamp('1 1 1 0 0 0 0', 'y M d H m s S')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-01T00:00:00-00:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 1 0 0 0 1\",pattern:\"y M d H m s S\",result:0001-01-01T00:00:00.1-00:00}",
    statement:"to_timestamp('1 1 1 0 0 0 1', 'y M d H m s S')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-01T00:00:00.1-00:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 1 0 0 0 9\",pattern:\"y M d H m s S\",result:0001-01-01T00:00:00.9-00:00}",
    statement:"to_timestamp('1 1 1 0 0 0 9', 'y M d H m s S')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-01T00:00:00.9-00:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 1 0 0 0 00\",pattern:\"y M d H m s SS\",result:0001-01-01T00:00:00-00:00}",
    statement:"to_timestamp('1 1 1 0 0 0 00', 'y M d H m s SS')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-01T00:00:00-00:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 1 0 0 0 01\",pattern:\"y M d H m s SS\",result:0001-01-01T00:00:00.01-00:00}",
    statement:"to_timestamp('1 1 1 0 0 0 01', 'y M d H m s SS')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-01T00:00:00.01-00:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 1 0 0 0 10\",pattern:\"y M d H m s SS\",result:0001-01-01T00:00:00.1-00:00}",
    statement:"to_timestamp('1 1 1 0 0 0 10', 'y M d H m s SS')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-01T00:00:00.1-00:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 1 0 0 0 99\",pattern:\"y M d H m s SS\",result:0001-01-01T00:00:00.99-00:00}",
    statement:"to_timestamp('1 1 1 0 0 0 99', 'y M d H m s SS')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-01T00:00:00.99-00:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 1 0 0 0 0\",pattern:\"y M d H m s n\",result:0001-01-01T00:00:00-00:00}",
    statement:"to_timestamp('1 1 1 0 0 0 0', 'y M d H m s n')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-01T00:00:00-00:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 1 0 0 0 1\",pattern:\"y M d H m s n\",result:0001-01-01T00:00:00.000000001-00:00}",
    statement:"to_timestamp('1 1 1 0 0 0 1', 'y M d H m s n')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-01T00:00:00.000000001-00:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 1 0 0 0 00000000001\",pattern:\"y M d H m s n\",result:0001-01-01T00:00:00.000000001-00:00}",
    statement:"to_timestamp('1 1 1 0 0 0 00000000001', 'y M d H m s n')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-01T00:00:00.000000001-00:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"1 1 1 0 0 0 999999999\",pattern:\"y M d H m s n\",result:0001-01-01T00:00:00.999999999-00:00}",
    statement:"to_timestamp('1 1 1 0 0 0 999999999', 'y M d H m s n')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0001-01-01T00:00:00.999999999-00:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"2 1 1 0 0 Z\",pattern:\"y M d H m X\",result:0002-01-01T00:00Z}",
    statement:"to_timestamp('2 1 1 0 0 Z', 'y M d H m X')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0002-01-01T00:00Z
    }
  },
  {
    name:"to_timestamp valid cases{string:\"2 1 1 0 0 +01\",pattern:\"y M d H m X\",result:0002-01-01T00:00+01:00}",
    statement:"to_timestamp('2 1 1 0 0 +01', 'y M d H m X')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0002-01-01T00:00+01:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"2 1 1 0 0 -01\",pattern:\"y M d H m X\",result:0002-01-01T00:00-01:00}",
    statement:"to_timestamp('2 1 1 0 0 -01', 'y M d H m X')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0002-01-01T00:00-01:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"2 1 1 0 0 +10\",pattern:\"y M d H m X\",result:0002-01-01T00:00+10:00}",
    statement:"to_timestamp('2 1 1 0 0 +10', 'y M d H m X')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0002-01-01T00:00+10:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"2 1 1 0 0 -10\",pattern:\"y M d H m X\",result:0002-01-01T00:00-10:00}",
    statement:"to_timestamp('2 1 1 0 0 -10', 'y M d H m X')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0002-01-01T00:00-10:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"2 1 1 0 0 Z\",pattern:\"y M d H m XX\",result:0002-01-01T00:00Z}",
    statement:"to_timestamp('2 1 1 0 0 Z', 'y M d H m XX')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0002-01-01T00:00Z
    }
  },
  {
    name:"to_timestamp valid cases{string:\"2 1 1 0 0 +0100\",pattern:\"y M d H m XX\",result:0002-01-01T00:00+01:00}",
    statement:"to_timestamp('2 1 1 0 0 +0100', 'y M d H m XX')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0002-01-01T00:00+01:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"2 1 1 0 0 -0100\",pattern:\"y M d H m XX\",result:0002-01-01T00:00-01:00}",
    statement:"to_timestamp('2 1 1 0 0 -0100', 'y M d H m XX')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0002-01-01T00:00-01:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"2 1 1 0 0 +0159\",pattern:\"y M d H m XX\",result:0002-01-01T00:00+01:59}",
    statement:"to_timestamp('2 1 1 0 0 +0159', 'y M d H m XX')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0002-01-01T00:00+01:59
    }
  },
  {
    name:"to_timestamp valid cases{string:\"2 1 1 0 0 -0159\",pattern:\"y M d H m XX\",result:0002-01-01T00:00-01:59}",
    statement:"to_timestamp('2 1 1 0 0 -0159', 'y M d H m XX')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0002-01-01T00:00-01:59
    }
  },
  {
    name:"to_timestamp valid cases{string:\"2 1 1 0 0 +1000\",pattern:\"y M d H m XX\",result:0002-01-01T00:00+10:00}",
    statement:"to_timestamp('2 1 1 0 0 +1000', 'y M d H m XX')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0002-01-01T00:00+10:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"2 1 1 0 0 -1000\",pattern:\"y M d H m XX\",result:0002-01-01T00:00-10:00}",
    statement:"to_timestamp('2 1 1 0 0 -1000', 'y M d H m XX')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0002-01-01T00:00-10:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"2 1 1 0 0 Z\",pattern:\"y M d H m XXX\",result:0002-01-01T00:00Z}",
    statement:"to_timestamp('2 1 1 0 0 Z', 'y M d H m XXX')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0002-01-01T00:00Z
    }
  },
  {
    name:"to_timestamp valid cases{string:\"2 1 1 0 0 +01:00\",pattern:\"y M d H m XXX\",result:0002-01-01T00:00+01:00}",
    statement:"to_timestamp('2 1 1 0 0 +01:00', 'y M d H m XXX')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0002-01-01T00:00+01:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"2 1 1 0 0 -01:00\",pattern:\"y M d H m XXX\",result:0002-01-01T00:00-01:00}",
    statement:"to_timestamp('2 1 1 0 0 -01:00', 'y M d H m XXX')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0002-01-01T00:00-01:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"2 1 1 0 0 +01:59\",pattern:\"y M d H m XXX\",result:0002-01-01T00:00+01:59}",
    statement:"to_timestamp('2 1 1 0 0 +01:59', 'y M d H m XXX')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0002-01-01T00:00+01:59
    }
  },
  {
    name:"to_timestamp valid cases{string:\"2 1 1 0 0 -01:59\",pattern:\"y M d H m XXX\",result:0002-01-01T00:00-01:59}",
    statement:"to_timestamp('2 1 1 0 0 -01:59', 'y M d H m XXX')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0002-01-01T00:00-01:59
    }
  },
  {
    name:"to_timestamp valid cases{string:\"2 1 1 0 0 +10:00\",pattern:\"y M d H m XXX\",result:0002-01-01T00:00+10:00}",
    statement:"to_timestamp('2 1 1 0 0 +10:00', 'y M d H m XXX')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0002-01-01T00:00+10:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"2 1 1 0 0 -10:00\",pattern:\"y M d H m XXX\",result:0002-01-01T00:00-10:00}",
    statement:"to_timestamp('2 1 1 0 0 -10:00', 'y M d H m XXX')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0002-01-01T00:00-10:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"2 1 1 0 0 +01\",pattern:\"y M d H m x\",result:0002-01-01T00:00+01:00}",
    statement:"to_timestamp('2 1 1 0 0 +01', 'y M d H m x')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0002-01-01T00:00+01:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"2 1 1 0 0 -01\",pattern:\"y M d H m x\",result:0002-01-01T00:00-01:00}",
    statement:"to_timestamp('2 1 1 0 0 -01', 'y M d H m x')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0002-01-01T00:00-01:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"2 1 1 0 0 +10\",pattern:\"y M d H m x\",result:0002-01-01T00:00+10:00}",
    statement:"to_timestamp('2 1 1 0 0 +10', 'y M d H m x')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0002-01-01T00:00+10:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"2 1 1 0 0 -10\",pattern:\"y M d H m x\",result:0002-01-01T00:00-10:00}",
    statement:"to_timestamp('2 1 1 0 0 -10', 'y M d H m x')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0002-01-01T00:00-10:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"2 1 1 0 0 +0100\",pattern:\"y M d H m xx\",result:0002-01-01T00:00+01:00}",
    statement:"to_timestamp('2 1 1 0 0 +0100', 'y M d H m xx')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0002-01-01T00:00+01:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"2 1 1 0 0 -0100\",pattern:\"y M d H m xx\",result:0002-01-01T00:00-01:00}",
    statement:"to_timestamp('2 1 1 0 0 -0100', 'y M d H m xx')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0002-01-01T00:00-01:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"2 1 1 0 0 +0159\",pattern:\"y M d H m xx\",result:0002-01-01T00:00+01:59}",
    statement:"to_timestamp('2 1 1 0 0 +0159', 'y M d H m xx')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0002-01-01T00:00+01:59
    }
  },
  {
    name:"to_timestamp valid cases{string:\"2 1 1 0 0 -0159\",pattern:\"y M d H m xx\",result:0002-01-01T00:00-01:59}",
    statement:"to_timestamp('2 1 1 0 0 -0159', 'y M d H m xx')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0002-01-01T00:00-01:59
    }
  },
  {
    name:"to_timestamp valid cases{string:\"2 1 1 0 0 +1000\",pattern:\"y M d H m xx\",result:0002-01-01T00:00+10:00}",
    statement:"to_timestamp('2 1 1 0 0 +1000', 'y M d H m xx')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0002-01-01T00:00+10:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"2 1 1 0 0 -1000\",pattern:\"y M d H m xx\",result:0002-01-01T00:00-10:00}",
    statement:"to_timestamp('2 1 1 0 0 -1000', 'y M d H m xx')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0002-01-01T00:00-10:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"2 1 1 0 0 +01:00\",pattern:\"y M d H m xxx\",result:0002-01-01T00:00+01:00}",
    statement:"to_timestamp('2 1 1 0 0 +01:00', 'y M d H m xxx')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0002-01-01T00:00+01:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"2 1 1 0 0 -01:00\",pattern:\"y M d H m xxx\",result:0002-01-01T00:00-01:00}",
    statement:"to_timestamp('2 1 1 0 0 -01:00', 'y M d H m xxx')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0002-01-01T00:00-01:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"2 1 1 0 0 +01:59\",pattern:\"y M d H m xxx\",result:0002-01-01T00:00+01:59}",
    statement:"to_timestamp('2 1 1 0 0 +01:59', 'y M d H m xxx')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0002-01-01T00:00+01:59
    }
  },
  {
    name:"to_timestamp valid cases{string:\"2 1 1 0 0 -01:59\",pattern:\"y M d H m xxx\",result:0002-01-01T00:00-01:59}",
    statement:"to_timestamp('2 1 1 0 0 -01:59', 'y M d H m xxx')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0002-01-01T00:00-01:59
    }
  },
  {
    name:"to_timestamp valid cases{string:\"2 1 1 0 0 +10:00\",pattern:\"y M d H m xxx\",result:0002-01-01T00:00+10:00}",
    statement:"to_timestamp('2 1 1 0 0 +10:00', 'y M d H m xxx')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0002-01-01T00:00+10:00
    }
  },
  {
    name:"to_timestamp valid cases{string:\"2 1 1 0 0 -10:00\",pattern:\"y M d H m xxx\",result:0002-01-01T00:00-10:00}",
    statement:"to_timestamp('2 1 1 0 0 -10:00', 'y M d H m xxx')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0002-01-01T00:00-10:00
    }
  },
  {
    name:"to_timestamp single argument null propagation",
    statement:"to_timestamp(null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"to_timestamp single argument missing propagation",
    statement:"to_timestamp(missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"to_timestamp null and missing propagation{string:\"null\",pattern:\"'y'\"}",
    statement:"to_timestamp(null, 'y')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"to_timestamp null and missing propagation{string:\"''\",pattern:\"null\"}",
    statement:"to_timestamp('', null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"to_timestamp null and missing propagation{string:\"null\",pattern:\"null\"}",
    statement:"to_timestamp(null, null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"to_timestamp null and missing propagation{string:\"missing\",pattern:\"'y'\"}",
    statement:"to_timestamp(missing, 'y')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"to_timestamp null and missing propagation{string:\"''\",pattern:\"missing\"}",
    statement:"to_timestamp('', missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"to_timestamp null and missing propagation{string:\"missing\",pattern:\"missing\"}",
    statement:"to_timestamp(missing, missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"to_timestamp null and missing propagation{string:\"null\",pattern:\"missing\"}",
    statement:"to_timestamp(null, missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"to_timestamp null and missing propagation{string:\"missing\",pattern:\"null\"}",
    statement:"to_timestamp(missing, null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"to_timestamp wrong type of arguments{sql:\"to_timestamp(1, 'y')\"}",
    statement:"to_timestamp(1, 'y')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp wrong type of arguments{sql:\"to_timestamp('', 1)\"}",
    statement:"to_timestamp('', 1)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp wrong type of arguments{sql:\"to_timestamp(1)\"}",
    statement:"to_timestamp(1)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid pattern{pattern:\"L\"}",
    statement:"to_timestamp('doesnt matter', 'L')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid pattern{pattern:\"O\"}",
    statement:"to_timestamp('doesnt matter', 'O')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid pattern{pattern:\"G\"}",
    statement:"to_timestamp('doesnt matter', 'G')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid pattern{pattern:\"u\"}",
    statement:"to_timestamp('doesnt matter', 'u')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid pattern{pattern:\"Q\"}",
    statement:"to_timestamp('doesnt matter', 'Q')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid pattern{pattern:\"q\"}",
    statement:"to_timestamp('doesnt matter', 'q')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid pattern{pattern:\"w\"}",
    statement:"to_timestamp('doesnt matter', 'w')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid pattern{pattern:\"W\"}",
    statement:"to_timestamp('doesnt matter', 'W')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid pattern{pattern:\"E\"}",
    statement:"to_timestamp('doesnt matter', 'E')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid pattern{pattern:\"e\"}",
    statement:"to_timestamp('doesnt matter', 'e')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid pattern{pattern:\"c\"}",
    statement:"to_timestamp('doesnt matter', 'c')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid pattern{pattern:\"F\"}",
    statement:"to_timestamp('doesnt matter', 'F')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid pattern{pattern:\"k\"}",
    statement:"to_timestamp('doesnt matter', 'k')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid pattern{pattern:\"K\"}",
    statement:"to_timestamp('doesnt matter', 'K')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid pattern{pattern:\"A\"}",
    statement:"to_timestamp('doesnt matter', 'A')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid pattern{pattern:\"V\"}",
    statement:"to_timestamp('doesnt matter', 'V')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid pattern{pattern:\"z\"}",
    statement:"to_timestamp('doesnt matter', 'z')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid pattern{pattern:\"p\"}",
    statement:"to_timestamp('doesnt matter', 'p')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid pattern{pattern:\"foobar\"}",
    statement:"to_timestamp('doesnt matter', 'foobar')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid pattern{pattern:\"y MMMMM\"}",
    statement:"to_timestamp('doesnt matter', 'y MMMMM')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid pattern{pattern:\"M\",fields:\"YEAR\"}",
    statement:"to_timestamp('doesnt matter', 'M')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid pattern{pattern:\"dd\",fields:\"YEAR, MONTH_OF_YEAR\"}",
    statement:"to_timestamp('doesnt matter', 'dd')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid pattern{pattern:\"h\",fields:\"YEAR, MONTH_OF_YEAR, DAY_OF_MONTH\"}",
    statement:"to_timestamp('doesnt matter', 'h')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid pattern{pattern:\"hh\",fields:\"YEAR, MONTH_OF_YEAR, DAY_OF_MONTH\"}",
    statement:"to_timestamp('doesnt matter', 'hh')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid pattern{pattern:\"X\",fields:\"YEAR, MONTH_OF_YEAR, DAY_OF_MONTH, HOUR_OF_DAY\"}",
    statement:"to_timestamp('doesnt matter', 'X')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid pattern{pattern:\"XX\",fields:\"YEAR, MONTH_OF_YEAR, DAY_OF_MONTH, HOUR_OF_DAY\"}",
    statement:"to_timestamp('doesnt matter', 'XX')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid pattern{pattern:\"XXX\",fields:\"YEAR, MONTH_OF_YEAR, DAY_OF_MONTH, HOUR_OF_DAY\"}",
    statement:"to_timestamp('doesnt matter', 'XXX')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid pattern{pattern:\"x\",fields:\"YEAR, MONTH_OF_YEAR, DAY_OF_MONTH, HOUR_OF_DAY\"}",
    statement:"to_timestamp('doesnt matter', 'x')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid pattern{pattern:\"xx\",fields:\"YEAR, MONTH_OF_YEAR, DAY_OF_MONTH, HOUR_OF_DAY\"}",
    statement:"to_timestamp('doesnt matter', 'xx')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid pattern{pattern:\"xxx\",fields:\"YEAR, MONTH_OF_YEAR, DAY_OF_MONTH, HOUR_OF_DAY\"}",
    statement:"to_timestamp('doesnt matter', 'xxx')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid pattern{pattern:\"y X\",fields:\"MONTH_OF_YEAR, DAY_OF_MONTH, HOUR_OF_DAY\"}",
    statement:"to_timestamp('doesnt matter', 'y X')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid pattern{pattern:\"y M X\",fields:\"DAY_OF_MONTH, HOUR_OF_DAY\"}",
    statement:"to_timestamp('doesnt matter', 'y M X')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid pattern{pattern:\"y M d X\",fields:\"HOUR_OF_DAY\"}",
    statement:"to_timestamp('doesnt matter', 'y M d X')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid pattern{pattern:\"y a\",fields:\"MONTH_OF_YEAR, DAY_OF_MONTH, HOUR_OF_DAY\"}",
    statement:"to_timestamp('doesnt matter', 'y a')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid pattern{pattern:\"y M a\",fields:\"DAY_OF_MONTH, HOUR_OF_DAY\"}",
    statement:"to_timestamp('doesnt matter', 'y M a')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid pattern{pattern:\"y M d a\",fields:\"HOUR_OF_DAY\"}",
    statement:"to_timestamp('doesnt matter', 'y M d a')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"some text\",pattern:\"y\"}",
    statement:"to_timestamp('some text', 'y')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"some text\",pattern:\"yy\"}",
    statement:"to_timestamp('some text', 'yy')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"some text\",pattern:\"yyyy\"}",
    statement:"to_timestamp('some text', 'yyyy')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"some text\",pattern:\"y M\"}",
    statement:"to_timestamp('some text', 'y M')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"some text\",pattern:\"y MM\"}",
    statement:"to_timestamp('some text', 'y MM')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"some text\",pattern:\"y MMM\"}",
    statement:"to_timestamp('some text', 'y MMM')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"some text\",pattern:\"y MMMM\"}",
    statement:"to_timestamp('some text', 'y MMMM')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"some text\",pattern:\"y M d\"}",
    statement:"to_timestamp('some text', 'y M d')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"some text\",pattern:\"y M dd\"}",
    statement:"to_timestamp('some text', 'y M dd')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"some text\",pattern:\"y M d h m a\"}",
    statement:"to_timestamp('some text', 'y M d h m a')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"some text\",pattern:\"y M d hh m a\"}",
    statement:"to_timestamp('some text', 'y M d hh m a')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"some text\",pattern:\"y M d H m\"}",
    statement:"to_timestamp('some text', 'y M d H m')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"some text\",pattern:\"y M d H mm\"}",
    statement:"to_timestamp('some text', 'y M d H mm')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"some text\",pattern:\"y M d H m s\"}",
    statement:"to_timestamp('some text', 'y M d H m s')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"some text\",pattern:\"y M d H m ss\"}",
    statement:"to_timestamp('some text', 'y M d H m ss')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"some text\",pattern:\"y M d H m s S\"}",
    statement:"to_timestamp('some text', 'y M d H m s S')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"some text\",pattern:\"y M d H m s SSS\"}",
    statement:"to_timestamp('some text', 'y M d H m s SSS')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"some text\",pattern:\"y M d H m s n\"}",
    statement:"to_timestamp('some text', 'y M d H m s n')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"some text\",pattern:\"y M d H m s X\"}",
    statement:"to_timestamp('some text', 'y M d H m s X')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"some text\",pattern:\"y M d H m s XX\"}",
    statement:"to_timestamp('some text', 'y M d H m s XX')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"some text\",pattern:\"y M d H m s XXX\"}",
    statement:"to_timestamp('some text', 'y M d H m s XXX')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"some text\",pattern:\"y M d H m s x\"}",
    statement:"to_timestamp('some text', 'y M d H m s x')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"some text\",pattern:\"y M d H m s xx\"}",
    statement:"to_timestamp('some text', 'y M d H m s xx')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"some text\",pattern:\"y M d H m s xxx\"}",
    statement:"to_timestamp('some text', 'y M d H m s xxx')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"-1\",pattern:\"y\"}",
    statement:"to_timestamp('-1', 'y')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"0\",pattern:\"y\"}",
    statement:"to_timestamp('0', 'y')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10000\",pattern:\"y\"}",
    statement:"to_timestamp('10000', 'y')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"9\",pattern:\"yy\"}",
    statement:"to_timestamp('9', 'yy')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"010\",pattern:\"yy\"}",
    statement:"to_timestamp('010', 'yy')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"010\",pattern:\"yyyy\"}",
    statement:"to_timestamp('010', 'yyyy')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"00010\",pattern:\"yyyy\"}",
    statement:"to_timestamp('00010', 'yyyy')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10\",pattern:\"y M\"}",
    statement:"to_timestamp('10', 'y M')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 -1\",pattern:\"y M\"}",
    statement:"to_timestamp('10 -1', 'y M')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 13\",pattern:\"y M\"}",
    statement:"to_timestamp('10 13', 'y M')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1\",pattern:\"y MM\"}",
    statement:"to_timestamp('10 1', 'y MM')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 001\",pattern:\"y MM\"}",
    statement:"to_timestamp('10 001', 'y MM')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1\",pattern:\"y MMM\"}",
    statement:"to_timestamp('10 1', 'y MMM')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 Fub\",pattern:\"y MMM\"}",
    statement:"to_timestamp('10 Fub', 'y MMM')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1\",pattern:\"y MMMM\"}",
    statement:"to_timestamp('10 1', 'y MMMM')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 Fubruary\",pattern:\"y MMMM\"}",
    statement:"to_timestamp('10 Fubruary', 'y MMMM')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1\",pattern:\"y M d\"}",
    statement:"to_timestamp('10 1', 'y M d')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 40\",pattern:\"y M d\"}",
    statement:"to_timestamp('10 1 40', 'y M d')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 -1\",pattern:\"y M d\"}",
    statement:"to_timestamp('10 1 -1', 'y M d')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1\",pattern:\"y M dd\"}",
    statement:"to_timestamp('10 1 1', 'y M dd')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 001\",pattern:\"y M dd\"}",
    statement:"to_timestamp('10 1 001', 'y M dd')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1\",pattern:\"y M d H m\"}",
    statement:"to_timestamp('10 1 1', 'y M d H m')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 -1 1\",pattern:\"y M d H m\"}",
    statement:"to_timestamp('10 1 1 -1 1', 'y M d H m')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 25 1\",pattern:\"y M d H m\"}",
    statement:"to_timestamp('10 1 1 25 1', 'y M d H m')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1\",pattern:\"y M d HH m\"}",
    statement:"to_timestamp('10 1 1 1 1', 'y M d HH m')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 001 1\",pattern:\"y M d HH m\"}",
    statement:"to_timestamp('10 1 1 001 1', 'y M d HH m')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1\",pattern:\"y M d H m\"}",
    statement:"to_timestamp('10 1 1 1', 'y M d H m')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 -1\",pattern:\"y M d H m\"}",
    statement:"to_timestamp('10 1 1 1 -1', 'y M d H m')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 61\",pattern:\"y M d H m\"}",
    statement:"to_timestamp('10 1 1 1 61', 'y M d H m')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1\",pattern:\"y M d H mm\"}",
    statement:"to_timestamp('10 1 1 1 1', 'y M d H mm')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 001\",pattern:\"y M d H mm\"}",
    statement:"to_timestamp('10 1 1 1 001', 'y M d H mm')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 AM\",pattern:\"y M d h m a\"}",
    statement:"to_timestamp('10 1 1 AM', 'y M d h m a')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 -1 1 AM\",pattern:\"y M d h m a\"}",
    statement:"to_timestamp('10 1 1 -1 1 AM', 'y M d h m a')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 13 1 AM\",pattern:\"y M d h m a\"}",
    statement:"to_timestamp('10 1 1 13 1 AM', 'y M d h m a')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 AM\",pattern:\"y M d hh m a\"}",
    statement:"to_timestamp('10 1 1 1 1 AM', 'y M d hh m a')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 001 1 AM\",pattern:\"y M d hh m a\"}",
    statement:"to_timestamp('10 1 1 001 1 AM', 'y M d hh m a')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1\",pattern:\"y M d H m s\"}",
    statement:"to_timestamp('10 1 1 1 1', 'y M d H m s')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 -1\",pattern:\"y M d H m s\"}",
    statement:"to_timestamp('10 1 1 1 1 -1', 'y M d H m s')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 25 1 61\",pattern:\"y M d H m s\"}",
    statement:"to_timestamp('10 1 1 25 1 61', 'y M d H m s')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 1\",pattern:\"y M d HH m ss\"}",
    statement:"to_timestamp('10 1 1 1 1 1', 'y M d HH m ss')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 001\",pattern:\"y M d HH m ss\"}",
    statement:"to_timestamp('10 1 1 1 1 001', 'y M d HH m ss')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1\",pattern:\"y M d H m s S\"}",
    statement:"to_timestamp('10 1 1 1 1', 'y M d H m s S')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 1 -0.1\",pattern:\"y M d H m s S\"}",
    statement:"to_timestamp('10 1 1 1 1 1 -0.1', 'y M d H m s S')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 1 1.0\",pattern:\"y M d H m s S\"}",
    statement:"to_timestamp('10 1 1 1 1 1 1.0', 'y M d H m s S')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 1 0.1\",pattern:\"y M d H m s SS\"}",
    statement:"to_timestamp('10 1 1 1 1 1 0.1', 'y M d H m s SS')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 1 0.001\",pattern:\"y M d H m s SS\"}",
    statement:"to_timestamp('10 1 1 1 1 1 0.001', 'y M d H m s SS')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1\",pattern:\"y M d H m s n\"}",
    statement:"to_timestamp('10 1 1 1 1', 'y M d H m s n')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 1 -1\",pattern:\"y M d H m s n\"}",
    statement:"to_timestamp('10 1 1 1 1 1 -1', 'y M d H m s n')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 1 1000000000\",pattern:\"y M d H m s n\"}",
    statement:"to_timestamp('10 1 1 1 1 1 1000000000', 'y M d H m s n')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 +24\",pattern:\"y M d H m X\"}",
    statement:"to_timestamp('10 1 1 1 1 +24', 'y M d H m X')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 -24\",pattern:\"y M d H m X\"}",
    statement:"to_timestamp('10 1 1 1 1 -24', 'y M d H m X')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 05\",pattern:\"y M d H m X\"}",
    statement:"to_timestamp('10 1 1 1 1 05', 'y M d H m X')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 +1\",pattern:\"y M d H m X\"}",
    statement:"to_timestamp('10 1 1 1 1 +1', 'y M d H m X')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 +1000000\",pattern:\"y M d H m X\"}",
    statement:"to_timestamp('10 1 1 1 1 +1000000', 'y M d H m X')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 -1\",pattern:\"y M d H m X\"}",
    statement:"to_timestamp('10 1 1 1 1 -1', 'y M d H m X')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 Z\",pattern:\"y M d H m x\"}",
    statement:"to_timestamp('10 1 1 1 1 Z', 'y M d H m x')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 +24\",pattern:\"y M d H m x\"}",
    statement:"to_timestamp('10 1 1 1 1 +24', 'y M d H m x')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 -24\",pattern:\"y M d H m x\"}",
    statement:"to_timestamp('10 1 1 1 1 -24', 'y M d H m x')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 05\",pattern:\"y M d H m x\"}",
    statement:"to_timestamp('10 1 1 1 1 05', 'y M d H m x')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 +1\",pattern:\"y M d H m x\"}",
    statement:"to_timestamp('10 1 1 1 1 +1', 'y M d H m x')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 +1000000\",pattern:\"y M d H m x\"}",
    statement:"to_timestamp('10 1 1 1 1 +1000000', 'y M d H m x')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 -1\",pattern:\"y M d H m x\"}",
    statement:"to_timestamp('10 1 1 1 1 -1', 'y M d H m x')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 +2400\",pattern:\"y M d H m XX\"}",
    statement:"to_timestamp('10 1 1 1 1 +2400', 'y M d H m XX')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 -2400\",pattern:\"y M d H m XX\"}",
    statement:"to_timestamp('10 1 1 1 1 -2400', 'y M d H m XX')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 0500\",pattern:\"y M d H m XX\"}",
    statement:"to_timestamp('10 1 1 1 1 0500', 'y M d H m XX')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 +100\",pattern:\"y M d H m XX\"}",
    statement:"to_timestamp('10 1 1 1 1 +100', 'y M d H m XX')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 -100\",pattern:\"y M d H m XX\"}",
    statement:"to_timestamp('10 1 1 1 1 -100', 'y M d H m XX')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 -10000\",pattern:\"y M d H m XX\"}",
    statement:"to_timestamp('10 1 1 1 1 -10000', 'y M d H m XX')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 Z\",pattern:\"y M d H m xx\"}",
    statement:"to_timestamp('10 1 1 1 1 Z', 'y M d H m xx')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 +2400\",pattern:\"y M d H m xx\"}",
    statement:"to_timestamp('10 1 1 1 1 +2400', 'y M d H m xx')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 -2400\",pattern:\"y M d H m xx\"}",
    statement:"to_timestamp('10 1 1 1 1 -2400', 'y M d H m xx')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 0500\",pattern:\"y M d H m xx\"}",
    statement:"to_timestamp('10 1 1 1 1 0500', 'y M d H m xx')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 +100\",pattern:\"y M d H m xx\"}",
    statement:"to_timestamp('10 1 1 1 1 +100', 'y M d H m xx')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 -100\",pattern:\"y M d H m xx\"}",
    statement:"to_timestamp('10 1 1 1 1 -100', 'y M d H m xx')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 -10000\",pattern:\"y M d H m xx\"}",
    statement:"to_timestamp('10 1 1 1 1 -10000', 'y M d H m xx')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 +24:00\",pattern:\"y M d H m XXX\"}",
    statement:"to_timestamp('10 1 1 1 1 +24:00', 'y M d H m XXX')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 -24:00\",pattern:\"y M d H m XXX\"}",
    statement:"to_timestamp('10 1 1 1 1 -24:00', 'y M d H m XXX')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 05:00\",pattern:\"y M d H m XXX\"}",
    statement:"to_timestamp('10 1 1 1 1 05:00', 'y M d H m XXX')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 +1:00\",pattern:\"y M d H m XXX\"}",
    statement:"to_timestamp('10 1 1 1 1 +1:00', 'y M d H m XXX')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 -1:00\",pattern:\"y M d H m XXX\"}",
    statement:"to_timestamp('10 1 1 1 1 -1:00', 'y M d H m XXX')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 -001:00\",pattern:\"y M d H m XXX\"}",
    statement:"to_timestamp('10 1 1 1 1 -001:00', 'y M d H m XXX')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 Z\",pattern:\"y M d H m xxx\"}",
    statement:"to_timestamp('10 1 1 1 1 Z', 'y M d H m xxx')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 +24:00\",pattern:\"y M d H m xxx\"}",
    statement:"to_timestamp('10 1 1 1 1 +24:00', 'y M d H m xxx')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 -24:00\",pattern:\"y M d H m xxx\"}",
    statement:"to_timestamp('10 1 1 1 1 -24:00', 'y M d H m xxx')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 05:00\",pattern:\"y M d H m xxx\"}",
    statement:"to_timestamp('10 1 1 1 1 05:00', 'y M d H m xxx')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 +1:00\",pattern:\"y M d H m xxx\"}",
    statement:"to_timestamp('10 1 1 1 1 +1:00', 'y M d H m xxx')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 -1:00\",pattern:\"y M d H m xxx\"}",
    statement:"to_timestamp('10 1 1 1 1 -1:00', 'y M d H m xxx')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_timestamp invalid string{string:\"10 1 1 1 1 -001:00\",pattern:\"y M d H m xxx\"}",
    statement:"to_timestamp('10 1 1 1 1 -001:00', 'y M d H m xxx')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  }
]
size::[
  {
    name:"size valid cases{param:\"`[]`\",result:0}",
    statement:"size(`[]`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"size valid cases{param:\"<<>>\",result:0}",
    statement:"size(<<>>)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"size valid cases{param:\"`{}`\",result:0}",
    statement:"size(`{}`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"size valid cases{param:\"`[1]`\",result:1}",
    statement:"size(`[1]`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"size valid cases{param:\"<<1>>\",result:1}",
    statement:"size(<<1>>)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"size valid cases{param:\"`{a: 1}`\",result:1}",
    statement:"size(`{a: 1}`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"size valid cases{param:\"`[1, 1.0]`\",result:2}",
    statement:"size(`[1, 1.0]`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"size valid cases{param:\"<<1, 2, 3>>\",result:3}",
    statement:"size(<<1, 2, 3>>)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3
    }
  },
  {
    name:"size valid cases{param:\"`{a: 1, b: foo}`\",result:2}",
    statement:"size(`{a: 1, b: foo}`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"size valid cases{param:\"`[[], [1,2,3,4,[5,6], ()], ({a: 1, b: 2})]`\",result:3}",
    statement:"size(`[[], [1,2,3,4,[5,6], ()], ({a: 1, b: 2})]`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3
    }
  },
  {
    name:"size valid cases{param:\"`{a: 1, a: 2}`\",result:2}",
    statement:"size(`{a: 1, a: 2}`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"size valid cases{param:\"`[null]`\",result:1}",
    statement:"size(`[null]`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"size valid cases{param:\"<<null>>\",result:1}",
    statement:"size(<<null>>)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"size valid cases{param:\"`{a: null}`\",result:1}",
    statement:"size(`{a: null}`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"size valid cases{param:\"`[missing]`\",result:1}",
    statement:"size(`[missing]`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"size valid cases{param:\"<<missing>>\",result:1}",
    statement:"size(<<missing>>)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"size valid cases{param:\"`{a: missing}`\",result:1}",
    statement:"size(`{a: missing}`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"size null and missing propagation{param:\"null\"}",
    statement:"size(null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"size null and missing propagation{param:\"missing\"}",
    statement:"size(missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"size wrong type of arguments{param:1,actual:\"INT\"}",
    statement:"size(1)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"size wrong type of arguments{param:\"''\",actual:\"STRING\"}",
    statement:"size('')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  }
]
date_diff::[
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"year\",left:\"2017T\",right:\"2017T\"}",
    statement:"date_diff(year, `2017T`, `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"month\",left:\"2017T\",right:\"2017T\"}",
    statement:"date_diff(month, `2017T`, `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"day\",left:\"2017T\",right:\"2017T\"}",
    statement:"date_diff(day, `2017T`, `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"hour\",left:\"2017T\",right:\"2017T\"}",
    statement:"date_diff(hour, `2017T`, `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"minute\",left:\"2017T\",right:\"2017T\"}",
    statement:"date_diff(minute, `2017T`, `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"second\",left:\"2017T\",right:\"2017T\"}",
    statement:"date_diff(second, `2017T`, `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"year\",left:\"2017-01T\",right:\"2017-01T\"}",
    statement:"date_diff(year, `2017-01T`, `2017-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"month\",left:\"2017-01T\",right:\"2017-01T\"}",
    statement:"date_diff(month, `2017-01T`, `2017-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"day\",left:\"2017-01T\",right:\"2017-01T\"}",
    statement:"date_diff(day, `2017-01T`, `2017-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"hour\",left:\"2017-01T\",right:\"2017-01T\"}",
    statement:"date_diff(hour, `2017-01T`, `2017-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"minute\",left:\"2017-01T\",right:\"2017-01T\"}",
    statement:"date_diff(minute, `2017-01T`, `2017-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"second\",left:\"2017-01T\",right:\"2017-01T\"}",
    statement:"date_diff(second, `2017-01T`, `2017-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"year\",left:\"2017-01-02T\",right:\"2017-01-02T\"}",
    statement:"date_diff(year, `2017-01-02T`, `2017-01-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"month\",left:\"2017-01-02T\",right:\"2017-01-02T\"}",
    statement:"date_diff(month, `2017-01-02T`, `2017-01-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"day\",left:\"2017-01-02T\",right:\"2017-01-02T\"}",
    statement:"date_diff(day, `2017-01-02T`, `2017-01-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"hour\",left:\"2017-01-02T\",right:\"2017-01-02T\"}",
    statement:"date_diff(hour, `2017-01-02T`, `2017-01-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"minute\",left:\"2017-01-02T\",right:\"2017-01-02T\"}",
    statement:"date_diff(minute, `2017-01-02T`, `2017-01-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"second\",left:\"2017-01-02T\",right:\"2017-01-02T\"}",
    statement:"date_diff(second, `2017-01-02T`, `2017-01-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"year\",left:\"2017-01-02T03:04Z\",right:\"2017-01-02T03:04Z\"}",
    statement:"date_diff(year, `2017-01-02T03:04Z`, `2017-01-02T03:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"month\",left:\"2017-01-02T03:04Z\",right:\"2017-01-02T03:04Z\"}",
    statement:"date_diff(month, `2017-01-02T03:04Z`, `2017-01-02T03:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"day\",left:\"2017-01-02T03:04Z\",right:\"2017-01-02T03:04Z\"}",
    statement:"date_diff(day, `2017-01-02T03:04Z`, `2017-01-02T03:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"hour\",left:\"2017-01-02T03:04Z\",right:\"2017-01-02T03:04Z\"}",
    statement:"date_diff(hour, `2017-01-02T03:04Z`, `2017-01-02T03:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"minute\",left:\"2017-01-02T03:04Z\",right:\"2017-01-02T03:04Z\"}",
    statement:"date_diff(minute, `2017-01-02T03:04Z`, `2017-01-02T03:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"second\",left:\"2017-01-02T03:04Z\",right:\"2017-01-02T03:04Z\"}",
    statement:"date_diff(second, `2017-01-02T03:04Z`, `2017-01-02T03:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"year\",left:\"2017-01-02T03:04:05Z\",right:\"2017-01-02T03:04:05Z\"}",
    statement:"date_diff(year, `2017-01-02T03:04:05Z`, `2017-01-02T03:04:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"month\",left:\"2017-01-02T03:04:05Z\",right:\"2017-01-02T03:04:05Z\"}",
    statement:"date_diff(month, `2017-01-02T03:04:05Z`, `2017-01-02T03:04:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"day\",left:\"2017-01-02T03:04:05Z\",right:\"2017-01-02T03:04:05Z\"}",
    statement:"date_diff(day, `2017-01-02T03:04:05Z`, `2017-01-02T03:04:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"hour\",left:\"2017-01-02T03:04:05Z\",right:\"2017-01-02T03:04:05Z\"}",
    statement:"date_diff(hour, `2017-01-02T03:04:05Z`, `2017-01-02T03:04:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"minute\",left:\"2017-01-02T03:04:05Z\",right:\"2017-01-02T03:04:05Z\"}",
    statement:"date_diff(minute, `2017-01-02T03:04:05Z`, `2017-01-02T03:04:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"second\",left:\"2017-01-02T03:04:05Z\",right:\"2017-01-02T03:04:05Z\"}",
    statement:"date_diff(second, `2017-01-02T03:04:05Z`, `2017-01-02T03:04:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"year\",left:\"2017-01-02T03:04:05.007Z\",right:\"2017-01-02T03:04:05.007Z\"}",
    statement:"date_diff(year, `2017-01-02T03:04:05.007Z`, `2017-01-02T03:04:05.007Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"month\",left:\"2017-01-02T03:04:05.007Z\",right:\"2017-01-02T03:04:05.007Z\"}",
    statement:"date_diff(month, `2017-01-02T03:04:05.007Z`, `2017-01-02T03:04:05.007Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"day\",left:\"2017-01-02T03:04:05.007Z\",right:\"2017-01-02T03:04:05.007Z\"}",
    statement:"date_diff(day, `2017-01-02T03:04:05.007Z`, `2017-01-02T03:04:05.007Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"hour\",left:\"2017-01-02T03:04:05.007Z\",right:\"2017-01-02T03:04:05.007Z\"}",
    statement:"date_diff(hour, `2017-01-02T03:04:05.007Z`, `2017-01-02T03:04:05.007Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"minute\",left:\"2017-01-02T03:04:05.007Z\",right:\"2017-01-02T03:04:05.007Z\"}",
    statement:"date_diff(minute, `2017-01-02T03:04:05.007Z`, `2017-01-02T03:04:05.007Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"second\",left:\"2017-01-02T03:04:05.007Z\",right:\"2017-01-02T03:04:05.007Z\"}",
    statement:"date_diff(second, `2017-01-02T03:04:05.007Z`, `2017-01-02T03:04:05.007Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"year\",left:\"2017-01-02T03:04:05.007+08:09\",right:\"2017-01-02T03:04:05.007+08:09\"}",
    statement:"date_diff(year, `2017-01-02T03:04:05.007+08:09`, `2017-01-02T03:04:05.007+08:09`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"month\",left:\"2017-01-02T03:04:05.007+08:09\",right:\"2017-01-02T03:04:05.007+08:09\"}",
    statement:"date_diff(month, `2017-01-02T03:04:05.007+08:09`, `2017-01-02T03:04:05.007+08:09`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"day\",left:\"2017-01-02T03:04:05.007+08:09\",right:\"2017-01-02T03:04:05.007+08:09\"}",
    statement:"date_diff(day, `2017-01-02T03:04:05.007+08:09`, `2017-01-02T03:04:05.007+08:09`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"hour\",left:\"2017-01-02T03:04:05.007+08:09\",right:\"2017-01-02T03:04:05.007+08:09\"}",
    statement:"date_diff(hour, `2017-01-02T03:04:05.007+08:09`, `2017-01-02T03:04:05.007+08:09`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"minute\",left:\"2017-01-02T03:04:05.007+08:09\",right:\"2017-01-02T03:04:05.007+08:09\"}",
    statement:"date_diff(minute, `2017-01-02T03:04:05.007+08:09`, `2017-01-02T03:04:05.007+08:09`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"second\",left:\"2017-01-02T03:04:05.007+08:09\",right:\"2017-01-02T03:04:05.007+08:09\"}",
    statement:"date_diff(second, `2017-01-02T03:04:05.007+08:09`, `2017-01-02T03:04:05.007+08:09`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 1),time_part:\"year\",left:\"2017T\",right:\"2018T\"}",
    statement:"date_diff(year, `2017T`, `2018T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"date_diff valid cases{result:(success 12),time_part:\"month\",left:\"2017T\",right:\"2018T\"}",
    statement:"date_diff(month, `2017T`, `2018T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:12
    }
  },
  {
    name:"date_diff valid cases{result:(success 365),time_part:\"day\",left:\"2017T\",right:\"2018T\"}",
    statement:"date_diff(day, `2017T`, `2018T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:365
    }
  },
  {
    name:"date_diff valid cases{result:(success 8760),time_part:\"hour\",left:\"2017T\",right:\"2018T\"}",
    statement:"date_diff(hour, `2017T`, `2018T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:8760
    }
  },
  {
    name:"date_diff valid cases{result:(success 525600),time_part:\"minute\",left:\"2017T\",right:\"2018T\"}",
    statement:"date_diff(minute, `2017T`, `2018T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:525600
    }
  },
  {
    name:"date_diff valid cases{result:(success 31536000),time_part:\"second\",left:\"2017T\",right:\"2018T\"}",
    statement:"date_diff(second, `2017T`, `2018T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:31536000
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"year\",left:\"2017-01T\",right:\"2017-02T\"}",
    statement:"date_diff(year, `2017-01T`, `2017-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 1),time_part:\"month\",left:\"2017-01T\",right:\"2017-02T\"}",
    statement:"date_diff(month, `2017-01T`, `2017-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"date_diff valid cases{result:(success 31),time_part:\"day\",left:\"2017-01T\",right:\"2017-02T\"}",
    statement:"date_diff(day, `2017-01T`, `2017-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:31
    }
  },
  {
    name:"date_diff valid cases{result:(success 744),time_part:\"hour\",left:\"2017-01T\",right:\"2017-02T\"}",
    statement:"date_diff(hour, `2017-01T`, `2017-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:744
    }
  },
  {
    name:"date_diff valid cases{result:(success 44640),time_part:\"minute\",left:\"2017-01T\",right:\"2017-02T\"}",
    statement:"date_diff(minute, `2017-01T`, `2017-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:44640
    }
  },
  {
    name:"date_diff valid cases{result:(success 2678400),time_part:\"second\",left:\"2017-01T\",right:\"2017-02T\"}",
    statement:"date_diff(second, `2017-01T`, `2017-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2678400
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"year\",left:\"2017-01-02T\",right:\"2017-01-03T\"}",
    statement:"date_diff(year, `2017-01-02T`, `2017-01-03T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"month\",left:\"2017-01-02T\",right:\"2017-01-03T\"}",
    statement:"date_diff(month, `2017-01-02T`, `2017-01-03T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 1),time_part:\"day\",left:\"2017-01-02T\",right:\"2017-01-03T\"}",
    statement:"date_diff(day, `2017-01-02T`, `2017-01-03T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"date_diff valid cases{result:(success 24),time_part:\"hour\",left:\"2017-01-02T\",right:\"2017-01-03T\"}",
    statement:"date_diff(hour, `2017-01-02T`, `2017-01-03T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:24
    }
  },
  {
    name:"date_diff valid cases{result:(success 1440),time_part:\"minute\",left:\"2017-01-02T\",right:\"2017-01-03T\"}",
    statement:"date_diff(minute, `2017-01-02T`, `2017-01-03T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1440
    }
  },
  {
    name:"date_diff valid cases{result:(success 86400),time_part:\"second\",left:\"2017-01-02T\",right:\"2017-01-03T\"}",
    statement:"date_diff(second, `2017-01-02T`, `2017-01-03T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:86400
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"year\",left:\"2017-01-02T03:04Z\",right:\"2017-01-02T04:04Z\"}",
    statement:"date_diff(year, `2017-01-02T03:04Z`, `2017-01-02T04:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"month\",left:\"2017-01-02T03:04Z\",right:\"2017-01-02T04:04Z\"}",
    statement:"date_diff(month, `2017-01-02T03:04Z`, `2017-01-02T04:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"day\",left:\"2017-01-02T03:04Z\",right:\"2017-01-02T04:04Z\"}",
    statement:"date_diff(day, `2017-01-02T03:04Z`, `2017-01-02T04:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 1),time_part:\"hour\",left:\"2017-01-02T03:04Z\",right:\"2017-01-02T04:04Z\"}",
    statement:"date_diff(hour, `2017-01-02T03:04Z`, `2017-01-02T04:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"date_diff valid cases{result:(success 60),time_part:\"minute\",left:\"2017-01-02T03:04Z\",right:\"2017-01-02T04:04Z\"}",
    statement:"date_diff(minute, `2017-01-02T03:04Z`, `2017-01-02T04:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:60
    }
  },
  {
    name:"date_diff valid cases{result:(success 3600),time_part:\"second\",left:\"2017-01-02T03:04Z\",right:\"2017-01-02T04:04Z\"}",
    statement:"date_diff(second, `2017-01-02T03:04Z`, `2017-01-02T04:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3600
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"year\",left:\"2017-01-02T03:04Z\",right:\"2017-01-02T03:05Z\"}",
    statement:"date_diff(year, `2017-01-02T03:04Z`, `2017-01-02T03:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"month\",left:\"2017-01-02T03:04Z\",right:\"2017-01-02T03:05Z\"}",
    statement:"date_diff(month, `2017-01-02T03:04Z`, `2017-01-02T03:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"day\",left:\"2017-01-02T03:04Z\",right:\"2017-01-02T03:05Z\"}",
    statement:"date_diff(day, `2017-01-02T03:04Z`, `2017-01-02T03:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"hour\",left:\"2017-01-02T03:04Z\",right:\"2017-01-02T03:05Z\"}",
    statement:"date_diff(hour, `2017-01-02T03:04Z`, `2017-01-02T03:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 1),time_part:\"minute\",left:\"2017-01-02T03:04Z\",right:\"2017-01-02T03:05Z\"}",
    statement:"date_diff(minute, `2017-01-02T03:04Z`, `2017-01-02T03:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"date_diff valid cases{result:(success 60),time_part:\"second\",left:\"2017-01-02T03:04Z\",right:\"2017-01-02T03:05Z\"}",
    statement:"date_diff(second, `2017-01-02T03:04Z`, `2017-01-02T03:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:60
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"year\",left:\"2017-01-02T03:04:05Z\",right:\"2017-01-02T03:04:06Z\"}",
    statement:"date_diff(year, `2017-01-02T03:04:05Z`, `2017-01-02T03:04:06Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"month\",left:\"2017-01-02T03:04:05Z\",right:\"2017-01-02T03:04:06Z\"}",
    statement:"date_diff(month, `2017-01-02T03:04:05Z`, `2017-01-02T03:04:06Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"day\",left:\"2017-01-02T03:04:05Z\",right:\"2017-01-02T03:04:06Z\"}",
    statement:"date_diff(day, `2017-01-02T03:04:05Z`, `2017-01-02T03:04:06Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"hour\",left:\"2017-01-02T03:04:05Z\",right:\"2017-01-02T03:04:06Z\"}",
    statement:"date_diff(hour, `2017-01-02T03:04:05Z`, `2017-01-02T03:04:06Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"minute\",left:\"2017-01-02T03:04:05Z\",right:\"2017-01-02T03:04:06Z\"}",
    statement:"date_diff(minute, `2017-01-02T03:04:05Z`, `2017-01-02T03:04:06Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 1),time_part:\"second\",left:\"2017-01-02T03:04:05Z\",right:\"2017-01-02T03:04:06Z\"}",
    statement:"date_diff(second, `2017-01-02T03:04:05Z`, `2017-01-02T03:04:06Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"year\",left:\"2017-01-02T03:04:05.007Z\",right:\"2017-01-02T03:04:05.008Z\"}",
    statement:"date_diff(year, `2017-01-02T03:04:05.007Z`, `2017-01-02T03:04:05.008Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"month\",left:\"2017-01-02T03:04:05.007Z\",right:\"2017-01-02T03:04:05.008Z\"}",
    statement:"date_diff(month, `2017-01-02T03:04:05.007Z`, `2017-01-02T03:04:05.008Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"day\",left:\"2017-01-02T03:04:05.007Z\",right:\"2017-01-02T03:04:05.008Z\"}",
    statement:"date_diff(day, `2017-01-02T03:04:05.007Z`, `2017-01-02T03:04:05.008Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"hour\",left:\"2017-01-02T03:04:05.007Z\",right:\"2017-01-02T03:04:05.008Z\"}",
    statement:"date_diff(hour, `2017-01-02T03:04:05.007Z`, `2017-01-02T03:04:05.008Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"minute\",left:\"2017-01-02T03:04:05.007Z\",right:\"2017-01-02T03:04:05.008Z\"}",
    statement:"date_diff(minute, `2017-01-02T03:04:05.007Z`, `2017-01-02T03:04:05.008Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"second\",left:\"2017-01-02T03:04:05.007Z\",right:\"2017-01-02T03:04:05.008Z\"}",
    statement:"date_diff(second, `2017-01-02T03:04:05.007Z`, `2017-01-02T03:04:05.008Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success -1),time_part:\"year\",left:\"2018T\",right:\"2017T\"}",
    statement:"date_diff(year, `2018T`, `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"date_diff valid cases{result:(success -12),time_part:\"month\",left:\"2018T\",right:\"2017T\"}",
    statement:"date_diff(month, `2018T`, `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-12
    }
  },
  {
    name:"date_diff valid cases{result:(success -365),time_part:\"day\",left:\"2018T\",right:\"2017T\"}",
    statement:"date_diff(day, `2018T`, `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-365
    }
  },
  {
    name:"date_diff valid cases{result:(success -8760),time_part:\"hour\",left:\"2018T\",right:\"2017T\"}",
    statement:"date_diff(hour, `2018T`, `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-8760
    }
  },
  {
    name:"date_diff valid cases{result:(success -525600),time_part:\"minute\",left:\"2018T\",right:\"2017T\"}",
    statement:"date_diff(minute, `2018T`, `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-525600
    }
  },
  {
    name:"date_diff valid cases{result:(success -31536000),time_part:\"second\",left:\"2018T\",right:\"2017T\"}",
    statement:"date_diff(second, `2018T`, `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-31536000
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"year\",left:\"2017-02T\",right:\"2017-01T\"}",
    statement:"date_diff(year, `2017-02T`, `2017-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success -1),time_part:\"month\",left:\"2017-02T\",right:\"2017-01T\"}",
    statement:"date_diff(month, `2017-02T`, `2017-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"date_diff valid cases{result:(success -31),time_part:\"day\",left:\"2017-02T\",right:\"2017-01T\"}",
    statement:"date_diff(day, `2017-02T`, `2017-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-31
    }
  },
  {
    name:"date_diff valid cases{result:(success -744),time_part:\"hour\",left:\"2017-02T\",right:\"2017-01T\"}",
    statement:"date_diff(hour, `2017-02T`, `2017-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-744
    }
  },
  {
    name:"date_diff valid cases{result:(success -44640),time_part:\"minute\",left:\"2017-02T\",right:\"2017-01T\"}",
    statement:"date_diff(minute, `2017-02T`, `2017-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-44640
    }
  },
  {
    name:"date_diff valid cases{result:(success -2678400),time_part:\"second\",left:\"2017-02T\",right:\"2017-01T\"}",
    statement:"date_diff(second, `2017-02T`, `2017-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-2678400
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"year\",left:\"2017-01-03T\",right:\"2017-01-02T\"}",
    statement:"date_diff(year, `2017-01-03T`, `2017-01-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"month\",left:\"2017-01-03T\",right:\"2017-01-02T\"}",
    statement:"date_diff(month, `2017-01-03T`, `2017-01-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success -1),time_part:\"day\",left:\"2017-01-03T\",right:\"2017-01-02T\"}",
    statement:"date_diff(day, `2017-01-03T`, `2017-01-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"date_diff valid cases{result:(success -24),time_part:\"hour\",left:\"2017-01-03T\",right:\"2017-01-02T\"}",
    statement:"date_diff(hour, `2017-01-03T`, `2017-01-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-24
    }
  },
  {
    name:"date_diff valid cases{result:(success -1440),time_part:\"minute\",left:\"2017-01-03T\",right:\"2017-01-02T\"}",
    statement:"date_diff(minute, `2017-01-03T`, `2017-01-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1440
    }
  },
  {
    name:"date_diff valid cases{result:(success -86400),time_part:\"second\",left:\"2017-01-03T\",right:\"2017-01-02T\"}",
    statement:"date_diff(second, `2017-01-03T`, `2017-01-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-86400
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"year\",left:\"2017-01-02T04:04Z\",right:\"2017-01-02T03:04Z\"}",
    statement:"date_diff(year, `2017-01-02T04:04Z`, `2017-01-02T03:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"month\",left:\"2017-01-02T04:04Z\",right:\"2017-01-02T03:04Z\"}",
    statement:"date_diff(month, `2017-01-02T04:04Z`, `2017-01-02T03:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"day\",left:\"2017-01-02T04:04Z\",right:\"2017-01-02T03:04Z\"}",
    statement:"date_diff(day, `2017-01-02T04:04Z`, `2017-01-02T03:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success -1),time_part:\"hour\",left:\"2017-01-02T04:04Z\",right:\"2017-01-02T03:04Z\"}",
    statement:"date_diff(hour, `2017-01-02T04:04Z`, `2017-01-02T03:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"date_diff valid cases{result:(success -60),time_part:\"minute\",left:\"2017-01-02T04:04Z\",right:\"2017-01-02T03:04Z\"}",
    statement:"date_diff(minute, `2017-01-02T04:04Z`, `2017-01-02T03:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-60
    }
  },
  {
    name:"date_diff valid cases{result:(success -3600),time_part:\"second\",left:\"2017-01-02T04:04Z\",right:\"2017-01-02T03:04Z\"}",
    statement:"date_diff(second, `2017-01-02T04:04Z`, `2017-01-02T03:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-3600
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"year\",left:\"2017-01-02T03:05Z\",right:\"2017-01-02T03:04Z\"}",
    statement:"date_diff(year, `2017-01-02T03:05Z`, `2017-01-02T03:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"month\",left:\"2017-01-02T03:05Z\",right:\"2017-01-02T03:04Z\"}",
    statement:"date_diff(month, `2017-01-02T03:05Z`, `2017-01-02T03:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"day\",left:\"2017-01-02T03:05Z\",right:\"2017-01-02T03:04Z\"}",
    statement:"date_diff(day, `2017-01-02T03:05Z`, `2017-01-02T03:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"hour\",left:\"2017-01-02T03:05Z\",right:\"2017-01-02T03:04Z\"}",
    statement:"date_diff(hour, `2017-01-02T03:05Z`, `2017-01-02T03:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success -1),time_part:\"minute\",left:\"2017-01-02T03:05Z\",right:\"2017-01-02T03:04Z\"}",
    statement:"date_diff(minute, `2017-01-02T03:05Z`, `2017-01-02T03:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"date_diff valid cases{result:(success -60),time_part:\"second\",left:\"2017-01-02T03:05Z\",right:\"2017-01-02T03:04Z\"}",
    statement:"date_diff(second, `2017-01-02T03:05Z`, `2017-01-02T03:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-60
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"year\",left:\"2017-01-02T03:04:06Z\",right:\"2017-01-02T03:04:05Z\"}",
    statement:"date_diff(year, `2017-01-02T03:04:06Z`, `2017-01-02T03:04:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"month\",left:\"2017-01-02T03:04:06Z\",right:\"2017-01-02T03:04:05Z\"}",
    statement:"date_diff(month, `2017-01-02T03:04:06Z`, `2017-01-02T03:04:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"day\",left:\"2017-01-02T03:04:06Z\",right:\"2017-01-02T03:04:05Z\"}",
    statement:"date_diff(day, `2017-01-02T03:04:06Z`, `2017-01-02T03:04:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"hour\",left:\"2017-01-02T03:04:06Z\",right:\"2017-01-02T03:04:05Z\"}",
    statement:"date_diff(hour, `2017-01-02T03:04:06Z`, `2017-01-02T03:04:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"minute\",left:\"2017-01-02T03:04:06Z\",right:\"2017-01-02T03:04:05Z\"}",
    statement:"date_diff(minute, `2017-01-02T03:04:06Z`, `2017-01-02T03:04:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success -1),time_part:\"second\",left:\"2017-01-02T03:04:06Z\",right:\"2017-01-02T03:04:05Z\"}",
    statement:"date_diff(second, `2017-01-02T03:04:06Z`, `2017-01-02T03:04:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"year\",left:\"2017-01-02T03:04:05.008Z\",right:\"2017-01-02T03:04:05.007Z\"}",
    statement:"date_diff(year, `2017-01-02T03:04:05.008Z`, `2017-01-02T03:04:05.007Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"month\",left:\"2017-01-02T03:04:05.008Z\",right:\"2017-01-02T03:04:05.007Z\"}",
    statement:"date_diff(month, `2017-01-02T03:04:05.008Z`, `2017-01-02T03:04:05.007Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"day\",left:\"2017-01-02T03:04:05.008Z\",right:\"2017-01-02T03:04:05.007Z\"}",
    statement:"date_diff(day, `2017-01-02T03:04:05.008Z`, `2017-01-02T03:04:05.007Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"hour\",left:\"2017-01-02T03:04:05.008Z\",right:\"2017-01-02T03:04:05.007Z\"}",
    statement:"date_diff(hour, `2017-01-02T03:04:05.008Z`, `2017-01-02T03:04:05.007Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"minute\",left:\"2017-01-02T03:04:05.008Z\",right:\"2017-01-02T03:04:05.007Z\"}",
    statement:"date_diff(minute, `2017-01-02T03:04:05.008Z`, `2017-01-02T03:04:05.007Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"second\",left:\"2017-01-02T03:04:05.008Z\",right:\"2017-01-02T03:04:05.007Z\"}",
    statement:"date_diff(second, `2017-01-02T03:04:05.008Z`, `2017-01-02T03:04:05.007Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"year\",left:\"2017-01-02T03:04+01:02\",right:\"2017-01-02T03:04+00:00\"}",
    statement:"date_diff(year, `2017-01-02T03:04+01:02`, `2017-01-02T03:04+00:00`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"month\",left:\"2017-01-02T03:04+00:02\",right:\"2017-01-02T03:04+00:00\"}",
    statement:"date_diff(month, `2017-01-02T03:04+00:02`, `2017-01-02T03:04+00:00`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 0),time_part:\"day\",left:\"2017-01-02T01:00+10:00\",right:\"2017-01-02T01:00+00:00\"}",
    statement:"date_diff(day, `2017-01-02T01:00+10:00`, `2017-01-02T01:00+00:00`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"date_diff valid cases{result:(success 1),time_part:\"hour\",left:\"2017-01-02T03:04+01:02\",right:\"2017-01-02T03:04+00:00\"}",
    statement:"date_diff(hour, `2017-01-02T03:04+01:02`, `2017-01-02T03:04+00:00`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"date_diff valid cases{result:(success 2),time_part:\"minute\",left:\"2017-01-02T03:04+00:02\",right:\"2017-01-02T03:04+00:00\"}",
    statement:"date_diff(minute, `2017-01-02T03:04+00:02`, `2017-01-02T03:04+00:00`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"date_diff valid cases{result:(success 1),time_part:\"month\",left:\"2017T\",right:\"2017-02T\"}",
    statement:"date_diff(month, `2017T`, `2017-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"date_diff valid cases{result:(success 1),time_part:\"day\",left:\"2017T\",right:\"2017-01-02T\"}",
    statement:"date_diff(day, `2017T`, `2017-01-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"date_diff valid cases{result:(success 1),time_part:\"hour\",left:\"2017T\",right:\"2017-01-01T01:00Z\"}",
    statement:"date_diff(hour, `2017T`, `2017-01-01T01:00Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"date_diff valid cases{result:(success 1),time_part:\"minute\",left:\"2017T\",right:\"2017-01-01T00:01Z\"}",
    statement:"date_diff(minute, `2017T`, `2017-01-01T00:01Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"date_diff valid cases{result:(success 1),time_part:\"second\",left:\"2017T\",right:\"2017-01-01T00:00:01Z\"}",
    statement:"date_diff(second, `2017T`, `2017-01-01T00:00:01Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"date_diff valid cases{result:(success 1),time_part:\"day\",left:\"2017-01T\",right:\"2017-01-02T\"}",
    statement:"date_diff(day, `2017-01T`, `2017-01-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"date_diff valid cases{result:(success 1),time_part:\"hour\",left:\"2017-01T\",right:\"2017-01-01T01:00Z\"}",
    statement:"date_diff(hour, `2017-01T`, `2017-01-01T01:00Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"date_diff valid cases{result:(success 1),time_part:\"minute\",left:\"2017-01T\",right:\"2017-01-01T00:01Z\"}",
    statement:"date_diff(minute, `2017-01T`, `2017-01-01T00:01Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"date_diff valid cases{result:(success 1),time_part:\"second\",left:\"2017-01T\",right:\"2017-01-01T00:00:01Z\"}",
    statement:"date_diff(second, `2017-01T`, `2017-01-01T00:00:01Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"date_diff valid cases{result:(success 1),time_part:\"hour\",left:\"2017-01-01T\",right:\"2017-01-01T01:00Z\"}",
    statement:"date_diff(hour, `2017-01-01T`, `2017-01-01T01:00Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"date_diff valid cases{result:(success 1),time_part:\"minute\",left:\"2017-01-01T\",right:\"2017-01-01T00:01Z\"}",
    statement:"date_diff(minute, `2017-01-01T`, `2017-01-01T00:01Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"date_diff valid cases{result:(success 1),time_part:\"second\",left:\"2017-01-01T\",right:\"2017-01-01T00:00:01Z\"}",
    statement:"date_diff(second, `2017-01-01T`, `2017-01-01T00:00:01Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"date_diff valid cases{result:(success 1),time_part:\"second\",left:\"2017-01-01T00:00Z\",right:\"2017-01-01T00:00:01Z\"}",
    statement:"date_diff(second, `2017-01-01T00:00Z`, `2017-01-01T00:00:01Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"date_diff valid cases{result:(success 366),time_part:\"day\",left:\"2016-01-01T\",right:\"2017-01-01T\"}",
    statement:"date_diff(day, `2016-01-01T`, `2017-01-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:366
    }
  },
  {
    name:"date_diff valid cases{result:(success 8784),time_part:\"hour\",left:\"2016-01-01T\",right:\"2017-01-01T\"}",
    statement:"date_diff(hour, `2016-01-01T`, `2017-01-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:8784
    }
  },
  {
    name:"date_diff valid cases{result:(success 527040),time_part:\"minute\",left:\"2016-01-01T\",right:\"2017-01-01T\"}",
    statement:"date_diff(minute, `2016-01-01T`, `2017-01-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:527040
    }
  },
  {
    name:"date_diff valid cases{result:(success 31622400),time_part:\"second\",left:\"2016-01-01T\",right:\"2017-01-01T\"}",
    statement:"date_diff(second, `2016-01-01T`, `2017-01-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:31622400
    }
  },
  {
    name:"date_diff valid cases{result:(success 31),time_part:\"day\",left:\"2017-01-01T\",right:\"2017-02-01T\"}",
    statement:"date_diff(day, `2017-01-01T`, `2017-02-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:31
    }
  },
  {
    name:"date_diff valid cases{result:(success 28),time_part:\"day\",left:\"2017-02-01T\",right:\"2017-03-01T\"}",
    statement:"date_diff(day, `2017-02-01T`, `2017-03-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:28
    }
  },
  {
    name:"date_diff valid cases{result:(success 29),time_part:\"day\",left:\"2016-02-01T\",right:\"2016-03-01T\"}",
    statement:"date_diff(day, `2016-02-01T`, `2016-03-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:29
    }
  },
  {
    name:"date_diff valid cases{result:(success 31),time_part:\"day\",left:\"2017-03-01T\",right:\"2017-04-01T\"}",
    statement:"date_diff(day, `2017-03-01T`, `2017-04-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:31
    }
  },
  {
    name:"date_diff valid cases{result:(success 30),time_part:\"day\",left:\"2017-04-01T\",right:\"2017-05-01T\"}",
    statement:"date_diff(day, `2017-04-01T`, `2017-05-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:30
    }
  },
  {
    name:"date_diff valid cases{result:(success 31),time_part:\"day\",left:\"2017-05-01T\",right:\"2017-06-01T\"}",
    statement:"date_diff(day, `2017-05-01T`, `2017-06-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:31
    }
  },
  {
    name:"date_diff valid cases{result:(success 30),time_part:\"day\",left:\"2017-06-01T\",right:\"2017-07-01T\"}",
    statement:"date_diff(day, `2017-06-01T`, `2017-07-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:30
    }
  },
  {
    name:"date_diff valid cases{result:(success 31),time_part:\"day\",left:\"2017-07-01T\",right:\"2017-08-01T\"}",
    statement:"date_diff(day, `2017-07-01T`, `2017-08-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:31
    }
  },
  {
    name:"date_diff valid cases{result:(success 31),time_part:\"day\",left:\"2017-08-01T\",right:\"2017-09-01T\"}",
    statement:"date_diff(day, `2017-08-01T`, `2017-09-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:31
    }
  },
  {
    name:"date_diff valid cases{result:(success 30),time_part:\"day\",left:\"2017-09-01T\",right:\"2017-10-01T\"}",
    statement:"date_diff(day, `2017-09-01T`, `2017-10-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:30
    }
  },
  {
    name:"date_diff valid cases{result:(success 31),time_part:\"day\",left:\"2017-10-01T\",right:\"2017-11-01T\"}",
    statement:"date_diff(day, `2017-10-01T`, `2017-11-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:31
    }
  },
  {
    name:"date_diff valid cases{result:(success 30),time_part:\"day\",left:\"2017-11-01T\",right:\"2017-12-01T\"}",
    statement:"date_diff(day, `2017-11-01T`, `2017-12-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:30
    }
  },
  {
    name:"date_diff valid cases{result:(success 31),time_part:\"day\",left:\"2017-12-01T\",right:\"2018-01-01T\"}",
    statement:"date_diff(day, `2017-12-01T`, `2018-01-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:31
    }
  },
  {
    name:"date_diff null and missing propagation{result:(success null),time_part:\"year\",left:\"null\",right:\"`2017T`\"}",
    statement:"date_diff(year, null, `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"date_diff null and missing propagation{result:(success null),time_part:\"year\",left:\"`2017T`\",right:\"null\"}",
    statement:"date_diff(year, `2017T`, null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"date_diff null and missing propagation{result:(success null),time_part:\"year\",left:\"missing\",right:\"`2017T`\"}",
    statement:"date_diff(year, missing, `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"date_diff null and missing propagation{result:(success null),time_part:\"year\",left:\"`2017T`\",right:\"missing\"}",
    statement:"date_diff(year, `2017T`, missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"date_diff null and missing propagation{result:(success null),time_part:\"year\",left:\"null\",right:\"missing\"}",
    statement:"date_diff(year, null, missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"date_diff null and missing propagation{result:(success null),time_part:\"year\",left:\"missing\",right:\"null\"}",
    statement:"date_diff(year, missing, null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"date_diff wrong type of arguments{time_part:\"1\",left:\"`2017T`\",right:\"`2017T`\"}",
    statement:"date_diff(1, `2017T`, `2017T`)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"date_diff wrong type of arguments{time_part:\"year\",left:\"1\",right:\"`2017T`\"}",
    statement:"date_diff(year, 1, `2017T`)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"date_diff wrong type of arguments{time_part:\"year\",left:\"`2017T`\",right:\"1\"}",
    statement:"date_diff(year, `2017T`, 1)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"date_diff invalid arguments{time_part:\"'foobar'\"}",
    statement:"date_diff('foobar', `2001T`, `1986T`)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"date_diff invalid arguments{time_part:1}",
    statement:"date_diff(1, `2001T`, `1986T`)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"date_diff invalid arguments{time_part:[]}",
    statement:"date_diff([], `2001T`, `1986T`)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"date_diff invalid arguments{time_part:\"timezone_hour\"}",
    statement:"date_diff(timezone_hour, `2001T`, `1986T`)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"date_diff invalid arguments{time_part:\"timezone_minute\"}",
    statement:"date_diff(timezone_minute, `2001T`, `1986T`)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  }
]
extract::[
  {
    name:"extract valid cases{result:2017.,time_part:\"year\",timestamp:\"2017T\"}",
    statement:"extract(year from `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017.
    }
  },
  {
    name:"extract valid cases{result:1.,time_part:\"month\",timestamp:\"2017T\"}",
    statement:"extract(month from `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1.
    }
  },
  {
    name:"extract valid cases{result:1.,time_part:\"day\",timestamp:\"2017T\"}",
    statement:"extract(day from `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1.
    }
  },
  {
    name:"extract valid cases{result:0.,time_part:\"hour\",timestamp:\"2017T\"}",
    statement:"extract(hour from `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0.
    }
  },
  {
    name:"extract valid cases{result:0.,time_part:\"minute\",timestamp:\"2017T\"}",
    statement:"extract(minute from `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0.
    }
  },
  {
    name:"extract valid cases{result:0.,time_part:\"second\",timestamp:\"2017T\"}",
    statement:"extract(second from `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0.
    }
  },
  {
    name:"extract valid cases{result:0.,time_part:\"timezone_hour\",timestamp:\"2017T\"}",
    statement:"extract(timezone_hour from `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0.
    }
  },
  {
    name:"extract valid cases{result:0.,time_part:\"timezone_minute\",timestamp:\"2017T\"}",
    statement:"extract(timezone_minute from `2017T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0.
    }
  },
  {
    name:"extract valid cases{result:2017.,time_part:\"year\",timestamp:\"2017-01T\"}",
    statement:"extract(year from `2017-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017.
    }
  },
  {
    name:"extract valid cases{result:1.,time_part:\"month\",timestamp:\"2017-01T\"}",
    statement:"extract(month from `2017-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1.
    }
  },
  {
    name:"extract valid cases{result:1.,time_part:\"day\",timestamp:\"2017-01T\"}",
    statement:"extract(day from `2017-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1.
    }
  },
  {
    name:"extract valid cases{result:0.,time_part:\"hour\",timestamp:\"2017-01T\"}",
    statement:"extract(hour from `2017-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0.
    }
  },
  {
    name:"extract valid cases{result:0.,time_part:\"minute\",timestamp:\"2017-01T\"}",
    statement:"extract(minute from `2017-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0.
    }
  },
  {
    name:"extract valid cases{result:0.,time_part:\"second\",timestamp:\"2017-01T\"}",
    statement:"extract(second from `2017-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0.
    }
  },
  {
    name:"extract valid cases{result:0.,time_part:\"timezone_hour\",timestamp:\"2017-01T\"}",
    statement:"extract(timezone_hour from `2017-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0.
    }
  },
  {
    name:"extract valid cases{result:0.,time_part:\"timezone_minute\",timestamp:\"2017-01T\"}",
    statement:"extract(timezone_minute from `2017-01T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0.
    }
  },
  {
    name:"extract valid cases{result:2017.,time_part:\"year\",timestamp:\"2017-01-02T\"}",
    statement:"extract(year from `2017-01-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017.
    }
  },
  {
    name:"extract valid cases{result:1.,time_part:\"month\",timestamp:\"2017-01-02T\"}",
    statement:"extract(month from `2017-01-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1.
    }
  },
  {
    name:"extract valid cases{result:2.,time_part:\"day\",timestamp:\"2017-01-02T\"}",
    statement:"extract(day from `2017-01-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2.
    }
  },
  {
    name:"extract valid cases{result:0.,time_part:\"hour\",timestamp:\"2017-01-02T\"}",
    statement:"extract(hour from `2017-01-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0.
    }
  },
  {
    name:"extract valid cases{result:0.,time_part:\"minute\",timestamp:\"2017-01-02T\"}",
    statement:"extract(minute from `2017-01-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0.
    }
  },
  {
    name:"extract valid cases{result:0.,time_part:\"second\",timestamp:\"2017-01-02T\"}",
    statement:"extract(second from `2017-01-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0.
    }
  },
  {
    name:"extract valid cases{result:0.,time_part:\"timezone_hour\",timestamp:\"2017-01-02T\"}",
    statement:"extract(timezone_hour from `2017-01-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0.
    }
  },
  {
    name:"extract valid cases{result:0.,time_part:\"timezone_minute\",timestamp:\"2017-01-02T\"}",
    statement:"extract(timezone_minute from `2017-01-02T`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0.
    }
  },
  {
    name:"extract valid cases{result:2017.,time_part:\"year\",timestamp:\"2017-01-02T03:04Z\"}",
    statement:"extract(year from `2017-01-02T03:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017.
    }
  },
  {
    name:"extract valid cases{result:1.,time_part:\"month\",timestamp:\"2017-01-02T03:04Z\"}",
    statement:"extract(month from `2017-01-02T03:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1.
    }
  },
  {
    name:"extract valid cases{result:2.,time_part:\"day\",timestamp:\"2017-01-02T03:04Z\"}",
    statement:"extract(day from `2017-01-02T03:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2.
    }
  },
  {
    name:"extract valid cases{result:3.,time_part:\"hour\",timestamp:\"2017-01-02T03:04Z\"}",
    statement:"extract(hour from `2017-01-02T03:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3.
    }
  },
  {
    name:"extract valid cases{result:4.,time_part:\"minute\",timestamp:\"2017-01-02T03:04Z\"}",
    statement:"extract(minute from `2017-01-02T03:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4.
    }
  },
  {
    name:"extract valid cases{result:0.,time_part:\"second\",timestamp:\"2017-01-02T03:04Z\"}",
    statement:"extract(second from `2017-01-02T03:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0.
    }
  },
  {
    name:"extract valid cases{result:0.,time_part:\"timezone_hour\",timestamp:\"2017-01-02T03:04Z\"}",
    statement:"extract(timezone_hour from `2017-01-02T03:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0.
    }
  },
  {
    name:"extract valid cases{result:0.,time_part:\"timezone_minute\",timestamp:\"2017-01-02T03:04Z\"}",
    statement:"extract(timezone_minute from `2017-01-02T03:04Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0.
    }
  },
  {
    name:"extract valid cases{result:2017.,time_part:\"year\",timestamp:\"2017-01-02T03:04:05Z\"}",
    statement:"extract(year from `2017-01-02T03:04:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017.
    }
  },
  {
    name:"extract valid cases{result:1.,time_part:\"month\",timestamp:\"2017-01-02T03:04:05Z\"}",
    statement:"extract(month from `2017-01-02T03:04:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1.
    }
  },
  {
    name:"extract valid cases{result:2.,time_part:\"day\",timestamp:\"2017-01-02T03:04:05Z\"}",
    statement:"extract(day from `2017-01-02T03:04:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2.
    }
  },
  {
    name:"extract valid cases{result:3.,time_part:\"hour\",timestamp:\"2017-01-02T03:04:05Z\"}",
    statement:"extract(hour from `2017-01-02T03:04:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3.
    }
  },
  {
    name:"extract valid cases{result:4.,time_part:\"minute\",timestamp:\"2017-01-02T03:04:05Z\"}",
    statement:"extract(minute from `2017-01-02T03:04:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4.
    }
  },
  {
    name:"extract valid cases{result:5.,time_part:\"second\",timestamp:\"2017-01-02T03:04:05Z\"}",
    statement:"extract(second from `2017-01-02T03:04:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5.
    }
  },
  {
    name:"extract valid cases{result:0.,time_part:\"timezone_hour\",timestamp:\"2017-01-02T03:04:05Z\"}",
    statement:"extract(timezone_hour from `2017-01-02T03:04:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0.
    }
  },
  {
    name:"extract valid cases{result:0.,time_part:\"timezone_minute\",timestamp:\"2017-01-02T03:04:05Z\"}",
    statement:"extract(timezone_minute from `2017-01-02T03:04:05Z`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0.
    }
  },
  {
    name:"extract valid cases{result:2017.,time_part:\"year\",timestamp:\"2017-01-02T03:04:05+07:08\"}",
    statement:"extract(year from `2017-01-02T03:04:05+07:08`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2017.
    }
  },
  {
    name:"extract valid cases{result:1.,time_part:\"month\",timestamp:\"2017-01-02T03:04:05+07:08\"}",
    statement:"extract(month from `2017-01-02T03:04:05+07:08`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1.
    }
  },
  {
    name:"extract valid cases{result:2.,time_part:\"day\",timestamp:\"2017-01-02T03:04:05+07:08\"}",
    statement:"extract(day from `2017-01-02T03:04:05+07:08`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2.
    }
  },
  {
    name:"extract valid cases{result:3.,time_part:\"hour\",timestamp:\"2017-01-02T03:04:05+07:08\"}",
    statement:"extract(hour from `2017-01-02T03:04:05+07:08`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3.
    }
  },
  {
    name:"extract valid cases{result:4.,time_part:\"minute\",timestamp:\"2017-01-02T03:04:05+07:08\"}",
    statement:"extract(minute from `2017-01-02T03:04:05+07:08`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4.
    }
  },
  {
    name:"extract valid cases{result:5.,time_part:\"second\",timestamp:\"2017-01-02T03:04:05+07:08\"}",
    statement:"extract(second from `2017-01-02T03:04:05+07:08`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5.
    }
  },
  {
    name:"extract valid cases{result:7.,time_part:\"timezone_hour\",timestamp:\"2017-01-02T03:04:05+07:08\"}",
    statement:"extract(timezone_hour from `2017-01-02T03:04:05+07:08`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:7.
    }
  },
  {
    name:"extract valid cases{result:8.,time_part:\"timezone_minute\",timestamp:\"2017-01-02T03:04:05+07:08\"}",
    statement:"extract(timezone_minute from `2017-01-02T03:04:05+07:08`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:8.
    }
  },
  {
    name:"extract valid cases{result:-7.,time_part:\"timezone_hour\",timestamp:\"2017-01-02T03:04:05-07:08\"}",
    statement:"extract(timezone_hour from `2017-01-02T03:04:05-07:08`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-7.
    }
  },
  {
    name:"extract valid cases{result:-8.,time_part:\"timezone_minute\",timestamp:\"2017-01-02T03:04:05-07:08\"}",
    statement:"extract(timezone_minute from `2017-01-02T03:04:05-07:08`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-8.
    }
  },
  {
    name:"extract null and missing propagation{time_part:\"year\",timestamp:\"null\"}",
    statement:"extract(year from null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"extract null and missing propagation{time_part:\"year\",timestamp:\"missing\"}",
    statement:"extract(year from missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"extract wrong type of arguments{first:\"year\",second:\"1\"}",
    statement:"extract(year from 1)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"extract wrong type of arguments{first:1,second:\"`2017T`\"}",
    statement:"extract(1 from `2017T`)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"extract invalid time part{time_part:\"foo\",tt:\"IDENTIFIER\",tv:foo}",
    statement:"extract(foo from `2017T`)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"extract invalid time part{time_part:\"null\",tt:\"NULL\",tv:null}",
    statement:"extract(null from `2017T`)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"extract invalid time part{time_part:\"missing\",tt:\"MISSING\",tv:null}",
    statement:"extract(missing from `2017T`)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  }
]
to_string::[
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0001T\",pattern:\"y\",result:\"1\"}",
    statement:"to_string(`0001T`, 'y')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"9999T\",pattern:\"y\",result:\"9999\"}",
    statement:"to_string(`9999T`, 'y')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"9999"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986T\",pattern:\"y\",result:\"986\"}",
    statement:"to_string(`0986T`, 'y')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"986"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01T\",pattern:\"y\",result:\"986\"}",
    statement:"to_string(`0986-01T`, 'y')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"986"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T\",pattern:\"y\",result:\"986\"}",
    statement:"to_string(`0986-01-02T`, 'y')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"986"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01Z\",pattern:\"y\",result:\"986\"}",
    statement:"to_string(`0986-01-02T10:01Z`, 'y')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"986"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01+01:00\",pattern:\"y\",result:\"986\"}",
    statement:"to_string(`0986-01-02T10:01+01:00`, 'y')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"986"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01:55Z\",pattern:\"y\",result:\"986\"}",
    statement:"to_string(`0986-01-02T10:01:55Z`, 'y')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"986"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01:55+01:00\",pattern:\"y\",result:\"986\"}",
    statement:"to_string(`0986-01-02T10:01:55+01:00`, 'y')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"986"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01:55.004Z\",pattern:\"y\",result:\"986\"}",
    statement:"to_string(`0986-01-02T10:01:55.004Z`, 'y')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"986"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01:55.004+01:00\",pattern:\"y\",result:\"986\"}",
    statement:"to_string(`0986-01-02T10:01:55.004+01:00`, 'y')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"986"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0001T\",pattern:\"yy\",result:\"01\"}",
    statement:"to_string(`0001T`, 'yy')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"01"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"9999T\",pattern:\"yy\",result:\"99\"}",
    statement:"to_string(`9999T`, 'yy')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"99"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"1986T\",pattern:\"yy\",result:\"86\"}",
    statement:"to_string(`1986T`, 'yy')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"86"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"1986-01T\",pattern:\"yy\",result:\"86\"}",
    statement:"to_string(`1986-01T`, 'yy')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"86"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"1986-01-02\",pattern:\"yy\",result:\"86\"}",
    statement:"to_string(`1986-01-02`, 'yy')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"86"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"1986-01-02T10:01Z\",pattern:\"yy\",result:\"86\"}",
    statement:"to_string(`1986-01-02T10:01Z`, 'yy')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"86"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"1986-01-02T10:01+01:00\",pattern:\"yy\",result:\"86\"}",
    statement:"to_string(`1986-01-02T10:01+01:00`, 'yy')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"86"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"1986-01-02T10:01:55Z\",pattern:\"yy\",result:\"86\"}",
    statement:"to_string(`1986-01-02T10:01:55Z`, 'yy')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"86"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"1986-01-02T10:01:55+01:00\",pattern:\"yy\",result:\"86\"}",
    statement:"to_string(`1986-01-02T10:01:55+01:00`, 'yy')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"86"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"1986-01-02T10:01:55.004Z\",pattern:\"yy\",result:\"86\"}",
    statement:"to_string(`1986-01-02T10:01:55.004Z`, 'yy')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"86"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"1986-01-02T10:01:55.004+01:00\",pattern:\"yy\",result:\"86\"}",
    statement:"to_string(`1986-01-02T10:01:55.004+01:00`, 'yy')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"86"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986T\",pattern:\"yyyy\",result:\"0986\"}",
    statement:"to_string(`0986T`, 'yyyy')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0986"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01T\",pattern:\"yyyy\",result:\"0986\"}",
    statement:"to_string(`0986-01T`, 'yyyy')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0986"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T\",pattern:\"yyyy\",result:\"0986\"}",
    statement:"to_string(`0986-01-02T`, 'yyyy')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0986"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01Z\",pattern:\"yyyy\",result:\"0986\"}",
    statement:"to_string(`0986-01-02T10:01Z`, 'yyyy')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0986"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01+01:00\",pattern:\"yyyy\",result:\"0986\"}",
    statement:"to_string(`0986-01-02T10:01+01:00`, 'yyyy')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0986"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01:55Z\",pattern:\"yyyy\",result:\"0986\"}",
    statement:"to_string(`0986-01-02T10:01:55Z`, 'yyyy')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0986"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01:55+01:00\",pattern:\"yyyy\",result:\"0986\"}",
    statement:"to_string(`0986-01-02T10:01:55+01:00`, 'yyyy')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0986"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01:55.004Z\",pattern:\"yyyy\",result:\"0986\"}",
    statement:"to_string(`0986-01-02T10:01:55.004Z`, 'yyyy')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0986"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01:55.004+01:00\",pattern:\"yyyy\",result:\"0986\"}",
    statement:"to_string(`0986-01-02T10:01:55.004+01:00`, 'yyyy')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0986"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986T\",pattern:\"M\",result:\"1\"}",
    statement:"to_string(`0986T`, 'M')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01T\",pattern:\"M\",result:\"1\"}",
    statement:"to_string(`0986-01T`, 'M')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-02-02T\",pattern:\"M\",result:\"2\"}",
    statement:"to_string(`0986-02-02T`, 'M')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"2"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-03-02T10:01Z\",pattern:\"M\",result:\"3\"}",
    statement:"to_string(`0986-03-02T10:01Z`, 'M')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"3"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-04-02T10:01+01:00\",pattern:\"M\",result:\"4\"}",
    statement:"to_string(`0986-04-02T10:01+01:00`, 'M')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"4"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-05-02T10:01:55Z\",pattern:\"M\",result:\"5\"}",
    statement:"to_string(`0986-05-02T10:01:55Z`, 'M')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"5"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-06-02T10:01:55+01:00\",pattern:\"M\",result:\"6\"}",
    statement:"to_string(`0986-06-02T10:01:55+01:00`, 'M')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"6"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-07-02T10:01:55.004Z\",pattern:\"M\",result:\"7\"}",
    statement:"to_string(`0986-07-02T10:01:55.004Z`, 'M')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"7"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-10-02T10:01:55.004+01:00\",pattern:\"M\",result:\"10\"}",
    statement:"to_string(`0986-10-02T10:01:55.004+01:00`, 'M')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"10"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986T\",pattern:\"MM\",result:\"01\"}",
    statement:"to_string(`0986T`, 'MM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"01"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01T\",pattern:\"MM\",result:\"01\"}",
    statement:"to_string(`0986-01T`, 'MM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"01"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-02-02T\",pattern:\"MM\",result:\"02\"}",
    statement:"to_string(`0986-02-02T`, 'MM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"02"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-03-02T10:01Z\",pattern:\"MM\",result:\"03\"}",
    statement:"to_string(`0986-03-02T10:01Z`, 'MM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"03"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-04-02T10:01+01:00\",pattern:\"MM\",result:\"04\"}",
    statement:"to_string(`0986-04-02T10:01+01:00`, 'MM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"04"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-05-02T10:01:55Z\",pattern:\"MM\",result:\"05\"}",
    statement:"to_string(`0986-05-02T10:01:55Z`, 'MM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"05"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-06-02T10:01:55+01:00\",pattern:\"MM\",result:\"06\"}",
    statement:"to_string(`0986-06-02T10:01:55+01:00`, 'MM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"06"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-07-02T10:01:55.004Z\",pattern:\"MM\",result:\"07\"}",
    statement:"to_string(`0986-07-02T10:01:55.004Z`, 'MM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"07"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-10-02T10:01:55.004+01:00\",pattern:\"MM\",result:\"10\"}",
    statement:"to_string(`0986-10-02T10:01:55.004+01:00`, 'MM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"10"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986T\",pattern:\"MMM\",result:\"Jan\"}",
    statement:"to_string(`0986T`, 'MMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Jan"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T\",pattern:\"MMM\",result:\"Jan\"}",
    statement:"to_string(`0986-01-02T`, 'MMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Jan"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01Z\",pattern:\"MMM\",result:\"Jan\"}",
    statement:"to_string(`0986-01-02T10:01Z`, 'MMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Jan"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01+01:00\",pattern:\"MMM\",result:\"Jan\"}",
    statement:"to_string(`0986-01-02T10:01+01:00`, 'MMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Jan"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01:55Z\",pattern:\"MMM\",result:\"Jan\"}",
    statement:"to_string(`0986-01-02T10:01:55Z`, 'MMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Jan"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01:55+01:00\",pattern:\"MMM\",result:\"Jan\"}",
    statement:"to_string(`0986-01-02T10:01:55+01:00`, 'MMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Jan"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01:55.004Z\",pattern:\"MMM\",result:\"Jan\"}",
    statement:"to_string(`0986-01-02T10:01:55.004Z`, 'MMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Jan"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01:55.004+01:00\",pattern:\"MMM\",result:\"Jan\"}",
    statement:"to_string(`0986-01-02T10:01:55.004+01:00`, 'MMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Jan"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01T\",pattern:\"MMM\",result:\"Jan\"}",
    statement:"to_string(`0986-01T`, 'MMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Jan"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-02T\",pattern:\"MMM\",result:\"Feb\"}",
    statement:"to_string(`0986-02T`, 'MMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Feb"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-03T\",pattern:\"MMM\",result:\"Mar\"}",
    statement:"to_string(`0986-03T`, 'MMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Mar"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-04T\",pattern:\"MMM\",result:\"Apr\"}",
    statement:"to_string(`0986-04T`, 'MMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Apr"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-05T\",pattern:\"MMM\",result:\"May\"}",
    statement:"to_string(`0986-05T`, 'MMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"May"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-06T\",pattern:\"MMM\",result:\"Jun\"}",
    statement:"to_string(`0986-06T`, 'MMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Jun"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-07T\",pattern:\"MMM\",result:\"Jul\"}",
    statement:"to_string(`0986-07T`, 'MMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Jul"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-08T\",pattern:\"MMM\",result:\"Aug\"}",
    statement:"to_string(`0986-08T`, 'MMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Aug"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-09T\",pattern:\"MMM\",result:\"Sep\"}",
    statement:"to_string(`0986-09T`, 'MMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Sep"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-10T\",pattern:\"MMM\",result:\"Oct\"}",
    statement:"to_string(`0986-10T`, 'MMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Oct"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-11T\",pattern:\"MMM\",result:\"Nov\"}",
    statement:"to_string(`0986-11T`, 'MMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Nov"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-12T\",pattern:\"MMM\",result:\"Dec\"}",
    statement:"to_string(`0986-12T`, 'MMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Dec"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986T\",pattern:\"MMMM\",result:\"January\"}",
    statement:"to_string(`0986T`, 'MMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"January"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T\",pattern:\"MMMM\",result:\"January\"}",
    statement:"to_string(`0986-01-02T`, 'MMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"January"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01Z\",pattern:\"MMMM\",result:\"January\"}",
    statement:"to_string(`0986-01-02T10:01Z`, 'MMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"January"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01+01:00\",pattern:\"MMMM\",result:\"January\"}",
    statement:"to_string(`0986-01-02T10:01+01:00`, 'MMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"January"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01:55Z\",pattern:\"MMMM\",result:\"January\"}",
    statement:"to_string(`0986-01-02T10:01:55Z`, 'MMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"January"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01:55+01:00\",pattern:\"MMMM\",result:\"January\"}",
    statement:"to_string(`0986-01-02T10:01:55+01:00`, 'MMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"January"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01:55.004Z\",pattern:\"MMMM\",result:\"January\"}",
    statement:"to_string(`0986-01-02T10:01:55.004Z`, 'MMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"January"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01:55.004+01:00\",pattern:\"MMMM\",result:\"January\"}",
    statement:"to_string(`0986-01-02T10:01:55.004+01:00`, 'MMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"January"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01T\",pattern:\"MMMM\",result:\"January\"}",
    statement:"to_string(`0986-01T`, 'MMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"January"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-02T\",pattern:\"MMMM\",result:\"February\"}",
    statement:"to_string(`0986-02T`, 'MMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"February"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-03T\",pattern:\"MMMM\",result:\"March\"}",
    statement:"to_string(`0986-03T`, 'MMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"March"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-04T\",pattern:\"MMMM\",result:\"April\"}",
    statement:"to_string(`0986-04T`, 'MMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"April"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-05T\",pattern:\"MMMM\",result:\"May\"}",
    statement:"to_string(`0986-05T`, 'MMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"May"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-06T\",pattern:\"MMMM\",result:\"June\"}",
    statement:"to_string(`0986-06T`, 'MMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"June"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-07T\",pattern:\"MMMM\",result:\"July\"}",
    statement:"to_string(`0986-07T`, 'MMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"July"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-08T\",pattern:\"MMMM\",result:\"August\"}",
    statement:"to_string(`0986-08T`, 'MMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"August"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-09T\",pattern:\"MMMM\",result:\"September\"}",
    statement:"to_string(`0986-09T`, 'MMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"September"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-10T\",pattern:\"MMMM\",result:\"October\"}",
    statement:"to_string(`0986-10T`, 'MMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"October"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-11T\",pattern:\"MMMM\",result:\"November\"}",
    statement:"to_string(`0986-11T`, 'MMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"November"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-12T\",pattern:\"MMMM\",result:\"December\"}",
    statement:"to_string(`0986-12T`, 'MMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"December"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986T\",pattern:\"MMMMM\",result:\"J\"}",
    statement:"to_string(`0986T`, 'MMMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"J"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T\",pattern:\"MMMMM\",result:\"J\"}",
    statement:"to_string(`0986-01-02T`, 'MMMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"J"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01Z\",pattern:\"MMMMM\",result:\"J\"}",
    statement:"to_string(`0986-01-02T10:01Z`, 'MMMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"J"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01+01:00\",pattern:\"MMMMM\",result:\"J\"}",
    statement:"to_string(`0986-01-02T10:01+01:00`, 'MMMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"J"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01:55Z\",pattern:\"MMMMM\",result:\"J\"}",
    statement:"to_string(`0986-01-02T10:01:55Z`, 'MMMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"J"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01:55+01:00\",pattern:\"MMMMM\",result:\"J\"}",
    statement:"to_string(`0986-01-02T10:01:55+01:00`, 'MMMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"J"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01:55.004Z\",pattern:\"MMMMM\",result:\"J\"}",
    statement:"to_string(`0986-01-02T10:01:55.004Z`, 'MMMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"J"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01:55.004+01:00\",pattern:\"MMMMM\",result:\"J\"}",
    statement:"to_string(`0986-01-02T10:01:55.004+01:00`, 'MMMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"J"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01T\",pattern:\"MMMMM\",result:\"J\"}",
    statement:"to_string(`0986-01T`, 'MMMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"J"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-02T\",pattern:\"MMMMM\",result:\"F\"}",
    statement:"to_string(`0986-02T`, 'MMMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"F"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-03T\",pattern:\"MMMMM\",result:\"M\"}",
    statement:"to_string(`0986-03T`, 'MMMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"M"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-04T\",pattern:\"MMMMM\",result:\"A\"}",
    statement:"to_string(`0986-04T`, 'MMMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"A"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-05T\",pattern:\"MMMMM\",result:\"M\"}",
    statement:"to_string(`0986-05T`, 'MMMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"M"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-06T\",pattern:\"MMMMM\",result:\"J\"}",
    statement:"to_string(`0986-06T`, 'MMMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"J"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-07T\",pattern:\"MMMMM\",result:\"J\"}",
    statement:"to_string(`0986-07T`, 'MMMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"J"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-08T\",pattern:\"MMMMM\",result:\"A\"}",
    statement:"to_string(`0986-08T`, 'MMMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"A"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-09T\",pattern:\"MMMMM\",result:\"S\"}",
    statement:"to_string(`0986-09T`, 'MMMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"S"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-10T\",pattern:\"MMMMM\",result:\"O\"}",
    statement:"to_string(`0986-10T`, 'MMMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"O"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-11T\",pattern:\"MMMMM\",result:\"N\"}",
    statement:"to_string(`0986-11T`, 'MMMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"N"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-12T\",pattern:\"MMMMM\",result:\"D\"}",
    statement:"to_string(`0986-12T`, 'MMMMM')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"D"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986T\",pattern:\"d\",result:\"1\"}",
    statement:"to_string(`0986T`, 'd')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01T\",pattern:\"d\",result:\"1\"}",
    statement:"to_string(`0986-01T`, 'd')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T\",pattern:\"d\",result:\"2\"}",
    statement:"to_string(`0986-01-02T`, 'd')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"2"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01Z\",pattern:\"d\",result:\"2\"}",
    statement:"to_string(`0986-01-02T10:01Z`, 'd')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"2"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-12T10:01+01:00\",pattern:\"d\",result:\"12\"}",
    statement:"to_string(`0986-01-12T10:01+01:00`, 'd')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"12"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-20T10:01:55Z\",pattern:\"d\",result:\"20\"}",
    statement:"to_string(`0986-01-20T10:01:55Z`, 'd')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"20"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-31T10:01:55+01:00\",pattern:\"d\",result:\"31\"}",
    statement:"to_string(`0986-01-31T10:01:55+01:00`, 'd')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"31"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01:55.004Z\",pattern:\"d\",result:\"2\"}",
    statement:"to_string(`0986-01-02T10:01:55.004Z`, 'd')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"2"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01:55.004+01:00\",pattern:\"d\",result:\"2\"}",
    statement:"to_string(`0986-01-02T10:01:55.004+01:00`, 'd')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"2"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986T\",pattern:\"dd\",result:\"01\"}",
    statement:"to_string(`0986T`, 'dd')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"01"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01T\",pattern:\"dd\",result:\"01\"}",
    statement:"to_string(`0986-01T`, 'dd')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"01"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T\",pattern:\"dd\",result:\"02\"}",
    statement:"to_string(`0986-01-02T`, 'dd')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"02"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01Z\",pattern:\"dd\",result:\"02\"}",
    statement:"to_string(`0986-01-02T10:01Z`, 'dd')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"02"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-12T10:01+01:00\",pattern:\"dd\",result:\"12\"}",
    statement:"to_string(`0986-01-12T10:01+01:00`, 'dd')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"12"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-20T10:01:55Z\",pattern:\"dd\",result:\"20\"}",
    statement:"to_string(`0986-01-20T10:01:55Z`, 'dd')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"20"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-31T10:01:55+01:00\",pattern:\"dd\",result:\"31\"}",
    statement:"to_string(`0986-01-31T10:01:55+01:00`, 'dd')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"31"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01:55.004Z\",pattern:\"dd\",result:\"02\"}",
    statement:"to_string(`0986-01-02T10:01:55.004Z`, 'dd')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"02"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01:55.004+01:00\",pattern:\"dd\",result:\"02\"}",
    statement:"to_string(`0986-01-02T10:01:55.004+01:00`, 'dd')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"02"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986T\",pattern:\"a\",result:\"AM\"}",
    statement:"to_string(`0986T`, 'a')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"AM"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01T\",pattern:\"a\",result:\"AM\"}",
    statement:"to_string(`0986-01T`, 'a')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"AM"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T\",pattern:\"a\",result:\"AM\"}",
    statement:"to_string(`0986-01-02T`, 'a')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"AM"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01Z\",pattern:\"a\",result:\"AM\"}",
    statement:"to_string(`0986-01-02T10:01Z`, 'a')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"AM"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-12T10:01+01:00\",pattern:\"a\",result:\"AM\"}",
    statement:"to_string(`0986-01-12T10:01+01:00`, 'a')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"AM"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-20T10:01:55Z\",pattern:\"a\",result:\"AM\"}",
    statement:"to_string(`0986-01-20T10:01:55Z`, 'a')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"AM"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-31T10:01:55+01:00\",pattern:\"a\",result:\"AM\"}",
    statement:"to_string(`0986-01-31T10:01:55+01:00`, 'a')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"AM"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T20:01:55.004Z\",pattern:\"a\",result:\"PM\"}",
    statement:"to_string(`0986-01-02T20:01:55.004Z`, 'a')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"PM"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T18:01:55.004+01:00\",pattern:\"a\",result:\"PM\"}",
    statement:"to_string(`0986-01-02T18:01:55.004+01:00`, 'a')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"PM"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986T\",pattern:\"h\",result:\"12\"}",
    statement:"to_string(`0986T`, 'h')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"12"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01T\",pattern:\"h\",result:\"12\"}",
    statement:"to_string(`0986-01T`, 'h')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"12"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T\",pattern:\"h\",result:\"12\"}",
    statement:"to_string(`0986-01-02T`, 'h')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"12"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01Z\",pattern:\"h\",result:\"10\"}",
    statement:"to_string(`0986-01-02T10:01Z`, 'h')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"10"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-12T10:01+01:00\",pattern:\"h\",result:\"10\"}",
    statement:"to_string(`0986-01-12T10:01+01:00`, 'h')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"10"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-20T10:01:55Z\",pattern:\"h\",result:\"10\"}",
    statement:"to_string(`0986-01-20T10:01:55Z`, 'h')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"10"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-31T05:01:55+01:00\",pattern:\"h\",result:\"5\"}",
    statement:"to_string(`0986-01-31T05:01:55+01:00`, 'h')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"5"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T20:01:55.004Z\",pattern:\"h\",result:\"8\"}",
    statement:"to_string(`0986-01-02T20:01:55.004Z`, 'h')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"8"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T18:01:55.004+01:00\",pattern:\"h\",result:\"6\"}",
    statement:"to_string(`0986-01-02T18:01:55.004+01:00`, 'h')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"6"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986T\",pattern:\"hh\",result:\"12\"}",
    statement:"to_string(`0986T`, 'hh')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"12"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01T\",pattern:\"hh\",result:\"12\"}",
    statement:"to_string(`0986-01T`, 'hh')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"12"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T\",pattern:\"hh\",result:\"12\"}",
    statement:"to_string(`0986-01-02T`, 'hh')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"12"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01Z\",pattern:\"hh\",result:\"10\"}",
    statement:"to_string(`0986-01-02T10:01Z`, 'hh')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"10"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-12T10:01+01:00\",pattern:\"hh\",result:\"10\"}",
    statement:"to_string(`0986-01-12T10:01+01:00`, 'hh')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"10"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-20T10:01:55Z\",pattern:\"hh\",result:\"10\"}",
    statement:"to_string(`0986-01-20T10:01:55Z`, 'hh')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"10"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-31T05:01:55+01:00\",pattern:\"hh\",result:\"05\"}",
    statement:"to_string(`0986-01-31T05:01:55+01:00`, 'hh')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"05"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T20:01:55.004Z\",pattern:\"hh\",result:\"08\"}",
    statement:"to_string(`0986-01-02T20:01:55.004Z`, 'hh')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"08"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T18:01:55.004+01:00\",pattern:\"hh\",result:\"06\"}",
    statement:"to_string(`0986-01-02T18:01:55.004+01:00`, 'hh')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"06"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986T\",pattern:\"H\",result:\"0\"}",
    statement:"to_string(`0986T`, 'H')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01T\",pattern:\"H\",result:\"0\"}",
    statement:"to_string(`0986-01T`, 'H')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T\",pattern:\"H\",result:\"0\"}",
    statement:"to_string(`0986-01-02T`, 'H')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01Z\",pattern:\"H\",result:\"10\"}",
    statement:"to_string(`0986-01-02T10:01Z`, 'H')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"10"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-12T10:01+01:00\",pattern:\"H\",result:\"10\"}",
    statement:"to_string(`0986-01-12T10:01+01:00`, 'H')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"10"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-20T10:01:55Z\",pattern:\"H\",result:\"10\"}",
    statement:"to_string(`0986-01-20T10:01:55Z`, 'H')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"10"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-31T05:01:55+01:00\",pattern:\"H\",result:\"5\"}",
    statement:"to_string(`0986-01-31T05:01:55+01:00`, 'H')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"5"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T20:01:55.004Z\",pattern:\"H\",result:\"20\"}",
    statement:"to_string(`0986-01-02T20:01:55.004Z`, 'H')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"20"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T18:01:55.004+01:00\",pattern:\"H\",result:\"18\"}",
    statement:"to_string(`0986-01-02T18:01:55.004+01:00`, 'H')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"18"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986T\",pattern:\"HH\",result:\"00\"}",
    statement:"to_string(`0986T`, 'HH')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"00"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01T\",pattern:\"HH\",result:\"00\"}",
    statement:"to_string(`0986-01T`, 'HH')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"00"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T\",pattern:\"HH\",result:\"00\"}",
    statement:"to_string(`0986-01-02T`, 'HH')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"00"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01Z\",pattern:\"HH\",result:\"10\"}",
    statement:"to_string(`0986-01-02T10:01Z`, 'HH')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"10"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-12T10:01+01:00\",pattern:\"HH\",result:\"10\"}",
    statement:"to_string(`0986-01-12T10:01+01:00`, 'HH')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"10"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-20T10:01:55Z\",pattern:\"HH\",result:\"10\"}",
    statement:"to_string(`0986-01-20T10:01:55Z`, 'HH')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"10"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-31T05:01:55+01:00\",pattern:\"HH\",result:\"05\"}",
    statement:"to_string(`0986-01-31T05:01:55+01:00`, 'HH')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"05"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T20:01:55.004Z\",pattern:\"HH\",result:\"20\"}",
    statement:"to_string(`0986-01-02T20:01:55.004Z`, 'HH')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"20"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T18:01:55.004+01:00\",pattern:\"HH\",result:\"18\"}",
    statement:"to_string(`0986-01-02T18:01:55.004+01:00`, 'HH')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"18"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986T\",pattern:\"m\",result:\"0\"}",
    statement:"to_string(`0986T`, 'm')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01T\",pattern:\"m\",result:\"0\"}",
    statement:"to_string(`0986-01T`, 'm')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T\",pattern:\"m\",result:\"0\"}",
    statement:"to_string(`0986-01-02T`, 'm')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01Z\",pattern:\"m\",result:\"1\"}",
    statement:"to_string(`0986-01-02T10:01Z`, 'm')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-12T10:01+01:00\",pattern:\"m\",result:\"1\"}",
    statement:"to_string(`0986-01-12T10:01+01:00`, 'm')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-20T10:10:55Z\",pattern:\"m\",result:\"10\"}",
    statement:"to_string(`0986-01-20T10:10:55Z`, 'm')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"10"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-31T05:05:55+01:00\",pattern:\"m\",result:\"5\"}",
    statement:"to_string(`0986-01-31T05:05:55+01:00`, 'm')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"5"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T20:01:55.004Z\",pattern:\"m\",result:\"1\"}",
    statement:"to_string(`0986-01-02T20:01:55.004Z`, 'm')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T18:01:55.004+01:00\",pattern:\"m\",result:\"1\"}",
    statement:"to_string(`0986-01-02T18:01:55.004+01:00`, 'm')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986T\",pattern:\"mm\",result:\"00\"}",
    statement:"to_string(`0986T`, 'mm')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"00"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01T\",pattern:\"mm\",result:\"00\"}",
    statement:"to_string(`0986-01T`, 'mm')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"00"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T\",pattern:\"mm\",result:\"00\"}",
    statement:"to_string(`0986-01-02T`, 'mm')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"00"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01Z\",pattern:\"mm\",result:\"01\"}",
    statement:"to_string(`0986-01-02T10:01Z`, 'mm')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"01"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-12T10:01+01:00\",pattern:\"mm\",result:\"01\"}",
    statement:"to_string(`0986-01-12T10:01+01:00`, 'mm')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"01"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-20T10:10:55Z\",pattern:\"mm\",result:\"10\"}",
    statement:"to_string(`0986-01-20T10:10:55Z`, 'mm')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"10"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-31T05:05:55+01:00\",pattern:\"mm\",result:\"05\"}",
    statement:"to_string(`0986-01-31T05:05:55+01:00`, 'mm')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"05"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T20:01:55.004Z\",pattern:\"mm\",result:\"01\"}",
    statement:"to_string(`0986-01-02T20:01:55.004Z`, 'mm')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"01"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T18:01:55.004+01:00\",pattern:\"mm\",result:\"01\"}",
    statement:"to_string(`0986-01-02T18:01:55.004+01:00`, 'mm')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"01"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986T\",pattern:\"s\",result:\"0\"}",
    statement:"to_string(`0986T`, 's')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01T\",pattern:\"s\",result:\"0\"}",
    statement:"to_string(`0986-01T`, 's')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T\",pattern:\"s\",result:\"0\"}",
    statement:"to_string(`0986-01-02T`, 's')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01Z\",pattern:\"s\",result:\"0\"}",
    statement:"to_string(`0986-01-02T10:01Z`, 's')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-12T10:01+01:00\",pattern:\"s\",result:\"0\"}",
    statement:"to_string(`0986-01-12T10:01+01:00`, 's')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-20T10:10:55Z\",pattern:\"s\",result:\"55\"}",
    statement:"to_string(`0986-01-20T10:10:55Z`, 's')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"55"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-31T05:05:05+01:00\",pattern:\"s\",result:\"5\"}",
    statement:"to_string(`0986-01-31T05:05:05+01:00`, 's')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"5"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T20:01:55.004Z\",pattern:\"s\",result:\"55\"}",
    statement:"to_string(`0986-01-02T20:01:55.004Z`, 's')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"55"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T18:01:55.004+01:00\",pattern:\"s\",result:\"55\"}",
    statement:"to_string(`0986-01-02T18:01:55.004+01:00`, 's')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"55"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986T\",pattern:\"ss\",result:\"00\"}",
    statement:"to_string(`0986T`, 'ss')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"00"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01T\",pattern:\"ss\",result:\"00\"}",
    statement:"to_string(`0986-01T`, 'ss')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"00"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T\",pattern:\"ss\",result:\"00\"}",
    statement:"to_string(`0986-01-02T`, 'ss')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"00"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01Z\",pattern:\"ss\",result:\"00\"}",
    statement:"to_string(`0986-01-02T10:01Z`, 'ss')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"00"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-12T10:01+01:00\",pattern:\"ss\",result:\"00\"}",
    statement:"to_string(`0986-01-12T10:01+01:00`, 'ss')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"00"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-20T10:10:55Z\",pattern:\"ss\",result:\"55\"}",
    statement:"to_string(`0986-01-20T10:10:55Z`, 'ss')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"55"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-31T05:05:05+01:00\",pattern:\"ss\",result:\"05\"}",
    statement:"to_string(`0986-01-31T05:05:05+01:00`, 'ss')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"05"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T20:01:55.004Z\",pattern:\"ss\",result:\"55\"}",
    statement:"to_string(`0986-01-02T20:01:55.004Z`, 'ss')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"55"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T18:01:55.004+01:00\",pattern:\"ss\",result:\"55\"}",
    statement:"to_string(`0986-01-02T18:01:55.004+01:00`, 'ss')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"55"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986T\",pattern:\"S\",result:\"0\"}",
    statement:"to_string(`0986T`, 'S')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01T\",pattern:\"S\",result:\"0\"}",
    statement:"to_string(`0986-01T`, 'S')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T\",pattern:\"S\",result:\"0\"}",
    statement:"to_string(`0986-01-02T`, 'S')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01Z\",pattern:\"S\",result:\"0\"}",
    statement:"to_string(`0986-01-02T10:01Z`, 'S')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-12T10:01+01:00\",pattern:\"S\",result:\"0\"}",
    statement:"to_string(`0986-01-12T10:01+01:00`, 'S')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-20T10:10:55Z\",pattern:\"S\",result:\"0\"}",
    statement:"to_string(`0986-01-20T10:10:55Z`, 'S')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-31T05:05:05+01:00\",pattern:\"S\",result:\"0\"}",
    statement:"to_string(`0986-01-31T05:05:05+01:00`, 'S')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T20:01:55.100Z\",pattern:\"S\",result:\"1\"}",
    statement:"to_string(`0986-01-02T20:01:55.100Z`, 'S')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T18:01:55.100+01:00\",pattern:\"SS\",result:\"10\"}",
    statement:"to_string(`0986-01-02T18:01:55.100+01:00`, 'SS')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"10"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T18:01:55.004+01:00\",pattern:\"SS\",result:\"00\"}",
    statement:"to_string(`0986-01-02T18:01:55.004+01:00`, 'SS')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"00"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T18:01:55.004+01:00\",pattern:\"SSS\",result:\"004\"}",
    statement:"to_string(`0986-01-02T18:01:55.004+01:00`, 'SSS')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"004"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986T\",pattern:\"n\",result:\"0\"}",
    statement:"to_string(`0986T`, 'n')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01T\",pattern:\"n\",result:\"0\"}",
    statement:"to_string(`0986-01T`, 'n')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T\",pattern:\"n\",result:\"0\"}",
    statement:"to_string(`0986-01-02T`, 'n')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01Z\",pattern:\"n\",result:\"0\"}",
    statement:"to_string(`0986-01-02T10:01Z`, 'n')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-12T10:01+01:00\",pattern:\"n\",result:\"0\"}",
    statement:"to_string(`0986-01-12T10:01+01:00`, 'n')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-20T10:10:55Z\",pattern:\"n\",result:\"0\"}",
    statement:"to_string(`0986-01-20T10:10:55Z`, 'n')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-31T05:05:05+01:00\",pattern:\"n\",result:\"0\"}",
    statement:"to_string(`0986-01-31T05:05:05+01:00`, 'n')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"0"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T20:01:55.004Z\",pattern:\"n\",result:\"4000000\"}",
    statement:"to_string(`0986-01-02T20:01:55.004Z`, 'n')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"4000000"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T18:01:55.004+01:00\",pattern:\"n\",result:\"4000000\"}",
    statement:"to_string(`0986-01-02T18:01:55.004+01:00`, 'n')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"4000000"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986T\",pattern:\"X\",result:\"Z\"}",
    statement:"to_string(`0986T`, 'X')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Z"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01T\",pattern:\"X\",result:\"Z\"}",
    statement:"to_string(`0986-01T`, 'X')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Z"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T\",pattern:\"X\",result:\"Z\"}",
    statement:"to_string(`0986-01-02T`, 'X')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Z"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01Z\",pattern:\"X\",result:\"Z\"}",
    statement:"to_string(`0986-01-02T10:01Z`, 'X')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Z"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-12T10:01+01:00\",pattern:\"X\",result:\"+01\"}",
    statement:"to_string(`0986-01-12T10:01+01:00`, 'X')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+01"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-20T10:10:55Z\",pattern:\"X\",result:\"Z\"}",
    statement:"to_string(`0986-01-20T10:10:55Z`, 'X')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Z"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-31T05:05:05+01:00\",pattern:\"X\",result:\"+01\"}",
    statement:"to_string(`0986-01-31T05:05:05+01:00`, 'X')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+01"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T20:01:55.004Z\",pattern:\"X\",result:\"Z\"}",
    statement:"to_string(`0986-01-02T20:01:55.004Z`, 'X')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Z"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T18:01:55.004+01:00\",pattern:\"X\",result:\"+01\"}",
    statement:"to_string(`0986-01-02T18:01:55.004+01:00`, 'X')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+01"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986T\",pattern:\"XX\",result:\"Z\"}",
    statement:"to_string(`0986T`, 'XX')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Z"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01T\",pattern:\"XX\",result:\"Z\"}",
    statement:"to_string(`0986-01T`, 'XX')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Z"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T\",pattern:\"XX\",result:\"Z\"}",
    statement:"to_string(`0986-01-02T`, 'XX')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Z"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01Z\",pattern:\"XX\",result:\"Z\"}",
    statement:"to_string(`0986-01-02T10:01Z`, 'XX')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Z"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-12T10:01+01:00\",pattern:\"XXXX\",result:\"+0100\"}",
    statement:"to_string(`0986-01-12T10:01+01:00`, 'XXXX')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+0100"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-20T10:10:55Z\",pattern:\"XX\",result:\"Z\"}",
    statement:"to_string(`0986-01-20T10:10:55Z`, 'XX')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Z"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-31T05:05:05+01:00\",pattern:\"XX\",result:\"+0100\"}",
    statement:"to_string(`0986-01-31T05:05:05+01:00`, 'XX')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+0100"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T20:01:55.004Z\",pattern:\"XX\",result:\"Z\"}",
    statement:"to_string(`0986-01-02T20:01:55.004Z`, 'XX')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Z"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T18:01:55.004+01:10\",pattern:\"XX\",result:\"+0110\"}",
    statement:"to_string(`0986-01-02T18:01:55.004+01:10`, 'XX')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+0110"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986T\",pattern:\"XXX\",result:\"Z\"}",
    statement:"to_string(`0986T`, 'XXX')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Z"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01T\",pattern:\"XXX\",result:\"Z\"}",
    statement:"to_string(`0986-01T`, 'XXX')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Z"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T\",pattern:\"XXX\",result:\"Z\"}",
    statement:"to_string(`0986-01-02T`, 'XXX')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Z"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01Z\",pattern:\"XXX\",result:\"Z\"}",
    statement:"to_string(`0986-01-02T10:01Z`, 'XXX')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Z"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-12T10:01+01:00\",pattern:\"XXXXX\",result:\"+01:00\"}",
    statement:"to_string(`0986-01-12T10:01+01:00`, 'XXXXX')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+01:00"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-20T10:10:55Z\",pattern:\"XXX\",result:\"Z\"}",
    statement:"to_string(`0986-01-20T10:10:55Z`, 'XXX')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Z"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-31T05:05:05+01:00\",pattern:\"XXX\",result:\"+01:00\"}",
    statement:"to_string(`0986-01-31T05:05:05+01:00`, 'XXX')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+01:00"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T20:01:55.004Z\",pattern:\"XXX\",result:\"Z\"}",
    statement:"to_string(`0986-01-02T20:01:55.004Z`, 'XXX')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Z"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T18:01:55.004+01:10\",pattern:\"XXX\",result:\"+01:10\"}",
    statement:"to_string(`0986-01-02T18:01:55.004+01:10`, 'XXX')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+01:10"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986T\",pattern:\"x\",result:\"+00\"}",
    statement:"to_string(`0986T`, 'x')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+00"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01T\",pattern:\"x\",result:\"+00\"}",
    statement:"to_string(`0986-01T`, 'x')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+00"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T\",pattern:\"x\",result:\"+00\"}",
    statement:"to_string(`0986-01-02T`, 'x')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+00"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01Z\",pattern:\"x\",result:\"+00\"}",
    statement:"to_string(`0986-01-02T10:01Z`, 'x')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+00"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-12T10:01+01:00\",pattern:\"x\",result:\"+01\"}",
    statement:"to_string(`0986-01-12T10:01+01:00`, 'x')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+01"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-20T10:10:55Z\",pattern:\"x\",result:\"+00\"}",
    statement:"to_string(`0986-01-20T10:10:55Z`, 'x')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+00"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-31T05:05:05+01:00\",pattern:\"x\",result:\"+01\"}",
    statement:"to_string(`0986-01-31T05:05:05+01:00`, 'x')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+01"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T20:01:55.004Z\",pattern:\"x\",result:\"+00\"}",
    statement:"to_string(`0986-01-02T20:01:55.004Z`, 'x')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+00"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T18:01:55.004+01:00\",pattern:\"x\",result:\"+01\"}",
    statement:"to_string(`0986-01-02T18:01:55.004+01:00`, 'x')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+01"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986T\",pattern:\"xx\",result:\"+0000\"}",
    statement:"to_string(`0986T`, 'xx')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+0000"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01T\",pattern:\"xx\",result:\"+0000\"}",
    statement:"to_string(`0986-01T`, 'xx')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+0000"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T\",pattern:\"xx\",result:\"+0000\"}",
    statement:"to_string(`0986-01-02T`, 'xx')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+0000"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01Z\",pattern:\"xx\",result:\"+0000\"}",
    statement:"to_string(`0986-01-02T10:01Z`, 'xx')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+0000"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-12T10:01+01:00\",pattern:\"xxxx\",result:\"+0100\"}",
    statement:"to_string(`0986-01-12T10:01+01:00`, 'xxxx')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+0100"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-20T10:10:55Z\",pattern:\"xx\",result:\"+0000\"}",
    statement:"to_string(`0986-01-20T10:10:55Z`, 'xx')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+0000"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-31T05:05:05+01:00\",pattern:\"xx\",result:\"+0100\"}",
    statement:"to_string(`0986-01-31T05:05:05+01:00`, 'xx')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+0100"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T20:01:55.004Z\",pattern:\"xx\",result:\"+0000\"}",
    statement:"to_string(`0986-01-02T20:01:55.004Z`, 'xx')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+0000"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T18:01:55.004+01:10\",pattern:\"xx\",result:\"+0110\"}",
    statement:"to_string(`0986-01-02T18:01:55.004+01:10`, 'xx')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+0110"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986T\",pattern:\"xxx\",result:\"+00:00\"}",
    statement:"to_string(`0986T`, 'xxx')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+00:00"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01T\",pattern:\"xxx\",result:\"+00:00\"}",
    statement:"to_string(`0986-01T`, 'xxx')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+00:00"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T\",pattern:\"xxx\",result:\"+00:00\"}",
    statement:"to_string(`0986-01-02T`, 'xxx')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+00:00"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T10:01Z\",pattern:\"xxx\",result:\"+00:00\"}",
    statement:"to_string(`0986-01-02T10:01Z`, 'xxx')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+00:00"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-12T10:01+01:00\",pattern:\"xxxxx\",result:\"+01:00\"}",
    statement:"to_string(`0986-01-12T10:01+01:00`, 'xxxxx')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+01:00"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-20T10:10:55Z\",pattern:\"xxx\",result:\"+00:00\"}",
    statement:"to_string(`0986-01-20T10:10:55Z`, 'xxx')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+00:00"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-31T05:05:05+01:00\",pattern:\"xxx\",result:\"+01:00\"}",
    statement:"to_string(`0986-01-31T05:05:05+01:00`, 'xxx')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+01:00"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T20:01:55.004Z\",pattern:\"xxx\",result:\"+00:00\"}",
    statement:"to_string(`0986-01-02T20:01:55.004Z`, 'xxx')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+00:00"
    }
  },
  {
    name:"to_string valid valid cases for each individual supported pattern{timestamp:\"0986-01-02T18:01:55.004+01:10\",pattern:\"xxx\",result:\"+01:10\"}",
    statement:"to_string(`0986-01-02T18:01:55.004+01:10`, 'xxx')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"+01:10"
    }
  },
  {
    name:"to_string null and missing propagation{timestamp:\"null\",pattern:\"'y'\",result:null}",
    statement:"to_string(null, 'y')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"to_string null and missing propagation{timestamp:\"`2000T`\",pattern:\"null\",result:null}",
    statement:"to_string(`2000T`, null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"to_string null and missing propagation{timestamp:\"null\",pattern:\"null\",result:null}",
    statement:"to_string(null, null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"to_string null and missing propagation{timestamp:\"missing\",pattern:\"null\",result:null}",
    statement:"to_string(missing, null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"to_string null and missing propagation{timestamp:\"null\",pattern:\"missing\",result:null}",
    statement:"to_string(null, missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"to_string null and missing propagation{timestamp:\"missing\",pattern:\"'y'\",result:null}",
    statement:"to_string(missing, 'y')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"to_string null and missing propagation{timestamp:\"`2000T`\",pattern:\"missing\",result:null}",
    statement:"to_string(`2000T`, missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"to_string null and missing propagation{timestamp:\"missing\",pattern:\"missing\",result:null}",
    statement:"to_string(missing, missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"to_string invalid pattern{pattern:\"not_a_pattern\",cn:1}",
    statement:"to_string(`2000T`, 'not_a_pattern')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_string invalid pattern{pattern:\"G\",cn:1}",
    statement:"to_string(`2000T`, 'G')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_string invalid pattern{pattern:\"u\",cn:1}",
    statement:"to_string(`2000T`, 'u')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_string invalid pattern{pattern:\"Q\",cn:1}",
    statement:"to_string(`2000T`, 'Q')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_string invalid pattern{pattern:\"q\",cn:1}",
    statement:"to_string(`2000T`, 'q')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_string invalid pattern{pattern:\"w\",cn:1}",
    statement:"to_string(`2000T`, 'w')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_string invalid pattern{pattern:\"W\",cn:1}",
    statement:"to_string(`2000T`, 'W')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_string invalid pattern{pattern:\"E\",cn:1}",
    statement:"to_string(`2000T`, 'E')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_string invalid pattern{pattern:\"e\",cn:1}",
    statement:"to_string(`2000T`, 'e')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_string invalid pattern{pattern:\"c\",cn:1}",
    statement:"to_string(`2000T`, 'c')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_string invalid pattern{pattern:\"F\",cn:1}",
    statement:"to_string(`2000T`, 'F')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_string invalid pattern{pattern:\"k\",cn:1}",
    statement:"to_string(`2000T`, 'k')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_string invalid pattern{pattern:\"K\",cn:1}",
    statement:"to_string(`2000T`, 'K')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_string invalid pattern{pattern:\"A\",cn:1}",
    statement:"to_string(`2000T`, 'A')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_string invalid pattern{pattern:\"V\",cn:1}",
    statement:"to_string(`2000T`, 'V')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_string invalid pattern{pattern:\"z\",cn:1}",
    statement:"to_string(`2000T`, 'z')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_string invalid pattern{pattern:\"p\",cn:1}",
    statement:"to_string(`2000T`, 'p')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_string wrong types{timestamp:\"`1986`\",pattern:\"'y'\"}",
    statement:"to_string(`1986`, 'y')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_string wrong types{timestamp:\"'some string'\",pattern:\"'y'\"}",
    statement:"to_string('some string', 'y')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_string wrong types{timestamp:\"1\",pattern:\"'y'\"}",
    statement:"to_string(1, 'y')",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_string wrong types{timestamp:\"`2017T`\",pattern:\"1\"}",
    statement:"to_string(`2017T`, 1)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"to_string multiple symbols{timestamp:\"0500-03-09\",pattern:\"MM/dd/yyyy\",result:\"03/09/0500\"}",
    statement:"to_string(`0500-03-09`, 'MM/dd/yyyy')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"03/09/0500"
    }
  },
  {
    name:"to_string multiple symbols{timestamp:\"0500-03-09\",pattern:\"M/d/y\",result:\"3/9/500\"}",
    statement:"to_string(`0500-03-09`, 'M/d/y')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"3/9/500"
    }
  },
  {
    name:"to_string multiple symbols{timestamp:\"0001-03-09\",pattern:\"MM/dd/yyyy\",result:\"03/09/0001\"}",
    statement:"to_string(`0001-03-09`, 'MM/dd/yyyy')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"03/09/0001"
    }
  },
  {
    name:"to_string multiple symbols{timestamp:\"0001-03-09\",pattern:\"M/d/y\",result:\"3/9/1\"}",
    statement:"to_string(`0001-03-09`, 'M/d/y')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"3/9/1"
    }
  },
  {
    name:"to_string multiple symbols{timestamp:\"9999-03-09\",pattern:\"MM/dd/yyyy\",result:\"03/09/9999\"}",
    statement:"to_string(`9999-03-09`, 'MM/dd/yyyy')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"03/09/9999"
    }
  },
  {
    name:"to_string multiple symbols{timestamp:\"9999-03-09\",pattern:\"M/d/y\",result:\"3/9/9999\"}",
    statement:"to_string(`9999-03-09`, 'M/d/y')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"3/9/9999"
    }
  },
  {
    name:"to_string multiple symbols{timestamp:\"1969-07-20T20:18Z\",pattern:\"MMMM d, y\",result:\"July 20, 1969\"}",
    statement:"to_string(`1969-07-20T20:18Z`, 'MMMM d, y')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"July 20, 1969"
    }
  },
  {
    name:"to_string multiple symbols{timestamp:\"1969-07-20T20:18Z\",pattern:\"MMM d, yyyy\",result:\"Jul 20, 1969\"}",
    statement:"to_string(`1969-07-20T20:18Z`, 'MMM d, yyyy')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"Jul 20, 1969"
    }
  },
  {
    name:"to_string multiple symbols{timestamp:\"1969-07-20T20:18Z\",pattern:\"M-d-yy\",result:\"7-20-69\"}",
    statement:"to_string(`1969-07-20T20:18Z`, 'M-d-yy')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"7-20-69"
    }
  },
  {
    name:"to_string multiple symbols{timestamp:\"1969-07-20T20:18Z\",pattern:\"MM-d-y\",result:\"07-20-1969\"}",
    statement:"to_string(`1969-07-20T20:18Z`, 'MM-d-y')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"07-20-1969"
    }
  },
  {
    name:"to_string multiple symbols{timestamp:\"1969-07-20T20:18Z\",pattern:\"MMMM d, y h:m a\",result:\"July 20, 1969 8:18 PM\"}",
    statement:"to_string(`1969-07-20T20:18Z`, 'MMMM d, y h:m a')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"July 20, 1969 8:18 PM"
    }
  },
  {
    name:"to_string multiple symbols{timestamp:\"1969-07-20T20:18Z\",pattern:\"y-MM-dd''T''H:m:ssX\",result:\"1969-07-20T20:18:00Z\"}",
    statement:"to_string(`1969-07-20T20:18Z`, 'y-MM-dd''T''H:m:ssX')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1969-07-20T20:18:00Z"
    }
  },
  {
    name:"to_string multiple symbols{timestamp:\"1969-07-20T20:18+08:00\",pattern:\"y-MM-dd''T''H:m:ssX\",result:\"1969-07-20T20:18:00+08\"}",
    statement:"to_string(`1969-07-20T20:18+08:00`, 'y-MM-dd''T''H:m:ssX')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1969-07-20T20:18:00+08"
    }
  },
  {
    name:"to_string multiple symbols{timestamp:\"1969-07-20T20:18+08:00\",pattern:\"y-MM-dd''T''H:m:ssXXXX\",result:\"1969-07-20T20:18:00+0800\"}",
    statement:"to_string(`1969-07-20T20:18+08:00`, 'y-MM-dd''T''H:m:ssXXXX')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1969-07-20T20:18:00+0800"
    }
  },
  {
    name:"to_string multiple symbols{timestamp:\"1969-07-20T20:18+08:00\",pattern:\"y-MM-dd''T''H:m:ssXXXXX\",result:\"1969-07-20T20:18:00+08:00\"}",
    statement:"to_string(`1969-07-20T20:18+08:00`, 'y-MM-dd''T''H:m:ssXXXXX')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"1969-07-20T20:18:00+08:00"
    }
  },
]
'join-with-condition'::[
  envs::{
    table1:[
      {
        id:1,
        val:a
      },
      {
        id:2,
        val:b
      },
      {
        id:3,
        val:c
      }
    ],
    table1_null_id:[
      {
        id:1,
        val:a
      },
      {
        id:null,
        val:b
      },
      {
        id:3,
        val:c
      }
    ],
    table1_null_row:[
      null
    ],
    table1_null:null
  },
  {
    name:"join on column - all column values non-null",
    statement:"SELECT t1.id AS id, t1.val AS val1, t2.val AS val2 FROM table1 AS t1 JOIN table1 AS t2 ON t1.id = t2.id",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          id:1,
          val1:a,
          val2:a
        },
        {
          id:2,
          val1:b,
          val2:b
        },
        {
          id:3,
          val1:c,
          val2:c
        }
      ]
    }
  },
  {
    name:"join on column - some column values are null",
    statement:"SELECT t1.id AS id, t1.val AS val1, t2.val AS val2 FROM table1 AS t1 JOIN table1_null_id AS t2 ON t1.id = t2.id",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          id:1,
          val1:a,
          val2:a
        },
        {
          id:3,
          val1:c,
          val2:c
        }
      ]
    }
  },
  {
    name:"join on column - 1 table contains 1 row with the value null",
    statement:"SELECT t1.id AS id, t1.val AS val1, t2.val AS val2 FROM table1 AS t1 JOIN table1_null_row AS t2 ON t1.id = t2.id",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"join on column - ON conidition = true ",
    statement:"SELECT t1.id AS id, t1.val AS val1, t2.val AS val2 FROM table1 AS t1 JOIN table1 AS t2 ON true",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          id:1,
          val1:a,
          val2:a
        },
        {
          id:1,
          val1:a,
          val2:b
        },
        {
          id:1,
          val1:a,
          val2:c
        },
        {
          id:2,
          val1:b,
          val2:a
        },
        {
          id:2,
          val1:b,
          val2:b
        },
        {
          id:2,
          val1:b,
          val2:c
        },
        {
          id:3,
          val1:c,
          val2:a
        },
        {
          id:3,
          val1:c,
          val2:b
        },
        {
          id:3,
          val1:c,
          val2:c
        }
      ]
    }
  },
  {
    name:"join on column - ON condition = false",
    statement:"SELECT t1.id AS id, t1.val AS val1, t2.val AS val2 FROM table1 AS t1 JOIN table1 AS t2 ON false",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  }
]
single_working::[
  {
    name:"addition",
    statement:"1 + 1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  }
]
concat::[
  {
    name:"|| valid cases{lparam:\"'a'\",rparam:\"'b'\",result:\"ab\"}",
    statement:"'a' || 'b'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"ab"
    }
  },
  {
    name:"|| valid cases{lparam:\"`'a'`\",rparam:\"`'b'`\",result:\"ab\"}",
    statement:"`'a'` || `'b'`",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"ab"
    }
  },
  {
    name:"|| valid cases{lparam:\"`'a'`\",rparam:\"'b'\",result:\"ab\"}",
    statement:"`'a'` || 'b'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"ab"
    }
  },
  {
    name:"|| valid cases{lparam:\"'a'\",rparam:\"`'b'`\",result:\"ab\"}",
    statement:"'a' || `'b'`",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"ab"
    }
  },
  {
    name:"|| valid cases{lparam:\"null\",rparam:\"'b'\",result:null}",
    statement:"null || 'b'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"|| valid cases{lparam:\"'a'\",rparam:\"null\",result:null}",
    statement:"'a' || null",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"|| valid cases{lparam:\"null\",rparam:\"null\",result:null}",
    statement:"null || null",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"|| valid cases{lparam:\"null\",rparam:\"missing\",result:missing::null}",
    statement:"null || missing",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"|| valid cases{lparam:\"missing\",rparam:\"null\",result:missing::null}",
    statement:"missing || null",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"|| valid cases{lparam:\"missing\",rparam:\"'b'\",result:missing::null}",
    statement:"missing || 'b'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"|| valid cases{lparam:\"'a'\",rparam:\"missing\",result:missing::null}",
    statement:"'a' || missing",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"|| valid cases{lparam:\"missing\",rparam:\"missing\",result:missing::null}",
    statement:"missing || missing",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  }
]
'cast-to-missing'::[
  {
    name:"cast to MISSING valid cases{value:\"NULL\"}",
    statement:"cast(NULL as MISSING)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"cast to MISSING valid cases{value:\"MISSING\"}",
    statement:"cast(MISSING as MISSING)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  }
]
'cast-to-int'::[
  {
    name:"cast to int valid cases{value:\"true\",result:1}",
    statement:"cast(true as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"cast to int valid cases{value:\"false\",result:0}",
    statement:"cast(false as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"cast to int valid cases{value:\"1\",result:1}",
    statement:"cast(1 as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"cast to int valid cases{value:\"0\",result:0}",
    statement:"cast(0 as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"cast to int valid cases{value:\"-1\",result:-1}",
    statement:"cast(-1 as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"cast to int valid cases{value:\"9223372036854775807\",result:9223372036854775807}",
    statement:"cast(9223372036854775807 as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:9223372036854775807
    }
  },
  {
    name:"cast to int valid cases{value:\"-9223372036854775808\",result:-9223372036854775808}",
    statement:"cast(-9223372036854775808 as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-9223372036854775808
    }
  },
  {
    name:"cast to int valid cases{value:\"`1.5e0`\",result:1}",
    statement:"cast(`1.5e0` as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"cast to int valid cases{value:\"`1.9e0`\",result:1}",
    statement:"cast(`1.9e0` as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"cast to int valid cases{value:\"`1.1e0`\",result:1}",
    statement:"cast(`1.1e0` as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"cast to int valid cases{value:\"`0.1e0`\",result:0}",
    statement:"cast(`0.1e0` as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"cast to int valid cases{value:\"`0.5e0`\",result:0}",
    statement:"cast(`0.5e0` as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"cast to int valid cases{value:\"`0.9e0`\",result:0}",
    statement:"cast(`0.9e0` as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"cast to int valid cases{value:\"`-1.1e0`\",result:-1}",
    statement:"cast(`-1.1e0` as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"cast to int valid cases{value:\"`-1.5e0`\",result:-1}",
    statement:"cast(`-1.5e0` as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"cast to int valid cases{value:\"`-1.9e0`\",result:-1}",
    statement:"cast(`-1.9e0` as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"cast to int valid cases{value:\"`-9223372036854775808e0`\",result:-9223372036854775808}",
    statement:"cast(`-9223372036854775808e0` as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-9223372036854775808
    }
  },
  {
    name:"cast to int valid cases{value:\"1.5\",result:1}",
    statement:"cast(1.5 as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"cast to int valid cases{value:\"1.9\",result:1}",
    statement:"cast(1.9 as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"cast to int valid cases{value:\"1.1\",result:1}",
    statement:"cast(1.1 as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"cast to int valid cases{value:\"0.1\",result:0}",
    statement:"cast(0.1 as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"cast to int valid cases{value:\"0.5\",result:0}",
    statement:"cast(0.5 as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"cast to int valid cases{value:\"0.9\",result:0}",
    statement:"cast(0.9 as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"cast to int valid cases{value:\"-1.1\",result:-1}",
    statement:"cast(-1.1 as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"cast to int valid cases{value:\"-1.5\",result:-1}",
    statement:"cast(-1.5 as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"cast to int valid cases{value:\"-1.9\",result:-1}",
    statement:"cast(-1.9 as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"cast to int valid cases{value:\"9223372036854775807.0\",result:9223372036854775807}",
    statement:"cast(9223372036854775807.0 as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:9223372036854775807
    }
  },
  {
    name:"cast to int valid cases{value:\"-9223372036854775808.0\",result:-9223372036854775808}",
    statement:"cast(-9223372036854775808.0 as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-9223372036854775808
    }
  },
  {
    name:"cast to int valid cases{value:\"'1'\",result:1}",
    statement:"cast('1' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"cast to int valid cases{value:\"'01'\",result:1}",
    statement:"cast('01' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"cast to int valid cases{value:\"'+1'\",result:1}",
    statement:"cast('+1' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"cast to int valid cases{value:\"'+01'\",result:1}",
    statement:"cast('+01' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"cast to int valid cases{value:\"'-1'\",result:-1}",
    statement:"cast('-1' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"cast to int valid cases{value:\"'-01'\",result:-1}",
    statement:"cast('-01' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"cast to int valid cases{value:\"'0'\",result:0}",
    statement:"cast('0' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"cast to int valid cases{value:\"'00'\",result:0}",
    statement:"cast('00' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"cast to int valid cases{value:\"'+0'\",result:0}",
    statement:"cast('+0' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"cast to int valid cases{value:\"'+00'\",result:0}",
    statement:"cast('+00' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"cast to int valid cases{value:\"'-0'\",result:0}",
    statement:"cast('-0' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"cast to int valid cases{value:\"'-00'\",result:0}",
    statement:"cast('-00' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"cast to int valid cases{value:\"'0b10'\",result:2}",
    statement:"cast('0b10' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"cast to int valid cases{value:\"'0B10'\",result:2}",
    statement:"cast('0B10' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"cast to int valid cases{value:\"'0b010'\",result:2}",
    statement:"cast('0b010' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"cast to int valid cases{value:\"'+0b10'\",result:2}",
    statement:"cast('+0b10' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"cast to int valid cases{value:\"'+0b010'\",result:2}",
    statement:"cast('+0b010' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"cast to int valid cases{value:\"'-0b10'\",result:-2}",
    statement:"cast('-0b10' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-2
    }
  },
  {
    name:"cast to int valid cases{value:\"'-0b010'\",result:-2}",
    statement:"cast('-0b010' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-2
    }
  },
  {
    name:"cast to int valid cases{value:\"'0xA'\",result:10}",
    statement:"cast('0xA' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:10
    }
  },
  {
    name:"cast to int valid cases{value:\"'0XA'\",result:10}",
    statement:"cast('0XA' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:10
    }
  },
  {
    name:"cast to int valid cases{value:\"'0x0A'\",result:10}",
    statement:"cast('0x0A' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:10
    }
  },
  {
    name:"cast to int valid cases{value:\"'+0xA'\",result:10}",
    statement:"cast('+0xA' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:10
    }
  },
  {
    name:"cast to int valid cases{value:\"'+0x0A'\",result:10}",
    statement:"cast('+0x0A' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:10
    }
  },
  {
    name:"cast to int valid cases{value:\"'-0xA'\",result:-10}",
    statement:"cast('-0xA' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-10
    }
  },
  {
    name:"cast to int valid cases{value:\"'-0x0A'\",result:-10}",
    statement:"cast('-0x0A' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-10
    }
  },
  {
    name:"cast to int valid cases{value:\" `\\\"100\\\"` \",result:100}",
    statement:"cast( `\"100\"` as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:100
    }
  },
  {
    name:"cast to int invalid values{value:\"'hello'\",target:\"STRING\"}",
    statement:"cast('hello' as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"cast to int invalid values{value:\"'123456A'\",target:\"STRING\"}",
    statement:"cast('123456A' as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"cast to int invalid values{value:\"'00xA'\",target:\"STRING\"}",
    statement:"cast('00xA' as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"cast to int invalid values{value:\"'00b10'\",target:\"STRING\"}",
    statement:"cast('00b10' as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"cast to int invalid values{value:\"'2e10'\",target:\"STRING\"}",
    statement:"cast('2e10' as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"cast to int overflow / underflow{value:\"`2e100`\",target:\"FLOAT\"}",
    statement:"cast(`2e100` as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"cast to int overflow / underflow{value:\"`-2e100`\",target:\"FLOAT\"}",
    statement:"cast(`-2e100` as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"cast to int overflow / underflow{value:\"2e100\",target:\"DECIMAL\"}",
    statement:"cast(2e100 as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"cast to int overflow / underflow{value:\"-2e100\",target:\"DECIMAL\"}",
    statement:"cast(-2e100 as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"cast to int overflow / underflow{value:\"'92233720368547758070'\",target:\"STRING\"}",
    statement:"cast('92233720368547758070' as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"cast to int overflow / underflow{value:\"'-92233720368547758070'\",target:\"STRING\"}",
    statement:"cast('-92233720368547758070' as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"cast to int invalid target type{value:\"`2017T`\",target:\"TIMESTAMP\"}",
    statement:"cast(`2017T` as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"cast to int invalid target type{value:\" `{{\\\"\\\"}}` \",target:\"CLOB\"}",
    statement:"cast( `{{\"\"}}` as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"cast to int invalid target type{value:\" `{{\\\"1\\\"}}` \",target:\"CLOB\"}",
    statement:"cast( `{{\"1\"}}` as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"cast to int invalid target type{value:\"`{{}}`\",target:\"BLOB\"}",
    statement:"cast(`{{}}` as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"cast to int invalid target type{value:\"[1, 2]\",target:\"LIST\"}",
    statement:"cast([1, 2] as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"cast to int invalid target type{value:\"[1]\",target:\"LIST\"}",
    statement:"cast([1] as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"cast to int invalid target type{value:\"[]\",target:\"LIST\"}",
    statement:"cast([] as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"cast to int invalid target type{value:\"`(1 2)`\",target:\"SEXP\"}",
    statement:"cast(`(1 2)` as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"cast to int invalid target type{value:\"`(1)`\",target:\"SEXP\"}",
    statement:"cast(`(1)` as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"cast to int invalid target type{value:\"`()`\",target:\"SEXP\"}",
    statement:"cast(`()` as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"cast to int invalid target type{value:\"{'a': 1}\",target:\"STRUCT\"}",
    statement:"cast({'a': 1} as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"cast to int invalid target type{value:\"{'a': '12'}\",target:\"STRUCT\"}",
    statement:"cast({'a': '12'} as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"cast to int invalid target type{value:\"{}\",target:\"STRUCT\"}",
    statement:"cast({} as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"cast to int invalid target type{value:\"<<1, 2>>\",target:\"BAG\"}",
    statement:"cast(<<1, 2>> as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"cast to int invalid target type{value:\"<<1>>\",target:\"BAG\"}",
    statement:"cast(<<1>> as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"cast to int invalid target type{value:\"<<>>\",target:\"BAG\"}",
    statement:"cast(<<>> as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  }
]
'cast-to-null'::[
  {
    name:"cast to NULL valid cases{value:\"NULL\"}",
    statement:"cast(NULL as NULL)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"cast to NULL valid cases{value:\"MISSING\"}",
    statement:"cast(MISSING as NULL)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  }
]
join::[
  envs::{
    t3:[
      {
        name:"bb",
        n:13
      },
      {
        name:"cc",
        n:23
      },
      {
        name:"dd",
        n:33
      }
    ],
    j1_tbl:[
      {
        i:1,
        j:4,
        t:"one"
      },
      {
        i:2,
        j:3,
        t:"two"
      },
      {
        i:3,
        j:2,
        t:"three"
      },
      {
        i:4,
        j:1,
        t:"four"
      },
      {
        i:5,
        j:0,
        t:"five"
      },
      {
        i:6,
        j:6,
        t:"six"
      },
      {
        i:7,
        j:7,
        t:"seven"
      },
      {
        i:8,
        j:8,
        t:"eight"
      }
    ],
    j2_tbl:[
      {
        i:1,
        k:-1
      },
      {
        i:2,
        k:2
      },
      {
        i:3,
        k:-3
      },
      {
        i:2,
        k:4
      },
      {
        i:5,
        k:-5
      },
      {
        i:5,
        k:-5
      }
    ],
    t1:[
      {
        name:"bb",
        n:11
      }
    ],
    t2:[
      {
        name:"bb",
        n:12
      },
      {
        name:"cc",
        n:22
      },
      {
        name:"ee",
        n:42
      }
    ]
  },
  {
    name:"PG_JOIN_01",
    statement:"SELECT * FROM j1_tbl JOIN j2_tbl ON (j1_tbl.i = j2_tbl.i)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          i:1,
          j:4,
          t:"one",
          i:1,
          k:-1
        },
        {
          i:2,
          j:3,
          t:"two",
          i:2,
          k:2
        },
        {
          i:2,
          j:3,
          t:"two",
          i:2,
          k:4
        },
        {
          i:3,
          j:2,
          t:"three",
          i:3,
          k:-3
        },
        {
          i:5,
          j:0,
          t:"five",
          i:5,
          k:-5
        },
        {
          i:5,
          j:0,
          t:"five",
          i:5,
          k:-5
        }
      ]
    }
  },
  {
    name:"PG_JOIN_02",
    statement:"SELECT * FROM j1_tbl JOIN j2_tbl ON (j1_tbl.i = j2_tbl.k)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          i:2,
          j:3,
          t:"two",
          i:2,
          k:2
        },
        {
          i:4,
          j:1,
          t:"four",
          i:2,
          k:4
        }
      ]
    }
  },
  {
    name:"PG_JOIN_03",
    statement:"SELECT * FROM j1_tbl JOIN j2_tbl ON (j1_tbl.i <= j2_tbl.k)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          i:1,
          j:4,
          t:"one",
          i:2,
          k:2
        },
        {
          i:1,
          j:4,
          t:"one",
          i:2,
          k:4
        },
        {
          i:2,
          j:3,
          t:"two",
          i:2,
          k:2
        },
        {
          i:2,
          j:3,
          t:"two",
          i:2,
          k:4
        },
        {
          i:3,
          j:2,
          t:"three",
          i:2,
          k:4
        },
        {
          i:4,
          j:1,
          t:"four",
          i:2,
          k:4
        }
      ]
    }
  },
  {
    name:"PG_JOIN_04",
    statement:"SELECT * FROM j1_tbl LEFT JOIN j2_tbl ON j1_tbl.i = j2_tbl.i WHERE (j2_tbl.k = 1)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"PG_JOIN_05",
    statement:"SELECT * FROM j1_tbl LEFT JOIN j2_tbl ON j1_tbl.i = j2_tbl.i WHERE (j2_tbl.i = 1)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          i:1,
          j:4,
          t:"one",
          i:1,
          k:-1
        }
      ]
    }
  },
  {
    name:"PG_JOIN_06",
    statement:"SELECT * FROM (SELECT * FROM t2) as s2 INNER JOIN (SELECT * FROM t3) s3 ON s2.name = s3.name",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          id:bb,
          n:12,
          id:bb,
          n:13
        },
        {
          id:cc,
          n:22,
          id:cc,
          n:23
        }
      ]
    }
  },
  {
    name:"PG_JOIN_07",
    statement:"SELECT * FROM (SELECT * FROM t2) as s2 LEFT JOIN (SELECT * FROM t3) s3 ON s2.name = s3.name",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          name:"bb",
          n:12,
          name:"bb",
          n:13
        },
        {
          name:"cc",
          n:22,
          name:"cc",
          n:23
        },
        {
          name:"ee",
          n:42,
          _3:null
        }
      ]
    }
  },
  {
    name:"PG_JOIN_08",
    statement:"SELECT * FROM (SELECT name, n as s2_n, 2 as s2_2 FROM t2) as s2 INNER JOIN (SELECT name, n as s3_n, 3 as s3_2 FROM t3) s3 ON s2.name = s3.name",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          name:"bb",
          s2_n:12,
          s2_2:2,
          name:"bb",
          s3_n:13,
          s3_2:3
        },
        {
          name:"cc",
          s2_n:22,
          s2_2:2,
          name:"cc",
          s3_n:23,
          s3_2:3
        }
      ]
    }
  },
  {
    name:"PG_JOIN_09",
    statement:"SELECT * FROM (SELECT name, n as s2_n, 2 as s2_2 FROM t2) as s2 LEFT JOIN (SELECT name, n as s3_n, 3 as s3_2 FROM t3) s3 ON s2.name = s3.name",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          name:"bb",
          s2_n:12,
          s2_2:2,
          name:"bb",
          s3_n:13,
          s3_2:3
        },
        {
          name:"cc",
          s2_n:22,
          s2_2:2,
          name:"cc",
          s3_n:23,
          s3_2:3
        },
        {
          name:"ee",
          s2_n:42,
          s2_2:2,
          _4:null
        }
      ]
    }
  },
  {
    name:"PG_JOIN_10",
    statement:"SELECT * FROM (SELECT name, n as s1_n, 1 as s1_1 FROM t1) as s1 INNER JOIN (SELECT name, n as s2_n, 2 as s2_2 FROM t2) as s2 ON s1.name = s2.name INNER JOIN (SELECT name, n as s3_n, 3 as s3_2 FROM t3) s3 ON s2.name = s3.name",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          name:"bb",
          s1_n:11,
          s1_1:1,
          name:"bb",
          s2_n:12,
          s2_2:2,
          name:"bb",
          s3_n:13,
          s3_2:3
        }
      ]
    }
  }
]
select::[
  envs::{
    onek:[
      {
        unique1:147,
        unique2:0,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:47,
        twothousand:147,
        fivethous:147,
        tenthous:147,
        odd:14,
        even:15,
        stringu1:"RFAAAA",
        stringu2:"AAAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:931,
        unique2:1,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:31,
        twothousand:131,
        fivethous:431,
        tenthous:931,
        odd:2,
        even:3,
        stringu1:"VJAAAA",
        stringu2:"BAAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:714,
        unique2:2,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:14,
        twothousand:114,
        fivethous:214,
        tenthous:714,
        odd:8,
        even:9,
        stringu1:"MBAAAA",
        stringu2:"CAAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:711,
        unique2:3,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:11,
        twothousand:111,
        fivethous:211,
        tenthous:711,
        odd:2,
        even:3,
        stringu1:"JBAAAA",
        stringu2:"DAAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:883,
        unique2:4,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:83,
        twothousand:83,
        fivethous:383,
        tenthous:883,
        odd:6,
        even:7,
        stringu1:"ZHAAAA",
        stringu2:"EAAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:439,
        unique2:5,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:39,
        twothousand:39,
        fivethous:439,
        tenthous:439,
        odd:18,
        even:19,
        stringu1:"XQAAAA",
        stringu2:"FAAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:670,
        unique2:6,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:70,
        twothousand:70,
        fivethous:170,
        tenthous:670,
        odd:0,
        even:1,
        stringu1:"UZAAAA",
        stringu2:"GAAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:543,
        unique2:7,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:43,
        twothousand:143,
        fivethous:43,
        tenthous:543,
        odd:6,
        even:7,
        stringu1:"XUAAAA",
        stringu2:"HAAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:425,
        unique2:8,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:25,
        twothousand:25,
        fivethous:425,
        tenthous:425,
        odd:10,
        even:11,
        stringu1:"JQAAAA",
        stringu2:"IAAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:800,
        unique2:9,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:0,
        twothousand:0,
        fivethous:300,
        tenthous:800,
        odd:0,
        even:1,
        stringu1:"UEAAAA",
        stringu2:"JAAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:489,
        unique2:10,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:89,
        twothousand:89,
        fivethous:489,
        tenthous:489,
        odd:18,
        even:19,
        stringu1:"VSAAAA",
        stringu2:"KAAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:494,
        unique2:11,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:94,
        twothousand:94,
        fivethous:494,
        tenthous:494,
        odd:8,
        even:9,
        stringu1:"ATAAAA",
        stringu2:"LAAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:880,
        unique2:12,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:80,
        twothousand:80,
        fivethous:380,
        tenthous:880,
        odd:0,
        even:1,
        stringu1:"WHAAAA",
        stringu2:"MAAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:611,
        unique2:13,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:11,
        twothousand:11,
        fivethous:111,
        tenthous:611,
        odd:2,
        even:3,
        stringu1:"NXAAAA",
        stringu2:"NAAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:226,
        unique2:14,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:26,
        twothousand:26,
        fivethous:226,
        tenthous:226,
        odd:12,
        even:13,
        stringu1:"SIAAAA",
        stringu2:"OAAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:774,
        unique2:15,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:74,
        twothousand:174,
        fivethous:274,
        tenthous:774,
        odd:8,
        even:9,
        stringu1:"UDAAAA",
        stringu2:"PAAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:298,
        unique2:16,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:98,
        twothousand:98,
        fivethous:298,
        tenthous:298,
        odd:16,
        even:17,
        stringu1:"MLAAAA",
        stringu2:"QAAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:682,
        unique2:17,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:82,
        twothousand:82,
        fivethous:182,
        tenthous:682,
        odd:4,
        even:5,
        stringu1:"GAAAAA",
        stringu2:"RAAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:864,
        unique2:18,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:64,
        twothousand:64,
        fivethous:364,
        tenthous:864,
        odd:8,
        even:9,
        stringu1:"GHAAAA",
        stringu2:"SAAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:183,
        unique2:19,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:83,
        twothousand:183,
        fivethous:183,
        tenthous:183,
        odd:6,
        even:7,
        stringu1:"BHAAAA",
        stringu2:"TAAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:885,
        unique2:20,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:85,
        twothousand:85,
        fivethous:385,
        tenthous:885,
        odd:10,
        even:11,
        stringu1:"BIAAAA",
        stringu2:"UAAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:997,
        unique2:21,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:97,
        twothousand:197,
        fivethous:497,
        tenthous:997,
        odd:14,
        even:15,
        stringu1:"JMAAAA",
        stringu2:"VAAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:966,
        unique2:22,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:66,
        twothousand:166,
        fivethous:466,
        tenthous:966,
        odd:12,
        even:13,
        stringu1:"ELAAAA",
        stringu2:"WAAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:389,
        unique2:23,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:89,
        twothousand:189,
        fivethous:389,
        tenthous:389,
        odd:18,
        even:19,
        stringu1:"ZOAAAA",
        stringu2:"XAAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:846,
        unique2:24,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:46,
        twothousand:46,
        fivethous:346,
        tenthous:846,
        odd:12,
        even:13,
        stringu1:"OGAAAA",
        stringu2:"YAAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:206,
        unique2:25,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:6,
        twothousand:6,
        fivethous:206,
        tenthous:206,
        odd:12,
        even:13,
        stringu1:"YHAAAA",
        stringu2:"ZAAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:239,
        unique2:26,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:39,
        twothousand:39,
        fivethous:239,
        tenthous:239,
        odd:18,
        even:19,
        stringu1:"FJAAAA",
        stringu2:"ABAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:365,
        unique2:27,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:65,
        twothousand:165,
        fivethous:365,
        tenthous:365,
        odd:10,
        even:11,
        stringu1:"BOAAAA",
        stringu2:"BBAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:204,
        unique2:28,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:4,
        twothousand:4,
        fivethous:204,
        tenthous:204,
        odd:8,
        even:9,
        stringu1:"WHAAAA",
        stringu2:"CBAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:690,
        unique2:29,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:90,
        twothousand:90,
        fivethous:190,
        tenthous:690,
        odd:0,
        even:1,
        stringu1:"OAAAAA",
        stringu2:"DBAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:69,
        unique2:30,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:69,
        twothousand:69,
        fivethous:69,
        tenthous:69,
        odd:18,
        even:19,
        stringu1:"RCAAAA",
        stringu2:"EBAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:358,
        unique2:31,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:58,
        twothousand:158,
        fivethous:358,
        tenthous:358,
        odd:16,
        even:17,
        stringu1:"UNAAAA",
        stringu2:"FBAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:269,
        unique2:32,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:69,
        twothousand:69,
        fivethous:269,
        tenthous:269,
        odd:18,
        even:19,
        stringu1:"JKAAAA",
        stringu2:"GBAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:663,
        unique2:33,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:63,
        twothousand:63,
        fivethous:163,
        tenthous:663,
        odd:6,
        even:7,
        stringu1:"NZAAAA",
        stringu2:"HBAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:608,
        unique2:34,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:8,
        twothousand:8,
        fivethous:108,
        tenthous:608,
        odd:16,
        even:17,
        stringu1:"KXAAAA",
        stringu2:"IBAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:398,
        unique2:35,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:98,
        twothousand:198,
        fivethous:398,
        tenthous:398,
        odd:16,
        even:17,
        stringu1:"IPAAAA",
        stringu2:"JBAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:330,
        unique2:36,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:30,
        twothousand:130,
        fivethous:330,
        tenthous:330,
        odd:0,
        even:1,
        stringu1:"SMAAAA",
        stringu2:"KBAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:529,
        unique2:37,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:29,
        twothousand:129,
        fivethous:29,
        tenthous:529,
        odd:18,
        even:19,
        stringu1:"JUAAAA",
        stringu2:"LBAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:555,
        unique2:38,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:55,
        twothousand:155,
        fivethous:55,
        tenthous:555,
        odd:10,
        even:11,
        stringu1:"JVAAAA",
        stringu2:"MBAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:746,
        unique2:39,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:46,
        twothousand:146,
        fivethous:246,
        tenthous:746,
        odd:12,
        even:13,
        stringu1:"SCAAAA",
        stringu2:"NBAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:558,
        unique2:40,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:58,
        twothousand:158,
        fivethous:58,
        tenthous:558,
        odd:16,
        even:17,
        stringu1:"MVAAAA",
        stringu2:"OBAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:574,
        unique2:41,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:74,
        twothousand:174,
        fivethous:74,
        tenthous:574,
        odd:8,
        even:9,
        stringu1:"CWAAAA",
        stringu2:"PBAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:343,
        unique2:42,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:43,
        twothousand:143,
        fivethous:343,
        tenthous:343,
        odd:6,
        even:7,
        stringu1:"FNAAAA",
        stringu2:"QBAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:120,
        unique2:43,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:20,
        twothousand:120,
        fivethous:120,
        tenthous:120,
        odd:0,
        even:1,
        stringu1:"QEAAAA",
        stringu2:"RBAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:461,
        unique2:44,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:61,
        twothousand:61,
        fivethous:461,
        tenthous:461,
        odd:2,
        even:3,
        stringu1:"TRAAAA",
        stringu2:"SBAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:754,
        unique2:45,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:54,
        twothousand:154,
        fivethous:254,
        tenthous:754,
        odd:8,
        even:9,
        stringu1:"ADAAAA",
        stringu2:"TBAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:772,
        unique2:46,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:72,
        twothousand:172,
        fivethous:272,
        tenthous:772,
        odd:4,
        even:5,
        stringu1:"SDAAAA",
        stringu2:"UBAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:749,
        unique2:47,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:49,
        twothousand:149,
        fivethous:249,
        tenthous:749,
        odd:18,
        even:19,
        stringu1:"VCAAAA",
        stringu2:"VBAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:386,
        unique2:48,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:86,
        twothousand:186,
        fivethous:386,
        tenthous:386,
        odd:12,
        even:13,
        stringu1:"WOAAAA",
        stringu2:"WBAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:9,
        unique2:49,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:9,
        twothousand:9,
        fivethous:9,
        tenthous:9,
        odd:18,
        even:19,
        stringu1:"JAAAAA",
        stringu2:"XBAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:771,
        unique2:50,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:71,
        twothousand:171,
        fivethous:271,
        tenthous:771,
        odd:2,
        even:3,
        stringu1:"RDAAAA",
        stringu2:"YBAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:470,
        unique2:51,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:70,
        twothousand:70,
        fivethous:470,
        tenthous:470,
        odd:0,
        even:1,
        stringu1:"CSAAAA",
        stringu2:"ZBAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:238,
        unique2:52,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:38,
        twothousand:38,
        fivethous:238,
        tenthous:238,
        odd:16,
        even:17,
        stringu1:"EJAAAA",
        stringu2:"ACAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:86,
        unique2:53,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:86,
        twothousand:86,
        fivethous:86,
        tenthous:86,
        odd:12,
        even:13,
        stringu1:"IDAAAA",
        stringu2:"BCAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:56,
        unique2:54,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:56,
        twothousand:56,
        fivethous:56,
        tenthous:56,
        odd:12,
        even:13,
        stringu1:"ECAAAA",
        stringu2:"CCAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:767,
        unique2:55,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:67,
        twothousand:167,
        fivethous:267,
        tenthous:767,
        odd:14,
        even:15,
        stringu1:"NDAAAA",
        stringu2:"DCAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:363,
        unique2:56,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:63,
        twothousand:163,
        fivethous:363,
        tenthous:363,
        odd:6,
        even:7,
        stringu1:"ZNAAAA",
        stringu2:"ECAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:655,
        unique2:57,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:55,
        twothousand:55,
        fivethous:155,
        tenthous:655,
        odd:10,
        even:11,
        stringu1:"FZAAAA",
        stringu2:"FCAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:394,
        unique2:58,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:94,
        twothousand:194,
        fivethous:394,
        tenthous:394,
        odd:8,
        even:9,
        stringu1:"EPAAAA",
        stringu2:"GCAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:223,
        unique2:59,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:23,
        twothousand:23,
        fivethous:223,
        tenthous:223,
        odd:6,
        even:7,
        stringu1:"PIAAAA",
        stringu2:"HCAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:946,
        unique2:60,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:46,
        twothousand:146,
        fivethous:446,
        tenthous:946,
        odd:12,
        even:13,
        stringu1:"KKAAAA",
        stringu2:"ICAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:863,
        unique2:61,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:63,
        twothousand:63,
        fivethous:363,
        tenthous:863,
        odd:6,
        even:7,
        stringu1:"FHAAAA",
        stringu2:"JCAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:913,
        unique2:62,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:13,
        twothousand:113,
        fivethous:413,
        tenthous:913,
        odd:6,
        even:7,
        stringu1:"DJAAAA",
        stringu2:"KCAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:737,
        unique2:63,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:37,
        twothousand:137,
        fivethous:237,
        tenthous:737,
        odd:14,
        even:15,
        stringu1:"JCAAAA",
        stringu2:"LCAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:65,
        unique2:64,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:65,
        twothousand:65,
        fivethous:65,
        tenthous:65,
        odd:10,
        even:11,
        stringu1:"NCAAAA",
        stringu2:"MCAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:251,
        unique2:65,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:51,
        twothousand:51,
        fivethous:251,
        tenthous:251,
        odd:2,
        even:3,
        stringu1:"RJAAAA",
        stringu2:"NCAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:686,
        unique2:66,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:86,
        twothousand:86,
        fivethous:186,
        tenthous:686,
        odd:12,
        even:13,
        stringu1:"KAAAAA",
        stringu2:"OCAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:971,
        unique2:67,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:71,
        twothousand:171,
        fivethous:471,
        tenthous:971,
        odd:2,
        even:3,
        stringu1:"JLAAAA",
        stringu2:"PCAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:775,
        unique2:68,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:75,
        twothousand:175,
        fivethous:275,
        tenthous:775,
        odd:10,
        even:11,
        stringu1:"VDAAAA",
        stringu2:"QCAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:577,
        unique2:69,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:77,
        twothousand:177,
        fivethous:77,
        tenthous:577,
        odd:14,
        even:15,
        stringu1:"FWAAAA",
        stringu2:"RCAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:830,
        unique2:70,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:30,
        twothousand:30,
        fivethous:330,
        tenthous:830,
        odd:0,
        even:1,
        stringu1:"YFAAAA",
        stringu2:"SCAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:787,
        unique2:71,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:87,
        twothousand:187,
        fivethous:287,
        tenthous:787,
        odd:14,
        even:15,
        stringu1:"HEAAAA",
        stringu2:"TCAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:898,
        unique2:72,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:98,
        twothousand:98,
        fivethous:398,
        tenthous:898,
        odd:16,
        even:17,
        stringu1:"OIAAAA",
        stringu2:"UCAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:588,
        unique2:73,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:88,
        twothousand:188,
        fivethous:88,
        tenthous:588,
        odd:16,
        even:17,
        stringu1:"QWAAAA",
        stringu2:"VCAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:872,
        unique2:74,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:72,
        twothousand:72,
        fivethous:372,
        tenthous:872,
        odd:4,
        even:5,
        stringu1:"OHAAAA",
        stringu2:"WCAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:397,
        unique2:75,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:97,
        twothousand:197,
        fivethous:397,
        tenthous:397,
        odd:14,
        even:15,
        stringu1:"HPAAAA",
        stringu2:"XCAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:51,
        unique2:76,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:51,
        twothousand:51,
        fivethous:51,
        tenthous:51,
        odd:2,
        even:3,
        stringu1:"ZBAAAA",
        stringu2:"YCAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:381,
        unique2:77,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:81,
        twothousand:181,
        fivethous:381,
        tenthous:381,
        odd:2,
        even:3,
        stringu1:"ROAAAA",
        stringu2:"ZCAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:632,
        unique2:78,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:32,
        twothousand:32,
        fivethous:132,
        tenthous:632,
        odd:4,
        even:5,
        stringu1:"IYAAAA",
        stringu2:"ADAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:31,
        unique2:79,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:31,
        twothousand:31,
        fivethous:31,
        tenthous:31,
        odd:2,
        even:3,
        stringu1:"FBAAAA",
        stringu2:"BDAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:855,
        unique2:80,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:55,
        twothousand:55,
        fivethous:355,
        tenthous:855,
        odd:10,
        even:11,
        stringu1:"XGAAAA",
        stringu2:"CDAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:699,
        unique2:81,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:99,
        twothousand:99,
        fivethous:199,
        tenthous:699,
        odd:18,
        even:19,
        stringu1:"XAAAAA",
        stringu2:"DDAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:562,
        unique2:82,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:62,
        twothousand:162,
        fivethous:62,
        tenthous:562,
        odd:4,
        even:5,
        stringu1:"QVAAAA",
        stringu2:"EDAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:681,
        unique2:83,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:81,
        twothousand:81,
        fivethous:181,
        tenthous:681,
        odd:2,
        even:3,
        stringu1:"FAAAAA",
        stringu2:"FDAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:585,
        unique2:84,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:85,
        twothousand:185,
        fivethous:85,
        tenthous:585,
        odd:10,
        even:11,
        stringu1:"NWAAAA",
        stringu2:"GDAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:35,
        unique2:85,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:35,
        twothousand:35,
        fivethous:35,
        tenthous:35,
        odd:10,
        even:11,
        stringu1:"JBAAAA",
        stringu2:"HDAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:962,
        unique2:86,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:62,
        twothousand:162,
        fivethous:462,
        tenthous:962,
        odd:4,
        even:5,
        stringu1:"ALAAAA",
        stringu2:"IDAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:282,
        unique2:87,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:82,
        twothousand:82,
        fivethous:282,
        tenthous:282,
        odd:4,
        even:5,
        stringu1:"WKAAAA",
        stringu2:"JDAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:254,
        unique2:88,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:54,
        twothousand:54,
        fivethous:254,
        tenthous:254,
        odd:8,
        even:9,
        stringu1:"UJAAAA",
        stringu2:"KDAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:514,
        unique2:89,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:14,
        twothousand:114,
        fivethous:14,
        tenthous:514,
        odd:8,
        even:9,
        stringu1:"UTAAAA",
        stringu2:"LDAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:406,
        unique2:90,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:6,
        twothousand:6,
        fivethous:406,
        tenthous:406,
        odd:12,
        even:13,
        stringu1:"QPAAAA",
        stringu2:"MDAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:544,
        unique2:91,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:44,
        twothousand:144,
        fivethous:44,
        tenthous:544,
        odd:8,
        even:9,
        stringu1:"YUAAAA",
        stringu2:"NDAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:704,
        unique2:92,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:4,
        twothousand:104,
        fivethous:204,
        tenthous:704,
        odd:8,
        even:9,
        stringu1:"CBAAAA",
        stringu2:"ODAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:948,
        unique2:93,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:48,
        twothousand:148,
        fivethous:448,
        tenthous:948,
        odd:16,
        even:17,
        stringu1:"MKAAAA",
        stringu2:"PDAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:412,
        unique2:94,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:12,
        twothousand:12,
        fivethous:412,
        tenthous:412,
        odd:4,
        even:5,
        stringu1:"WPAAAA",
        stringu2:"QDAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:200,
        unique2:95,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:0,
        twothousand:0,
        fivethous:200,
        tenthous:200,
        odd:0,
        even:1,
        stringu1:"SHAAAA",
        stringu2:"RDAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:583,
        unique2:96,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:83,
        twothousand:183,
        fivethous:83,
        tenthous:583,
        odd:6,
        even:7,
        stringu1:"LWAAAA",
        stringu2:"SDAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:486,
        unique2:97,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:86,
        twothousand:86,
        fivethous:486,
        tenthous:486,
        odd:12,
        even:13,
        stringu1:"SSAAAA",
        stringu2:"TDAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:666,
        unique2:98,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:66,
        twothousand:66,
        fivethous:166,
        tenthous:666,
        odd:12,
        even:13,
        stringu1:"QZAAAA",
        stringu2:"UDAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:436,
        unique2:99,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:36,
        twothousand:36,
        fivethous:436,
        tenthous:436,
        odd:12,
        even:13,
        stringu1:"UQAAAA",
        stringu2:"VDAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:842,
        unique2:100,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:42,
        twothousand:42,
        fivethous:342,
        tenthous:842,
        odd:4,
        even:5,
        stringu1:"KGAAAA",
        stringu2:"WDAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:99,
        unique2:101,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:99,
        twothousand:99,
        fivethous:99,
        tenthous:99,
        odd:18,
        even:19,
        stringu1:"VDAAAA",
        stringu2:"XDAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:656,
        unique2:102,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:56,
        twothousand:56,
        fivethous:156,
        tenthous:656,
        odd:12,
        even:13,
        stringu1:"GZAAAA",
        stringu2:"YDAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:673,
        unique2:103,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:73,
        twothousand:73,
        fivethous:173,
        tenthous:673,
        odd:6,
        even:7,
        stringu1:"XZAAAA",
        stringu2:"ZDAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:371,
        unique2:104,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:71,
        twothousand:171,
        fivethous:371,
        tenthous:371,
        odd:2,
        even:3,
        stringu1:"HOAAAA",
        stringu2:"AEAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:869,
        unique2:105,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:69,
        twothousand:69,
        fivethous:369,
        tenthous:869,
        odd:18,
        even:19,
        stringu1:"LHAAAA",
        stringu2:"BEAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:569,
        unique2:106,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:69,
        twothousand:169,
        fivethous:69,
        tenthous:569,
        odd:18,
        even:19,
        stringu1:"XVAAAA",
        stringu2:"CEAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:616,
        unique2:107,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:16,
        twothousand:16,
        fivethous:116,
        tenthous:616,
        odd:12,
        even:13,
        stringu1:"SXAAAA",
        stringu2:"DEAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:612,
        unique2:108,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:12,
        twothousand:12,
        fivethous:112,
        tenthous:612,
        odd:4,
        even:5,
        stringu1:"OXAAAA",
        stringu2:"EEAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:505,
        unique2:109,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:5,
        twothousand:105,
        fivethous:5,
        tenthous:505,
        odd:10,
        even:11,
        stringu1:"LTAAAA",
        stringu2:"FEAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:922,
        unique2:110,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:22,
        twothousand:122,
        fivethous:422,
        tenthous:922,
        odd:4,
        even:5,
        stringu1:"MJAAAA",
        stringu2:"GEAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:221,
        unique2:111,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:21,
        twothousand:21,
        fivethous:221,
        tenthous:221,
        odd:2,
        even:3,
        stringu1:"NIAAAA",
        stringu2:"HEAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:388,
        unique2:112,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:88,
        twothousand:188,
        fivethous:388,
        tenthous:388,
        odd:16,
        even:17,
        stringu1:"YOAAAA",
        stringu2:"IEAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:567,
        unique2:113,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:67,
        twothousand:167,
        fivethous:67,
        tenthous:567,
        odd:14,
        even:15,
        stringu1:"VVAAAA",
        stringu2:"JEAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:58,
        unique2:114,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:58,
        twothousand:58,
        fivethous:58,
        tenthous:58,
        odd:16,
        even:17,
        stringu1:"GCAAAA",
        stringu2:"KEAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:316,
        unique2:115,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:16,
        twothousand:116,
        fivethous:316,
        tenthous:316,
        odd:12,
        even:13,
        stringu1:"EMAAAA",
        stringu2:"LEAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:659,
        unique2:116,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:59,
        twothousand:59,
        fivethous:159,
        tenthous:659,
        odd:18,
        even:19,
        stringu1:"JZAAAA",
        stringu2:"MEAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:501,
        unique2:117,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:1,
        twothousand:101,
        fivethous:1,
        tenthous:501,
        odd:2,
        even:3,
        stringu1:"HTAAAA",
        stringu2:"NEAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:815,
        unique2:118,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:15,
        twothousand:15,
        fivethous:315,
        tenthous:815,
        odd:10,
        even:11,
        stringu1:"JFAAAA",
        stringu2:"OEAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:638,
        unique2:119,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:38,
        twothousand:38,
        fivethous:138,
        tenthous:638,
        odd:16,
        even:17,
        stringu1:"OYAAAA",
        stringu2:"PEAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:696,
        unique2:120,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:96,
        twothousand:96,
        fivethous:196,
        tenthous:696,
        odd:12,
        even:13,
        stringu1:"UAAAAA",
        stringu2:"QEAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:734,
        unique2:121,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:34,
        twothousand:134,
        fivethous:234,
        tenthous:734,
        odd:8,
        even:9,
        stringu1:"GCAAAA",
        stringu2:"REAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:237,
        unique2:122,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:37,
        twothousand:37,
        fivethous:237,
        tenthous:237,
        odd:14,
        even:15,
        stringu1:"DJAAAA",
        stringu2:"SEAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:816,
        unique2:123,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:16,
        twothousand:16,
        fivethous:316,
        tenthous:816,
        odd:12,
        even:13,
        stringu1:"KFAAAA",
        stringu2:"TEAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:917,
        unique2:124,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:17,
        twothousand:117,
        fivethous:417,
        tenthous:917,
        odd:14,
        even:15,
        stringu1:"HJAAAA",
        stringu2:"UEAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:844,
        unique2:125,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:44,
        twothousand:44,
        fivethous:344,
        tenthous:844,
        odd:8,
        even:9,
        stringu1:"MGAAAA",
        stringu2:"VEAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:657,
        unique2:126,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:57,
        twothousand:57,
        fivethous:157,
        tenthous:657,
        odd:14,
        even:15,
        stringu1:"HZAAAA",
        stringu2:"WEAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:952,
        unique2:127,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:52,
        twothousand:152,
        fivethous:452,
        tenthous:952,
        odd:4,
        even:5,
        stringu1:"QKAAAA",
        stringu2:"XEAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:519,
        unique2:128,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:19,
        twothousand:119,
        fivethous:19,
        tenthous:519,
        odd:18,
        even:19,
        stringu1:"ZTAAAA",
        stringu2:"YEAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:792,
        unique2:129,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:92,
        twothousand:192,
        fivethous:292,
        tenthous:792,
        odd:4,
        even:5,
        stringu1:"MEAAAA",
        stringu2:"ZEAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:275,
        unique2:130,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:75,
        twothousand:75,
        fivethous:275,
        tenthous:275,
        odd:10,
        even:11,
        stringu1:"PKAAAA",
        stringu2:"AFAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:319,
        unique2:131,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:19,
        twothousand:119,
        fivethous:319,
        tenthous:319,
        odd:18,
        even:19,
        stringu1:"HMAAAA",
        stringu2:"BFAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:487,
        unique2:132,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:87,
        twothousand:87,
        fivethous:487,
        tenthous:487,
        odd:14,
        even:15,
        stringu1:"TSAAAA",
        stringu2:"CFAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:945,
        unique2:133,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:45,
        twothousand:145,
        fivethous:445,
        tenthous:945,
        odd:10,
        even:11,
        stringu1:"JKAAAA",
        stringu2:"DFAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:584,
        unique2:134,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:84,
        twothousand:184,
        fivethous:84,
        tenthous:584,
        odd:8,
        even:9,
        stringu1:"MWAAAA",
        stringu2:"EFAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:765,
        unique2:135,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:65,
        twothousand:165,
        fivethous:265,
        tenthous:765,
        odd:10,
        even:11,
        stringu1:"LDAAAA",
        stringu2:"FFAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:814,
        unique2:136,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:14,
        twothousand:14,
        fivethous:314,
        tenthous:814,
        odd:8,
        even:9,
        stringu1:"IFAAAA",
        stringu2:"GFAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:359,
        unique2:137,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:59,
        twothousand:159,
        fivethous:359,
        tenthous:359,
        odd:18,
        even:19,
        stringu1:"VNAAAA",
        stringu2:"HFAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:548,
        unique2:138,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:48,
        twothousand:148,
        fivethous:48,
        tenthous:548,
        odd:16,
        even:17,
        stringu1:"CVAAAA",
        stringu2:"IFAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:811,
        unique2:139,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:11,
        twothousand:11,
        fivethous:311,
        tenthous:811,
        odd:2,
        even:3,
        stringu1:"FFAAAA",
        stringu2:"JFAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:531,
        unique2:140,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:31,
        twothousand:131,
        fivethous:31,
        tenthous:531,
        odd:2,
        even:3,
        stringu1:"LUAAAA",
        stringu2:"KFAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:104,
        unique2:141,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:4,
        twothousand:104,
        fivethous:104,
        tenthous:104,
        odd:8,
        even:9,
        stringu1:"AEAAAA",
        stringu2:"LFAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:33,
        unique2:142,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:33,
        twothousand:33,
        fivethous:33,
        tenthous:33,
        odd:6,
        even:7,
        stringu1:"HBAAAA",
        stringu2:"MFAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:404,
        unique2:143,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:4,
        twothousand:4,
        fivethous:404,
        tenthous:404,
        odd:8,
        even:9,
        stringu1:"OPAAAA",
        stringu2:"NFAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:995,
        unique2:144,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:95,
        twothousand:195,
        fivethous:495,
        tenthous:995,
        odd:10,
        even:11,
        stringu1:"HMAAAA",
        stringu2:"OFAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:408,
        unique2:145,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:8,
        twothousand:8,
        fivethous:408,
        tenthous:408,
        odd:16,
        even:17,
        stringu1:"SPAAAA",
        stringu2:"PFAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:93,
        unique2:146,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:93,
        twothousand:93,
        fivethous:93,
        tenthous:93,
        odd:6,
        even:7,
        stringu1:"PDAAAA",
        stringu2:"QFAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:794,
        unique2:147,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:94,
        twothousand:194,
        fivethous:294,
        tenthous:794,
        odd:8,
        even:9,
        stringu1:"OEAAAA",
        stringu2:"RFAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:833,
        unique2:148,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:33,
        twothousand:33,
        fivethous:333,
        tenthous:833,
        odd:6,
        even:7,
        stringu1:"BGAAAA",
        stringu2:"SFAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:615,
        unique2:149,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:15,
        twothousand:15,
        fivethous:115,
        tenthous:615,
        odd:10,
        even:11,
        stringu1:"RXAAAA",
        stringu2:"TFAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:333,
        unique2:150,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:33,
        twothousand:133,
        fivethous:333,
        tenthous:333,
        odd:6,
        even:7,
        stringu1:"VMAAAA",
        stringu2:"UFAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:357,
        unique2:151,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:57,
        twothousand:157,
        fivethous:357,
        tenthous:357,
        odd:14,
        even:15,
        stringu1:"TNAAAA",
        stringu2:"VFAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:999,
        unique2:152,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:99,
        twothousand:199,
        fivethous:499,
        tenthous:999,
        odd:18,
        even:19,
        stringu1:"LMAAAA",
        stringu2:"WFAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:515,
        unique2:153,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:15,
        twothousand:115,
        fivethous:15,
        tenthous:515,
        odd:10,
        even:11,
        stringu1:"VTAAAA",
        stringu2:"XFAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:685,
        unique2:154,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:85,
        twothousand:85,
        fivethous:185,
        tenthous:685,
        odd:10,
        even:11,
        stringu1:"JAAAAA",
        stringu2:"YFAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:692,
        unique2:155,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:92,
        twothousand:92,
        fivethous:192,
        tenthous:692,
        odd:4,
        even:5,
        stringu1:"QAAAAA",
        stringu2:"ZFAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:627,
        unique2:156,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:27,
        twothousand:27,
        fivethous:127,
        tenthous:627,
        odd:14,
        even:15,
        stringu1:"DYAAAA",
        stringu2:"AGAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:654,
        unique2:157,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:54,
        twothousand:54,
        fivethous:154,
        tenthous:654,
        odd:8,
        even:9,
        stringu1:"EZAAAA",
        stringu2:"BGAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:115,
        unique2:158,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:15,
        twothousand:115,
        fivethous:115,
        tenthous:115,
        odd:10,
        even:11,
        stringu1:"LEAAAA",
        stringu2:"CGAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:75,
        unique2:159,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:75,
        twothousand:75,
        fivethous:75,
        tenthous:75,
        odd:10,
        even:11,
        stringu1:"XCAAAA",
        stringu2:"DGAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:14,
        unique2:160,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:14,
        twothousand:14,
        fivethous:14,
        tenthous:14,
        odd:8,
        even:9,
        stringu1:"OAAAAA",
        stringu2:"EGAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:148,
        unique2:161,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:48,
        twothousand:148,
        fivethous:148,
        tenthous:148,
        odd:16,
        even:17,
        stringu1:"SFAAAA",
        stringu2:"FGAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:201,
        unique2:162,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:1,
        twothousand:1,
        fivethous:201,
        tenthous:201,
        odd:2,
        even:3,
        stringu1:"THAAAA",
        stringu2:"GGAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:862,
        unique2:163,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:62,
        twothousand:62,
        fivethous:362,
        tenthous:862,
        odd:4,
        even:5,
        stringu1:"EHAAAA",
        stringu2:"HGAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:634,
        unique2:164,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:34,
        twothousand:34,
        fivethous:134,
        tenthous:634,
        odd:8,
        even:9,
        stringu1:"KYAAAA",
        stringu2:"IGAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:589,
        unique2:165,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:89,
        twothousand:189,
        fivethous:89,
        tenthous:589,
        odd:18,
        even:19,
        stringu1:"RWAAAA",
        stringu2:"JGAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:142,
        unique2:166,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:42,
        twothousand:142,
        fivethous:142,
        tenthous:142,
        odd:4,
        even:5,
        stringu1:"MFAAAA",
        stringu2:"KGAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:545,
        unique2:167,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:45,
        twothousand:145,
        fivethous:45,
        tenthous:545,
        odd:10,
        even:11,
        stringu1:"ZUAAAA",
        stringu2:"LGAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:983,
        unique2:168,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:83,
        twothousand:183,
        fivethous:483,
        tenthous:983,
        odd:6,
        even:7,
        stringu1:"VLAAAA",
        stringu2:"MGAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:87,
        unique2:169,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:87,
        twothousand:87,
        fivethous:87,
        tenthous:87,
        odd:14,
        even:15,
        stringu1:"JDAAAA",
        stringu2:"NGAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:335,
        unique2:170,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:35,
        twothousand:135,
        fivethous:335,
        tenthous:335,
        odd:10,
        even:11,
        stringu1:"XMAAAA",
        stringu2:"OGAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:915,
        unique2:171,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:15,
        twothousand:115,
        fivethous:415,
        tenthous:915,
        odd:10,
        even:11,
        stringu1:"FJAAAA",
        stringu2:"PGAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:286,
        unique2:172,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:86,
        twothousand:86,
        fivethous:286,
        tenthous:286,
        odd:12,
        even:13,
        stringu1:"ALAAAA",
        stringu2:"QGAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:361,
        unique2:173,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:61,
        twothousand:161,
        fivethous:361,
        tenthous:361,
        odd:2,
        even:3,
        stringu1:"XNAAAA",
        stringu2:"RGAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:97,
        unique2:174,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:97,
        twothousand:97,
        fivethous:97,
        tenthous:97,
        odd:14,
        even:15,
        stringu1:"TDAAAA",
        stringu2:"SGAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:98,
        unique2:175,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:98,
        twothousand:98,
        fivethous:98,
        tenthous:98,
        odd:16,
        even:17,
        stringu1:"UDAAAA",
        stringu2:"TGAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:377,
        unique2:176,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:77,
        twothousand:177,
        fivethous:377,
        tenthous:377,
        odd:14,
        even:15,
        stringu1:"NOAAAA",
        stringu2:"UGAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:525,
        unique2:177,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:25,
        twothousand:125,
        fivethous:25,
        tenthous:525,
        odd:10,
        even:11,
        stringu1:"FUAAAA",
        stringu2:"VGAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:448,
        unique2:178,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:48,
        twothousand:48,
        fivethous:448,
        tenthous:448,
        odd:16,
        even:17,
        stringu1:"GRAAAA",
        stringu2:"WGAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:154,
        unique2:179,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:54,
        twothousand:154,
        fivethous:154,
        tenthous:154,
        odd:8,
        even:9,
        stringu1:"YFAAAA",
        stringu2:"XGAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:866,
        unique2:180,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:66,
        twothousand:66,
        fivethous:366,
        tenthous:866,
        odd:12,
        even:13,
        stringu1:"IHAAAA",
        stringu2:"YGAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:741,
        unique2:181,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:41,
        twothousand:141,
        fivethous:241,
        tenthous:741,
        odd:2,
        even:3,
        stringu1:"NCAAAA",
        stringu2:"ZGAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:172,
        unique2:182,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:72,
        twothousand:172,
        fivethous:172,
        tenthous:172,
        odd:4,
        even:5,
        stringu1:"QGAAAA",
        stringu2:"AHAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:843,
        unique2:183,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:43,
        twothousand:43,
        fivethous:343,
        tenthous:843,
        odd:6,
        even:7,
        stringu1:"LGAAAA",
        stringu2:"BHAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:378,
        unique2:184,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:78,
        twothousand:178,
        fivethous:378,
        tenthous:378,
        odd:16,
        even:17,
        stringu1:"OOAAAA",
        stringu2:"CHAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:804,
        unique2:185,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:4,
        twothousand:4,
        fivethous:304,
        tenthous:804,
        odd:8,
        even:9,
        stringu1:"YEAAAA",
        stringu2:"DHAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:596,
        unique2:186,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:96,
        twothousand:196,
        fivethous:96,
        tenthous:596,
        odd:12,
        even:13,
        stringu1:"YWAAAA",
        stringu2:"EHAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:77,
        unique2:187,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:77,
        twothousand:77,
        fivethous:77,
        tenthous:77,
        odd:14,
        even:15,
        stringu1:"ZCAAAA",
        stringu2:"FHAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:572,
        unique2:188,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:72,
        twothousand:172,
        fivethous:72,
        tenthous:572,
        odd:4,
        even:5,
        stringu1:"AWAAAA",
        stringu2:"GHAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:444,
        unique2:189,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:44,
        twothousand:44,
        fivethous:444,
        tenthous:444,
        odd:8,
        even:9,
        stringu1:"CRAAAA",
        stringu2:"HHAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:47,
        unique2:190,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:47,
        twothousand:47,
        fivethous:47,
        tenthous:47,
        odd:14,
        even:15,
        stringu1:"VBAAAA",
        stringu2:"IHAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:274,
        unique2:191,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:74,
        twothousand:74,
        fivethous:274,
        tenthous:274,
        odd:8,
        even:9,
        stringu1:"OKAAAA",
        stringu2:"JHAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:40,
        unique2:192,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:40,
        twothousand:40,
        fivethous:40,
        tenthous:40,
        odd:0,
        even:1,
        stringu1:"OBAAAA",
        stringu2:"KHAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:339,
        unique2:193,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:39,
        twothousand:139,
        fivethous:339,
        tenthous:339,
        odd:18,
        even:19,
        stringu1:"BNAAAA",
        stringu2:"LHAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:13,
        unique2:194,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:13,
        twothousand:13,
        fivethous:13,
        tenthous:13,
        odd:6,
        even:7,
        stringu1:"NAAAAA",
        stringu2:"MHAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:878,
        unique2:195,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:78,
        twothousand:78,
        fivethous:378,
        tenthous:878,
        odd:16,
        even:17,
        stringu1:"UHAAAA",
        stringu2:"NHAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:53,
        unique2:196,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:53,
        twothousand:53,
        fivethous:53,
        tenthous:53,
        odd:6,
        even:7,
        stringu1:"BCAAAA",
        stringu2:"OHAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:939,
        unique2:197,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:39,
        twothousand:139,
        fivethous:439,
        tenthous:939,
        odd:18,
        even:19,
        stringu1:"DKAAAA",
        stringu2:"PHAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:928,
        unique2:198,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:28,
        twothousand:128,
        fivethous:428,
        tenthous:928,
        odd:16,
        even:17,
        stringu1:"SJAAAA",
        stringu2:"QHAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:886,
        unique2:199,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:86,
        twothousand:86,
        fivethous:386,
        tenthous:886,
        odd:12,
        even:13,
        stringu1:"CIAAAA",
        stringu2:"RHAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:267,
        unique2:200,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:67,
        twothousand:67,
        fivethous:267,
        tenthous:267,
        odd:14,
        even:15,
        stringu1:"HKAAAA",
        stringu2:"SHAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:105,
        unique2:201,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:5,
        twothousand:105,
        fivethous:105,
        tenthous:105,
        odd:10,
        even:11,
        stringu1:"BEAAAA",
        stringu2:"THAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:312,
        unique2:202,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:12,
        twothousand:112,
        fivethous:312,
        tenthous:312,
        odd:4,
        even:5,
        stringu1:"AMAAAA",
        stringu2:"UHAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:552,
        unique2:203,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:52,
        twothousand:152,
        fivethous:52,
        tenthous:552,
        odd:4,
        even:5,
        stringu1:"GVAAAA",
        stringu2:"VHAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:918,
        unique2:204,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:18,
        twothousand:118,
        fivethous:418,
        tenthous:918,
        odd:16,
        even:17,
        stringu1:"IJAAAA",
        stringu2:"WHAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:114,
        unique2:205,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:14,
        twothousand:114,
        fivethous:114,
        tenthous:114,
        odd:8,
        even:9,
        stringu1:"KEAAAA",
        stringu2:"XHAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:805,
        unique2:206,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:5,
        twothousand:5,
        fivethous:305,
        tenthous:805,
        odd:10,
        even:11,
        stringu1:"ZEAAAA",
        stringu2:"YHAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:875,
        unique2:207,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:75,
        twothousand:75,
        fivethous:375,
        tenthous:875,
        odd:10,
        even:11,
        stringu1:"RHAAAA",
        stringu2:"ZHAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:225,
        unique2:208,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:25,
        twothousand:25,
        fivethous:225,
        tenthous:225,
        odd:10,
        even:11,
        stringu1:"RIAAAA",
        stringu2:"AIAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:495,
        unique2:209,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:95,
        twothousand:95,
        fivethous:495,
        tenthous:495,
        odd:10,
        even:11,
        stringu1:"BTAAAA",
        stringu2:"BIAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:150,
        unique2:210,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:50,
        twothousand:150,
        fivethous:150,
        tenthous:150,
        odd:0,
        even:1,
        stringu1:"UFAAAA",
        stringu2:"CIAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:759,
        unique2:211,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:59,
        twothousand:159,
        fivethous:259,
        tenthous:759,
        odd:18,
        even:19,
        stringu1:"FDAAAA",
        stringu2:"DIAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:149,
        unique2:212,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:49,
        twothousand:149,
        fivethous:149,
        tenthous:149,
        odd:18,
        even:19,
        stringu1:"TFAAAA",
        stringu2:"EIAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:480,
        unique2:213,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:80,
        twothousand:80,
        fivethous:480,
        tenthous:480,
        odd:0,
        even:1,
        stringu1:"MSAAAA",
        stringu2:"FIAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:1,
        unique2:214,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:1,
        twothousand:1,
        fivethous:1,
        tenthous:1,
        odd:2,
        even:3,
        stringu1:"BAAAAA",
        stringu2:"GIAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:557,
        unique2:215,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:57,
        twothousand:157,
        fivethous:57,
        tenthous:557,
        odd:14,
        even:15,
        stringu1:"LVAAAA",
        stringu2:"HIAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:295,
        unique2:216,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:95,
        twothousand:95,
        fivethous:295,
        tenthous:295,
        odd:10,
        even:11,
        stringu1:"JLAAAA",
        stringu2:"IIAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:854,
        unique2:217,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:54,
        twothousand:54,
        fivethous:354,
        tenthous:854,
        odd:8,
        even:9,
        stringu1:"WGAAAA",
        stringu2:"JIAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:420,
        unique2:218,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:20,
        twothousand:20,
        fivethous:420,
        tenthous:420,
        odd:0,
        even:1,
        stringu1:"EQAAAA",
        stringu2:"KIAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:414,
        unique2:219,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:14,
        twothousand:14,
        fivethous:414,
        tenthous:414,
        odd:8,
        even:9,
        stringu1:"YPAAAA",
        stringu2:"LIAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:758,
        unique2:220,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:58,
        twothousand:158,
        fivethous:258,
        tenthous:758,
        odd:16,
        even:17,
        stringu1:"EDAAAA",
        stringu2:"MIAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:879,
        unique2:221,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:79,
        twothousand:79,
        fivethous:379,
        tenthous:879,
        odd:18,
        even:19,
        stringu1:"VHAAAA",
        stringu2:"NIAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:332,
        unique2:222,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:32,
        twothousand:132,
        fivethous:332,
        tenthous:332,
        odd:4,
        even:5,
        stringu1:"UMAAAA",
        stringu2:"OIAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:78,
        unique2:223,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:78,
        twothousand:78,
        fivethous:78,
        tenthous:78,
        odd:16,
        even:17,
        stringu1:"ADAAAA",
        stringu2:"PIAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:851,
        unique2:224,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:51,
        twothousand:51,
        fivethous:351,
        tenthous:851,
        odd:2,
        even:3,
        stringu1:"TGAAAA",
        stringu2:"QIAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:592,
        unique2:225,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:92,
        twothousand:192,
        fivethous:92,
        tenthous:592,
        odd:4,
        even:5,
        stringu1:"UWAAAA",
        stringu2:"RIAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:979,
        unique2:226,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:79,
        twothousand:179,
        fivethous:479,
        tenthous:979,
        odd:18,
        even:19,
        stringu1:"RLAAAA",
        stringu2:"SIAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:989,
        unique2:227,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:89,
        twothousand:189,
        fivethous:489,
        tenthous:989,
        odd:18,
        even:19,
        stringu1:"BMAAAA",
        stringu2:"TIAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:752,
        unique2:228,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:52,
        twothousand:152,
        fivethous:252,
        tenthous:752,
        odd:4,
        even:5,
        stringu1:"YCAAAA",
        stringu2:"UIAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:214,
        unique2:229,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:14,
        twothousand:14,
        fivethous:214,
        tenthous:214,
        odd:8,
        even:9,
        stringu1:"GIAAAA",
        stringu2:"VIAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:453,
        unique2:230,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:53,
        twothousand:53,
        fivethous:453,
        tenthous:453,
        odd:6,
        even:7,
        stringu1:"LRAAAA",
        stringu2:"WIAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:540,
        unique2:231,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:40,
        twothousand:140,
        fivethous:40,
        tenthous:540,
        odd:0,
        even:1,
        stringu1:"UUAAAA",
        stringu2:"XIAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:597,
        unique2:232,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:97,
        twothousand:197,
        fivethous:97,
        tenthous:597,
        odd:14,
        even:15,
        stringu1:"ZWAAAA",
        stringu2:"YIAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:356,
        unique2:233,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:56,
        twothousand:156,
        fivethous:356,
        tenthous:356,
        odd:12,
        even:13,
        stringu1:"SNAAAA",
        stringu2:"ZIAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:720,
        unique2:234,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:20,
        twothousand:120,
        fivethous:220,
        tenthous:720,
        odd:0,
        even:1,
        stringu1:"SBAAAA",
        stringu2:"AJAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:367,
        unique2:235,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:67,
        twothousand:167,
        fivethous:367,
        tenthous:367,
        odd:14,
        even:15,
        stringu1:"DOAAAA",
        stringu2:"BJAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:762,
        unique2:236,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:62,
        twothousand:162,
        fivethous:262,
        tenthous:762,
        odd:4,
        even:5,
        stringu1:"IDAAAA",
        stringu2:"CJAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:986,
        unique2:237,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:86,
        twothousand:186,
        fivethous:486,
        tenthous:986,
        odd:12,
        even:13,
        stringu1:"YLAAAA",
        stringu2:"DJAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:924,
        unique2:238,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:24,
        twothousand:124,
        fivethous:424,
        tenthous:924,
        odd:8,
        even:9,
        stringu1:"OJAAAA",
        stringu2:"EJAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:779,
        unique2:239,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:79,
        twothousand:179,
        fivethous:279,
        tenthous:779,
        odd:18,
        even:19,
        stringu1:"ZDAAAA",
        stringu2:"FJAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:684,
        unique2:240,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:84,
        twothousand:84,
        fivethous:184,
        tenthous:684,
        odd:8,
        even:9,
        stringu1:"IAAAAA",
        stringu2:"GJAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:413,
        unique2:241,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:13,
        twothousand:13,
        fivethous:413,
        tenthous:413,
        odd:6,
        even:7,
        stringu1:"XPAAAA",
        stringu2:"HJAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:479,
        unique2:242,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:79,
        twothousand:79,
        fivethous:479,
        tenthous:479,
        odd:18,
        even:19,
        stringu1:"LSAAAA",
        stringu2:"IJAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:731,
        unique2:243,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:31,
        twothousand:131,
        fivethous:231,
        tenthous:731,
        odd:2,
        even:3,
        stringu1:"DCAAAA",
        stringu2:"JJAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:409,
        unique2:244,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:9,
        twothousand:9,
        fivethous:409,
        tenthous:409,
        odd:18,
        even:19,
        stringu1:"TPAAAA",
        stringu2:"KJAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:372,
        unique2:245,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:72,
        twothousand:172,
        fivethous:372,
        tenthous:372,
        odd:4,
        even:5,
        stringu1:"IOAAAA",
        stringu2:"LJAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:139,
        unique2:246,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:39,
        twothousand:139,
        fivethous:139,
        tenthous:139,
        odd:18,
        even:19,
        stringu1:"JFAAAA",
        stringu2:"MJAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:717,
        unique2:247,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:17,
        twothousand:117,
        fivethous:217,
        tenthous:717,
        odd:14,
        even:15,
        stringu1:"PBAAAA",
        stringu2:"NJAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:539,
        unique2:248,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:39,
        twothousand:139,
        fivethous:39,
        tenthous:539,
        odd:18,
        even:19,
        stringu1:"TUAAAA",
        stringu2:"OJAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:318,
        unique2:249,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:18,
        twothousand:118,
        fivethous:318,
        tenthous:318,
        odd:16,
        even:17,
        stringu1:"GMAAAA",
        stringu2:"PJAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:208,
        unique2:250,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:8,
        twothousand:8,
        fivethous:208,
        tenthous:208,
        odd:16,
        even:17,
        stringu1:"AIAAAA",
        stringu2:"QJAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:797,
        unique2:251,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:97,
        twothousand:197,
        fivethous:297,
        tenthous:797,
        odd:14,
        even:15,
        stringu1:"REAAAA",
        stringu2:"RJAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:661,
        unique2:252,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:61,
        twothousand:61,
        fivethous:161,
        tenthous:661,
        odd:2,
        even:3,
        stringu1:"LZAAAA",
        stringu2:"SJAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:50,
        unique2:253,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:50,
        twothousand:50,
        fivethous:50,
        tenthous:50,
        odd:0,
        even:1,
        stringu1:"YBAAAA",
        stringu2:"TJAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:102,
        unique2:254,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:2,
        twothousand:102,
        fivethous:102,
        tenthous:102,
        odd:4,
        even:5,
        stringu1:"YDAAAA",
        stringu2:"UJAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:484,
        unique2:255,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:84,
        twothousand:84,
        fivethous:484,
        tenthous:484,
        odd:8,
        even:9,
        stringu1:"QSAAAA",
        stringu2:"VJAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:108,
        unique2:256,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:8,
        twothousand:108,
        fivethous:108,
        tenthous:108,
        odd:16,
        even:17,
        stringu1:"EEAAAA",
        stringu2:"WJAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:140,
        unique2:257,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:40,
        twothousand:140,
        fivethous:140,
        tenthous:140,
        odd:0,
        even:1,
        stringu1:"KFAAAA",
        stringu2:"XJAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:996,
        unique2:258,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:96,
        twothousand:196,
        fivethous:496,
        tenthous:996,
        odd:12,
        even:13,
        stringu1:"IMAAAA",
        stringu2:"YJAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:687,
        unique2:259,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:87,
        twothousand:87,
        fivethous:187,
        tenthous:687,
        odd:14,
        even:15,
        stringu1:"LAAAAA",
        stringu2:"ZJAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:241,
        unique2:260,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:41,
        twothousand:41,
        fivethous:241,
        tenthous:241,
        odd:2,
        even:3,
        stringu1:"HJAAAA",
        stringu2:"AKAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:923,
        unique2:261,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:23,
        twothousand:123,
        fivethous:423,
        tenthous:923,
        odd:6,
        even:7,
        stringu1:"NJAAAA",
        stringu2:"BKAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:500,
        unique2:262,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:0,
        twothousand:100,
        fivethous:0,
        tenthous:500,
        odd:0,
        even:1,
        stringu1:"GTAAAA",
        stringu2:"CKAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:536,
        unique2:263,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:36,
        twothousand:136,
        fivethous:36,
        tenthous:536,
        odd:12,
        even:13,
        stringu1:"QUAAAA",
        stringu2:"DKAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:490,
        unique2:264,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:90,
        twothousand:90,
        fivethous:490,
        tenthous:490,
        odd:0,
        even:1,
        stringu1:"WSAAAA",
        stringu2:"EKAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:773,
        unique2:265,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:73,
        twothousand:173,
        fivethous:273,
        tenthous:773,
        odd:6,
        even:7,
        stringu1:"TDAAAA",
        stringu2:"FKAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:19,
        unique2:266,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:19,
        twothousand:19,
        fivethous:19,
        tenthous:19,
        odd:18,
        even:19,
        stringu1:"TAAAAA",
        stringu2:"GKAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:534,
        unique2:267,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:34,
        twothousand:134,
        fivethous:34,
        tenthous:534,
        odd:8,
        even:9,
        stringu1:"OUAAAA",
        stringu2:"HKAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:941,
        unique2:268,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:41,
        twothousand:141,
        fivethous:441,
        tenthous:941,
        odd:2,
        even:3,
        stringu1:"FKAAAA",
        stringu2:"IKAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:477,
        unique2:269,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:77,
        twothousand:77,
        fivethous:477,
        tenthous:477,
        odd:14,
        even:15,
        stringu1:"JSAAAA",
        stringu2:"JKAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:173,
        unique2:270,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:73,
        twothousand:173,
        fivethous:173,
        tenthous:173,
        odd:6,
        even:7,
        stringu1:"RGAAAA",
        stringu2:"KKAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:113,
        unique2:271,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:13,
        twothousand:113,
        fivethous:113,
        tenthous:113,
        odd:6,
        even:7,
        stringu1:"JEAAAA",
        stringu2:"LKAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:526,
        unique2:272,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:26,
        twothousand:126,
        fivethous:26,
        tenthous:526,
        odd:12,
        even:13,
        stringu1:"GUAAAA",
        stringu2:"MKAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:727,
        unique2:273,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:27,
        twothousand:127,
        fivethous:227,
        tenthous:727,
        odd:14,
        even:15,
        stringu1:"ZBAAAA",
        stringu2:"NKAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:302,
        unique2:274,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:2,
        twothousand:102,
        fivethous:302,
        tenthous:302,
        odd:4,
        even:5,
        stringu1:"QLAAAA",
        stringu2:"OKAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:789,
        unique2:275,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:89,
        twothousand:189,
        fivethous:289,
        tenthous:789,
        odd:18,
        even:19,
        stringu1:"JEAAAA",
        stringu2:"PKAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:447,
        unique2:276,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:47,
        twothousand:47,
        fivethous:447,
        tenthous:447,
        odd:14,
        even:15,
        stringu1:"FRAAAA",
        stringu2:"QKAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:884,
        unique2:277,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:84,
        twothousand:84,
        fivethous:384,
        tenthous:884,
        odd:8,
        even:9,
        stringu1:"AIAAAA",
        stringu2:"RKAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:718,
        unique2:278,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:18,
        twothousand:118,
        fivethous:218,
        tenthous:718,
        odd:16,
        even:17,
        stringu1:"QBAAAA",
        stringu2:"SKAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:818,
        unique2:279,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:18,
        twothousand:18,
        fivethous:318,
        tenthous:818,
        odd:16,
        even:17,
        stringu1:"MFAAAA",
        stringu2:"TKAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:466,
        unique2:280,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:66,
        twothousand:66,
        fivethous:466,
        tenthous:466,
        odd:12,
        even:13,
        stringu1:"YRAAAA",
        stringu2:"UKAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:131,
        unique2:281,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:31,
        twothousand:131,
        fivethous:131,
        tenthous:131,
        odd:2,
        even:3,
        stringu1:"BFAAAA",
        stringu2:"VKAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:503,
        unique2:282,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:3,
        twothousand:103,
        fivethous:3,
        tenthous:503,
        odd:6,
        even:7,
        stringu1:"JTAAAA",
        stringu2:"WKAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:364,
        unique2:283,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:64,
        twothousand:164,
        fivethous:364,
        tenthous:364,
        odd:8,
        even:9,
        stringu1:"AOAAAA",
        stringu2:"XKAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:934,
        unique2:284,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:34,
        twothousand:134,
        fivethous:434,
        tenthous:934,
        odd:8,
        even:9,
        stringu1:"YJAAAA",
        stringu2:"YKAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:542,
        unique2:285,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:42,
        twothousand:142,
        fivethous:42,
        tenthous:542,
        odd:4,
        even:5,
        stringu1:"WUAAAA",
        stringu2:"ZKAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:146,
        unique2:286,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:46,
        twothousand:146,
        fivethous:146,
        tenthous:146,
        odd:12,
        even:13,
        stringu1:"QFAAAA",
        stringu2:"ALAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:652,
        unique2:287,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:52,
        twothousand:52,
        fivethous:152,
        tenthous:652,
        odd:4,
        even:5,
        stringu1:"CZAAAA",
        stringu2:"BLAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:566,
        unique2:288,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:66,
        twothousand:166,
        fivethous:66,
        tenthous:566,
        odd:12,
        even:13,
        stringu1:"UVAAAA",
        stringu2:"CLAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:788,
        unique2:289,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:88,
        twothousand:188,
        fivethous:288,
        tenthous:788,
        odd:16,
        even:17,
        stringu1:"IEAAAA",
        stringu2:"DLAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:168,
        unique2:290,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:68,
        twothousand:168,
        fivethous:168,
        tenthous:168,
        odd:16,
        even:17,
        stringu1:"MGAAAA",
        stringu2:"ELAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:736,
        unique2:291,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:36,
        twothousand:136,
        fivethous:236,
        tenthous:736,
        odd:12,
        even:13,
        stringu1:"ICAAAA",
        stringu2:"FLAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:795,
        unique2:292,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:95,
        twothousand:195,
        fivethous:295,
        tenthous:795,
        odd:10,
        even:11,
        stringu1:"PEAAAA",
        stringu2:"GLAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:103,
        unique2:293,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:3,
        twothousand:103,
        fivethous:103,
        tenthous:103,
        odd:6,
        even:7,
        stringu1:"ZDAAAA",
        stringu2:"HLAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:763,
        unique2:294,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:63,
        twothousand:163,
        fivethous:263,
        tenthous:763,
        odd:6,
        even:7,
        stringu1:"JDAAAA",
        stringu2:"ILAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:256,
        unique2:295,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:56,
        twothousand:56,
        fivethous:256,
        tenthous:256,
        odd:12,
        even:13,
        stringu1:"WJAAAA",
        stringu2:"JLAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:63,
        unique2:296,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:63,
        twothousand:63,
        fivethous:63,
        tenthous:63,
        odd:6,
        even:7,
        stringu1:"LCAAAA",
        stringu2:"KLAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:702,
        unique2:297,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:2,
        twothousand:102,
        fivethous:202,
        tenthous:702,
        odd:4,
        even:5,
        stringu1:"ABAAAA",
        stringu2:"LLAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:390,
        unique2:298,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:90,
        twothousand:190,
        fivethous:390,
        tenthous:390,
        odd:0,
        even:1,
        stringu1:"APAAAA",
        stringu2:"MLAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:116,
        unique2:299,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:16,
        twothousand:116,
        fivethous:116,
        tenthous:116,
        odd:12,
        even:13,
        stringu1:"MEAAAA",
        stringu2:"NLAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:354,
        unique2:300,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:54,
        twothousand:154,
        fivethous:354,
        tenthous:354,
        odd:8,
        even:9,
        stringu1:"QNAAAA",
        stringu2:"OLAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:162,
        unique2:301,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:62,
        twothousand:162,
        fivethous:162,
        tenthous:162,
        odd:4,
        even:5,
        stringu1:"GGAAAA",
        stringu2:"PLAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:71,
        unique2:302,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:71,
        twothousand:71,
        fivethous:71,
        tenthous:71,
        odd:2,
        even:3,
        stringu1:"TCAAAA",
        stringu2:"QLAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:916,
        unique2:303,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:16,
        twothousand:116,
        fivethous:416,
        tenthous:916,
        odd:12,
        even:13,
        stringu1:"GJAAAA",
        stringu2:"RLAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:565,
        unique2:304,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:65,
        twothousand:165,
        fivethous:65,
        tenthous:565,
        odd:10,
        even:11,
        stringu1:"TVAAAA",
        stringu2:"SLAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:509,
        unique2:305,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:9,
        twothousand:109,
        fivethous:9,
        tenthous:509,
        odd:18,
        even:19,
        stringu1:"PTAAAA",
        stringu2:"TLAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:20,
        unique2:306,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:20,
        twothousand:20,
        fivethous:20,
        tenthous:20,
        odd:0,
        even:1,
        stringu1:"UAAAAA",
        stringu2:"ULAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:813,
        unique2:307,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:13,
        twothousand:13,
        fivethous:313,
        tenthous:813,
        odd:6,
        even:7,
        stringu1:"HFAAAA",
        stringu2:"VLAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:80,
        unique2:308,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:80,
        twothousand:80,
        fivethous:80,
        tenthous:80,
        odd:0,
        even:1,
        stringu1:"CDAAAA",
        stringu2:"WLAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:400,
        unique2:309,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:0,
        twothousand:0,
        fivethous:400,
        tenthous:400,
        odd:0,
        even:1,
        stringu1:"KPAAAA",
        stringu2:"XLAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:888,
        unique2:310,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:88,
        twothousand:88,
        fivethous:388,
        tenthous:888,
        odd:16,
        even:17,
        stringu1:"EIAAAA",
        stringu2:"YLAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:825,
        unique2:311,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:25,
        twothousand:25,
        fivethous:325,
        tenthous:825,
        odd:10,
        even:11,
        stringu1:"TFAAAA",
        stringu2:"ZLAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:401,
        unique2:312,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:1,
        twothousand:1,
        fivethous:401,
        tenthous:401,
        odd:2,
        even:3,
        stringu1:"LPAAAA",
        stringu2:"AMAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:158,
        unique2:313,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:58,
        twothousand:158,
        fivethous:158,
        tenthous:158,
        odd:16,
        even:17,
        stringu1:"CGAAAA",
        stringu2:"BMAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:973,
        unique2:314,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:73,
        twothousand:173,
        fivethous:473,
        tenthous:973,
        odd:6,
        even:7,
        stringu1:"LLAAAA",
        stringu2:"CMAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:324,
        unique2:315,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:24,
        twothousand:124,
        fivethous:324,
        tenthous:324,
        odd:8,
        even:9,
        stringu1:"MMAAAA",
        stringu2:"DMAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:873,
        unique2:316,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:73,
        twothousand:73,
        fivethous:373,
        tenthous:873,
        odd:6,
        even:7,
        stringu1:"PHAAAA",
        stringu2:"EMAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:676,
        unique2:317,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:76,
        twothousand:76,
        fivethous:176,
        tenthous:676,
        odd:12,
        even:13,
        stringu1:"AAAAAA",
        stringu2:"FMAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:199,
        unique2:318,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:99,
        twothousand:199,
        fivethous:199,
        tenthous:199,
        odd:18,
        even:19,
        stringu1:"RHAAAA",
        stringu2:"GMAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:304,
        unique2:319,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:4,
        twothousand:104,
        fivethous:304,
        tenthous:304,
        odd:8,
        even:9,
        stringu1:"SLAAAA",
        stringu2:"HMAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:338,
        unique2:320,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:38,
        twothousand:138,
        fivethous:338,
        tenthous:338,
        odd:16,
        even:17,
        stringu1:"ANAAAA",
        stringu2:"IMAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:743,
        unique2:321,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:43,
        twothousand:143,
        fivethous:243,
        tenthous:743,
        odd:6,
        even:7,
        stringu1:"PCAAAA",
        stringu2:"JMAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:730,
        unique2:322,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:30,
        twothousand:130,
        fivethous:230,
        tenthous:730,
        odd:0,
        even:1,
        stringu1:"CCAAAA",
        stringu2:"KMAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:130,
        unique2:323,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:30,
        twothousand:130,
        fivethous:130,
        tenthous:130,
        odd:0,
        even:1,
        stringu1:"AFAAAA",
        stringu2:"LMAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:224,
        unique2:324,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:24,
        twothousand:24,
        fivethous:224,
        tenthous:224,
        odd:8,
        even:9,
        stringu1:"QIAAAA",
        stringu2:"MMAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:216,
        unique2:325,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:16,
        twothousand:16,
        fivethous:216,
        tenthous:216,
        odd:12,
        even:13,
        stringu1:"IIAAAA",
        stringu2:"NMAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:2,
        unique2:326,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:2,
        twothousand:2,
        fivethous:2,
        tenthous:2,
        odd:4,
        even:5,
        stringu1:"CAAAAA",
        stringu2:"OMAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:836,
        unique2:327,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:36,
        twothousand:36,
        fivethous:336,
        tenthous:836,
        odd:12,
        even:13,
        stringu1:"EGAAAA",
        stringu2:"PMAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:443,
        unique2:328,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:43,
        twothousand:43,
        fivethous:443,
        tenthous:443,
        odd:6,
        even:7,
        stringu1:"BRAAAA",
        stringu2:"QMAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:777,
        unique2:329,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:77,
        twothousand:177,
        fivethous:277,
        tenthous:777,
        odd:14,
        even:15,
        stringu1:"XDAAAA",
        stringu2:"RMAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:126,
        unique2:330,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:26,
        twothousand:126,
        fivethous:126,
        tenthous:126,
        odd:12,
        even:13,
        stringu1:"WEAAAA",
        stringu2:"SMAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:117,
        unique2:331,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:17,
        twothousand:117,
        fivethous:117,
        tenthous:117,
        odd:14,
        even:15,
        stringu1:"NEAAAA",
        stringu2:"TMAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:633,
        unique2:332,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:33,
        twothousand:33,
        fivethous:133,
        tenthous:633,
        odd:6,
        even:7,
        stringu1:"JYAAAA",
        stringu2:"UMAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:310,
        unique2:333,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:10,
        twothousand:110,
        fivethous:310,
        tenthous:310,
        odd:0,
        even:1,
        stringu1:"YLAAAA",
        stringu2:"VMAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:622,
        unique2:334,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:22,
        twothousand:22,
        fivethous:122,
        tenthous:622,
        odd:4,
        even:5,
        stringu1:"YXAAAA",
        stringu2:"WMAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:268,
        unique2:335,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:68,
        twothousand:68,
        fivethous:268,
        tenthous:268,
        odd:16,
        even:17,
        stringu1:"IKAAAA",
        stringu2:"XMAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:384,
        unique2:336,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:84,
        twothousand:184,
        fivethous:384,
        tenthous:384,
        odd:8,
        even:9,
        stringu1:"UOAAAA",
        stringu2:"YMAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:460,
        unique2:337,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:60,
        twothousand:60,
        fivethous:460,
        tenthous:460,
        odd:0,
        even:1,
        stringu1:"SRAAAA",
        stringu2:"ZMAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:475,
        unique2:338,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:75,
        twothousand:75,
        fivethous:475,
        tenthous:475,
        odd:10,
        even:11,
        stringu1:"HSAAAA",
        stringu2:"ANAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:624,
        unique2:339,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:24,
        twothousand:24,
        fivethous:124,
        tenthous:624,
        odd:8,
        even:9,
        stringu1:"AYAAAA",
        stringu2:"BNAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:826,
        unique2:340,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:26,
        twothousand:26,
        fivethous:326,
        tenthous:826,
        odd:12,
        even:13,
        stringu1:"UFAAAA",
        stringu2:"CNAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:680,
        unique2:341,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:80,
        twothousand:80,
        fivethous:180,
        tenthous:680,
        odd:0,
        even:1,
        stringu1:"EAAAAA",
        stringu2:"DNAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:306,
        unique2:342,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:6,
        twothousand:106,
        fivethous:306,
        tenthous:306,
        odd:12,
        even:13,
        stringu1:"ULAAAA",
        stringu2:"ENAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:896,
        unique2:343,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:96,
        twothousand:96,
        fivethous:396,
        tenthous:896,
        odd:12,
        even:13,
        stringu1:"MIAAAA",
        stringu2:"FNAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:30,
        unique2:344,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:30,
        twothousand:30,
        fivethous:30,
        tenthous:30,
        odd:0,
        even:1,
        stringu1:"EBAAAA",
        stringu2:"GNAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:576,
        unique2:345,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:76,
        twothousand:176,
        fivethous:76,
        tenthous:576,
        odd:12,
        even:13,
        stringu1:"EWAAAA",
        stringu2:"HNAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:551,
        unique2:346,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:51,
        twothousand:151,
        fivethous:51,
        tenthous:551,
        odd:2,
        even:3,
        stringu1:"FVAAAA",
        stringu2:"INAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:639,
        unique2:347,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:39,
        twothousand:39,
        fivethous:139,
        tenthous:639,
        odd:18,
        even:19,
        stringu1:"PYAAAA",
        stringu2:"JNAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:975,
        unique2:348,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:75,
        twothousand:175,
        fivethous:475,
        tenthous:975,
        odd:10,
        even:11,
        stringu1:"NLAAAA",
        stringu2:"KNAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:882,
        unique2:349,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:82,
        twothousand:82,
        fivethous:382,
        tenthous:882,
        odd:4,
        even:5,
        stringu1:"YHAAAA",
        stringu2:"LNAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:160,
        unique2:350,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:60,
        twothousand:160,
        fivethous:160,
        tenthous:160,
        odd:0,
        even:1,
        stringu1:"EGAAAA",
        stringu2:"MNAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:522,
        unique2:351,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:22,
        twothousand:122,
        fivethous:22,
        tenthous:522,
        odd:4,
        even:5,
        stringu1:"CUAAAA",
        stringu2:"NNAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:620,
        unique2:352,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:20,
        twothousand:20,
        fivethous:120,
        tenthous:620,
        odd:0,
        even:1,
        stringu1:"WXAAAA",
        stringu2:"ONAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:719,
        unique2:353,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:19,
        twothousand:119,
        fivethous:219,
        tenthous:719,
        odd:18,
        even:19,
        stringu1:"RBAAAA",
        stringu2:"PNAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:88,
        unique2:354,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:88,
        twothousand:88,
        fivethous:88,
        tenthous:88,
        odd:16,
        even:17,
        stringu1:"KDAAAA",
        stringu2:"QNAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:614,
        unique2:355,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:14,
        twothousand:14,
        fivethous:114,
        tenthous:614,
        odd:8,
        even:9,
        stringu1:"QXAAAA",
        stringu2:"RNAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:54,
        unique2:356,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:54,
        twothousand:54,
        fivethous:54,
        tenthous:54,
        odd:8,
        even:9,
        stringu1:"CCAAAA",
        stringu2:"SNAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:209,
        unique2:357,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:9,
        twothousand:9,
        fivethous:209,
        tenthous:209,
        odd:18,
        even:19,
        stringu1:"BIAAAA",
        stringu2:"TNAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:67,
        unique2:358,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:67,
        twothousand:67,
        fivethous:67,
        tenthous:67,
        odd:14,
        even:15,
        stringu1:"PCAAAA",
        stringu2:"UNAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:809,
        unique2:359,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:9,
        twothousand:9,
        fivethous:309,
        tenthous:809,
        odd:18,
        even:19,
        stringu1:"DFAAAA",
        stringu2:"VNAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:982,
        unique2:360,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:82,
        twothousand:182,
        fivethous:482,
        tenthous:982,
        odd:4,
        even:5,
        stringu1:"ULAAAA",
        stringu2:"WNAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:817,
        unique2:361,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:17,
        twothousand:17,
        fivethous:317,
        tenthous:817,
        odd:14,
        even:15,
        stringu1:"LFAAAA",
        stringu2:"XNAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:187,
        unique2:362,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:87,
        twothousand:187,
        fivethous:187,
        tenthous:187,
        odd:14,
        even:15,
        stringu1:"FHAAAA",
        stringu2:"YNAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:992,
        unique2:363,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:92,
        twothousand:192,
        fivethous:492,
        tenthous:992,
        odd:4,
        even:5,
        stringu1:"EMAAAA",
        stringu2:"ZNAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:580,
        unique2:364,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:80,
        twothousand:180,
        fivethous:80,
        tenthous:580,
        odd:0,
        even:1,
        stringu1:"IWAAAA",
        stringu2:"AOAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:658,
        unique2:365,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:58,
        twothousand:58,
        fivethous:158,
        tenthous:658,
        odd:16,
        even:17,
        stringu1:"IZAAAA",
        stringu2:"BOAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:222,
        unique2:366,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:22,
        twothousand:22,
        fivethous:222,
        tenthous:222,
        odd:4,
        even:5,
        stringu1:"OIAAAA",
        stringu2:"COAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:667,
        unique2:367,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:67,
        twothousand:67,
        fivethous:167,
        tenthous:667,
        odd:14,
        even:15,
        stringu1:"RZAAAA",
        stringu2:"DOAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:715,
        unique2:368,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:15,
        twothousand:115,
        fivethous:215,
        tenthous:715,
        odd:10,
        even:11,
        stringu1:"NBAAAA",
        stringu2:"EOAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:990,
        unique2:369,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:90,
        twothousand:190,
        fivethous:490,
        tenthous:990,
        odd:0,
        even:1,
        stringu1:"CMAAAA",
        stringu2:"FOAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:22,
        unique2:370,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:22,
        twothousand:22,
        fivethous:22,
        tenthous:22,
        odd:4,
        even:5,
        stringu1:"WAAAAA",
        stringu2:"GOAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:362,
        unique2:371,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:62,
        twothousand:162,
        fivethous:362,
        tenthous:362,
        odd:4,
        even:5,
        stringu1:"YNAAAA",
        stringu2:"HOAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:376,
        unique2:372,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:76,
        twothousand:176,
        fivethous:376,
        tenthous:376,
        odd:12,
        even:13,
        stringu1:"MOAAAA",
        stringu2:"IOAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:246,
        unique2:373,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:46,
        twothousand:46,
        fivethous:246,
        tenthous:246,
        odd:12,
        even:13,
        stringu1:"MJAAAA",
        stringu2:"JOAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:300,
        unique2:374,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:0,
        twothousand:100,
        fivethous:300,
        tenthous:300,
        odd:0,
        even:1,
        stringu1:"OLAAAA",
        stringu2:"KOAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:231,
        unique2:375,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:31,
        twothousand:31,
        fivethous:231,
        tenthous:231,
        odd:2,
        even:3,
        stringu1:"XIAAAA",
        stringu2:"LOAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:151,
        unique2:376,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:51,
        twothousand:151,
        fivethous:151,
        tenthous:151,
        odd:2,
        even:3,
        stringu1:"VFAAAA",
        stringu2:"MOAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:29,
        unique2:377,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:29,
        twothousand:29,
        fivethous:29,
        tenthous:29,
        odd:18,
        even:19,
        stringu1:"DBAAAA",
        stringu2:"NOAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:297,
        unique2:378,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:97,
        twothousand:97,
        fivethous:297,
        tenthous:297,
        odd:14,
        even:15,
        stringu1:"LLAAAA",
        stringu2:"OOAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:403,
        unique2:379,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:3,
        twothousand:3,
        fivethous:403,
        tenthous:403,
        odd:6,
        even:7,
        stringu1:"NPAAAA",
        stringu2:"POAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:716,
        unique2:380,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:16,
        twothousand:116,
        fivethous:216,
        tenthous:716,
        odd:12,
        even:13,
        stringu1:"OBAAAA",
        stringu2:"QOAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:260,
        unique2:381,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:60,
        twothousand:60,
        fivethous:260,
        tenthous:260,
        odd:0,
        even:1,
        stringu1:"AKAAAA",
        stringu2:"ROAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:170,
        unique2:382,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:70,
        twothousand:170,
        fivethous:170,
        tenthous:170,
        odd:0,
        even:1,
        stringu1:"OGAAAA",
        stringu2:"SOAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:285,
        unique2:383,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:85,
        twothousand:85,
        fivethous:285,
        tenthous:285,
        odd:10,
        even:11,
        stringu1:"ZKAAAA",
        stringu2:"TOAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:82,
        unique2:384,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:82,
        twothousand:82,
        fivethous:82,
        tenthous:82,
        odd:4,
        even:5,
        stringu1:"EDAAAA",
        stringu2:"UOAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:958,
        unique2:385,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:58,
        twothousand:158,
        fivethous:458,
        tenthous:958,
        odd:16,
        even:17,
        stringu1:"WKAAAA",
        stringu2:"VOAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:175,
        unique2:386,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:75,
        twothousand:175,
        fivethous:175,
        tenthous:175,
        odd:10,
        even:11,
        stringu1:"TGAAAA",
        stringu2:"WOAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:671,
        unique2:387,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:71,
        twothousand:71,
        fivethous:171,
        tenthous:671,
        odd:2,
        even:3,
        stringu1:"VZAAAA",
        stringu2:"XOAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:822,
        unique2:388,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:22,
        twothousand:22,
        fivethous:322,
        tenthous:822,
        odd:4,
        even:5,
        stringu1:"QFAAAA",
        stringu2:"YOAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:573,
        unique2:389,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:73,
        twothousand:173,
        fivethous:73,
        tenthous:573,
        odd:6,
        even:7,
        stringu1:"BWAAAA",
        stringu2:"ZOAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:723,
        unique2:390,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:23,
        twothousand:123,
        fivethous:223,
        tenthous:723,
        odd:6,
        even:7,
        stringu1:"VBAAAA",
        stringu2:"APAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:195,
        unique2:391,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:95,
        twothousand:195,
        fivethous:195,
        tenthous:195,
        odd:10,
        even:11,
        stringu1:"NHAAAA",
        stringu2:"BPAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:197,
        unique2:392,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:97,
        twothousand:197,
        fivethous:197,
        tenthous:197,
        odd:14,
        even:15,
        stringu1:"PHAAAA",
        stringu2:"CPAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:755,
        unique2:393,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:55,
        twothousand:155,
        fivethous:255,
        tenthous:755,
        odd:10,
        even:11,
        stringu1:"BDAAAA",
        stringu2:"DPAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:42,
        unique2:394,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:42,
        twothousand:42,
        fivethous:42,
        tenthous:42,
        odd:4,
        even:5,
        stringu1:"QBAAAA",
        stringu2:"EPAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:897,
        unique2:395,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:97,
        twothousand:97,
        fivethous:397,
        tenthous:897,
        odd:14,
        even:15,
        stringu1:"NIAAAA",
        stringu2:"FPAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:309,
        unique2:396,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:9,
        twothousand:109,
        fivethous:309,
        tenthous:309,
        odd:18,
        even:19,
        stringu1:"XLAAAA",
        stringu2:"GPAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:724,
        unique2:397,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:24,
        twothousand:124,
        fivethous:224,
        tenthous:724,
        odd:8,
        even:9,
        stringu1:"WBAAAA",
        stringu2:"HPAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:474,
        unique2:398,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:74,
        twothousand:74,
        fivethous:474,
        tenthous:474,
        odd:8,
        even:9,
        stringu1:"GSAAAA",
        stringu2:"IPAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:345,
        unique2:399,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:45,
        twothousand:145,
        fivethous:345,
        tenthous:345,
        odd:10,
        even:11,
        stringu1:"HNAAAA",
        stringu2:"JPAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:678,
        unique2:400,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:78,
        twothousand:78,
        fivethous:178,
        tenthous:678,
        odd:16,
        even:17,
        stringu1:"CAAAAA",
        stringu2:"KPAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:757,
        unique2:401,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:57,
        twothousand:157,
        fivethous:257,
        tenthous:757,
        odd:14,
        even:15,
        stringu1:"DDAAAA",
        stringu2:"LPAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:600,
        unique2:402,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:0,
        twothousand:0,
        fivethous:100,
        tenthous:600,
        odd:0,
        even:1,
        stringu1:"CXAAAA",
        stringu2:"MPAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:184,
        unique2:403,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:84,
        twothousand:184,
        fivethous:184,
        tenthous:184,
        odd:8,
        even:9,
        stringu1:"CHAAAA",
        stringu2:"NPAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:155,
        unique2:404,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:55,
        twothousand:155,
        fivethous:155,
        tenthous:155,
        odd:10,
        even:11,
        stringu1:"ZFAAAA",
        stringu2:"OPAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:136,
        unique2:405,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:36,
        twothousand:136,
        fivethous:136,
        tenthous:136,
        odd:12,
        even:13,
        stringu1:"GFAAAA",
        stringu2:"PPAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:889,
        unique2:406,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:89,
        twothousand:89,
        fivethous:389,
        tenthous:889,
        odd:18,
        even:19,
        stringu1:"FIAAAA",
        stringu2:"QPAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:95,
        unique2:407,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:95,
        twothousand:95,
        fivethous:95,
        tenthous:95,
        odd:10,
        even:11,
        stringu1:"RDAAAA",
        stringu2:"RPAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:549,
        unique2:408,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:49,
        twothousand:149,
        fivethous:49,
        tenthous:549,
        odd:18,
        even:19,
        stringu1:"DVAAAA",
        stringu2:"SPAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:81,
        unique2:409,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:81,
        twothousand:81,
        fivethous:81,
        tenthous:81,
        odd:2,
        even:3,
        stringu1:"DDAAAA",
        stringu2:"TPAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:679,
        unique2:410,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:79,
        twothousand:79,
        fivethous:179,
        tenthous:679,
        odd:18,
        even:19,
        stringu1:"DAAAAA",
        stringu2:"UPAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:27,
        unique2:411,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:27,
        twothousand:27,
        fivethous:27,
        tenthous:27,
        odd:14,
        even:15,
        stringu1:"BBAAAA",
        stringu2:"VPAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:748,
        unique2:412,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:48,
        twothousand:148,
        fivethous:248,
        tenthous:748,
        odd:16,
        even:17,
        stringu1:"UCAAAA",
        stringu2:"WPAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:107,
        unique2:413,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:7,
        twothousand:107,
        fivethous:107,
        tenthous:107,
        odd:14,
        even:15,
        stringu1:"DEAAAA",
        stringu2:"XPAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:870,
        unique2:414,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:70,
        twothousand:70,
        fivethous:370,
        tenthous:870,
        odd:0,
        even:1,
        stringu1:"MHAAAA",
        stringu2:"YPAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:848,
        unique2:415,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:48,
        twothousand:48,
        fivethous:348,
        tenthous:848,
        odd:16,
        even:17,
        stringu1:"QGAAAA",
        stringu2:"ZPAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:764,
        unique2:416,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:64,
        twothousand:164,
        fivethous:264,
        tenthous:764,
        odd:8,
        even:9,
        stringu1:"KDAAAA",
        stringu2:"AQAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:535,
        unique2:417,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:35,
        twothousand:135,
        fivethous:35,
        tenthous:535,
        odd:10,
        even:11,
        stringu1:"PUAAAA",
        stringu2:"BQAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:211,
        unique2:418,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:11,
        twothousand:11,
        fivethous:211,
        tenthous:211,
        odd:2,
        even:3,
        stringu1:"DIAAAA",
        stringu2:"CQAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:625,
        unique2:419,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:25,
        twothousand:25,
        fivethous:125,
        tenthous:625,
        odd:10,
        even:11,
        stringu1:"BYAAAA",
        stringu2:"DQAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:96,
        unique2:420,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:96,
        twothousand:96,
        fivethous:96,
        tenthous:96,
        odd:12,
        even:13,
        stringu1:"SDAAAA",
        stringu2:"EQAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:828,
        unique2:421,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:28,
        twothousand:28,
        fivethous:328,
        tenthous:828,
        odd:16,
        even:17,
        stringu1:"WFAAAA",
        stringu2:"FQAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:229,
        unique2:422,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:29,
        twothousand:29,
        fivethous:229,
        tenthous:229,
        odd:18,
        even:19,
        stringu1:"VIAAAA",
        stringu2:"GQAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:602,
        unique2:423,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:2,
        twothousand:2,
        fivethous:102,
        tenthous:602,
        odd:4,
        even:5,
        stringu1:"EXAAAA",
        stringu2:"HQAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:742,
        unique2:424,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:42,
        twothousand:142,
        fivethous:242,
        tenthous:742,
        odd:4,
        even:5,
        stringu1:"OCAAAA",
        stringu2:"IQAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:451,
        unique2:425,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:51,
        twothousand:51,
        fivethous:451,
        tenthous:451,
        odd:2,
        even:3,
        stringu1:"JRAAAA",
        stringu2:"JQAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:991,
        unique2:426,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:91,
        twothousand:191,
        fivethous:491,
        tenthous:991,
        odd:2,
        even:3,
        stringu1:"DMAAAA",
        stringu2:"KQAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:301,
        unique2:427,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:1,
        twothousand:101,
        fivethous:301,
        tenthous:301,
        odd:2,
        even:3,
        stringu1:"PLAAAA",
        stringu2:"LQAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:510,
        unique2:428,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:10,
        twothousand:110,
        fivethous:10,
        tenthous:510,
        odd:0,
        even:1,
        stringu1:"QTAAAA",
        stringu2:"MQAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:299,
        unique2:429,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:99,
        twothousand:99,
        fivethous:299,
        tenthous:299,
        odd:18,
        even:19,
        stringu1:"NLAAAA",
        stringu2:"NQAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:961,
        unique2:430,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:61,
        twothousand:161,
        fivethous:461,
        tenthous:961,
        odd:2,
        even:3,
        stringu1:"ZKAAAA",
        stringu2:"OQAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:3,
        unique2:431,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:3,
        twothousand:3,
        fivethous:3,
        tenthous:3,
        odd:6,
        even:7,
        stringu1:"DAAAAA",
        stringu2:"PQAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:106,
        unique2:432,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:6,
        twothousand:106,
        fivethous:106,
        tenthous:106,
        odd:12,
        even:13,
        stringu1:"CEAAAA",
        stringu2:"QQAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:591,
        unique2:433,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:91,
        twothousand:191,
        fivethous:91,
        tenthous:591,
        odd:2,
        even:3,
        stringu1:"TWAAAA",
        stringu2:"RQAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:700,
        unique2:434,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:0,
        twothousand:100,
        fivethous:200,
        tenthous:700,
        odd:0,
        even:1,
        stringu1:"YAAAAA",
        stringu2:"SQAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:841,
        unique2:435,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:41,
        twothousand:41,
        fivethous:341,
        tenthous:841,
        odd:2,
        even:3,
        stringu1:"JGAAAA",
        stringu2:"TQAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:829,
        unique2:436,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:29,
        twothousand:29,
        fivethous:329,
        tenthous:829,
        odd:18,
        even:19,
        stringu1:"XFAAAA",
        stringu2:"UQAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:508,
        unique2:437,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:8,
        twothousand:108,
        fivethous:8,
        tenthous:508,
        odd:16,
        even:17,
        stringu1:"OTAAAA",
        stringu2:"VQAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:750,
        unique2:438,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:50,
        twothousand:150,
        fivethous:250,
        tenthous:750,
        odd:0,
        even:1,
        stringu1:"WCAAAA",
        stringu2:"WQAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:665,
        unique2:439,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:65,
        twothousand:65,
        fivethous:165,
        tenthous:665,
        odd:10,
        even:11,
        stringu1:"PZAAAA",
        stringu2:"XQAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:157,
        unique2:440,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:57,
        twothousand:157,
        fivethous:157,
        tenthous:157,
        odd:14,
        even:15,
        stringu1:"BGAAAA",
        stringu2:"YQAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:694,
        unique2:441,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:94,
        twothousand:94,
        fivethous:194,
        tenthous:694,
        odd:8,
        even:9,
        stringu1:"SAAAAA",
        stringu2:"ZQAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:176,
        unique2:442,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:76,
        twothousand:176,
        fivethous:176,
        tenthous:176,
        odd:12,
        even:13,
        stringu1:"UGAAAA",
        stringu2:"ARAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:950,
        unique2:443,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:50,
        twothousand:150,
        fivethous:450,
        tenthous:950,
        odd:0,
        even:1,
        stringu1:"OKAAAA",
        stringu2:"BRAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:970,
        unique2:444,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:70,
        twothousand:170,
        fivethous:470,
        tenthous:970,
        odd:0,
        even:1,
        stringu1:"ILAAAA",
        stringu2:"CRAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:496,
        unique2:445,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:96,
        twothousand:96,
        fivethous:496,
        tenthous:496,
        odd:12,
        even:13,
        stringu1:"CTAAAA",
        stringu2:"DRAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:429,
        unique2:446,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:29,
        twothousand:29,
        fivethous:429,
        tenthous:429,
        odd:18,
        even:19,
        stringu1:"NQAAAA",
        stringu2:"ERAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:907,
        unique2:447,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:7,
        twothousand:107,
        fivethous:407,
        tenthous:907,
        odd:14,
        even:15,
        stringu1:"XIAAAA",
        stringu2:"FRAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:72,
        unique2:448,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:72,
        twothousand:72,
        fivethous:72,
        tenthous:72,
        odd:4,
        even:5,
        stringu1:"UCAAAA",
        stringu2:"GRAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:186,
        unique2:449,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:86,
        twothousand:186,
        fivethous:186,
        tenthous:186,
        odd:12,
        even:13,
        stringu1:"EHAAAA",
        stringu2:"HRAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:713,
        unique2:450,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:13,
        twothousand:113,
        fivethous:213,
        tenthous:713,
        odd:6,
        even:7,
        stringu1:"LBAAAA",
        stringu2:"IRAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:432,
        unique2:451,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:32,
        twothousand:32,
        fivethous:432,
        tenthous:432,
        odd:4,
        even:5,
        stringu1:"QQAAAA",
        stringu2:"JRAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:735,
        unique2:452,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:35,
        twothousand:135,
        fivethous:235,
        tenthous:735,
        odd:10,
        even:11,
        stringu1:"HCAAAA",
        stringu2:"KRAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:516,
        unique2:453,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:16,
        twothousand:116,
        fivethous:16,
        tenthous:516,
        odd:12,
        even:13,
        stringu1:"WTAAAA",
        stringu2:"LRAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:964,
        unique2:454,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:64,
        twothousand:164,
        fivethous:464,
        tenthous:964,
        odd:8,
        even:9,
        stringu1:"CLAAAA",
        stringu2:"MRAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:840,
        unique2:455,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:40,
        twothousand:40,
        fivethous:340,
        tenthous:840,
        odd:0,
        even:1,
        stringu1:"IGAAAA",
        stringu2:"NRAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:550,
        unique2:456,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:50,
        twothousand:150,
        fivethous:50,
        tenthous:550,
        odd:0,
        even:1,
        stringu1:"EVAAAA",
        stringu2:"ORAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:360,
        unique2:457,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:60,
        twothousand:160,
        fivethous:360,
        tenthous:360,
        odd:0,
        even:1,
        stringu1:"WNAAAA",
        stringu2:"PRAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:827,
        unique2:458,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:27,
        twothousand:27,
        fivethous:327,
        tenthous:827,
        odd:14,
        even:15,
        stringu1:"VFAAAA",
        stringu2:"QRAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:959,
        unique2:459,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:59,
        twothousand:159,
        fivethous:459,
        tenthous:959,
        odd:18,
        even:19,
        stringu1:"XKAAAA",
        stringu2:"RRAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:454,
        unique2:460,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:54,
        twothousand:54,
        fivethous:454,
        tenthous:454,
        odd:8,
        even:9,
        stringu1:"MRAAAA",
        stringu2:"SRAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:819,
        unique2:461,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:19,
        twothousand:19,
        fivethous:319,
        tenthous:819,
        odd:18,
        even:19,
        stringu1:"NFAAAA",
        stringu2:"TRAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:745,
        unique2:462,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:45,
        twothousand:145,
        fivethous:245,
        tenthous:745,
        odd:10,
        even:11,
        stringu1:"RCAAAA",
        stringu2:"URAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:279,
        unique2:463,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:79,
        twothousand:79,
        fivethous:279,
        tenthous:279,
        odd:18,
        even:19,
        stringu1:"TKAAAA",
        stringu2:"VRAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:426,
        unique2:464,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:26,
        twothousand:26,
        fivethous:426,
        tenthous:426,
        odd:12,
        even:13,
        stringu1:"KQAAAA",
        stringu2:"WRAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:70,
        unique2:465,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:70,
        twothousand:70,
        fivethous:70,
        tenthous:70,
        odd:0,
        even:1,
        stringu1:"SCAAAA",
        stringu2:"XRAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:637,
        unique2:466,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:37,
        twothousand:37,
        fivethous:137,
        tenthous:637,
        odd:14,
        even:15,
        stringu1:"NYAAAA",
        stringu2:"YRAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:417,
        unique2:467,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:17,
        twothousand:17,
        fivethous:417,
        tenthous:417,
        odd:14,
        even:15,
        stringu1:"BQAAAA",
        stringu2:"ZRAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:586,
        unique2:468,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:86,
        twothousand:186,
        fivethous:86,
        tenthous:586,
        odd:12,
        even:13,
        stringu1:"OWAAAA",
        stringu2:"ASAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:314,
        unique2:469,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:14,
        twothousand:114,
        fivethous:314,
        tenthous:314,
        odd:8,
        even:9,
        stringu1:"CMAAAA",
        stringu2:"BSAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:101,
        unique2:470,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:1,
        twothousand:101,
        fivethous:101,
        tenthous:101,
        odd:2,
        even:3,
        stringu1:"XDAAAA",
        stringu2:"CSAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:205,
        unique2:471,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:5,
        twothousand:5,
        fivethous:205,
        tenthous:205,
        odd:10,
        even:11,
        stringu1:"XHAAAA",
        stringu2:"DSAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:969,
        unique2:472,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:69,
        twothousand:169,
        fivethous:469,
        tenthous:969,
        odd:18,
        even:19,
        stringu1:"HLAAAA",
        stringu2:"ESAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:217,
        unique2:473,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:17,
        twothousand:17,
        fivethous:217,
        tenthous:217,
        odd:14,
        even:15,
        stringu1:"JIAAAA",
        stringu2:"FSAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:281,
        unique2:474,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:81,
        twothousand:81,
        fivethous:281,
        tenthous:281,
        odd:2,
        even:3,
        stringu1:"VKAAAA",
        stringu2:"GSAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:984,
        unique2:475,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:84,
        twothousand:184,
        fivethous:484,
        tenthous:984,
        odd:8,
        even:9,
        stringu1:"WLAAAA",
        stringu2:"HSAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:366,
        unique2:476,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:66,
        twothousand:166,
        fivethous:366,
        tenthous:366,
        odd:12,
        even:13,
        stringu1:"COAAAA",
        stringu2:"ISAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:483,
        unique2:477,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:83,
        twothousand:83,
        fivethous:483,
        tenthous:483,
        odd:6,
        even:7,
        stringu1:"PSAAAA",
        stringu2:"JSAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:838,
        unique2:478,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:38,
        twothousand:38,
        fivethous:338,
        tenthous:838,
        odd:16,
        even:17,
        stringu1:"GGAAAA",
        stringu2:"KSAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:64,
        unique2:479,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:64,
        twothousand:64,
        fivethous:64,
        tenthous:64,
        odd:8,
        even:9,
        stringu1:"MCAAAA",
        stringu2:"LSAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:981,
        unique2:480,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:81,
        twothousand:181,
        fivethous:481,
        tenthous:981,
        odd:2,
        even:3,
        stringu1:"TLAAAA",
        stringu2:"MSAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:538,
        unique2:481,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:38,
        twothousand:138,
        fivethous:38,
        tenthous:538,
        odd:16,
        even:17,
        stringu1:"SUAAAA",
        stringu2:"NSAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:39,
        unique2:482,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:39,
        twothousand:39,
        fivethous:39,
        tenthous:39,
        odd:18,
        even:19,
        stringu1:"NBAAAA",
        stringu2:"OSAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:60,
        unique2:483,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:60,
        twothousand:60,
        fivethous:60,
        tenthous:60,
        odd:0,
        even:1,
        stringu1:"ICAAAA",
        stringu2:"PSAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:874,
        unique2:484,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:74,
        twothousand:74,
        fivethous:374,
        tenthous:874,
        odd:8,
        even:9,
        stringu1:"QHAAAA",
        stringu2:"QSAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:955,
        unique2:485,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:55,
        twothousand:155,
        fivethous:455,
        tenthous:955,
        odd:10,
        even:11,
        stringu1:"TKAAAA",
        stringu2:"RSAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:347,
        unique2:486,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:47,
        twothousand:147,
        fivethous:347,
        tenthous:347,
        odd:14,
        even:15,
        stringu1:"JNAAAA",
        stringu2:"SSAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:227,
        unique2:487,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:27,
        twothousand:27,
        fivethous:227,
        tenthous:227,
        odd:14,
        even:15,
        stringu1:"TIAAAA",
        stringu2:"TSAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:44,
        unique2:488,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:44,
        twothousand:44,
        fivethous:44,
        tenthous:44,
        odd:8,
        even:9,
        stringu1:"SBAAAA",
        stringu2:"USAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:446,
        unique2:489,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:46,
        twothousand:46,
        fivethous:446,
        tenthous:446,
        odd:12,
        even:13,
        stringu1:"ERAAAA",
        stringu2:"VSAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:605,
        unique2:490,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:5,
        twothousand:5,
        fivethous:105,
        tenthous:605,
        odd:10,
        even:11,
        stringu1:"HXAAAA",
        stringu2:"WSAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:570,
        unique2:491,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:70,
        twothousand:170,
        fivethous:70,
        tenthous:570,
        odd:0,
        even:1,
        stringu1:"YVAAAA",
        stringu2:"XSAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:895,
        unique2:492,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:95,
        twothousand:95,
        fivethous:395,
        tenthous:895,
        odd:10,
        even:11,
        stringu1:"LIAAAA",
        stringu2:"YSAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:760,
        unique2:493,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:60,
        twothousand:160,
        fivethous:260,
        tenthous:760,
        odd:0,
        even:1,
        stringu1:"GDAAAA",
        stringu2:"ZSAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:428,
        unique2:494,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:28,
        twothousand:28,
        fivethous:428,
        tenthous:428,
        odd:16,
        even:17,
        stringu1:"MQAAAA",
        stringu2:"ATAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:628,
        unique2:495,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:28,
        twothousand:28,
        fivethous:128,
        tenthous:628,
        odd:16,
        even:17,
        stringu1:"EYAAAA",
        stringu2:"BTAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:933,
        unique2:496,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:33,
        twothousand:133,
        fivethous:433,
        tenthous:933,
        odd:6,
        even:7,
        stringu1:"XJAAAA",
        stringu2:"CTAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:263,
        unique2:497,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:63,
        twothousand:63,
        fivethous:263,
        tenthous:263,
        odd:6,
        even:7,
        stringu1:"DKAAAA",
        stringu2:"DTAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:729,
        unique2:498,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:29,
        twothousand:129,
        fivethous:229,
        tenthous:729,
        odd:18,
        even:19,
        stringu1:"BCAAAA",
        stringu2:"ETAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:860,
        unique2:499,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:60,
        twothousand:60,
        fivethous:360,
        tenthous:860,
        odd:0,
        even:1,
        stringu1:"CHAAAA",
        stringu2:"FTAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:76,
        unique2:500,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:76,
        twothousand:76,
        fivethous:76,
        tenthous:76,
        odd:12,
        even:13,
        stringu1:"YCAAAA",
        stringu2:"GTAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:293,
        unique2:501,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:93,
        twothousand:93,
        fivethous:293,
        tenthous:293,
        odd:6,
        even:7,
        stringu1:"HLAAAA",
        stringu2:"HTAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:296,
        unique2:502,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:96,
        twothousand:96,
        fivethous:296,
        tenthous:296,
        odd:12,
        even:13,
        stringu1:"KLAAAA",
        stringu2:"ITAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:124,
        unique2:503,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:24,
        twothousand:124,
        fivethous:124,
        tenthous:124,
        odd:8,
        even:9,
        stringu1:"UEAAAA",
        stringu2:"JTAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:568,
        unique2:504,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:68,
        twothousand:168,
        fivethous:68,
        tenthous:568,
        odd:16,
        even:17,
        stringu1:"WVAAAA",
        stringu2:"KTAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:337,
        unique2:505,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:37,
        twothousand:137,
        fivethous:337,
        tenthous:337,
        odd:14,
        even:15,
        stringu1:"ZMAAAA",
        stringu2:"LTAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:464,
        unique2:506,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:64,
        twothousand:64,
        fivethous:464,
        tenthous:464,
        odd:8,
        even:9,
        stringu1:"WRAAAA",
        stringu2:"MTAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:582,
        unique2:507,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:82,
        twothousand:182,
        fivethous:82,
        tenthous:582,
        odd:4,
        even:5,
        stringu1:"KWAAAA",
        stringu2:"NTAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:207,
        unique2:508,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:7,
        twothousand:7,
        fivethous:207,
        tenthous:207,
        odd:14,
        even:15,
        stringu1:"ZHAAAA",
        stringu2:"OTAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:518,
        unique2:509,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:18,
        twothousand:118,
        fivethous:18,
        tenthous:518,
        odd:16,
        even:17,
        stringu1:"YTAAAA",
        stringu2:"PTAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:513,
        unique2:510,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:13,
        twothousand:113,
        fivethous:13,
        tenthous:513,
        odd:6,
        even:7,
        stringu1:"TTAAAA",
        stringu2:"QTAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:127,
        unique2:511,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:27,
        twothousand:127,
        fivethous:127,
        tenthous:127,
        odd:14,
        even:15,
        stringu1:"XEAAAA",
        stringu2:"RTAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:396,
        unique2:512,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:96,
        twothousand:196,
        fivethous:396,
        tenthous:396,
        odd:12,
        even:13,
        stringu1:"GPAAAA",
        stringu2:"STAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:781,
        unique2:513,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:81,
        twothousand:181,
        fivethous:281,
        tenthous:781,
        odd:2,
        even:3,
        stringu1:"BEAAAA",
        stringu2:"TTAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:233,
        unique2:514,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:33,
        twothousand:33,
        fivethous:233,
        tenthous:233,
        odd:6,
        even:7,
        stringu1:"ZIAAAA",
        stringu2:"UTAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:709,
        unique2:515,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:9,
        twothousand:109,
        fivethous:209,
        tenthous:709,
        odd:18,
        even:19,
        stringu1:"HBAAAA",
        stringu2:"VTAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:325,
        unique2:516,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:25,
        twothousand:125,
        fivethous:325,
        tenthous:325,
        odd:10,
        even:11,
        stringu1:"NMAAAA",
        stringu2:"WTAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:143,
        unique2:517,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:43,
        twothousand:143,
        fivethous:143,
        tenthous:143,
        odd:6,
        even:7,
        stringu1:"NFAAAA",
        stringu2:"XTAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:824,
        unique2:518,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:24,
        twothousand:24,
        fivethous:324,
        tenthous:824,
        odd:8,
        even:9,
        stringu1:"SFAAAA",
        stringu2:"YTAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:122,
        unique2:519,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:22,
        twothousand:122,
        fivethous:122,
        tenthous:122,
        odd:4,
        even:5,
        stringu1:"SEAAAA",
        stringu2:"ZTAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:10,
        unique2:520,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:10,
        twothousand:10,
        fivethous:10,
        tenthous:10,
        odd:0,
        even:1,
        stringu1:"KAAAAA",
        stringu2:"AUAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:41,
        unique2:521,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:41,
        twothousand:41,
        fivethous:41,
        tenthous:41,
        odd:2,
        even:3,
        stringu1:"PBAAAA",
        stringu2:"BUAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:618,
        unique2:522,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:18,
        twothousand:18,
        fivethous:118,
        tenthous:618,
        odd:16,
        even:17,
        stringu1:"UXAAAA",
        stringu2:"CUAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:161,
        unique2:523,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:61,
        twothousand:161,
        fivethous:161,
        tenthous:161,
        odd:2,
        even:3,
        stringu1:"FGAAAA",
        stringu2:"DUAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:801,
        unique2:524,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:1,
        twothousand:1,
        fivethous:301,
        tenthous:801,
        odd:2,
        even:3,
        stringu1:"VEAAAA",
        stringu2:"EUAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:768,
        unique2:525,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:68,
        twothousand:168,
        fivethous:268,
        tenthous:768,
        odd:16,
        even:17,
        stringu1:"ODAAAA",
        stringu2:"FUAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:642,
        unique2:526,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:42,
        twothousand:42,
        fivethous:142,
        tenthous:642,
        odd:4,
        even:5,
        stringu1:"SYAAAA",
        stringu2:"GUAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:803,
        unique2:527,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:3,
        twothousand:3,
        fivethous:303,
        tenthous:803,
        odd:6,
        even:7,
        stringu1:"XEAAAA",
        stringu2:"HUAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:317,
        unique2:528,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:17,
        twothousand:117,
        fivethous:317,
        tenthous:317,
        odd:14,
        even:15,
        stringu1:"FMAAAA",
        stringu2:"IUAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:938,
        unique2:529,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:38,
        twothousand:138,
        fivethous:438,
        tenthous:938,
        odd:16,
        even:17,
        stringu1:"CKAAAA",
        stringu2:"JUAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:649,
        unique2:530,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:49,
        twothousand:49,
        fivethous:149,
        tenthous:649,
        odd:18,
        even:19,
        stringu1:"ZYAAAA",
        stringu2:"KUAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:738,
        unique2:531,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:38,
        twothousand:138,
        fivethous:238,
        tenthous:738,
        odd:16,
        even:17,
        stringu1:"KCAAAA",
        stringu2:"LUAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:344,
        unique2:532,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:44,
        twothousand:144,
        fivethous:344,
        tenthous:344,
        odd:8,
        even:9,
        stringu1:"GNAAAA",
        stringu2:"MUAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:399,
        unique2:533,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:99,
        twothousand:199,
        fivethous:399,
        tenthous:399,
        odd:18,
        even:19,
        stringu1:"JPAAAA",
        stringu2:"NUAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:609,
        unique2:534,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:9,
        twothousand:9,
        fivethous:109,
        tenthous:609,
        odd:18,
        even:19,
        stringu1:"LXAAAA",
        stringu2:"OUAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:677,
        unique2:535,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:77,
        twothousand:77,
        fivethous:177,
        tenthous:677,
        odd:14,
        even:15,
        stringu1:"BAAAAA",
        stringu2:"PUAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:478,
        unique2:536,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:78,
        twothousand:78,
        fivethous:478,
        tenthous:478,
        odd:16,
        even:17,
        stringu1:"KSAAAA",
        stringu2:"QUAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:452,
        unique2:537,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:52,
        twothousand:52,
        fivethous:452,
        tenthous:452,
        odd:4,
        even:5,
        stringu1:"KRAAAA",
        stringu2:"RUAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:261,
        unique2:538,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:61,
        twothousand:61,
        fivethous:261,
        tenthous:261,
        odd:2,
        even:3,
        stringu1:"BKAAAA",
        stringu2:"SUAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:449,
        unique2:539,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:49,
        twothousand:49,
        fivethous:449,
        tenthous:449,
        odd:18,
        even:19,
        stringu1:"HRAAAA",
        stringu2:"TUAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:433,
        unique2:540,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:33,
        twothousand:33,
        fivethous:433,
        tenthous:433,
        odd:6,
        even:7,
        stringu1:"RQAAAA",
        stringu2:"UUAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:5,
        unique2:541,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:5,
        twothousand:5,
        fivethous:5,
        tenthous:5,
        odd:10,
        even:11,
        stringu1:"FAAAAA",
        stringu2:"VUAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:664,
        unique2:542,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:64,
        twothousand:64,
        fivethous:164,
        tenthous:664,
        odd:8,
        even:9,
        stringu1:"OZAAAA",
        stringu2:"WUAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:887,
        unique2:543,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:87,
        twothousand:87,
        fivethous:387,
        tenthous:887,
        odd:14,
        even:15,
        stringu1:"DIAAAA",
        stringu2:"XUAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:546,
        unique2:544,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:46,
        twothousand:146,
        fivethous:46,
        tenthous:546,
        odd:12,
        even:13,
        stringu1:"AVAAAA",
        stringu2:"YUAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:253,
        unique2:545,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:53,
        twothousand:53,
        fivethous:253,
        tenthous:253,
        odd:6,
        even:7,
        stringu1:"TJAAAA",
        stringu2:"ZUAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:235,
        unique2:546,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:35,
        twothousand:35,
        fivethous:235,
        tenthous:235,
        odd:10,
        even:11,
        stringu1:"BJAAAA",
        stringu2:"AVAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:258,
        unique2:547,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:58,
        twothousand:58,
        fivethous:258,
        tenthous:258,
        odd:16,
        even:17,
        stringu1:"YJAAAA",
        stringu2:"BVAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:621,
        unique2:548,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:21,
        twothousand:21,
        fivethous:121,
        tenthous:621,
        odd:2,
        even:3,
        stringu1:"XXAAAA",
        stringu2:"CVAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:998,
        unique2:549,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:98,
        twothousand:198,
        fivethous:498,
        tenthous:998,
        odd:16,
        even:17,
        stringu1:"KMAAAA",
        stringu2:"DVAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:236,
        unique2:550,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:36,
        twothousand:36,
        fivethous:236,
        tenthous:236,
        odd:12,
        even:13,
        stringu1:"CJAAAA",
        stringu2:"EVAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:537,
        unique2:551,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:37,
        twothousand:137,
        fivethous:37,
        tenthous:537,
        odd:14,
        even:15,
        stringu1:"RUAAAA",
        stringu2:"FVAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:769,
        unique2:552,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:69,
        twothousand:169,
        fivethous:269,
        tenthous:769,
        odd:18,
        even:19,
        stringu1:"PDAAAA",
        stringu2:"GVAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:921,
        unique2:553,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:21,
        twothousand:121,
        fivethous:421,
        tenthous:921,
        odd:2,
        even:3,
        stringu1:"LJAAAA",
        stringu2:"HVAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:951,
        unique2:554,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:51,
        twothousand:151,
        fivethous:451,
        tenthous:951,
        odd:2,
        even:3,
        stringu1:"PKAAAA",
        stringu2:"IVAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:240,
        unique2:555,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:40,
        twothousand:40,
        fivethous:240,
        tenthous:240,
        odd:0,
        even:1,
        stringu1:"GJAAAA",
        stringu2:"JVAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:644,
        unique2:556,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:44,
        twothousand:44,
        fivethous:144,
        tenthous:644,
        odd:8,
        even:9,
        stringu1:"UYAAAA",
        stringu2:"KVAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:352,
        unique2:557,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:52,
        twothousand:152,
        fivethous:352,
        tenthous:352,
        odd:4,
        even:5,
        stringu1:"ONAAAA",
        stringu2:"LVAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:613,
        unique2:558,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:13,
        twothousand:13,
        fivethous:113,
        tenthous:613,
        odd:6,
        even:7,
        stringu1:"PXAAAA",
        stringu2:"MVAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:784,
        unique2:559,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:84,
        twothousand:184,
        fivethous:284,
        tenthous:784,
        odd:8,
        even:9,
        stringu1:"EEAAAA",
        stringu2:"NVAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:61,
        unique2:560,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:61,
        twothousand:61,
        fivethous:61,
        tenthous:61,
        odd:2,
        even:3,
        stringu1:"JCAAAA",
        stringu2:"OVAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:144,
        unique2:561,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:44,
        twothousand:144,
        fivethous:144,
        tenthous:144,
        odd:8,
        even:9,
        stringu1:"OFAAAA",
        stringu2:"PVAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:94,
        unique2:562,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:94,
        twothousand:94,
        fivethous:94,
        tenthous:94,
        odd:8,
        even:9,
        stringu1:"QDAAAA",
        stringu2:"QVAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:270,
        unique2:563,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:70,
        twothousand:70,
        fivethous:270,
        tenthous:270,
        odd:0,
        even:1,
        stringu1:"KKAAAA",
        stringu2:"RVAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:942,
        unique2:564,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:42,
        twothousand:142,
        fivethous:442,
        tenthous:942,
        odd:4,
        even:5,
        stringu1:"GKAAAA",
        stringu2:"SVAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:756,
        unique2:565,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:56,
        twothousand:156,
        fivethous:256,
        tenthous:756,
        odd:12,
        even:13,
        stringu1:"CDAAAA",
        stringu2:"TVAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:321,
        unique2:566,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:21,
        twothousand:121,
        fivethous:321,
        tenthous:321,
        odd:2,
        even:3,
        stringu1:"JMAAAA",
        stringu2:"UVAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:36,
        unique2:567,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:36,
        twothousand:36,
        fivethous:36,
        tenthous:36,
        odd:12,
        even:13,
        stringu1:"KBAAAA",
        stringu2:"VVAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:232,
        unique2:568,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:32,
        twothousand:32,
        fivethous:232,
        tenthous:232,
        odd:4,
        even:5,
        stringu1:"YIAAAA",
        stringu2:"WVAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:430,
        unique2:569,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:30,
        twothousand:30,
        fivethous:430,
        tenthous:430,
        odd:0,
        even:1,
        stringu1:"OQAAAA",
        stringu2:"XVAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:177,
        unique2:570,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:77,
        twothousand:177,
        fivethous:177,
        tenthous:177,
        odd:14,
        even:15,
        stringu1:"VGAAAA",
        stringu2:"YVAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:220,
        unique2:571,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:20,
        twothousand:20,
        fivethous:220,
        tenthous:220,
        odd:0,
        even:1,
        stringu1:"MIAAAA",
        stringu2:"ZVAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:109,
        unique2:572,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:9,
        twothousand:109,
        fivethous:109,
        tenthous:109,
        odd:18,
        even:19,
        stringu1:"FEAAAA",
        stringu2:"AWAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:419,
        unique2:573,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:19,
        twothousand:19,
        fivethous:419,
        tenthous:419,
        odd:18,
        even:19,
        stringu1:"DQAAAA",
        stringu2:"BWAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:135,
        unique2:574,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:35,
        twothousand:135,
        fivethous:135,
        tenthous:135,
        odd:10,
        even:11,
        stringu1:"FFAAAA",
        stringu2:"CWAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:610,
        unique2:575,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:10,
        twothousand:10,
        fivethous:110,
        tenthous:610,
        odd:0,
        even:1,
        stringu1:"MXAAAA",
        stringu2:"DWAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:956,
        unique2:576,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:56,
        twothousand:156,
        fivethous:456,
        tenthous:956,
        odd:12,
        even:13,
        stringu1:"UKAAAA",
        stringu2:"EWAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:626,
        unique2:577,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:26,
        twothousand:26,
        fivethous:126,
        tenthous:626,
        odd:12,
        even:13,
        stringu1:"CYAAAA",
        stringu2:"FWAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:375,
        unique2:578,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:75,
        twothousand:175,
        fivethous:375,
        tenthous:375,
        odd:10,
        even:11,
        stringu1:"LOAAAA",
        stringu2:"GWAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:976,
        unique2:579,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:76,
        twothousand:176,
        fivethous:476,
        tenthous:976,
        odd:12,
        even:13,
        stringu1:"OLAAAA",
        stringu2:"HWAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:152,
        unique2:580,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:52,
        twothousand:152,
        fivethous:152,
        tenthous:152,
        odd:4,
        even:5,
        stringu1:"WFAAAA",
        stringu2:"IWAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:308,
        unique2:581,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:8,
        twothousand:108,
        fivethous:308,
        tenthous:308,
        odd:16,
        even:17,
        stringu1:"WLAAAA",
        stringu2:"JWAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:445,
        unique2:582,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:45,
        twothousand:45,
        fivethous:445,
        tenthous:445,
        odd:10,
        even:11,
        stringu1:"DRAAAA",
        stringu2:"KWAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:326,
        unique2:583,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:26,
        twothousand:126,
        fivethous:326,
        tenthous:326,
        odd:12,
        even:13,
        stringu1:"OMAAAA",
        stringu2:"LWAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:422,
        unique2:584,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:22,
        twothousand:22,
        fivethous:422,
        tenthous:422,
        odd:4,
        even:5,
        stringu1:"GQAAAA",
        stringu2:"MWAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:972,
        unique2:585,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:72,
        twothousand:172,
        fivethous:472,
        tenthous:972,
        odd:4,
        even:5,
        stringu1:"KLAAAA",
        stringu2:"NWAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:45,
        unique2:586,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:45,
        twothousand:45,
        fivethous:45,
        tenthous:45,
        odd:10,
        even:11,
        stringu1:"TBAAAA",
        stringu2:"OWAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:725,
        unique2:587,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:25,
        twothousand:125,
        fivethous:225,
        tenthous:725,
        odd:10,
        even:11,
        stringu1:"XBAAAA",
        stringu2:"PWAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:753,
        unique2:588,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:53,
        twothousand:153,
        fivethous:253,
        tenthous:753,
        odd:6,
        even:7,
        stringu1:"ZCAAAA",
        stringu2:"QWAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:493,
        unique2:589,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:93,
        twothousand:93,
        fivethous:493,
        tenthous:493,
        odd:6,
        even:7,
        stringu1:"ZSAAAA",
        stringu2:"RWAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:601,
        unique2:590,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:1,
        twothousand:1,
        fivethous:101,
        tenthous:601,
        odd:2,
        even:3,
        stringu1:"DXAAAA",
        stringu2:"SWAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:463,
        unique2:591,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:63,
        twothousand:63,
        fivethous:463,
        tenthous:463,
        odd:6,
        even:7,
        stringu1:"VRAAAA",
        stringu2:"TWAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:303,
        unique2:592,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:3,
        twothousand:103,
        fivethous:303,
        tenthous:303,
        odd:6,
        even:7,
        stringu1:"RLAAAA",
        stringu2:"UWAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:59,
        unique2:593,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:59,
        twothousand:59,
        fivethous:59,
        tenthous:59,
        odd:18,
        even:19,
        stringu1:"HCAAAA",
        stringu2:"VWAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:595,
        unique2:594,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:95,
        twothousand:195,
        fivethous:95,
        tenthous:595,
        odd:10,
        even:11,
        stringu1:"XWAAAA",
        stringu2:"WWAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:807,
        unique2:595,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:7,
        twothousand:7,
        fivethous:307,
        tenthous:807,
        odd:14,
        even:15,
        stringu1:"BFAAAA",
        stringu2:"XWAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:424,
        unique2:596,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:24,
        twothousand:24,
        fivethous:424,
        tenthous:424,
        odd:8,
        even:9,
        stringu1:"IQAAAA",
        stringu2:"YWAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:521,
        unique2:597,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:21,
        twothousand:121,
        fivethous:21,
        tenthous:521,
        odd:2,
        even:3,
        stringu1:"BUAAAA",
        stringu2:"ZWAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:341,
        unique2:598,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:41,
        twothousand:141,
        fivethous:341,
        tenthous:341,
        odd:2,
        even:3,
        stringu1:"DNAAAA",
        stringu2:"AXAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:571,
        unique2:599,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:71,
        twothousand:171,
        fivethous:71,
        tenthous:571,
        odd:2,
        even:3,
        stringu1:"ZVAAAA",
        stringu2:"BXAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:165,
        unique2:600,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:65,
        twothousand:165,
        fivethous:165,
        tenthous:165,
        odd:10,
        even:11,
        stringu1:"JGAAAA",
        stringu2:"CXAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:908,
        unique2:601,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:8,
        twothousand:108,
        fivethous:408,
        tenthous:908,
        odd:16,
        even:17,
        stringu1:"YIAAAA",
        stringu2:"DXAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:351,
        unique2:602,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:51,
        twothousand:151,
        fivethous:351,
        tenthous:351,
        odd:2,
        even:3,
        stringu1:"NNAAAA",
        stringu2:"EXAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:334,
        unique2:603,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:34,
        twothousand:134,
        fivethous:334,
        tenthous:334,
        odd:8,
        even:9,
        stringu1:"WMAAAA",
        stringu2:"FXAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:636,
        unique2:604,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:36,
        twothousand:36,
        fivethous:136,
        tenthous:636,
        odd:12,
        even:13,
        stringu1:"MYAAAA",
        stringu2:"GXAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:138,
        unique2:605,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:38,
        twothousand:138,
        fivethous:138,
        tenthous:138,
        odd:16,
        even:17,
        stringu1:"IFAAAA",
        stringu2:"HXAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:438,
        unique2:606,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:38,
        twothousand:38,
        fivethous:438,
        tenthous:438,
        odd:16,
        even:17,
        stringu1:"WQAAAA",
        stringu2:"IXAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:391,
        unique2:607,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:91,
        twothousand:191,
        fivethous:391,
        tenthous:391,
        odd:2,
        even:3,
        stringu1:"BPAAAA",
        stringu2:"JXAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:395,
        unique2:608,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:95,
        twothousand:195,
        fivethous:395,
        tenthous:395,
        odd:10,
        even:11,
        stringu1:"FPAAAA",
        stringu2:"KXAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:502,
        unique2:609,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:2,
        twothousand:102,
        fivethous:2,
        tenthous:502,
        odd:4,
        even:5,
        stringu1:"ITAAAA",
        stringu2:"LXAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:85,
        unique2:610,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:85,
        twothousand:85,
        fivethous:85,
        tenthous:85,
        odd:10,
        even:11,
        stringu1:"HDAAAA",
        stringu2:"MXAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:786,
        unique2:611,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:86,
        twothousand:186,
        fivethous:286,
        tenthous:786,
        odd:12,
        even:13,
        stringu1:"GEAAAA",
        stringu2:"NXAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:619,
        unique2:612,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:19,
        twothousand:19,
        fivethous:119,
        tenthous:619,
        odd:18,
        even:19,
        stringu1:"VXAAAA",
        stringu2:"OXAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:440,
        unique2:613,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:40,
        twothousand:40,
        fivethous:440,
        tenthous:440,
        odd:0,
        even:1,
        stringu1:"YQAAAA",
        stringu2:"PXAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:949,
        unique2:614,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:49,
        twothousand:149,
        fivethous:449,
        tenthous:949,
        odd:18,
        even:19,
        stringu1:"NKAAAA",
        stringu2:"QXAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:691,
        unique2:615,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:91,
        twothousand:91,
        fivethous:191,
        tenthous:691,
        odd:2,
        even:3,
        stringu1:"PAAAAA",
        stringu2:"RXAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:348,
        unique2:616,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:48,
        twothousand:148,
        fivethous:348,
        tenthous:348,
        odd:16,
        even:17,
        stringu1:"KNAAAA",
        stringu2:"SXAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:506,
        unique2:617,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:6,
        twothousand:106,
        fivethous:6,
        tenthous:506,
        odd:12,
        even:13,
        stringu1:"MTAAAA",
        stringu2:"TXAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:192,
        unique2:618,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:92,
        twothousand:192,
        fivethous:192,
        tenthous:192,
        odd:4,
        even:5,
        stringu1:"KHAAAA",
        stringu2:"UXAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:369,
        unique2:619,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:69,
        twothousand:169,
        fivethous:369,
        tenthous:369,
        odd:18,
        even:19,
        stringu1:"FOAAAA",
        stringu2:"VXAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:311,
        unique2:620,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:11,
        twothousand:111,
        fivethous:311,
        tenthous:311,
        odd:2,
        even:3,
        stringu1:"ZLAAAA",
        stringu2:"WXAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:273,
        unique2:621,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:73,
        twothousand:73,
        fivethous:273,
        tenthous:273,
        odd:6,
        even:7,
        stringu1:"NKAAAA",
        stringu2:"XXAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:770,
        unique2:622,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:70,
        twothousand:170,
        fivethous:270,
        tenthous:770,
        odd:0,
        even:1,
        stringu1:"QDAAAA",
        stringu2:"YXAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:191,
        unique2:623,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:91,
        twothousand:191,
        fivethous:191,
        tenthous:191,
        odd:2,
        even:3,
        stringu1:"JHAAAA",
        stringu2:"ZXAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:90,
        unique2:624,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:90,
        twothousand:90,
        fivethous:90,
        tenthous:90,
        odd:0,
        even:1,
        stringu1:"MDAAAA",
        stringu2:"AYAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:163,
        unique2:625,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:63,
        twothousand:163,
        fivethous:163,
        tenthous:163,
        odd:6,
        even:7,
        stringu1:"HGAAAA",
        stringu2:"BYAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:350,
        unique2:626,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:50,
        twothousand:150,
        fivethous:350,
        tenthous:350,
        odd:0,
        even:1,
        stringu1:"MNAAAA",
        stringu2:"CYAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:55,
        unique2:627,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:55,
        twothousand:55,
        fivethous:55,
        tenthous:55,
        odd:10,
        even:11,
        stringu1:"DCAAAA",
        stringu2:"DYAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:488,
        unique2:628,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:88,
        twothousand:88,
        fivethous:488,
        tenthous:488,
        odd:16,
        even:17,
        stringu1:"USAAAA",
        stringu2:"EYAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:215,
        unique2:629,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:15,
        twothousand:15,
        fivethous:215,
        tenthous:215,
        odd:10,
        even:11,
        stringu1:"HIAAAA",
        stringu2:"FYAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:732,
        unique2:630,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:32,
        twothousand:132,
        fivethous:232,
        tenthous:732,
        odd:4,
        even:5,
        stringu1:"ECAAAA",
        stringu2:"GYAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:688,
        unique2:631,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:88,
        twothousand:88,
        fivethous:188,
        tenthous:688,
        odd:16,
        even:17,
        stringu1:"MAAAAA",
        stringu2:"HYAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:520,
        unique2:632,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:20,
        twothousand:120,
        fivethous:20,
        tenthous:520,
        odd:0,
        even:1,
        stringu1:"AUAAAA",
        stringu2:"IYAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:62,
        unique2:633,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:62,
        twothousand:62,
        fivethous:62,
        tenthous:62,
        odd:4,
        even:5,
        stringu1:"KCAAAA",
        stringu2:"JYAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:423,
        unique2:634,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:23,
        twothousand:23,
        fivethous:423,
        tenthous:423,
        odd:6,
        even:7,
        stringu1:"HQAAAA",
        stringu2:"KYAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:242,
        unique2:635,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:42,
        twothousand:42,
        fivethous:242,
        tenthous:242,
        odd:4,
        even:5,
        stringu1:"IJAAAA",
        stringu2:"LYAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:193,
        unique2:636,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:93,
        twothousand:193,
        fivethous:193,
        tenthous:193,
        odd:6,
        even:7,
        stringu1:"LHAAAA",
        stringu2:"MYAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:648,
        unique2:637,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:48,
        twothousand:48,
        fivethous:148,
        tenthous:648,
        odd:16,
        even:17,
        stringu1:"YYAAAA",
        stringu2:"NYAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:459,
        unique2:638,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:59,
        twothousand:59,
        fivethous:459,
        tenthous:459,
        odd:18,
        even:19,
        stringu1:"RRAAAA",
        stringu2:"OYAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:196,
        unique2:639,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:96,
        twothousand:196,
        fivethous:196,
        tenthous:196,
        odd:12,
        even:13,
        stringu1:"OHAAAA",
        stringu2:"PYAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:476,
        unique2:640,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:76,
        twothousand:76,
        fivethous:476,
        tenthous:476,
        odd:12,
        even:13,
        stringu1:"ISAAAA",
        stringu2:"QYAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:903,
        unique2:641,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:3,
        twothousand:103,
        fivethous:403,
        tenthous:903,
        odd:6,
        even:7,
        stringu1:"TIAAAA",
        stringu2:"RYAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:974,
        unique2:642,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:74,
        twothousand:174,
        fivethous:474,
        tenthous:974,
        odd:8,
        even:9,
        stringu1:"MLAAAA",
        stringu2:"SYAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:603,
        unique2:643,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:3,
        twothousand:3,
        fivethous:103,
        tenthous:603,
        odd:6,
        even:7,
        stringu1:"FXAAAA",
        stringu2:"TYAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:12,
        unique2:644,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:12,
        twothousand:12,
        fivethous:12,
        tenthous:12,
        odd:4,
        even:5,
        stringu1:"MAAAAA",
        stringu2:"UYAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:599,
        unique2:645,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:99,
        twothousand:199,
        fivethous:99,
        tenthous:599,
        odd:18,
        even:19,
        stringu1:"BXAAAA",
        stringu2:"VYAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:914,
        unique2:646,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:14,
        twothousand:114,
        fivethous:414,
        tenthous:914,
        odd:8,
        even:9,
        stringu1:"EJAAAA",
        stringu2:"WYAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:7,
        unique2:647,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:7,
        twothousand:7,
        fivethous:7,
        tenthous:7,
        odd:14,
        even:15,
        stringu1:"HAAAAA",
        stringu2:"XYAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:213,
        unique2:648,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:13,
        twothousand:13,
        fivethous:213,
        tenthous:213,
        odd:6,
        even:7,
        stringu1:"FIAAAA",
        stringu2:"YYAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:174,
        unique2:649,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:74,
        twothousand:174,
        fivethous:174,
        tenthous:174,
        odd:8,
        even:9,
        stringu1:"SGAAAA",
        stringu2:"ZYAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:392,
        unique2:650,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:92,
        twothousand:192,
        fivethous:392,
        tenthous:392,
        odd:4,
        even:5,
        stringu1:"CPAAAA",
        stringu2:"AZAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:674,
        unique2:651,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:74,
        twothousand:74,
        fivethous:174,
        tenthous:674,
        odd:8,
        even:9,
        stringu1:"YZAAAA",
        stringu2:"BZAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:650,
        unique2:652,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:50,
        twothousand:50,
        fivethous:150,
        tenthous:650,
        odd:0,
        even:1,
        stringu1:"AZAAAA",
        stringu2:"CZAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:8,
        unique2:653,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:8,
        twothousand:8,
        fivethous:8,
        tenthous:8,
        odd:16,
        even:17,
        stringu1:"IAAAAA",
        stringu2:"DZAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:492,
        unique2:654,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:92,
        twothousand:92,
        fivethous:492,
        tenthous:492,
        odd:4,
        even:5,
        stringu1:"YSAAAA",
        stringu2:"EZAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:322,
        unique2:655,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:22,
        twothousand:122,
        fivethous:322,
        tenthous:322,
        odd:4,
        even:5,
        stringu1:"KMAAAA",
        stringu2:"FZAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:315,
        unique2:656,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:15,
        twothousand:115,
        fivethous:315,
        tenthous:315,
        odd:10,
        even:11,
        stringu1:"DMAAAA",
        stringu2:"GZAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:380,
        unique2:657,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:80,
        twothousand:180,
        fivethous:380,
        tenthous:380,
        odd:0,
        even:1,
        stringu1:"QOAAAA",
        stringu2:"HZAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:353,
        unique2:658,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:53,
        twothousand:153,
        fivethous:353,
        tenthous:353,
        odd:6,
        even:7,
        stringu1:"PNAAAA",
        stringu2:"IZAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:892,
        unique2:659,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:92,
        twothousand:92,
        fivethous:392,
        tenthous:892,
        odd:4,
        even:5,
        stringu1:"IIAAAA",
        stringu2:"JZAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:932,
        unique2:660,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:32,
        twothousand:132,
        fivethous:432,
        tenthous:932,
        odd:4,
        even:5,
        stringu1:"WJAAAA",
        stringu2:"KZAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:993,
        unique2:661,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:93,
        twothousand:193,
        fivethous:493,
        tenthous:993,
        odd:6,
        even:7,
        stringu1:"FMAAAA",
        stringu2:"LZAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:859,
        unique2:662,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:59,
        twothousand:59,
        fivethous:359,
        tenthous:859,
        odd:18,
        even:19,
        stringu1:"BHAAAA",
        stringu2:"MZAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:806,
        unique2:663,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:6,
        twothousand:6,
        fivethous:306,
        tenthous:806,
        odd:12,
        even:13,
        stringu1:"AFAAAA",
        stringu2:"NZAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:145,
        unique2:664,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:45,
        twothousand:145,
        fivethous:145,
        tenthous:145,
        odd:10,
        even:11,
        stringu1:"PFAAAA",
        stringu2:"OZAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:373,
        unique2:665,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:73,
        twothousand:173,
        fivethous:373,
        tenthous:373,
        odd:6,
        even:7,
        stringu1:"JOAAAA",
        stringu2:"PZAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:418,
        unique2:666,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:18,
        twothousand:18,
        fivethous:418,
        tenthous:418,
        odd:16,
        even:17,
        stringu1:"CQAAAA",
        stringu2:"QZAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:865,
        unique2:667,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:65,
        twothousand:65,
        fivethous:365,
        tenthous:865,
        odd:10,
        even:11,
        stringu1:"HHAAAA",
        stringu2:"RZAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:462,
        unique2:668,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:62,
        twothousand:62,
        fivethous:462,
        tenthous:462,
        odd:4,
        even:5,
        stringu1:"URAAAA",
        stringu2:"SZAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:24,
        unique2:669,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:24,
        twothousand:24,
        fivethous:24,
        tenthous:24,
        odd:8,
        even:9,
        stringu1:"YAAAAA",
        stringu2:"TZAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:920,
        unique2:670,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:20,
        twothousand:120,
        fivethous:420,
        tenthous:920,
        odd:0,
        even:1,
        stringu1:"KJAAAA",
        stringu2:"UZAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:672,
        unique2:671,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:72,
        twothousand:72,
        fivethous:172,
        tenthous:672,
        odd:4,
        even:5,
        stringu1:"WZAAAA",
        stringu2:"VZAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:92,
        unique2:672,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:92,
        twothousand:92,
        fivethous:92,
        tenthous:92,
        odd:4,
        even:5,
        stringu1:"ODAAAA",
        stringu2:"WZAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:721,
        unique2:673,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:21,
        twothousand:121,
        fivethous:221,
        tenthous:721,
        odd:2,
        even:3,
        stringu1:"TBAAAA",
        stringu2:"XZAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:646,
        unique2:674,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:46,
        twothousand:46,
        fivethous:146,
        tenthous:646,
        odd:12,
        even:13,
        stringu1:"WYAAAA",
        stringu2:"YZAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:910,
        unique2:675,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:10,
        twothousand:110,
        fivethous:410,
        tenthous:910,
        odd:0,
        even:1,
        stringu1:"AJAAAA",
        stringu2:"ZZAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:909,
        unique2:676,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:9,
        twothousand:109,
        fivethous:409,
        tenthous:909,
        odd:18,
        even:19,
        stringu1:"ZIAAAA",
        stringu2:"AABAAA",
        string4:"AAAAxx"
      },
      {
        unique1:630,
        unique2:677,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:30,
        twothousand:30,
        fivethous:130,
        tenthous:630,
        odd:0,
        even:1,
        stringu1:"GYAAAA",
        stringu2:"BABAAA",
        string4:"HHHHxx"
      },
      {
        unique1:482,
        unique2:678,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:82,
        twothousand:82,
        fivethous:482,
        tenthous:482,
        odd:4,
        even:5,
        stringu1:"OSAAAA",
        stringu2:"CABAAA",
        string4:"OOOOxx"
      },
      {
        unique1:559,
        unique2:679,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:59,
        twothousand:159,
        fivethous:59,
        tenthous:559,
        odd:18,
        even:19,
        stringu1:"NVAAAA",
        stringu2:"DABAAA",
        string4:"VVVVxx"
      },
      {
        unique1:853,
        unique2:680,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:53,
        twothousand:53,
        fivethous:353,
        tenthous:853,
        odd:6,
        even:7,
        stringu1:"VGAAAA",
        stringu2:"EABAAA",
        string4:"AAAAxx"
      },
      {
        unique1:141,
        unique2:681,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:41,
        twothousand:141,
        fivethous:141,
        tenthous:141,
        odd:2,
        even:3,
        stringu1:"LFAAAA",
        stringu2:"FABAAA",
        string4:"HHHHxx"
      },
      {
        unique1:266,
        unique2:682,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:66,
        twothousand:66,
        fivethous:266,
        tenthous:266,
        odd:12,
        even:13,
        stringu1:"GKAAAA",
        stringu2:"GABAAA",
        string4:"OOOOxx"
      },
      {
        unique1:835,
        unique2:683,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:35,
        twothousand:35,
        fivethous:335,
        tenthous:835,
        odd:10,
        even:11,
        stringu1:"DGAAAA",
        stringu2:"HABAAA",
        string4:"VVVVxx"
      },
      {
        unique1:164,
        unique2:684,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:64,
        twothousand:164,
        fivethous:164,
        tenthous:164,
        odd:8,
        even:9,
        stringu1:"IGAAAA",
        stringu2:"IABAAA",
        string4:"AAAAxx"
      },
      {
        unique1:629,
        unique2:685,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:29,
        twothousand:29,
        fivethous:129,
        tenthous:629,
        odd:18,
        even:19,
        stringu1:"FYAAAA",
        stringu2:"JABAAA",
        string4:"HHHHxx"
      },
      {
        unique1:203,
        unique2:686,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:3,
        twothousand:3,
        fivethous:203,
        tenthous:203,
        odd:6,
        even:7,
        stringu1:"VHAAAA",
        stringu2:"KABAAA",
        string4:"OOOOxx"
      },
      {
        unique1:411,
        unique2:687,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:11,
        twothousand:11,
        fivethous:411,
        tenthous:411,
        odd:2,
        even:3,
        stringu1:"VPAAAA",
        stringu2:"LABAAA",
        string4:"VVVVxx"
      },
      {
        unique1:930,
        unique2:688,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:30,
        twothousand:130,
        fivethous:430,
        tenthous:930,
        odd:0,
        even:1,
        stringu1:"UJAAAA",
        stringu2:"MABAAA",
        string4:"AAAAxx"
      },
      {
        unique1:435,
        unique2:689,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:35,
        twothousand:35,
        fivethous:435,
        tenthous:435,
        odd:10,
        even:11,
        stringu1:"TQAAAA",
        stringu2:"NABAAA",
        string4:"HHHHxx"
      },
      {
        unique1:563,
        unique2:690,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:63,
        twothousand:163,
        fivethous:63,
        tenthous:563,
        odd:6,
        even:7,
        stringu1:"RVAAAA",
        stringu2:"OABAAA",
        string4:"OOOOxx"
      },
      {
        unique1:960,
        unique2:691,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:60,
        twothousand:160,
        fivethous:460,
        tenthous:960,
        odd:0,
        even:1,
        stringu1:"YKAAAA",
        stringu2:"PABAAA",
        string4:"VVVVxx"
      },
      {
        unique1:733,
        unique2:692,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:33,
        twothousand:133,
        fivethous:233,
        tenthous:733,
        odd:6,
        even:7,
        stringu1:"FCAAAA",
        stringu2:"QABAAA",
        string4:"AAAAxx"
      },
      {
        unique1:967,
        unique2:693,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:67,
        twothousand:167,
        fivethous:467,
        tenthous:967,
        odd:14,
        even:15,
        stringu1:"FLAAAA",
        stringu2:"RABAAA",
        string4:"HHHHxx"
      },
      {
        unique1:668,
        unique2:694,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:68,
        twothousand:68,
        fivethous:168,
        tenthous:668,
        odd:16,
        even:17,
        stringu1:"SZAAAA",
        stringu2:"SABAAA",
        string4:"OOOOxx"
      },
      {
        unique1:994,
        unique2:695,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:94,
        twothousand:194,
        fivethous:494,
        tenthous:994,
        odd:8,
        even:9,
        stringu1:"GMAAAA",
        stringu2:"TABAAA",
        string4:"VVVVxx"
      },
      {
        unique1:129,
        unique2:696,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:29,
        twothousand:129,
        fivethous:129,
        tenthous:129,
        odd:18,
        even:19,
        stringu1:"ZEAAAA",
        stringu2:"UABAAA",
        string4:"AAAAxx"
      },
      {
        unique1:954,
        unique2:697,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:54,
        twothousand:154,
        fivethous:454,
        tenthous:954,
        odd:8,
        even:9,
        stringu1:"SKAAAA",
        stringu2:"VABAAA",
        string4:"HHHHxx"
      },
      {
        unique1:68,
        unique2:698,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:68,
        twothousand:68,
        fivethous:68,
        tenthous:68,
        odd:16,
        even:17,
        stringu1:"QCAAAA",
        stringu2:"WABAAA",
        string4:"OOOOxx"
      },
      {
        unique1:79,
        unique2:699,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:79,
        twothousand:79,
        fivethous:79,
        tenthous:79,
        odd:18,
        even:19,
        stringu1:"BDAAAA",
        stringu2:"XABAAA",
        string4:"VVVVxx"
      },
      {
        unique1:121,
        unique2:700,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:21,
        twothousand:121,
        fivethous:121,
        tenthous:121,
        odd:2,
        even:3,
        stringu1:"REAAAA",
        stringu2:"YABAAA",
        string4:"AAAAxx"
      },
      {
        unique1:740,
        unique2:701,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:40,
        twothousand:140,
        fivethous:240,
        tenthous:740,
        odd:0,
        even:1,
        stringu1:"MCAAAA",
        stringu2:"ZABAAA",
        string4:"HHHHxx"
      },
      {
        unique1:902,
        unique2:702,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:2,
        twothousand:102,
        fivethous:402,
        tenthous:902,
        odd:4,
        even:5,
        stringu1:"SIAAAA",
        stringu2:"ABBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:695,
        unique2:703,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:95,
        twothousand:95,
        fivethous:195,
        tenthous:695,
        odd:10,
        even:11,
        stringu1:"TAAAAA",
        stringu2:"BBBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:455,
        unique2:704,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:55,
        twothousand:55,
        fivethous:455,
        tenthous:455,
        odd:10,
        even:11,
        stringu1:"NRAAAA",
        stringu2:"CBBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:89,
        unique2:705,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:89,
        twothousand:89,
        fivethous:89,
        tenthous:89,
        odd:18,
        even:19,
        stringu1:"LDAAAA",
        stringu2:"DBBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:893,
        unique2:706,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:93,
        twothousand:93,
        fivethous:393,
        tenthous:893,
        odd:6,
        even:7,
        stringu1:"JIAAAA",
        stringu2:"EBBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:202,
        unique2:707,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:2,
        twothousand:2,
        fivethous:202,
        tenthous:202,
        odd:4,
        even:5,
        stringu1:"UHAAAA",
        stringu2:"FBBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:132,
        unique2:708,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:32,
        twothousand:132,
        fivethous:132,
        tenthous:132,
        odd:4,
        even:5,
        stringu1:"CFAAAA",
        stringu2:"GBBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:782,
        unique2:709,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:82,
        twothousand:182,
        fivethous:282,
        tenthous:782,
        odd:4,
        even:5,
        stringu1:"CEAAAA",
        stringu2:"HBBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:512,
        unique2:710,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:12,
        twothousand:112,
        fivethous:12,
        tenthous:512,
        odd:4,
        even:5,
        stringu1:"STAAAA",
        stringu2:"IBBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:857,
        unique2:711,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:57,
        twothousand:57,
        fivethous:357,
        tenthous:857,
        odd:14,
        even:15,
        stringu1:"ZGAAAA",
        stringu2:"JBBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:248,
        unique2:712,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:48,
        twothousand:48,
        fivethous:248,
        tenthous:248,
        odd:16,
        even:17,
        stringu1:"OJAAAA",
        stringu2:"KBBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:858,
        unique2:713,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:58,
        twothousand:58,
        fivethous:358,
        tenthous:858,
        odd:16,
        even:17,
        stringu1:"AHAAAA",
        stringu2:"LBBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:527,
        unique2:714,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:27,
        twothousand:127,
        fivethous:27,
        tenthous:527,
        odd:14,
        even:15,
        stringu1:"HUAAAA",
        stringu2:"MBBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:450,
        unique2:715,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:50,
        twothousand:50,
        fivethous:450,
        tenthous:450,
        odd:0,
        even:1,
        stringu1:"IRAAAA",
        stringu2:"NBBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:712,
        unique2:716,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:12,
        twothousand:112,
        fivethous:212,
        tenthous:712,
        odd:4,
        even:5,
        stringu1:"KBAAAA",
        stringu2:"OBBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:153,
        unique2:717,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:53,
        twothousand:153,
        fivethous:153,
        tenthous:153,
        odd:6,
        even:7,
        stringu1:"XFAAAA",
        stringu2:"PBBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:587,
        unique2:718,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:87,
        twothousand:187,
        fivethous:87,
        tenthous:587,
        odd:14,
        even:15,
        stringu1:"PWAAAA",
        stringu2:"QBBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:593,
        unique2:719,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:93,
        twothousand:193,
        fivethous:93,
        tenthous:593,
        odd:6,
        even:7,
        stringu1:"VWAAAA",
        stringu2:"RBBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:249,
        unique2:720,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:49,
        twothousand:49,
        fivethous:249,
        tenthous:249,
        odd:18,
        even:19,
        stringu1:"PJAAAA",
        stringu2:"SBBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:128,
        unique2:721,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:28,
        twothousand:128,
        fivethous:128,
        tenthous:128,
        odd:16,
        even:17,
        stringu1:"YEAAAA",
        stringu2:"TBBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:675,
        unique2:722,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:75,
        twothousand:75,
        fivethous:175,
        tenthous:675,
        odd:10,
        even:11,
        stringu1:"ZZAAAA",
        stringu2:"UBBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:929,
        unique2:723,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:29,
        twothousand:129,
        fivethous:429,
        tenthous:929,
        odd:18,
        even:19,
        stringu1:"TJAAAA",
        stringu2:"VBBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:156,
        unique2:724,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:56,
        twothousand:156,
        fivethous:156,
        tenthous:156,
        odd:12,
        even:13,
        stringu1:"AGAAAA",
        stringu2:"WBBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:415,
        unique2:725,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:15,
        twothousand:15,
        fivethous:415,
        tenthous:415,
        odd:10,
        even:11,
        stringu1:"ZPAAAA",
        stringu2:"XBBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:28,
        unique2:726,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:28,
        twothousand:28,
        fivethous:28,
        tenthous:28,
        odd:16,
        even:17,
        stringu1:"CBAAAA",
        stringu2:"YBBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:18,
        unique2:727,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:18,
        twothousand:18,
        fivethous:18,
        tenthous:18,
        odd:16,
        even:17,
        stringu1:"SAAAAA",
        stringu2:"ZBBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:255,
        unique2:728,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:55,
        twothousand:55,
        fivethous:255,
        tenthous:255,
        odd:10,
        even:11,
        stringu1:"VJAAAA",
        stringu2:"ACBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:793,
        unique2:729,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:93,
        twothousand:193,
        fivethous:293,
        tenthous:793,
        odd:6,
        even:7,
        stringu1:"NEAAAA",
        stringu2:"BCBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:554,
        unique2:730,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:54,
        twothousand:154,
        fivethous:54,
        tenthous:554,
        odd:8,
        even:9,
        stringu1:"IVAAAA",
        stringu2:"CCBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:467,
        unique2:731,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:67,
        twothousand:67,
        fivethous:467,
        tenthous:467,
        odd:14,
        even:15,
        stringu1:"ZRAAAA",
        stringu2:"DCBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:410,
        unique2:732,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:10,
        twothousand:10,
        fivethous:410,
        tenthous:410,
        odd:0,
        even:1,
        stringu1:"UPAAAA",
        stringu2:"ECBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:651,
        unique2:733,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:51,
        twothousand:51,
        fivethous:151,
        tenthous:651,
        odd:2,
        even:3,
        stringu1:"BZAAAA",
        stringu2:"FCBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:287,
        unique2:734,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:87,
        twothousand:87,
        fivethous:287,
        tenthous:287,
        odd:14,
        even:15,
        stringu1:"BLAAAA",
        stringu2:"GCBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:640,
        unique2:735,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:40,
        twothousand:40,
        fivethous:140,
        tenthous:640,
        odd:0,
        even:1,
        stringu1:"QYAAAA",
        stringu2:"HCBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:245,
        unique2:736,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:45,
        twothousand:45,
        fivethous:245,
        tenthous:245,
        odd:10,
        even:11,
        stringu1:"LJAAAA",
        stringu2:"ICBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:21,
        unique2:737,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:21,
        twothousand:21,
        fivethous:21,
        tenthous:21,
        odd:2,
        even:3,
        stringu1:"VAAAAA",
        stringu2:"JCBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:83,
        unique2:738,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:83,
        twothousand:83,
        fivethous:83,
        tenthous:83,
        odd:6,
        even:7,
        stringu1:"FDAAAA",
        stringu2:"KCBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:228,
        unique2:739,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:28,
        twothousand:28,
        fivethous:228,
        tenthous:228,
        odd:16,
        even:17,
        stringu1:"UIAAAA",
        stringu2:"LCBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:323,
        unique2:740,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:23,
        twothousand:123,
        fivethous:323,
        tenthous:323,
        odd:6,
        even:7,
        stringu1:"LMAAAA",
        stringu2:"MCBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:594,
        unique2:741,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:94,
        twothousand:194,
        fivethous:94,
        tenthous:594,
        odd:8,
        even:9,
        stringu1:"WWAAAA",
        stringu2:"NCBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:528,
        unique2:742,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:28,
        twothousand:128,
        fivethous:28,
        tenthous:528,
        odd:16,
        even:17,
        stringu1:"IUAAAA",
        stringu2:"OCBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:276,
        unique2:743,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:76,
        twothousand:76,
        fivethous:276,
        tenthous:276,
        odd:12,
        even:13,
        stringu1:"QKAAAA",
        stringu2:"PCBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:598,
        unique2:744,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:98,
        twothousand:198,
        fivethous:98,
        tenthous:598,
        odd:16,
        even:17,
        stringu1:"AXAAAA",
        stringu2:"QCBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:635,
        unique2:745,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:35,
        twothousand:35,
        fivethous:135,
        tenthous:635,
        odd:10,
        even:11,
        stringu1:"LYAAAA",
        stringu2:"RCBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:868,
        unique2:746,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:68,
        twothousand:68,
        fivethous:368,
        tenthous:868,
        odd:16,
        even:17,
        stringu1:"KHAAAA",
        stringu2:"SCBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:290,
        unique2:747,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:90,
        twothousand:90,
        fivethous:290,
        tenthous:290,
        odd:0,
        even:1,
        stringu1:"ELAAAA",
        stringu2:"TCBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:468,
        unique2:748,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:68,
        twothousand:68,
        fivethous:468,
        tenthous:468,
        odd:16,
        even:17,
        stringu1:"ASAAAA",
        stringu2:"UCBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:689,
        unique2:749,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:89,
        twothousand:89,
        fivethous:189,
        tenthous:689,
        odd:18,
        even:19,
        stringu1:"NAAAAA",
        stringu2:"VCBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:799,
        unique2:750,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:99,
        twothousand:199,
        fivethous:299,
        tenthous:799,
        odd:18,
        even:19,
        stringu1:"TEAAAA",
        stringu2:"WCBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:210,
        unique2:751,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:10,
        twothousand:10,
        fivethous:210,
        tenthous:210,
        odd:0,
        even:1,
        stringu1:"CIAAAA",
        stringu2:"XCBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:346,
        unique2:752,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:46,
        twothousand:146,
        fivethous:346,
        tenthous:346,
        odd:12,
        even:13,
        stringu1:"INAAAA",
        stringu2:"YCBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:957,
        unique2:753,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:57,
        twothousand:157,
        fivethous:457,
        tenthous:957,
        odd:14,
        even:15,
        stringu1:"VKAAAA",
        stringu2:"ZCBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:905,
        unique2:754,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:5,
        twothousand:105,
        fivethous:405,
        tenthous:905,
        odd:10,
        even:11,
        stringu1:"VIAAAA",
        stringu2:"ADBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:523,
        unique2:755,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:23,
        twothousand:123,
        fivethous:23,
        tenthous:523,
        odd:6,
        even:7,
        stringu1:"DUAAAA",
        stringu2:"BDBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:899,
        unique2:756,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:99,
        twothousand:99,
        fivethous:399,
        tenthous:899,
        odd:18,
        even:19,
        stringu1:"PIAAAA",
        stringu2:"CDBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:867,
        unique2:757,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:67,
        twothousand:67,
        fivethous:367,
        tenthous:867,
        odd:14,
        even:15,
        stringu1:"JHAAAA",
        stringu2:"DDBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:11,
        unique2:758,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:11,
        twothousand:11,
        fivethous:11,
        tenthous:11,
        odd:2,
        even:3,
        stringu1:"LAAAAA",
        stringu2:"EDBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:320,
        unique2:759,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:20,
        twothousand:120,
        fivethous:320,
        tenthous:320,
        odd:0,
        even:1,
        stringu1:"IMAAAA",
        stringu2:"FDBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:766,
        unique2:760,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:66,
        twothousand:166,
        fivethous:266,
        tenthous:766,
        odd:12,
        even:13,
        stringu1:"MDAAAA",
        stringu2:"GDBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:84,
        unique2:761,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:84,
        twothousand:84,
        fivethous:84,
        tenthous:84,
        odd:8,
        even:9,
        stringu1:"GDAAAA",
        stringu2:"HDBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:507,
        unique2:762,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:7,
        twothousand:107,
        fivethous:7,
        tenthous:507,
        odd:14,
        even:15,
        stringu1:"NTAAAA",
        stringu2:"IDBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:471,
        unique2:763,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:71,
        twothousand:71,
        fivethous:471,
        tenthous:471,
        odd:2,
        even:3,
        stringu1:"DSAAAA",
        stringu2:"JDBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:517,
        unique2:764,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:17,
        twothousand:117,
        fivethous:17,
        tenthous:517,
        odd:14,
        even:15,
        stringu1:"XTAAAA",
        stringu2:"KDBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:234,
        unique2:765,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:34,
        twothousand:34,
        fivethous:234,
        tenthous:234,
        odd:8,
        even:9,
        stringu1:"AJAAAA",
        stringu2:"LDBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:988,
        unique2:766,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:88,
        twothousand:188,
        fivethous:488,
        tenthous:988,
        odd:16,
        even:17,
        stringu1:"AMAAAA",
        stringu2:"MDBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:473,
        unique2:767,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:73,
        twothousand:73,
        fivethous:473,
        tenthous:473,
        odd:6,
        even:7,
        stringu1:"FSAAAA",
        stringu2:"NDBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:66,
        unique2:768,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:66,
        twothousand:66,
        fivethous:66,
        tenthous:66,
        odd:12,
        even:13,
        stringu1:"OCAAAA",
        stringu2:"ODBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:530,
        unique2:769,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:30,
        twothousand:130,
        fivethous:30,
        tenthous:530,
        odd:0,
        even:1,
        stringu1:"KUAAAA",
        stringu2:"PDBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:834,
        unique2:770,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:34,
        twothousand:34,
        fivethous:334,
        tenthous:834,
        odd:8,
        even:9,
        stringu1:"CGAAAA",
        stringu2:"QDBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:894,
        unique2:771,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:94,
        twothousand:94,
        fivethous:394,
        tenthous:894,
        odd:8,
        even:9,
        stringu1:"KIAAAA",
        stringu2:"RDBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:481,
        unique2:772,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:81,
        twothousand:81,
        fivethous:481,
        tenthous:481,
        odd:2,
        even:3,
        stringu1:"NSAAAA",
        stringu2:"SDBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:280,
        unique2:773,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:80,
        twothousand:80,
        fivethous:280,
        tenthous:280,
        odd:0,
        even:1,
        stringu1:"UKAAAA",
        stringu2:"TDBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:705,
        unique2:774,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:5,
        twothousand:105,
        fivethous:205,
        tenthous:705,
        odd:10,
        even:11,
        stringu1:"DBAAAA",
        stringu2:"UDBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:218,
        unique2:775,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:18,
        twothousand:18,
        fivethous:218,
        tenthous:218,
        odd:16,
        even:17,
        stringu1:"KIAAAA",
        stringu2:"VDBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:560,
        unique2:776,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:60,
        twothousand:160,
        fivethous:60,
        tenthous:560,
        odd:0,
        even:1,
        stringu1:"OVAAAA",
        stringu2:"WDBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:123,
        unique2:777,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:23,
        twothousand:123,
        fivethous:123,
        tenthous:123,
        odd:6,
        even:7,
        stringu1:"TEAAAA",
        stringu2:"XDBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:289,
        unique2:778,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:89,
        twothousand:89,
        fivethous:289,
        tenthous:289,
        odd:18,
        even:19,
        stringu1:"DLAAAA",
        stringu2:"YDBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:189,
        unique2:779,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:89,
        twothousand:189,
        fivethous:189,
        tenthous:189,
        odd:18,
        even:19,
        stringu1:"HHAAAA",
        stringu2:"ZDBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:541,
        unique2:780,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:41,
        twothousand:141,
        fivethous:41,
        tenthous:541,
        odd:2,
        even:3,
        stringu1:"VUAAAA",
        stringu2:"AEBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:876,
        unique2:781,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:76,
        twothousand:76,
        fivethous:376,
        tenthous:876,
        odd:12,
        even:13,
        stringu1:"SHAAAA",
        stringu2:"BEBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:504,
        unique2:782,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:4,
        twothousand:104,
        fivethous:4,
        tenthous:504,
        odd:8,
        even:9,
        stringu1:"KTAAAA",
        stringu2:"CEBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:643,
        unique2:783,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:43,
        twothousand:43,
        fivethous:143,
        tenthous:643,
        odd:6,
        even:7,
        stringu1:"TYAAAA",
        stringu2:"DEBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:73,
        unique2:784,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:73,
        twothousand:73,
        fivethous:73,
        tenthous:73,
        odd:6,
        even:7,
        stringu1:"VCAAAA",
        stringu2:"EEBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:465,
        unique2:785,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:65,
        twothousand:65,
        fivethous:465,
        tenthous:465,
        odd:10,
        even:11,
        stringu1:"XRAAAA",
        stringu2:"FEBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:861,
        unique2:786,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:61,
        twothousand:61,
        fivethous:361,
        tenthous:861,
        odd:2,
        even:3,
        stringu1:"DHAAAA",
        stringu2:"GEBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:355,
        unique2:787,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:55,
        twothousand:155,
        fivethous:355,
        tenthous:355,
        odd:10,
        even:11,
        stringu1:"RNAAAA",
        stringu2:"HEBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:441,
        unique2:788,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:41,
        twothousand:41,
        fivethous:441,
        tenthous:441,
        odd:2,
        even:3,
        stringu1:"ZQAAAA",
        stringu2:"IEBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:219,
        unique2:789,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:19,
        twothousand:19,
        fivethous:219,
        tenthous:219,
        odd:18,
        even:19,
        stringu1:"LIAAAA",
        stringu2:"JEBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:839,
        unique2:790,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:39,
        twothousand:39,
        fivethous:339,
        tenthous:839,
        odd:18,
        even:19,
        stringu1:"HGAAAA",
        stringu2:"KEBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:271,
        unique2:791,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:71,
        twothousand:71,
        fivethous:271,
        tenthous:271,
        odd:2,
        even:3,
        stringu1:"LKAAAA",
        stringu2:"LEBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:212,
        unique2:792,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:12,
        twothousand:12,
        fivethous:212,
        tenthous:212,
        odd:4,
        even:5,
        stringu1:"EIAAAA",
        stringu2:"MEBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:904,
        unique2:793,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:4,
        twothousand:104,
        fivethous:404,
        tenthous:904,
        odd:8,
        even:9,
        stringu1:"UIAAAA",
        stringu2:"NEBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:244,
        unique2:794,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:44,
        twothousand:44,
        fivethous:244,
        tenthous:244,
        odd:8,
        even:9,
        stringu1:"KJAAAA",
        stringu2:"OEBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:751,
        unique2:795,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:51,
        twothousand:151,
        fivethous:251,
        tenthous:751,
        odd:2,
        even:3,
        stringu1:"XCAAAA",
        stringu2:"PEBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:944,
        unique2:796,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:44,
        twothousand:144,
        fivethous:444,
        tenthous:944,
        odd:8,
        even:9,
        stringu1:"IKAAAA",
        stringu2:"QEBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:305,
        unique2:797,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:5,
        twothousand:105,
        fivethous:305,
        tenthous:305,
        odd:10,
        even:11,
        stringu1:"TLAAAA",
        stringu2:"REBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:617,
        unique2:798,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:17,
        twothousand:17,
        fivethous:117,
        tenthous:617,
        odd:14,
        even:15,
        stringu1:"TXAAAA",
        stringu2:"SEBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:891,
        unique2:799,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:91,
        twothousand:91,
        fivethous:391,
        tenthous:891,
        odd:2,
        even:3,
        stringu1:"HIAAAA",
        stringu2:"TEBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:653,
        unique2:800,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:53,
        twothousand:53,
        fivethous:153,
        tenthous:653,
        odd:6,
        even:7,
        stringu1:"DZAAAA",
        stringu2:"UEBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:845,
        unique2:801,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:45,
        twothousand:45,
        fivethous:345,
        tenthous:845,
        odd:10,
        even:11,
        stringu1:"NGAAAA",
        stringu2:"VEBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:936,
        unique2:802,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:36,
        twothousand:136,
        fivethous:436,
        tenthous:936,
        odd:12,
        even:13,
        stringu1:"AKAAAA",
        stringu2:"WEBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:91,
        unique2:803,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:91,
        twothousand:91,
        fivethous:91,
        tenthous:91,
        odd:2,
        even:3,
        stringu1:"NDAAAA",
        stringu2:"XEBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:442,
        unique2:804,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:42,
        twothousand:42,
        fivethous:442,
        tenthous:442,
        odd:4,
        even:5,
        stringu1:"ARAAAA",
        stringu2:"YEBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:498,
        unique2:805,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:98,
        twothousand:98,
        fivethous:498,
        tenthous:498,
        odd:16,
        even:17,
        stringu1:"ETAAAA",
        stringu2:"ZEBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:987,
        unique2:806,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:87,
        twothousand:187,
        fivethous:487,
        tenthous:987,
        odd:14,
        even:15,
        stringu1:"ZLAAAA",
        stringu2:"AFBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:194,
        unique2:807,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:94,
        twothousand:194,
        fivethous:194,
        tenthous:194,
        odd:8,
        even:9,
        stringu1:"MHAAAA",
        stringu2:"BFBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:927,
        unique2:808,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:27,
        twothousand:127,
        fivethous:427,
        tenthous:927,
        odd:14,
        even:15,
        stringu1:"RJAAAA",
        stringu2:"CFBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:607,
        unique2:809,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:7,
        twothousand:7,
        fivethous:107,
        tenthous:607,
        odd:14,
        even:15,
        stringu1:"JXAAAA",
        stringu2:"DFBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:119,
        unique2:810,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:19,
        twothousand:119,
        fivethous:119,
        tenthous:119,
        odd:18,
        even:19,
        stringu1:"PEAAAA",
        stringu2:"EFBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:182,
        unique2:811,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:82,
        twothousand:182,
        fivethous:182,
        tenthous:182,
        odd:4,
        even:5,
        stringu1:"AHAAAA",
        stringu2:"FFBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:606,
        unique2:812,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:6,
        twothousand:6,
        fivethous:106,
        tenthous:606,
        odd:12,
        even:13,
        stringu1:"IXAAAA",
        stringu2:"GFBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:849,
        unique2:813,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:49,
        twothousand:49,
        fivethous:349,
        tenthous:849,
        odd:18,
        even:19,
        stringu1:"RGAAAA",
        stringu2:"HFBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:34,
        unique2:814,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:34,
        twothousand:34,
        fivethous:34,
        tenthous:34,
        odd:8,
        even:9,
        stringu1:"IBAAAA",
        stringu2:"IFBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:683,
        unique2:815,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:83,
        twothousand:83,
        fivethous:183,
        tenthous:683,
        odd:6,
        even:7,
        stringu1:"HAAAAA",
        stringu2:"JFBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:134,
        unique2:816,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:34,
        twothousand:134,
        fivethous:134,
        tenthous:134,
        odd:8,
        even:9,
        stringu1:"EFAAAA",
        stringu2:"KFBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:331,
        unique2:817,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:31,
        twothousand:131,
        fivethous:331,
        tenthous:331,
        odd:2,
        even:3,
        stringu1:"TMAAAA",
        stringu2:"LFBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:808,
        unique2:818,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:8,
        twothousand:8,
        fivethous:308,
        tenthous:808,
        odd:16,
        even:17,
        stringu1:"CFAAAA",
        stringu2:"MFBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:703,
        unique2:819,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:3,
        twothousand:103,
        fivethous:203,
        tenthous:703,
        odd:6,
        even:7,
        stringu1:"BBAAAA",
        stringu2:"NFBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:669,
        unique2:820,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:69,
        twothousand:69,
        fivethous:169,
        tenthous:669,
        odd:18,
        even:19,
        stringu1:"TZAAAA",
        stringu2:"OFBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:264,
        unique2:821,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:64,
        twothousand:64,
        fivethous:264,
        tenthous:264,
        odd:8,
        even:9,
        stringu1:"EKAAAA",
        stringu2:"PFBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:277,
        unique2:822,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:77,
        twothousand:77,
        fivethous:277,
        tenthous:277,
        odd:14,
        even:15,
        stringu1:"RKAAAA",
        stringu2:"QFBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:877,
        unique2:823,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:77,
        twothousand:77,
        fivethous:377,
        tenthous:877,
        odd:14,
        even:15,
        stringu1:"THAAAA",
        stringu2:"RFBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:783,
        unique2:824,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:83,
        twothousand:183,
        fivethous:283,
        tenthous:783,
        odd:6,
        even:7,
        stringu1:"DEAAAA",
        stringu2:"SFBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:791,
        unique2:825,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:91,
        twothousand:191,
        fivethous:291,
        tenthous:791,
        odd:2,
        even:3,
        stringu1:"LEAAAA",
        stringu2:"TFBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:171,
        unique2:826,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:71,
        twothousand:171,
        fivethous:171,
        tenthous:171,
        odd:2,
        even:3,
        stringu1:"PGAAAA",
        stringu2:"UFBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:564,
        unique2:827,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:64,
        twothousand:164,
        fivethous:64,
        tenthous:564,
        odd:8,
        even:9,
        stringu1:"SVAAAA",
        stringu2:"VFBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:230,
        unique2:828,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:30,
        twothousand:30,
        fivethous:230,
        tenthous:230,
        odd:0,
        even:1,
        stringu1:"WIAAAA",
        stringu2:"WFBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:881,
        unique2:829,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:81,
        twothousand:81,
        fivethous:381,
        tenthous:881,
        odd:2,
        even:3,
        stringu1:"XHAAAA",
        stringu2:"XFBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:890,
        unique2:830,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:90,
        twothousand:90,
        fivethous:390,
        tenthous:890,
        odd:0,
        even:1,
        stringu1:"GIAAAA",
        stringu2:"YFBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:374,
        unique2:831,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:74,
        twothousand:174,
        fivethous:374,
        tenthous:374,
        odd:8,
        even:9,
        stringu1:"KOAAAA",
        stringu2:"ZFBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:697,
        unique2:832,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:97,
        twothousand:97,
        fivethous:197,
        tenthous:697,
        odd:14,
        even:15,
        stringu1:"VAAAAA",
        stringu2:"AGBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:4,
        unique2:833,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:4,
        twothousand:4,
        fivethous:4,
        tenthous:4,
        odd:8,
        even:9,
        stringu1:"EAAAAA",
        stringu2:"BGBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:385,
        unique2:834,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:85,
        twothousand:185,
        fivethous:385,
        tenthous:385,
        odd:10,
        even:11,
        stringu1:"VOAAAA",
        stringu2:"CGBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:739,
        unique2:835,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:39,
        twothousand:139,
        fivethous:239,
        tenthous:739,
        odd:18,
        even:19,
        stringu1:"LCAAAA",
        stringu2:"DGBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:623,
        unique2:836,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:23,
        twothousand:23,
        fivethous:123,
        tenthous:623,
        odd:6,
        even:7,
        stringu1:"ZXAAAA",
        stringu2:"EGBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:547,
        unique2:837,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:47,
        twothousand:147,
        fivethous:47,
        tenthous:547,
        odd:14,
        even:15,
        stringu1:"BVAAAA",
        stringu2:"FGBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:532,
        unique2:838,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:32,
        twothousand:132,
        fivethous:32,
        tenthous:532,
        odd:4,
        even:5,
        stringu1:"MUAAAA",
        stringu2:"GGBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:383,
        unique2:839,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:83,
        twothousand:183,
        fivethous:383,
        tenthous:383,
        odd:6,
        even:7,
        stringu1:"TOAAAA",
        stringu2:"HGBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:181,
        unique2:840,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:81,
        twothousand:181,
        fivethous:181,
        tenthous:181,
        odd:2,
        even:3,
        stringu1:"ZGAAAA",
        stringu2:"IGBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:327,
        unique2:841,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:27,
        twothousand:127,
        fivethous:327,
        tenthous:327,
        odd:14,
        even:15,
        stringu1:"PMAAAA",
        stringu2:"JGBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:701,
        unique2:842,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:1,
        twothousand:101,
        fivethous:201,
        tenthous:701,
        odd:2,
        even:3,
        stringu1:"ZAAAAA",
        stringu2:"KGBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:111,
        unique2:843,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:11,
        twothousand:111,
        fivethous:111,
        tenthous:111,
        odd:2,
        even:3,
        stringu1:"HEAAAA",
        stringu2:"LGBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:977,
        unique2:844,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:77,
        twothousand:177,
        fivethous:477,
        tenthous:977,
        odd:14,
        even:15,
        stringu1:"PLAAAA",
        stringu2:"MGBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:431,
        unique2:845,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:31,
        twothousand:31,
        fivethous:431,
        tenthous:431,
        odd:2,
        even:3,
        stringu1:"PQAAAA",
        stringu2:"NGBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:456,
        unique2:846,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:56,
        twothousand:56,
        fivethous:456,
        tenthous:456,
        odd:12,
        even:13,
        stringu1:"ORAAAA",
        stringu2:"OGBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:368,
        unique2:847,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:68,
        twothousand:168,
        fivethous:368,
        tenthous:368,
        odd:16,
        even:17,
        stringu1:"EOAAAA",
        stringu2:"PGBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:32,
        unique2:848,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:32,
        twothousand:32,
        fivethous:32,
        tenthous:32,
        odd:4,
        even:5,
        stringu1:"GBAAAA",
        stringu2:"QGBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:125,
        unique2:849,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:25,
        twothousand:125,
        fivethous:125,
        tenthous:125,
        odd:10,
        even:11,
        stringu1:"VEAAAA",
        stringu2:"RGBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:847,
        unique2:850,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:47,
        twothousand:47,
        fivethous:347,
        tenthous:847,
        odd:14,
        even:15,
        stringu1:"PGAAAA",
        stringu2:"SGBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:485,
        unique2:851,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:85,
        twothousand:85,
        fivethous:485,
        tenthous:485,
        odd:10,
        even:11,
        stringu1:"RSAAAA",
        stringu2:"TGBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:387,
        unique2:852,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:87,
        twothousand:187,
        fivethous:387,
        tenthous:387,
        odd:14,
        even:15,
        stringu1:"XOAAAA",
        stringu2:"UGBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:288,
        unique2:853,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:88,
        twothousand:88,
        fivethous:288,
        tenthous:288,
        odd:16,
        even:17,
        stringu1:"CLAAAA",
        stringu2:"VGBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:919,
        unique2:854,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:19,
        twothousand:119,
        fivethous:419,
        tenthous:919,
        odd:18,
        even:19,
        stringu1:"JJAAAA",
        stringu2:"WGBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:393,
        unique2:855,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:93,
        twothousand:193,
        fivethous:393,
        tenthous:393,
        odd:6,
        even:7,
        stringu1:"DPAAAA",
        stringu2:"XGBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:953,
        unique2:856,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:53,
        twothousand:153,
        fivethous:453,
        tenthous:953,
        odd:6,
        even:7,
        stringu1:"RKAAAA",
        stringu2:"YGBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:798,
        unique2:857,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:98,
        twothousand:198,
        fivethous:298,
        tenthous:798,
        odd:16,
        even:17,
        stringu1:"SEAAAA",
        stringu2:"ZGBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:940,
        unique2:858,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:40,
        twothousand:140,
        fivethous:440,
        tenthous:940,
        odd:0,
        even:1,
        stringu1:"EKAAAA",
        stringu2:"AHBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:198,
        unique2:859,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:98,
        twothousand:198,
        fivethous:198,
        tenthous:198,
        odd:16,
        even:17,
        stringu1:"QHAAAA",
        stringu2:"BHBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:25,
        unique2:860,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:25,
        twothousand:25,
        fivethous:25,
        tenthous:25,
        odd:10,
        even:11,
        stringu1:"ZAAAAA",
        stringu2:"CHBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:190,
        unique2:861,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:90,
        twothousand:190,
        fivethous:190,
        tenthous:190,
        odd:0,
        even:1,
        stringu1:"IHAAAA",
        stringu2:"DHBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:820,
        unique2:862,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:20,
        twothousand:20,
        fivethous:320,
        tenthous:820,
        odd:0,
        even:1,
        stringu1:"OFAAAA",
        stringu2:"EHBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:15,
        unique2:863,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:15,
        twothousand:15,
        fivethous:15,
        tenthous:15,
        odd:10,
        even:11,
        stringu1:"PAAAAA",
        stringu2:"FHBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:427,
        unique2:864,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:27,
        twothousand:27,
        fivethous:427,
        tenthous:427,
        odd:14,
        even:15,
        stringu1:"LQAAAA",
        stringu2:"GHBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:349,
        unique2:865,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:49,
        twothousand:149,
        fivethous:349,
        tenthous:349,
        odd:18,
        even:19,
        stringu1:"LNAAAA",
        stringu2:"HHBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:785,
        unique2:866,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:85,
        twothousand:185,
        fivethous:285,
        tenthous:785,
        odd:10,
        even:11,
        stringu1:"FEAAAA",
        stringu2:"IHBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:340,
        unique2:867,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:40,
        twothousand:140,
        fivethous:340,
        tenthous:340,
        odd:0,
        even:1,
        stringu1:"CNAAAA",
        stringu2:"JHBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:292,
        unique2:868,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:92,
        twothousand:92,
        fivethous:292,
        tenthous:292,
        odd:4,
        even:5,
        stringu1:"GLAAAA",
        stringu2:"KHBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:17,
        unique2:869,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:17,
        twothousand:17,
        fivethous:17,
        tenthous:17,
        odd:14,
        even:15,
        stringu1:"RAAAAA",
        stringu2:"LHBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:985,
        unique2:870,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:85,
        twothousand:185,
        fivethous:485,
        tenthous:985,
        odd:10,
        even:11,
        stringu1:"XLAAAA",
        stringu2:"MHBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:645,
        unique2:871,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:45,
        twothousand:45,
        fivethous:145,
        tenthous:645,
        odd:10,
        even:11,
        stringu1:"VYAAAA",
        stringu2:"NHBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:631,
        unique2:872,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:31,
        twothousand:31,
        fivethous:131,
        tenthous:631,
        odd:2,
        even:3,
        stringu1:"HYAAAA",
        stringu2:"OHBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:761,
        unique2:873,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:61,
        twothousand:161,
        fivethous:261,
        tenthous:761,
        odd:2,
        even:3,
        stringu1:"HDAAAA",
        stringu2:"PHBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:707,
        unique2:874,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:7,
        twothousand:107,
        fivethous:207,
        tenthous:707,
        odd:14,
        even:15,
        stringu1:"FBAAAA",
        stringu2:"QHBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:776,
        unique2:875,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:76,
        twothousand:176,
        fivethous:276,
        tenthous:776,
        odd:12,
        even:13,
        stringu1:"WDAAAA",
        stringu2:"RHBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:856,
        unique2:876,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:56,
        twothousand:56,
        fivethous:356,
        tenthous:856,
        odd:12,
        even:13,
        stringu1:"YGAAAA",
        stringu2:"SHBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:978,
        unique2:877,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:78,
        twothousand:178,
        fivethous:478,
        tenthous:978,
        odd:16,
        even:17,
        stringu1:"QLAAAA",
        stringu2:"THBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:710,
        unique2:878,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:10,
        twothousand:110,
        fivethous:210,
        tenthous:710,
        odd:0,
        even:1,
        stringu1:"IBAAAA",
        stringu2:"UHBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:604,
        unique2:879,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:4,
        twothousand:4,
        fivethous:104,
        tenthous:604,
        odd:8,
        even:9,
        stringu1:"GXAAAA",
        stringu2:"VHBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:291,
        unique2:880,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:91,
        twothousand:91,
        fivethous:291,
        tenthous:291,
        odd:2,
        even:3,
        stringu1:"FLAAAA",
        stringu2:"WHBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:747,
        unique2:881,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:47,
        twothousand:147,
        fivethous:247,
        tenthous:747,
        odd:14,
        even:15,
        stringu1:"TCAAAA",
        stringu2:"XHBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:837,
        unique2:882,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:37,
        twothousand:37,
        fivethous:337,
        tenthous:837,
        odd:14,
        even:15,
        stringu1:"FGAAAA",
        stringu2:"YHBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:722,
        unique2:883,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:22,
        twothousand:122,
        fivethous:222,
        tenthous:722,
        odd:4,
        even:5,
        stringu1:"UBAAAA",
        stringu2:"ZHBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:925,
        unique2:884,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:25,
        twothousand:125,
        fivethous:425,
        tenthous:925,
        odd:10,
        even:11,
        stringu1:"PJAAAA",
        stringu2:"AIBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:49,
        unique2:885,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:49,
        twothousand:49,
        fivethous:49,
        tenthous:49,
        odd:18,
        even:19,
        stringu1:"XBAAAA",
        stringu2:"BIBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:832,
        unique2:886,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:32,
        twothousand:32,
        fivethous:332,
        tenthous:832,
        odd:4,
        even:5,
        stringu1:"AGAAAA",
        stringu2:"CIBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:336,
        unique2:887,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:36,
        twothousand:136,
        fivethous:336,
        tenthous:336,
        odd:12,
        even:13,
        stringu1:"YMAAAA",
        stringu2:"DIBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:185,
        unique2:888,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:85,
        twothousand:185,
        fivethous:185,
        tenthous:185,
        odd:10,
        even:11,
        stringu1:"DHAAAA",
        stringu2:"EIBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:434,
        unique2:889,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:34,
        twothousand:34,
        fivethous:434,
        tenthous:434,
        odd:8,
        even:9,
        stringu1:"SQAAAA",
        stringu2:"FIBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:284,
        unique2:890,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:84,
        twothousand:84,
        fivethous:284,
        tenthous:284,
        odd:8,
        even:9,
        stringu1:"YKAAAA",
        stringu2:"GIBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:812,
        unique2:891,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:12,
        twothousand:12,
        fivethous:312,
        tenthous:812,
        odd:4,
        even:5,
        stringu1:"GFAAAA",
        stringu2:"HIBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:810,
        unique2:892,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:10,
        twothousand:10,
        fivethous:310,
        tenthous:810,
        odd:0,
        even:1,
        stringu1:"EFAAAA",
        stringu2:"IIBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:252,
        unique2:893,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:52,
        twothousand:52,
        fivethous:252,
        tenthous:252,
        odd:4,
        even:5,
        stringu1:"SJAAAA",
        stringu2:"JIBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:965,
        unique2:894,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:65,
        twothousand:165,
        fivethous:465,
        tenthous:965,
        odd:10,
        even:11,
        stringu1:"DLAAAA",
        stringu2:"KIBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:110,
        unique2:895,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:10,
        twothousand:110,
        fivethous:110,
        tenthous:110,
        odd:0,
        even:1,
        stringu1:"GEAAAA",
        stringu2:"LIBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:698,
        unique2:896,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:98,
        twothousand:98,
        fivethous:198,
        tenthous:698,
        odd:16,
        even:17,
        stringu1:"WAAAAA",
        stringu2:"MIBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:283,
        unique2:897,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:83,
        twothousand:83,
        fivethous:283,
        tenthous:283,
        odd:6,
        even:7,
        stringu1:"XKAAAA",
        stringu2:"NIBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:533,
        unique2:898,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:33,
        twothousand:133,
        fivethous:33,
        tenthous:533,
        odd:6,
        even:7,
        stringu1:"NUAAAA",
        stringu2:"OIBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:662,
        unique2:899,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:62,
        twothousand:62,
        fivethous:162,
        tenthous:662,
        odd:4,
        even:5,
        stringu1:"MZAAAA",
        stringu2:"PIBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:329,
        unique2:900,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:29,
        twothousand:129,
        fivethous:329,
        tenthous:329,
        odd:18,
        even:19,
        stringu1:"RMAAAA",
        stringu2:"QIBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:250,
        unique2:901,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:50,
        twothousand:50,
        fivethous:250,
        tenthous:250,
        odd:0,
        even:1,
        stringu1:"QJAAAA",
        stringu2:"RIBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:407,
        unique2:902,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:7,
        twothousand:7,
        fivethous:407,
        tenthous:407,
        odd:14,
        even:15,
        stringu1:"RPAAAA",
        stringu2:"SIBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:823,
        unique2:903,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:23,
        twothousand:23,
        fivethous:323,
        tenthous:823,
        odd:6,
        even:7,
        stringu1:"RFAAAA",
        stringu2:"TIBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:852,
        unique2:904,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:52,
        twothousand:52,
        fivethous:352,
        tenthous:852,
        odd:4,
        even:5,
        stringu1:"UGAAAA",
        stringu2:"UIBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:871,
        unique2:905,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:71,
        twothousand:71,
        fivethous:371,
        tenthous:871,
        odd:2,
        even:3,
        stringu1:"NHAAAA",
        stringu2:"VIBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:118,
        unique2:906,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:18,
        twothousand:118,
        fivethous:118,
        tenthous:118,
        odd:16,
        even:17,
        stringu1:"OEAAAA",
        stringu2:"WIBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:912,
        unique2:907,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:12,
        twothousand:112,
        fivethous:412,
        tenthous:912,
        odd:4,
        even:5,
        stringu1:"CJAAAA",
        stringu2:"XIBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:458,
        unique2:908,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:58,
        twothousand:58,
        fivethous:458,
        tenthous:458,
        odd:16,
        even:17,
        stringu1:"QRAAAA",
        stringu2:"YIBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:926,
        unique2:909,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:26,
        twothousand:126,
        fivethous:426,
        tenthous:926,
        odd:12,
        even:13,
        stringu1:"QJAAAA",
        stringu2:"ZIBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:328,
        unique2:910,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:28,
        twothousand:128,
        fivethous:328,
        tenthous:328,
        odd:16,
        even:17,
        stringu1:"QMAAAA",
        stringu2:"AJBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:980,
        unique2:911,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:80,
        twothousand:180,
        fivethous:480,
        tenthous:980,
        odd:0,
        even:1,
        stringu1:"SLAAAA",
        stringu2:"BJBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:259,
        unique2:912,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:59,
        twothousand:59,
        fivethous:259,
        tenthous:259,
        odd:18,
        even:19,
        stringu1:"ZJAAAA",
        stringu2:"CJBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:900,
        unique2:913,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:0,
        twothousand:100,
        fivethous:400,
        tenthous:900,
        odd:0,
        even:1,
        stringu1:"QIAAAA",
        stringu2:"DJBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:137,
        unique2:914,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:37,
        twothousand:137,
        fivethous:137,
        tenthous:137,
        odd:14,
        even:15,
        stringu1:"HFAAAA",
        stringu2:"EJBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:159,
        unique2:915,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:59,
        twothousand:159,
        fivethous:159,
        tenthous:159,
        odd:18,
        even:19,
        stringu1:"DGAAAA",
        stringu2:"FJBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:243,
        unique2:916,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:43,
        twothousand:43,
        fivethous:243,
        tenthous:243,
        odd:6,
        even:7,
        stringu1:"JJAAAA",
        stringu2:"GJBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:472,
        unique2:917,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:72,
        twothousand:72,
        fivethous:472,
        tenthous:472,
        odd:4,
        even:5,
        stringu1:"ESAAAA",
        stringu2:"HJBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:796,
        unique2:918,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:96,
        twothousand:196,
        fivethous:296,
        tenthous:796,
        odd:12,
        even:13,
        stringu1:"QEAAAA",
        stringu2:"IJBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:382,
        unique2:919,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:82,
        twothousand:182,
        fivethous:382,
        tenthous:382,
        odd:4,
        even:5,
        stringu1:"SOAAAA",
        stringu2:"JJBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:911,
        unique2:920,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:11,
        twothousand:111,
        fivethous:411,
        tenthous:911,
        odd:2,
        even:3,
        stringu1:"BJAAAA",
        stringu2:"KJBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:179,
        unique2:921,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:79,
        twothousand:179,
        fivethous:179,
        tenthous:179,
        odd:18,
        even:19,
        stringu1:"XGAAAA",
        stringu2:"LJBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:778,
        unique2:922,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:78,
        twothousand:178,
        fivethous:278,
        tenthous:778,
        odd:16,
        even:17,
        stringu1:"YDAAAA",
        stringu2:"MJBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:405,
        unique2:923,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:5,
        twothousand:5,
        fivethous:405,
        tenthous:405,
        odd:10,
        even:11,
        stringu1:"PPAAAA",
        stringu2:"NJBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:265,
        unique2:924,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:65,
        twothousand:65,
        fivethous:265,
        tenthous:265,
        odd:10,
        even:11,
        stringu1:"FKAAAA",
        stringu2:"OJBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:556,
        unique2:925,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:56,
        twothousand:156,
        fivethous:56,
        tenthous:556,
        odd:12,
        even:13,
        stringu1:"KVAAAA",
        stringu2:"PJBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:16,
        unique2:926,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:16,
        twothousand:16,
        fivethous:16,
        tenthous:16,
        odd:12,
        even:13,
        stringu1:"QAAAAA",
        stringu2:"QJBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:706,
        unique2:927,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:6,
        twothousand:106,
        fivethous:206,
        tenthous:706,
        odd:12,
        even:13,
        stringu1:"EBAAAA",
        stringu2:"RJBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:497,
        unique2:928,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:97,
        twothousand:97,
        fivethous:497,
        tenthous:497,
        odd:14,
        even:15,
        stringu1:"DTAAAA",
        stringu2:"SJBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:708,
        unique2:929,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:8,
        twothousand:108,
        fivethous:208,
        tenthous:708,
        odd:16,
        even:17,
        stringu1:"GBAAAA",
        stringu2:"TJBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:46,
        unique2:930,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:46,
        twothousand:46,
        fivethous:46,
        tenthous:46,
        odd:12,
        even:13,
        stringu1:"UBAAAA",
        stringu2:"UJBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:901,
        unique2:931,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:1,
        twothousand:101,
        fivethous:401,
        tenthous:901,
        odd:2,
        even:3,
        stringu1:"RIAAAA",
        stringu2:"VJBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:416,
        unique2:932,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:16,
        twothousand:16,
        fivethous:416,
        tenthous:416,
        odd:12,
        even:13,
        stringu1:"AQAAAA",
        stringu2:"WJBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:307,
        unique2:933,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:7,
        twothousand:107,
        fivethous:307,
        tenthous:307,
        odd:14,
        even:15,
        stringu1:"VLAAAA",
        stringu2:"XJBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:166,
        unique2:934,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:66,
        twothousand:166,
        fivethous:166,
        tenthous:166,
        odd:12,
        even:13,
        stringu1:"KGAAAA",
        stringu2:"YJBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:178,
        unique2:935,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:78,
        twothousand:178,
        fivethous:178,
        tenthous:178,
        odd:16,
        even:17,
        stringu1:"WGAAAA",
        stringu2:"ZJBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:499,
        unique2:936,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:99,
        twothousand:99,
        fivethous:499,
        tenthous:499,
        odd:18,
        even:19,
        stringu1:"FTAAAA",
        stringu2:"AKBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:257,
        unique2:937,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:57,
        twothousand:57,
        fivethous:257,
        tenthous:257,
        odd:14,
        even:15,
        stringu1:"XJAAAA",
        stringu2:"BKBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:342,
        unique2:938,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:42,
        twothousand:142,
        fivethous:342,
        tenthous:342,
        odd:4,
        even:5,
        stringu1:"ENAAAA",
        stringu2:"CKBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:850,
        unique2:939,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:50,
        twothousand:50,
        fivethous:350,
        tenthous:850,
        odd:0,
        even:1,
        stringu1:"SGAAAA",
        stringu2:"DKBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:313,
        unique2:940,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:13,
        twothousand:113,
        fivethous:313,
        tenthous:313,
        odd:6,
        even:7,
        stringu1:"BMAAAA",
        stringu2:"EKBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:831,
        unique2:941,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:31,
        twothousand:31,
        fivethous:331,
        tenthous:831,
        odd:2,
        even:3,
        stringu1:"ZFAAAA",
        stringu2:"FKBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:57,
        unique2:942,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:57,
        twothousand:57,
        fivethous:57,
        tenthous:57,
        odd:14,
        even:15,
        stringu1:"FCAAAA",
        stringu2:"GKBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:37,
        unique2:943,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:37,
        twothousand:37,
        fivethous:37,
        tenthous:37,
        odd:14,
        even:15,
        stringu1:"LBAAAA",
        stringu2:"HKBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:511,
        unique2:944,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:11,
        twothousand:111,
        fivethous:11,
        tenthous:511,
        odd:2,
        even:3,
        stringu1:"RTAAAA",
        stringu2:"IKBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:578,
        unique2:945,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:78,
        twothousand:178,
        fivethous:78,
        tenthous:578,
        odd:16,
        even:17,
        stringu1:"GWAAAA",
        stringu2:"JKBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:100,
        unique2:946,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:0,
        twothousand:100,
        fivethous:100,
        tenthous:100,
        odd:0,
        even:1,
        stringu1:"WDAAAA",
        stringu2:"KKBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:935,
        unique2:947,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:35,
        twothousand:135,
        fivethous:435,
        tenthous:935,
        odd:10,
        even:11,
        stringu1:"ZJAAAA",
        stringu2:"LKBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:821,
        unique2:948,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:21,
        twothousand:21,
        fivethous:321,
        tenthous:821,
        odd:2,
        even:3,
        stringu1:"PFAAAA",
        stringu2:"MKBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:294,
        unique2:949,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:94,
        twothousand:94,
        fivethous:294,
        tenthous:294,
        odd:8,
        even:9,
        stringu1:"ILAAAA",
        stringu2:"NKBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:575,
        unique2:950,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:75,
        twothousand:175,
        fivethous:75,
        tenthous:575,
        odd:10,
        even:11,
        stringu1:"DWAAAA",
        stringu2:"OKBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:272,
        unique2:951,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:72,
        twothousand:72,
        fivethous:272,
        tenthous:272,
        odd:4,
        even:5,
        stringu1:"MKAAAA",
        stringu2:"PKBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:491,
        unique2:952,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:91,
        twothousand:91,
        fivethous:491,
        tenthous:491,
        odd:2,
        even:3,
        stringu1:"XSAAAA",
        stringu2:"QKBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:43,
        unique2:953,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:43,
        twothousand:43,
        fivethous:43,
        tenthous:43,
        odd:6,
        even:7,
        stringu1:"RBAAAA",
        stringu2:"RKBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:167,
        unique2:954,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:67,
        twothousand:167,
        fivethous:167,
        tenthous:167,
        odd:14,
        even:15,
        stringu1:"LGAAAA",
        stringu2:"SKBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:457,
        unique2:955,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:57,
        twothousand:57,
        fivethous:457,
        tenthous:457,
        odd:14,
        even:15,
        stringu1:"PRAAAA",
        stringu2:"TKBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:647,
        unique2:956,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:47,
        twothousand:47,
        fivethous:147,
        tenthous:647,
        odd:14,
        even:15,
        stringu1:"XYAAAA",
        stringu2:"UKBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:180,
        unique2:957,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:80,
        twothousand:180,
        fivethous:180,
        tenthous:180,
        odd:0,
        even:1,
        stringu1:"YGAAAA",
        stringu2:"VKBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:48,
        unique2:958,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:48,
        twothousand:48,
        fivethous:48,
        tenthous:48,
        odd:16,
        even:17,
        stringu1:"WBAAAA",
        stringu2:"WKBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:553,
        unique2:959,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:53,
        twothousand:153,
        fivethous:53,
        tenthous:553,
        odd:6,
        even:7,
        stringu1:"HVAAAA",
        stringu2:"XKBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:188,
        unique2:960,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:88,
        twothousand:188,
        fivethous:188,
        tenthous:188,
        odd:16,
        even:17,
        stringu1:"GHAAAA",
        stringu2:"YKBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:262,
        unique2:961,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:62,
        twothousand:62,
        fivethous:262,
        tenthous:262,
        odd:4,
        even:5,
        stringu1:"CKAAAA",
        stringu2:"ZKBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:728,
        unique2:962,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:28,
        twothousand:128,
        fivethous:228,
        tenthous:728,
        odd:16,
        even:17,
        stringu1:"ACAAAA",
        stringu2:"ALBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:581,
        unique2:963,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:81,
        twothousand:181,
        fivethous:81,
        tenthous:581,
        odd:2,
        even:3,
        stringu1:"JWAAAA",
        stringu2:"BLBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:937,
        unique2:964,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:37,
        twothousand:137,
        fivethous:437,
        tenthous:937,
        odd:14,
        even:15,
        stringu1:"BKAAAA",
        stringu2:"CLBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:370,
        unique2:965,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:70,
        twothousand:170,
        fivethous:370,
        tenthous:370,
        odd:0,
        even:1,
        stringu1:"GOAAAA",
        stringu2:"DLBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:590,
        unique2:966,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:90,
        twothousand:190,
        fivethous:90,
        tenthous:590,
        odd:0,
        even:1,
        stringu1:"SWAAAA",
        stringu2:"ELBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:421,
        unique2:967,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:21,
        twothousand:21,
        fivethous:421,
        tenthous:421,
        odd:2,
        even:3,
        stringu1:"FQAAAA",
        stringu2:"FLBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:693,
        unique2:968,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:93,
        twothousand:93,
        fivethous:193,
        tenthous:693,
        odd:6,
        even:7,
        stringu1:"RAAAAA",
        stringu2:"GLBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:906,
        unique2:969,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:6,
        twothousand:106,
        fivethous:406,
        tenthous:906,
        odd:12,
        even:13,
        stringu1:"WIAAAA",
        stringu2:"HLBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:802,
        unique2:970,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:2,
        twothousand:2,
        fivethous:302,
        tenthous:802,
        odd:4,
        even:5,
        stringu1:"WEAAAA",
        stringu2:"ILBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:38,
        unique2:971,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:38,
        twothousand:38,
        fivethous:38,
        tenthous:38,
        odd:16,
        even:17,
        stringu1:"MBAAAA",
        stringu2:"JLBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:790,
        unique2:972,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:90,
        twothousand:190,
        fivethous:290,
        tenthous:790,
        odd:0,
        even:1,
        stringu1:"KEAAAA",
        stringu2:"KLBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:726,
        unique2:973,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:26,
        twothousand:126,
        fivethous:226,
        tenthous:726,
        odd:12,
        even:13,
        stringu1:"YBAAAA",
        stringu2:"LLBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:23,
        unique2:974,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:23,
        twothousand:23,
        fivethous:23,
        tenthous:23,
        odd:6,
        even:7,
        stringu1:"XAAAAA",
        stringu2:"MLBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:641,
        unique2:975,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:41,
        twothousand:41,
        fivethous:141,
        tenthous:641,
        odd:2,
        even:3,
        stringu1:"RYAAAA",
        stringu2:"NLBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:524,
        unique2:976,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:24,
        twothousand:124,
        fivethous:24,
        tenthous:524,
        odd:8,
        even:9,
        stringu1:"EUAAAA",
        stringu2:"OLBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:169,
        unique2:977,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:69,
        twothousand:169,
        fivethous:169,
        tenthous:169,
        odd:18,
        even:19,
        stringu1:"NGAAAA",
        stringu2:"PLBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:6,
        unique2:978,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:6,
        twothousand:6,
        fivethous:6,
        tenthous:6,
        odd:12,
        even:13,
        stringu1:"GAAAAA",
        stringu2:"QLBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:943,
        unique2:979,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:43,
        twothousand:143,
        fivethous:443,
        tenthous:943,
        odd:6,
        even:7,
        stringu1:"HKAAAA",
        stringu2:"RLBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:26,
        unique2:980,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:26,
        twothousand:26,
        fivethous:26,
        tenthous:26,
        odd:12,
        even:13,
        stringu1:"ABAAAA",
        stringu2:"SLBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:469,
        unique2:981,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:69,
        twothousand:69,
        fivethous:469,
        tenthous:469,
        odd:18,
        even:19,
        stringu1:"BSAAAA",
        stringu2:"TLBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:968,
        unique2:982,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:68,
        twothousand:168,
        fivethous:468,
        tenthous:968,
        odd:16,
        even:17,
        stringu1:"GLAAAA",
        stringu2:"ULBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:947,
        unique2:983,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:47,
        twothousand:147,
        fivethous:447,
        tenthous:947,
        odd:14,
        even:15,
        stringu1:"LKAAAA",
        stringu2:"VLBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:133,
        unique2:984,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:33,
        twothousand:133,
        fivethous:133,
        tenthous:133,
        odd:6,
        even:7,
        stringu1:"DFAAAA",
        stringu2:"WLBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:52,
        unique2:985,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:52,
        twothousand:52,
        fivethous:52,
        tenthous:52,
        odd:4,
        even:5,
        stringu1:"ACAAAA",
        stringu2:"XLBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:660,
        unique2:986,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:60,
        twothousand:60,
        fivethous:160,
        tenthous:660,
        odd:0,
        even:1,
        stringu1:"KZAAAA",
        stringu2:"YLBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:780,
        unique2:987,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:80,
        twothousand:180,
        fivethous:280,
        tenthous:780,
        odd:0,
        even:1,
        stringu1:"AEAAAA",
        stringu2:"ZLBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:963,
        unique2:988,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:63,
        twothousand:163,
        fivethous:463,
        tenthous:963,
        odd:6,
        even:7,
        stringu1:"BLAAAA",
        stringu2:"AMBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:561,
        unique2:989,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:61,
        twothousand:161,
        fivethous:61,
        tenthous:561,
        odd:2,
        even:3,
        stringu1:"PVAAAA",
        stringu2:"BMBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:402,
        unique2:990,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:2,
        twothousand:2,
        fivethous:402,
        tenthous:402,
        odd:4,
        even:5,
        stringu1:"MPAAAA",
        stringu2:"CMBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:437,
        unique2:991,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:37,
        twothousand:37,
        fivethous:437,
        tenthous:437,
        odd:14,
        even:15,
        stringu1:"VQAAAA",
        stringu2:"DMBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:112,
        unique2:992,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:12,
        twothousand:112,
        fivethous:112,
        tenthous:112,
        odd:4,
        even:5,
        stringu1:"IEAAAA",
        stringu2:"EMBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:247,
        unique2:993,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:47,
        twothousand:47,
        fivethous:247,
        tenthous:247,
        odd:14,
        even:15,
        stringu1:"NJAAAA",
        stringu2:"FMBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:579,
        unique2:994,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:79,
        twothousand:179,
        fivethous:79,
        tenthous:579,
        odd:18,
        even:19,
        stringu1:"HWAAAA",
        stringu2:"GMBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:379,
        unique2:995,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:79,
        twothousand:179,
        fivethous:379,
        tenthous:379,
        odd:18,
        even:19,
        stringu1:"POAAAA",
        stringu2:"HMBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:74,
        unique2:996,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:74,
        twothousand:74,
        fivethous:74,
        tenthous:74,
        odd:8,
        even:9,
        stringu1:"WCAAAA",
        stringu2:"IMBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:744,
        unique2:997,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:44,
        twothousand:144,
        fivethous:244,
        tenthous:744,
        odd:8,
        even:9,
        stringu1:"QCAAAA",
        stringu2:"JMBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:0,
        unique2:998,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:0,
        twothousand:0,
        fivethous:0,
        tenthous:0,
        odd:0,
        even:1,
        stringu1:"AAAAAA",
        stringu2:"KMBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:278,
        unique2:999,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:78,
        twothousand:78,
        fivethous:278,
        tenthous:278,
        odd:16,
        even:17,
        stringu1:"SKAAAA",
        stringu2:"LMBAAA",
        string4:"VVVVxx"
      }
    ],
    onek2:[
      {
        unique1:147,
        unique2:0,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:47,
        twothousand:147,
        fivethous:147,
        tenthous:147,
        odd:14,
        even:15,
        stringu1:"RFAAAA",
        stringu2:"AAAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:931,
        unique2:1,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:31,
        twothousand:131,
        fivethous:431,
        tenthous:931,
        odd:2,
        even:3,
        stringu1:"VJAAAA",
        stringu2:"BAAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:714,
        unique2:2,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:14,
        twothousand:114,
        fivethous:214,
        tenthous:714,
        odd:8,
        even:9,
        stringu1:"MBAAAA",
        stringu2:"CAAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:711,
        unique2:3,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:11,
        twothousand:111,
        fivethous:211,
        tenthous:711,
        odd:2,
        even:3,
        stringu1:"JBAAAA",
        stringu2:"DAAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:883,
        unique2:4,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:83,
        twothousand:83,
        fivethous:383,
        tenthous:883,
        odd:6,
        even:7,
        stringu1:"ZHAAAA",
        stringu2:"EAAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:439,
        unique2:5,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:39,
        twothousand:39,
        fivethous:439,
        tenthous:439,
        odd:18,
        even:19,
        stringu1:"XQAAAA",
        stringu2:"FAAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:670,
        unique2:6,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:70,
        twothousand:70,
        fivethous:170,
        tenthous:670,
        odd:0,
        even:1,
        stringu1:"UZAAAA",
        stringu2:"GAAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:543,
        unique2:7,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:43,
        twothousand:143,
        fivethous:43,
        tenthous:543,
        odd:6,
        even:7,
        stringu1:"XUAAAA",
        stringu2:"HAAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:425,
        unique2:8,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:25,
        twothousand:25,
        fivethous:425,
        tenthous:425,
        odd:10,
        even:11,
        stringu1:"JQAAAA",
        stringu2:"IAAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:800,
        unique2:9,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:0,
        twothousand:0,
        fivethous:300,
        tenthous:800,
        odd:0,
        even:1,
        stringu1:"UEAAAA",
        stringu2:"JAAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:489,
        unique2:10,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:89,
        twothousand:89,
        fivethous:489,
        tenthous:489,
        odd:18,
        even:19,
        stringu1:"VSAAAA",
        stringu2:"KAAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:494,
        unique2:11,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:94,
        twothousand:94,
        fivethous:494,
        tenthous:494,
        odd:8,
        even:9,
        stringu1:"ATAAAA",
        stringu2:"LAAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:880,
        unique2:12,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:80,
        twothousand:80,
        fivethous:380,
        tenthous:880,
        odd:0,
        even:1,
        stringu1:"WHAAAA",
        stringu2:"MAAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:611,
        unique2:13,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:11,
        twothousand:11,
        fivethous:111,
        tenthous:611,
        odd:2,
        even:3,
        stringu1:"NXAAAA",
        stringu2:"NAAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:226,
        unique2:14,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:26,
        twothousand:26,
        fivethous:226,
        tenthous:226,
        odd:12,
        even:13,
        stringu1:"SIAAAA",
        stringu2:"OAAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:774,
        unique2:15,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:74,
        twothousand:174,
        fivethous:274,
        tenthous:774,
        odd:8,
        even:9,
        stringu1:"UDAAAA",
        stringu2:"PAAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:298,
        unique2:16,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:98,
        twothousand:98,
        fivethous:298,
        tenthous:298,
        odd:16,
        even:17,
        stringu1:"MLAAAA",
        stringu2:"QAAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:682,
        unique2:17,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:82,
        twothousand:82,
        fivethous:182,
        tenthous:682,
        odd:4,
        even:5,
        stringu1:"GAAAAA",
        stringu2:"RAAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:864,
        unique2:18,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:64,
        twothousand:64,
        fivethous:364,
        tenthous:864,
        odd:8,
        even:9,
        stringu1:"GHAAAA",
        stringu2:"SAAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:183,
        unique2:19,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:83,
        twothousand:183,
        fivethous:183,
        tenthous:183,
        odd:6,
        even:7,
        stringu1:"BHAAAA",
        stringu2:"TAAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:885,
        unique2:20,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:85,
        twothousand:85,
        fivethous:385,
        tenthous:885,
        odd:10,
        even:11,
        stringu1:"BIAAAA",
        stringu2:"UAAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:997,
        unique2:21,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:97,
        twothousand:197,
        fivethous:497,
        tenthous:997,
        odd:14,
        even:15,
        stringu1:"JMAAAA",
        stringu2:"VAAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:966,
        unique2:22,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:66,
        twothousand:166,
        fivethous:466,
        tenthous:966,
        odd:12,
        even:13,
        stringu1:"ELAAAA",
        stringu2:"WAAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:389,
        unique2:23,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:89,
        twothousand:189,
        fivethous:389,
        tenthous:389,
        odd:18,
        even:19,
        stringu1:"ZOAAAA",
        stringu2:"XAAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:846,
        unique2:24,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:46,
        twothousand:46,
        fivethous:346,
        tenthous:846,
        odd:12,
        even:13,
        stringu1:"OGAAAA",
        stringu2:"YAAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:206,
        unique2:25,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:6,
        twothousand:6,
        fivethous:206,
        tenthous:206,
        odd:12,
        even:13,
        stringu1:"YHAAAA",
        stringu2:"ZAAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:239,
        unique2:26,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:39,
        twothousand:39,
        fivethous:239,
        tenthous:239,
        odd:18,
        even:19,
        stringu1:"FJAAAA",
        stringu2:"ABAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:365,
        unique2:27,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:65,
        twothousand:165,
        fivethous:365,
        tenthous:365,
        odd:10,
        even:11,
        stringu1:"BOAAAA",
        stringu2:"BBAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:204,
        unique2:28,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:4,
        twothousand:4,
        fivethous:204,
        tenthous:204,
        odd:8,
        even:9,
        stringu1:"WHAAAA",
        stringu2:"CBAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:690,
        unique2:29,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:90,
        twothousand:90,
        fivethous:190,
        tenthous:690,
        odd:0,
        even:1,
        stringu1:"OAAAAA",
        stringu2:"DBAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:69,
        unique2:30,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:69,
        twothousand:69,
        fivethous:69,
        tenthous:69,
        odd:18,
        even:19,
        stringu1:"RCAAAA",
        stringu2:"EBAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:358,
        unique2:31,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:58,
        twothousand:158,
        fivethous:358,
        tenthous:358,
        odd:16,
        even:17,
        stringu1:"UNAAAA",
        stringu2:"FBAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:269,
        unique2:32,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:69,
        twothousand:69,
        fivethous:269,
        tenthous:269,
        odd:18,
        even:19,
        stringu1:"JKAAAA",
        stringu2:"GBAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:663,
        unique2:33,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:63,
        twothousand:63,
        fivethous:163,
        tenthous:663,
        odd:6,
        even:7,
        stringu1:"NZAAAA",
        stringu2:"HBAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:608,
        unique2:34,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:8,
        twothousand:8,
        fivethous:108,
        tenthous:608,
        odd:16,
        even:17,
        stringu1:"KXAAAA",
        stringu2:"IBAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:398,
        unique2:35,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:98,
        twothousand:198,
        fivethous:398,
        tenthous:398,
        odd:16,
        even:17,
        stringu1:"IPAAAA",
        stringu2:"JBAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:330,
        unique2:36,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:30,
        twothousand:130,
        fivethous:330,
        tenthous:330,
        odd:0,
        even:1,
        stringu1:"SMAAAA",
        stringu2:"KBAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:529,
        unique2:37,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:29,
        twothousand:129,
        fivethous:29,
        tenthous:529,
        odd:18,
        even:19,
        stringu1:"JUAAAA",
        stringu2:"LBAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:555,
        unique2:38,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:55,
        twothousand:155,
        fivethous:55,
        tenthous:555,
        odd:10,
        even:11,
        stringu1:"JVAAAA",
        stringu2:"MBAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:746,
        unique2:39,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:46,
        twothousand:146,
        fivethous:246,
        tenthous:746,
        odd:12,
        even:13,
        stringu1:"SCAAAA",
        stringu2:"NBAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:558,
        unique2:40,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:58,
        twothousand:158,
        fivethous:58,
        tenthous:558,
        odd:16,
        even:17,
        stringu1:"MVAAAA",
        stringu2:"OBAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:574,
        unique2:41,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:74,
        twothousand:174,
        fivethous:74,
        tenthous:574,
        odd:8,
        even:9,
        stringu1:"CWAAAA",
        stringu2:"PBAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:343,
        unique2:42,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:43,
        twothousand:143,
        fivethous:343,
        tenthous:343,
        odd:6,
        even:7,
        stringu1:"FNAAAA",
        stringu2:"QBAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:120,
        unique2:43,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:20,
        twothousand:120,
        fivethous:120,
        tenthous:120,
        odd:0,
        even:1,
        stringu1:"QEAAAA",
        stringu2:"RBAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:461,
        unique2:44,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:61,
        twothousand:61,
        fivethous:461,
        tenthous:461,
        odd:2,
        even:3,
        stringu1:"TRAAAA",
        stringu2:"SBAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:754,
        unique2:45,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:54,
        twothousand:154,
        fivethous:254,
        tenthous:754,
        odd:8,
        even:9,
        stringu1:"ADAAAA",
        stringu2:"TBAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:772,
        unique2:46,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:72,
        twothousand:172,
        fivethous:272,
        tenthous:772,
        odd:4,
        even:5,
        stringu1:"SDAAAA",
        stringu2:"UBAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:749,
        unique2:47,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:49,
        twothousand:149,
        fivethous:249,
        tenthous:749,
        odd:18,
        even:19,
        stringu1:"VCAAAA",
        stringu2:"VBAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:386,
        unique2:48,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:86,
        twothousand:186,
        fivethous:386,
        tenthous:386,
        odd:12,
        even:13,
        stringu1:"WOAAAA",
        stringu2:"WBAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:9,
        unique2:49,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:9,
        twothousand:9,
        fivethous:9,
        tenthous:9,
        odd:18,
        even:19,
        stringu1:"JAAAAA",
        stringu2:"XBAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:771,
        unique2:50,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:71,
        twothousand:171,
        fivethous:271,
        tenthous:771,
        odd:2,
        even:3,
        stringu1:"RDAAAA",
        stringu2:"YBAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:470,
        unique2:51,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:70,
        twothousand:70,
        fivethous:470,
        tenthous:470,
        odd:0,
        even:1,
        stringu1:"CSAAAA",
        stringu2:"ZBAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:238,
        unique2:52,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:38,
        twothousand:38,
        fivethous:238,
        tenthous:238,
        odd:16,
        even:17,
        stringu1:"EJAAAA",
        stringu2:"ACAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:86,
        unique2:53,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:86,
        twothousand:86,
        fivethous:86,
        tenthous:86,
        odd:12,
        even:13,
        stringu1:"IDAAAA",
        stringu2:"BCAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:56,
        unique2:54,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:56,
        twothousand:56,
        fivethous:56,
        tenthous:56,
        odd:12,
        even:13,
        stringu1:"ECAAAA",
        stringu2:"CCAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:767,
        unique2:55,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:67,
        twothousand:167,
        fivethous:267,
        tenthous:767,
        odd:14,
        even:15,
        stringu1:"NDAAAA",
        stringu2:"DCAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:363,
        unique2:56,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:63,
        twothousand:163,
        fivethous:363,
        tenthous:363,
        odd:6,
        even:7,
        stringu1:"ZNAAAA",
        stringu2:"ECAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:655,
        unique2:57,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:55,
        twothousand:55,
        fivethous:155,
        tenthous:655,
        odd:10,
        even:11,
        stringu1:"FZAAAA",
        stringu2:"FCAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:394,
        unique2:58,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:94,
        twothousand:194,
        fivethous:394,
        tenthous:394,
        odd:8,
        even:9,
        stringu1:"EPAAAA",
        stringu2:"GCAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:223,
        unique2:59,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:23,
        twothousand:23,
        fivethous:223,
        tenthous:223,
        odd:6,
        even:7,
        stringu1:"PIAAAA",
        stringu2:"HCAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:946,
        unique2:60,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:46,
        twothousand:146,
        fivethous:446,
        tenthous:946,
        odd:12,
        even:13,
        stringu1:"KKAAAA",
        stringu2:"ICAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:863,
        unique2:61,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:63,
        twothousand:63,
        fivethous:363,
        tenthous:863,
        odd:6,
        even:7,
        stringu1:"FHAAAA",
        stringu2:"JCAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:913,
        unique2:62,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:13,
        twothousand:113,
        fivethous:413,
        tenthous:913,
        odd:6,
        even:7,
        stringu1:"DJAAAA",
        stringu2:"KCAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:737,
        unique2:63,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:37,
        twothousand:137,
        fivethous:237,
        tenthous:737,
        odd:14,
        even:15,
        stringu1:"JCAAAA",
        stringu2:"LCAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:65,
        unique2:64,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:65,
        twothousand:65,
        fivethous:65,
        tenthous:65,
        odd:10,
        even:11,
        stringu1:"NCAAAA",
        stringu2:"MCAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:251,
        unique2:65,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:51,
        twothousand:51,
        fivethous:251,
        tenthous:251,
        odd:2,
        even:3,
        stringu1:"RJAAAA",
        stringu2:"NCAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:686,
        unique2:66,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:86,
        twothousand:86,
        fivethous:186,
        tenthous:686,
        odd:12,
        even:13,
        stringu1:"KAAAAA",
        stringu2:"OCAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:971,
        unique2:67,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:71,
        twothousand:171,
        fivethous:471,
        tenthous:971,
        odd:2,
        even:3,
        stringu1:"JLAAAA",
        stringu2:"PCAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:775,
        unique2:68,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:75,
        twothousand:175,
        fivethous:275,
        tenthous:775,
        odd:10,
        even:11,
        stringu1:"VDAAAA",
        stringu2:"QCAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:577,
        unique2:69,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:77,
        twothousand:177,
        fivethous:77,
        tenthous:577,
        odd:14,
        even:15,
        stringu1:"FWAAAA",
        stringu2:"RCAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:830,
        unique2:70,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:30,
        twothousand:30,
        fivethous:330,
        tenthous:830,
        odd:0,
        even:1,
        stringu1:"YFAAAA",
        stringu2:"SCAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:787,
        unique2:71,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:87,
        twothousand:187,
        fivethous:287,
        tenthous:787,
        odd:14,
        even:15,
        stringu1:"HEAAAA",
        stringu2:"TCAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:898,
        unique2:72,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:98,
        twothousand:98,
        fivethous:398,
        tenthous:898,
        odd:16,
        even:17,
        stringu1:"OIAAAA",
        stringu2:"UCAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:588,
        unique2:73,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:88,
        twothousand:188,
        fivethous:88,
        tenthous:588,
        odd:16,
        even:17,
        stringu1:"QWAAAA",
        stringu2:"VCAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:872,
        unique2:74,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:72,
        twothousand:72,
        fivethous:372,
        tenthous:872,
        odd:4,
        even:5,
        stringu1:"OHAAAA",
        stringu2:"WCAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:397,
        unique2:75,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:97,
        twothousand:197,
        fivethous:397,
        tenthous:397,
        odd:14,
        even:15,
        stringu1:"HPAAAA",
        stringu2:"XCAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:51,
        unique2:76,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:51,
        twothousand:51,
        fivethous:51,
        tenthous:51,
        odd:2,
        even:3,
        stringu1:"ZBAAAA",
        stringu2:"YCAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:381,
        unique2:77,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:81,
        twothousand:181,
        fivethous:381,
        tenthous:381,
        odd:2,
        even:3,
        stringu1:"ROAAAA",
        stringu2:"ZCAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:632,
        unique2:78,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:32,
        twothousand:32,
        fivethous:132,
        tenthous:632,
        odd:4,
        even:5,
        stringu1:"IYAAAA",
        stringu2:"ADAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:31,
        unique2:79,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:31,
        twothousand:31,
        fivethous:31,
        tenthous:31,
        odd:2,
        even:3,
        stringu1:"FBAAAA",
        stringu2:"BDAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:855,
        unique2:80,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:55,
        twothousand:55,
        fivethous:355,
        tenthous:855,
        odd:10,
        even:11,
        stringu1:"XGAAAA",
        stringu2:"CDAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:699,
        unique2:81,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:99,
        twothousand:99,
        fivethous:199,
        tenthous:699,
        odd:18,
        even:19,
        stringu1:"XAAAAA",
        stringu2:"DDAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:562,
        unique2:82,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:62,
        twothousand:162,
        fivethous:62,
        tenthous:562,
        odd:4,
        even:5,
        stringu1:"QVAAAA",
        stringu2:"EDAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:681,
        unique2:83,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:81,
        twothousand:81,
        fivethous:181,
        tenthous:681,
        odd:2,
        even:3,
        stringu1:"FAAAAA",
        stringu2:"FDAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:585,
        unique2:84,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:85,
        twothousand:185,
        fivethous:85,
        tenthous:585,
        odd:10,
        even:11,
        stringu1:"NWAAAA",
        stringu2:"GDAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:35,
        unique2:85,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:35,
        twothousand:35,
        fivethous:35,
        tenthous:35,
        odd:10,
        even:11,
        stringu1:"JBAAAA",
        stringu2:"HDAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:962,
        unique2:86,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:62,
        twothousand:162,
        fivethous:462,
        tenthous:962,
        odd:4,
        even:5,
        stringu1:"ALAAAA",
        stringu2:"IDAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:282,
        unique2:87,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:82,
        twothousand:82,
        fivethous:282,
        tenthous:282,
        odd:4,
        even:5,
        stringu1:"WKAAAA",
        stringu2:"JDAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:254,
        unique2:88,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:54,
        twothousand:54,
        fivethous:254,
        tenthous:254,
        odd:8,
        even:9,
        stringu1:"UJAAAA",
        stringu2:"KDAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:514,
        unique2:89,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:14,
        twothousand:114,
        fivethous:14,
        tenthous:514,
        odd:8,
        even:9,
        stringu1:"UTAAAA",
        stringu2:"LDAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:406,
        unique2:90,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:6,
        twothousand:6,
        fivethous:406,
        tenthous:406,
        odd:12,
        even:13,
        stringu1:"QPAAAA",
        stringu2:"MDAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:544,
        unique2:91,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:44,
        twothousand:144,
        fivethous:44,
        tenthous:544,
        odd:8,
        even:9,
        stringu1:"YUAAAA",
        stringu2:"NDAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:704,
        unique2:92,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:4,
        twothousand:104,
        fivethous:204,
        tenthous:704,
        odd:8,
        even:9,
        stringu1:"CBAAAA",
        stringu2:"ODAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:948,
        unique2:93,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:48,
        twothousand:148,
        fivethous:448,
        tenthous:948,
        odd:16,
        even:17,
        stringu1:"MKAAAA",
        stringu2:"PDAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:412,
        unique2:94,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:12,
        twothousand:12,
        fivethous:412,
        tenthous:412,
        odd:4,
        even:5,
        stringu1:"WPAAAA",
        stringu2:"QDAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:200,
        unique2:95,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:0,
        twothousand:0,
        fivethous:200,
        tenthous:200,
        odd:0,
        even:1,
        stringu1:"SHAAAA",
        stringu2:"RDAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:583,
        unique2:96,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:83,
        twothousand:183,
        fivethous:83,
        tenthous:583,
        odd:6,
        even:7,
        stringu1:"LWAAAA",
        stringu2:"SDAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:486,
        unique2:97,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:86,
        twothousand:86,
        fivethous:486,
        tenthous:486,
        odd:12,
        even:13,
        stringu1:"SSAAAA",
        stringu2:"TDAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:666,
        unique2:98,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:66,
        twothousand:66,
        fivethous:166,
        tenthous:666,
        odd:12,
        even:13,
        stringu1:"QZAAAA",
        stringu2:"UDAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:436,
        unique2:99,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:36,
        twothousand:36,
        fivethous:436,
        tenthous:436,
        odd:12,
        even:13,
        stringu1:"UQAAAA",
        stringu2:"VDAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:842,
        unique2:100,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:42,
        twothousand:42,
        fivethous:342,
        tenthous:842,
        odd:4,
        even:5,
        stringu1:"KGAAAA",
        stringu2:"WDAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:99,
        unique2:101,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:99,
        twothousand:99,
        fivethous:99,
        tenthous:99,
        odd:18,
        even:19,
        stringu1:"VDAAAA",
        stringu2:"XDAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:656,
        unique2:102,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:56,
        twothousand:56,
        fivethous:156,
        tenthous:656,
        odd:12,
        even:13,
        stringu1:"GZAAAA",
        stringu2:"YDAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:673,
        unique2:103,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:73,
        twothousand:73,
        fivethous:173,
        tenthous:673,
        odd:6,
        even:7,
        stringu1:"XZAAAA",
        stringu2:"ZDAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:371,
        unique2:104,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:71,
        twothousand:171,
        fivethous:371,
        tenthous:371,
        odd:2,
        even:3,
        stringu1:"HOAAAA",
        stringu2:"AEAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:869,
        unique2:105,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:69,
        twothousand:69,
        fivethous:369,
        tenthous:869,
        odd:18,
        even:19,
        stringu1:"LHAAAA",
        stringu2:"BEAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:569,
        unique2:106,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:69,
        twothousand:169,
        fivethous:69,
        tenthous:569,
        odd:18,
        even:19,
        stringu1:"XVAAAA",
        stringu2:"CEAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:616,
        unique2:107,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:16,
        twothousand:16,
        fivethous:116,
        tenthous:616,
        odd:12,
        even:13,
        stringu1:"SXAAAA",
        stringu2:"DEAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:612,
        unique2:108,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:12,
        twothousand:12,
        fivethous:112,
        tenthous:612,
        odd:4,
        even:5,
        stringu1:"OXAAAA",
        stringu2:"EEAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:505,
        unique2:109,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:5,
        twothousand:105,
        fivethous:5,
        tenthous:505,
        odd:10,
        even:11,
        stringu1:"LTAAAA",
        stringu2:"FEAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:922,
        unique2:110,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:22,
        twothousand:122,
        fivethous:422,
        tenthous:922,
        odd:4,
        even:5,
        stringu1:"MJAAAA",
        stringu2:"GEAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:221,
        unique2:111,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:21,
        twothousand:21,
        fivethous:221,
        tenthous:221,
        odd:2,
        even:3,
        stringu1:"NIAAAA",
        stringu2:"HEAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:388,
        unique2:112,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:88,
        twothousand:188,
        fivethous:388,
        tenthous:388,
        odd:16,
        even:17,
        stringu1:"YOAAAA",
        stringu2:"IEAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:567,
        unique2:113,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:67,
        twothousand:167,
        fivethous:67,
        tenthous:567,
        odd:14,
        even:15,
        stringu1:"VVAAAA",
        stringu2:"JEAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:58,
        unique2:114,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:58,
        twothousand:58,
        fivethous:58,
        tenthous:58,
        odd:16,
        even:17,
        stringu1:"GCAAAA",
        stringu2:"KEAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:316,
        unique2:115,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:16,
        twothousand:116,
        fivethous:316,
        tenthous:316,
        odd:12,
        even:13,
        stringu1:"EMAAAA",
        stringu2:"LEAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:659,
        unique2:116,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:59,
        twothousand:59,
        fivethous:159,
        tenthous:659,
        odd:18,
        even:19,
        stringu1:"JZAAAA",
        stringu2:"MEAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:501,
        unique2:117,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:1,
        twothousand:101,
        fivethous:1,
        tenthous:501,
        odd:2,
        even:3,
        stringu1:"HTAAAA",
        stringu2:"NEAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:815,
        unique2:118,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:15,
        twothousand:15,
        fivethous:315,
        tenthous:815,
        odd:10,
        even:11,
        stringu1:"JFAAAA",
        stringu2:"OEAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:638,
        unique2:119,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:38,
        twothousand:38,
        fivethous:138,
        tenthous:638,
        odd:16,
        even:17,
        stringu1:"OYAAAA",
        stringu2:"PEAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:696,
        unique2:120,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:96,
        twothousand:96,
        fivethous:196,
        tenthous:696,
        odd:12,
        even:13,
        stringu1:"UAAAAA",
        stringu2:"QEAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:734,
        unique2:121,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:34,
        twothousand:134,
        fivethous:234,
        tenthous:734,
        odd:8,
        even:9,
        stringu1:"GCAAAA",
        stringu2:"REAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:237,
        unique2:122,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:37,
        twothousand:37,
        fivethous:237,
        tenthous:237,
        odd:14,
        even:15,
        stringu1:"DJAAAA",
        stringu2:"SEAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:816,
        unique2:123,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:16,
        twothousand:16,
        fivethous:316,
        tenthous:816,
        odd:12,
        even:13,
        stringu1:"KFAAAA",
        stringu2:"TEAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:917,
        unique2:124,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:17,
        twothousand:117,
        fivethous:417,
        tenthous:917,
        odd:14,
        even:15,
        stringu1:"HJAAAA",
        stringu2:"UEAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:844,
        unique2:125,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:44,
        twothousand:44,
        fivethous:344,
        tenthous:844,
        odd:8,
        even:9,
        stringu1:"MGAAAA",
        stringu2:"VEAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:657,
        unique2:126,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:57,
        twothousand:57,
        fivethous:157,
        tenthous:657,
        odd:14,
        even:15,
        stringu1:"HZAAAA",
        stringu2:"WEAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:952,
        unique2:127,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:52,
        twothousand:152,
        fivethous:452,
        tenthous:952,
        odd:4,
        even:5,
        stringu1:"QKAAAA",
        stringu2:"XEAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:519,
        unique2:128,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:19,
        twothousand:119,
        fivethous:19,
        tenthous:519,
        odd:18,
        even:19,
        stringu1:"ZTAAAA",
        stringu2:"YEAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:792,
        unique2:129,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:92,
        twothousand:192,
        fivethous:292,
        tenthous:792,
        odd:4,
        even:5,
        stringu1:"MEAAAA",
        stringu2:"ZEAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:275,
        unique2:130,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:75,
        twothousand:75,
        fivethous:275,
        tenthous:275,
        odd:10,
        even:11,
        stringu1:"PKAAAA",
        stringu2:"AFAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:319,
        unique2:131,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:19,
        twothousand:119,
        fivethous:319,
        tenthous:319,
        odd:18,
        even:19,
        stringu1:"HMAAAA",
        stringu2:"BFAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:487,
        unique2:132,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:87,
        twothousand:87,
        fivethous:487,
        tenthous:487,
        odd:14,
        even:15,
        stringu1:"TSAAAA",
        stringu2:"CFAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:945,
        unique2:133,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:45,
        twothousand:145,
        fivethous:445,
        tenthous:945,
        odd:10,
        even:11,
        stringu1:"JKAAAA",
        stringu2:"DFAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:584,
        unique2:134,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:84,
        twothousand:184,
        fivethous:84,
        tenthous:584,
        odd:8,
        even:9,
        stringu1:"MWAAAA",
        stringu2:"EFAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:765,
        unique2:135,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:65,
        twothousand:165,
        fivethous:265,
        tenthous:765,
        odd:10,
        even:11,
        stringu1:"LDAAAA",
        stringu2:"FFAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:814,
        unique2:136,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:14,
        twothousand:14,
        fivethous:314,
        tenthous:814,
        odd:8,
        even:9,
        stringu1:"IFAAAA",
        stringu2:"GFAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:359,
        unique2:137,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:59,
        twothousand:159,
        fivethous:359,
        tenthous:359,
        odd:18,
        even:19,
        stringu1:"VNAAAA",
        stringu2:"HFAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:548,
        unique2:138,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:48,
        twothousand:148,
        fivethous:48,
        tenthous:548,
        odd:16,
        even:17,
        stringu1:"CVAAAA",
        stringu2:"IFAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:811,
        unique2:139,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:11,
        twothousand:11,
        fivethous:311,
        tenthous:811,
        odd:2,
        even:3,
        stringu1:"FFAAAA",
        stringu2:"JFAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:531,
        unique2:140,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:31,
        twothousand:131,
        fivethous:31,
        tenthous:531,
        odd:2,
        even:3,
        stringu1:"LUAAAA",
        stringu2:"KFAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:104,
        unique2:141,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:4,
        twothousand:104,
        fivethous:104,
        tenthous:104,
        odd:8,
        even:9,
        stringu1:"AEAAAA",
        stringu2:"LFAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:33,
        unique2:142,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:33,
        twothousand:33,
        fivethous:33,
        tenthous:33,
        odd:6,
        even:7,
        stringu1:"HBAAAA",
        stringu2:"MFAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:404,
        unique2:143,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:4,
        twothousand:4,
        fivethous:404,
        tenthous:404,
        odd:8,
        even:9,
        stringu1:"OPAAAA",
        stringu2:"NFAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:995,
        unique2:144,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:95,
        twothousand:195,
        fivethous:495,
        tenthous:995,
        odd:10,
        even:11,
        stringu1:"HMAAAA",
        stringu2:"OFAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:408,
        unique2:145,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:8,
        twothousand:8,
        fivethous:408,
        tenthous:408,
        odd:16,
        even:17,
        stringu1:"SPAAAA",
        stringu2:"PFAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:93,
        unique2:146,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:93,
        twothousand:93,
        fivethous:93,
        tenthous:93,
        odd:6,
        even:7,
        stringu1:"PDAAAA",
        stringu2:"QFAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:794,
        unique2:147,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:94,
        twothousand:194,
        fivethous:294,
        tenthous:794,
        odd:8,
        even:9,
        stringu1:"OEAAAA",
        stringu2:"RFAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:833,
        unique2:148,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:33,
        twothousand:33,
        fivethous:333,
        tenthous:833,
        odd:6,
        even:7,
        stringu1:"BGAAAA",
        stringu2:"SFAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:615,
        unique2:149,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:15,
        twothousand:15,
        fivethous:115,
        tenthous:615,
        odd:10,
        even:11,
        stringu1:"RXAAAA",
        stringu2:"TFAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:333,
        unique2:150,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:33,
        twothousand:133,
        fivethous:333,
        tenthous:333,
        odd:6,
        even:7,
        stringu1:"VMAAAA",
        stringu2:"UFAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:357,
        unique2:151,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:57,
        twothousand:157,
        fivethous:357,
        tenthous:357,
        odd:14,
        even:15,
        stringu1:"TNAAAA",
        stringu2:"VFAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:999,
        unique2:152,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:99,
        twothousand:199,
        fivethous:499,
        tenthous:999,
        odd:18,
        even:19,
        stringu1:"LMAAAA",
        stringu2:"WFAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:515,
        unique2:153,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:15,
        twothousand:115,
        fivethous:15,
        tenthous:515,
        odd:10,
        even:11,
        stringu1:"VTAAAA",
        stringu2:"XFAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:685,
        unique2:154,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:85,
        twothousand:85,
        fivethous:185,
        tenthous:685,
        odd:10,
        even:11,
        stringu1:"JAAAAA",
        stringu2:"YFAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:692,
        unique2:155,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:92,
        twothousand:92,
        fivethous:192,
        tenthous:692,
        odd:4,
        even:5,
        stringu1:"QAAAAA",
        stringu2:"ZFAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:627,
        unique2:156,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:27,
        twothousand:27,
        fivethous:127,
        tenthous:627,
        odd:14,
        even:15,
        stringu1:"DYAAAA",
        stringu2:"AGAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:654,
        unique2:157,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:54,
        twothousand:54,
        fivethous:154,
        tenthous:654,
        odd:8,
        even:9,
        stringu1:"EZAAAA",
        stringu2:"BGAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:115,
        unique2:158,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:15,
        twothousand:115,
        fivethous:115,
        tenthous:115,
        odd:10,
        even:11,
        stringu1:"LEAAAA",
        stringu2:"CGAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:75,
        unique2:159,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:75,
        twothousand:75,
        fivethous:75,
        tenthous:75,
        odd:10,
        even:11,
        stringu1:"XCAAAA",
        stringu2:"DGAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:14,
        unique2:160,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:14,
        twothousand:14,
        fivethous:14,
        tenthous:14,
        odd:8,
        even:9,
        stringu1:"OAAAAA",
        stringu2:"EGAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:148,
        unique2:161,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:48,
        twothousand:148,
        fivethous:148,
        tenthous:148,
        odd:16,
        even:17,
        stringu1:"SFAAAA",
        stringu2:"FGAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:201,
        unique2:162,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:1,
        twothousand:1,
        fivethous:201,
        tenthous:201,
        odd:2,
        even:3,
        stringu1:"THAAAA",
        stringu2:"GGAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:862,
        unique2:163,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:62,
        twothousand:62,
        fivethous:362,
        tenthous:862,
        odd:4,
        even:5,
        stringu1:"EHAAAA",
        stringu2:"HGAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:634,
        unique2:164,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:34,
        twothousand:34,
        fivethous:134,
        tenthous:634,
        odd:8,
        even:9,
        stringu1:"KYAAAA",
        stringu2:"IGAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:589,
        unique2:165,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:89,
        twothousand:189,
        fivethous:89,
        tenthous:589,
        odd:18,
        even:19,
        stringu1:"RWAAAA",
        stringu2:"JGAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:142,
        unique2:166,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:42,
        twothousand:142,
        fivethous:142,
        tenthous:142,
        odd:4,
        even:5,
        stringu1:"MFAAAA",
        stringu2:"KGAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:545,
        unique2:167,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:45,
        twothousand:145,
        fivethous:45,
        tenthous:545,
        odd:10,
        even:11,
        stringu1:"ZUAAAA",
        stringu2:"LGAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:983,
        unique2:168,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:83,
        twothousand:183,
        fivethous:483,
        tenthous:983,
        odd:6,
        even:7,
        stringu1:"VLAAAA",
        stringu2:"MGAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:87,
        unique2:169,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:87,
        twothousand:87,
        fivethous:87,
        tenthous:87,
        odd:14,
        even:15,
        stringu1:"JDAAAA",
        stringu2:"NGAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:335,
        unique2:170,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:35,
        twothousand:135,
        fivethous:335,
        tenthous:335,
        odd:10,
        even:11,
        stringu1:"XMAAAA",
        stringu2:"OGAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:915,
        unique2:171,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:15,
        twothousand:115,
        fivethous:415,
        tenthous:915,
        odd:10,
        even:11,
        stringu1:"FJAAAA",
        stringu2:"PGAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:286,
        unique2:172,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:86,
        twothousand:86,
        fivethous:286,
        tenthous:286,
        odd:12,
        even:13,
        stringu1:"ALAAAA",
        stringu2:"QGAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:361,
        unique2:173,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:61,
        twothousand:161,
        fivethous:361,
        tenthous:361,
        odd:2,
        even:3,
        stringu1:"XNAAAA",
        stringu2:"RGAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:97,
        unique2:174,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:97,
        twothousand:97,
        fivethous:97,
        tenthous:97,
        odd:14,
        even:15,
        stringu1:"TDAAAA",
        stringu2:"SGAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:98,
        unique2:175,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:98,
        twothousand:98,
        fivethous:98,
        tenthous:98,
        odd:16,
        even:17,
        stringu1:"UDAAAA",
        stringu2:"TGAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:377,
        unique2:176,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:77,
        twothousand:177,
        fivethous:377,
        tenthous:377,
        odd:14,
        even:15,
        stringu1:"NOAAAA",
        stringu2:"UGAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:525,
        unique2:177,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:25,
        twothousand:125,
        fivethous:25,
        tenthous:525,
        odd:10,
        even:11,
        stringu1:"FUAAAA",
        stringu2:"VGAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:448,
        unique2:178,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:48,
        twothousand:48,
        fivethous:448,
        tenthous:448,
        odd:16,
        even:17,
        stringu1:"GRAAAA",
        stringu2:"WGAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:154,
        unique2:179,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:54,
        twothousand:154,
        fivethous:154,
        tenthous:154,
        odd:8,
        even:9,
        stringu1:"YFAAAA",
        stringu2:"XGAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:866,
        unique2:180,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:66,
        twothousand:66,
        fivethous:366,
        tenthous:866,
        odd:12,
        even:13,
        stringu1:"IHAAAA",
        stringu2:"YGAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:741,
        unique2:181,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:41,
        twothousand:141,
        fivethous:241,
        tenthous:741,
        odd:2,
        even:3,
        stringu1:"NCAAAA",
        stringu2:"ZGAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:172,
        unique2:182,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:72,
        twothousand:172,
        fivethous:172,
        tenthous:172,
        odd:4,
        even:5,
        stringu1:"QGAAAA",
        stringu2:"AHAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:843,
        unique2:183,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:43,
        twothousand:43,
        fivethous:343,
        tenthous:843,
        odd:6,
        even:7,
        stringu1:"LGAAAA",
        stringu2:"BHAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:378,
        unique2:184,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:78,
        twothousand:178,
        fivethous:378,
        tenthous:378,
        odd:16,
        even:17,
        stringu1:"OOAAAA",
        stringu2:"CHAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:804,
        unique2:185,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:4,
        twothousand:4,
        fivethous:304,
        tenthous:804,
        odd:8,
        even:9,
        stringu1:"YEAAAA",
        stringu2:"DHAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:596,
        unique2:186,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:96,
        twothousand:196,
        fivethous:96,
        tenthous:596,
        odd:12,
        even:13,
        stringu1:"YWAAAA",
        stringu2:"EHAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:77,
        unique2:187,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:77,
        twothousand:77,
        fivethous:77,
        tenthous:77,
        odd:14,
        even:15,
        stringu1:"ZCAAAA",
        stringu2:"FHAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:572,
        unique2:188,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:72,
        twothousand:172,
        fivethous:72,
        tenthous:572,
        odd:4,
        even:5,
        stringu1:"AWAAAA",
        stringu2:"GHAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:444,
        unique2:189,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:44,
        twothousand:44,
        fivethous:444,
        tenthous:444,
        odd:8,
        even:9,
        stringu1:"CRAAAA",
        stringu2:"HHAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:47,
        unique2:190,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:47,
        twothousand:47,
        fivethous:47,
        tenthous:47,
        odd:14,
        even:15,
        stringu1:"VBAAAA",
        stringu2:"IHAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:274,
        unique2:191,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:74,
        twothousand:74,
        fivethous:274,
        tenthous:274,
        odd:8,
        even:9,
        stringu1:"OKAAAA",
        stringu2:"JHAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:40,
        unique2:192,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:40,
        twothousand:40,
        fivethous:40,
        tenthous:40,
        odd:0,
        even:1,
        stringu1:"OBAAAA",
        stringu2:"KHAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:339,
        unique2:193,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:39,
        twothousand:139,
        fivethous:339,
        tenthous:339,
        odd:18,
        even:19,
        stringu1:"BNAAAA",
        stringu2:"LHAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:13,
        unique2:194,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:13,
        twothousand:13,
        fivethous:13,
        tenthous:13,
        odd:6,
        even:7,
        stringu1:"NAAAAA",
        stringu2:"MHAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:878,
        unique2:195,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:78,
        twothousand:78,
        fivethous:378,
        tenthous:878,
        odd:16,
        even:17,
        stringu1:"UHAAAA",
        stringu2:"NHAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:53,
        unique2:196,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:53,
        twothousand:53,
        fivethous:53,
        tenthous:53,
        odd:6,
        even:7,
        stringu1:"BCAAAA",
        stringu2:"OHAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:939,
        unique2:197,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:39,
        twothousand:139,
        fivethous:439,
        tenthous:939,
        odd:18,
        even:19,
        stringu1:"DKAAAA",
        stringu2:"PHAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:928,
        unique2:198,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:28,
        twothousand:128,
        fivethous:428,
        tenthous:928,
        odd:16,
        even:17,
        stringu1:"SJAAAA",
        stringu2:"QHAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:886,
        unique2:199,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:86,
        twothousand:86,
        fivethous:386,
        tenthous:886,
        odd:12,
        even:13,
        stringu1:"CIAAAA",
        stringu2:"RHAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:267,
        unique2:200,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:67,
        twothousand:67,
        fivethous:267,
        tenthous:267,
        odd:14,
        even:15,
        stringu1:"HKAAAA",
        stringu2:"SHAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:105,
        unique2:201,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:5,
        twothousand:105,
        fivethous:105,
        tenthous:105,
        odd:10,
        even:11,
        stringu1:"BEAAAA",
        stringu2:"THAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:312,
        unique2:202,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:12,
        twothousand:112,
        fivethous:312,
        tenthous:312,
        odd:4,
        even:5,
        stringu1:"AMAAAA",
        stringu2:"UHAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:552,
        unique2:203,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:52,
        twothousand:152,
        fivethous:52,
        tenthous:552,
        odd:4,
        even:5,
        stringu1:"GVAAAA",
        stringu2:"VHAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:918,
        unique2:204,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:18,
        twothousand:118,
        fivethous:418,
        tenthous:918,
        odd:16,
        even:17,
        stringu1:"IJAAAA",
        stringu2:"WHAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:114,
        unique2:205,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:14,
        twothousand:114,
        fivethous:114,
        tenthous:114,
        odd:8,
        even:9,
        stringu1:"KEAAAA",
        stringu2:"XHAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:805,
        unique2:206,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:5,
        twothousand:5,
        fivethous:305,
        tenthous:805,
        odd:10,
        even:11,
        stringu1:"ZEAAAA",
        stringu2:"YHAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:875,
        unique2:207,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:75,
        twothousand:75,
        fivethous:375,
        tenthous:875,
        odd:10,
        even:11,
        stringu1:"RHAAAA",
        stringu2:"ZHAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:225,
        unique2:208,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:25,
        twothousand:25,
        fivethous:225,
        tenthous:225,
        odd:10,
        even:11,
        stringu1:"RIAAAA",
        stringu2:"AIAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:495,
        unique2:209,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:95,
        twothousand:95,
        fivethous:495,
        tenthous:495,
        odd:10,
        even:11,
        stringu1:"BTAAAA",
        stringu2:"BIAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:150,
        unique2:210,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:50,
        twothousand:150,
        fivethous:150,
        tenthous:150,
        odd:0,
        even:1,
        stringu1:"UFAAAA",
        stringu2:"CIAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:759,
        unique2:211,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:59,
        twothousand:159,
        fivethous:259,
        tenthous:759,
        odd:18,
        even:19,
        stringu1:"FDAAAA",
        stringu2:"DIAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:149,
        unique2:212,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:49,
        twothousand:149,
        fivethous:149,
        tenthous:149,
        odd:18,
        even:19,
        stringu1:"TFAAAA",
        stringu2:"EIAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:480,
        unique2:213,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:80,
        twothousand:80,
        fivethous:480,
        tenthous:480,
        odd:0,
        even:1,
        stringu1:"MSAAAA",
        stringu2:"FIAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:1,
        unique2:214,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:1,
        twothousand:1,
        fivethous:1,
        tenthous:1,
        odd:2,
        even:3,
        stringu1:"BAAAAA",
        stringu2:"GIAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:557,
        unique2:215,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:57,
        twothousand:157,
        fivethous:57,
        tenthous:557,
        odd:14,
        even:15,
        stringu1:"LVAAAA",
        stringu2:"HIAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:295,
        unique2:216,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:95,
        twothousand:95,
        fivethous:295,
        tenthous:295,
        odd:10,
        even:11,
        stringu1:"JLAAAA",
        stringu2:"IIAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:854,
        unique2:217,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:54,
        twothousand:54,
        fivethous:354,
        tenthous:854,
        odd:8,
        even:9,
        stringu1:"WGAAAA",
        stringu2:"JIAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:420,
        unique2:218,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:20,
        twothousand:20,
        fivethous:420,
        tenthous:420,
        odd:0,
        even:1,
        stringu1:"EQAAAA",
        stringu2:"KIAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:414,
        unique2:219,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:14,
        twothousand:14,
        fivethous:414,
        tenthous:414,
        odd:8,
        even:9,
        stringu1:"YPAAAA",
        stringu2:"LIAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:758,
        unique2:220,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:58,
        twothousand:158,
        fivethous:258,
        tenthous:758,
        odd:16,
        even:17,
        stringu1:"EDAAAA",
        stringu2:"MIAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:879,
        unique2:221,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:79,
        twothousand:79,
        fivethous:379,
        tenthous:879,
        odd:18,
        even:19,
        stringu1:"VHAAAA",
        stringu2:"NIAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:332,
        unique2:222,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:32,
        twothousand:132,
        fivethous:332,
        tenthous:332,
        odd:4,
        even:5,
        stringu1:"UMAAAA",
        stringu2:"OIAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:78,
        unique2:223,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:78,
        twothousand:78,
        fivethous:78,
        tenthous:78,
        odd:16,
        even:17,
        stringu1:"ADAAAA",
        stringu2:"PIAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:851,
        unique2:224,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:51,
        twothousand:51,
        fivethous:351,
        tenthous:851,
        odd:2,
        even:3,
        stringu1:"TGAAAA",
        stringu2:"QIAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:592,
        unique2:225,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:92,
        twothousand:192,
        fivethous:92,
        tenthous:592,
        odd:4,
        even:5,
        stringu1:"UWAAAA",
        stringu2:"RIAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:979,
        unique2:226,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:79,
        twothousand:179,
        fivethous:479,
        tenthous:979,
        odd:18,
        even:19,
        stringu1:"RLAAAA",
        stringu2:"SIAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:989,
        unique2:227,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:89,
        twothousand:189,
        fivethous:489,
        tenthous:989,
        odd:18,
        even:19,
        stringu1:"BMAAAA",
        stringu2:"TIAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:752,
        unique2:228,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:52,
        twothousand:152,
        fivethous:252,
        tenthous:752,
        odd:4,
        even:5,
        stringu1:"YCAAAA",
        stringu2:"UIAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:214,
        unique2:229,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:14,
        twothousand:14,
        fivethous:214,
        tenthous:214,
        odd:8,
        even:9,
        stringu1:"GIAAAA",
        stringu2:"VIAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:453,
        unique2:230,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:53,
        twothousand:53,
        fivethous:453,
        tenthous:453,
        odd:6,
        even:7,
        stringu1:"LRAAAA",
        stringu2:"WIAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:540,
        unique2:231,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:40,
        twothousand:140,
        fivethous:40,
        tenthous:540,
        odd:0,
        even:1,
        stringu1:"UUAAAA",
        stringu2:"XIAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:597,
        unique2:232,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:97,
        twothousand:197,
        fivethous:97,
        tenthous:597,
        odd:14,
        even:15,
        stringu1:"ZWAAAA",
        stringu2:"YIAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:356,
        unique2:233,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:56,
        twothousand:156,
        fivethous:356,
        tenthous:356,
        odd:12,
        even:13,
        stringu1:"SNAAAA",
        stringu2:"ZIAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:720,
        unique2:234,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:20,
        twothousand:120,
        fivethous:220,
        tenthous:720,
        odd:0,
        even:1,
        stringu1:"SBAAAA",
        stringu2:"AJAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:367,
        unique2:235,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:67,
        twothousand:167,
        fivethous:367,
        tenthous:367,
        odd:14,
        even:15,
        stringu1:"DOAAAA",
        stringu2:"BJAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:762,
        unique2:236,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:62,
        twothousand:162,
        fivethous:262,
        tenthous:762,
        odd:4,
        even:5,
        stringu1:"IDAAAA",
        stringu2:"CJAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:986,
        unique2:237,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:86,
        twothousand:186,
        fivethous:486,
        tenthous:986,
        odd:12,
        even:13,
        stringu1:"YLAAAA",
        stringu2:"DJAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:924,
        unique2:238,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:24,
        twothousand:124,
        fivethous:424,
        tenthous:924,
        odd:8,
        even:9,
        stringu1:"OJAAAA",
        stringu2:"EJAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:779,
        unique2:239,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:79,
        twothousand:179,
        fivethous:279,
        tenthous:779,
        odd:18,
        even:19,
        stringu1:"ZDAAAA",
        stringu2:"FJAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:684,
        unique2:240,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:84,
        twothousand:84,
        fivethous:184,
        tenthous:684,
        odd:8,
        even:9,
        stringu1:"IAAAAA",
        stringu2:"GJAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:413,
        unique2:241,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:13,
        twothousand:13,
        fivethous:413,
        tenthous:413,
        odd:6,
        even:7,
        stringu1:"XPAAAA",
        stringu2:"HJAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:479,
        unique2:242,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:79,
        twothousand:79,
        fivethous:479,
        tenthous:479,
        odd:18,
        even:19,
        stringu1:"LSAAAA",
        stringu2:"IJAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:731,
        unique2:243,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:31,
        twothousand:131,
        fivethous:231,
        tenthous:731,
        odd:2,
        even:3,
        stringu1:"DCAAAA",
        stringu2:"JJAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:409,
        unique2:244,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:9,
        twothousand:9,
        fivethous:409,
        tenthous:409,
        odd:18,
        even:19,
        stringu1:"TPAAAA",
        stringu2:"KJAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:372,
        unique2:245,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:72,
        twothousand:172,
        fivethous:372,
        tenthous:372,
        odd:4,
        even:5,
        stringu1:"IOAAAA",
        stringu2:"LJAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:139,
        unique2:246,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:39,
        twothousand:139,
        fivethous:139,
        tenthous:139,
        odd:18,
        even:19,
        stringu1:"JFAAAA",
        stringu2:"MJAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:717,
        unique2:247,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:17,
        twothousand:117,
        fivethous:217,
        tenthous:717,
        odd:14,
        even:15,
        stringu1:"PBAAAA",
        stringu2:"NJAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:539,
        unique2:248,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:39,
        twothousand:139,
        fivethous:39,
        tenthous:539,
        odd:18,
        even:19,
        stringu1:"TUAAAA",
        stringu2:"OJAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:318,
        unique2:249,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:18,
        twothousand:118,
        fivethous:318,
        tenthous:318,
        odd:16,
        even:17,
        stringu1:"GMAAAA",
        stringu2:"PJAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:208,
        unique2:250,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:8,
        twothousand:8,
        fivethous:208,
        tenthous:208,
        odd:16,
        even:17,
        stringu1:"AIAAAA",
        stringu2:"QJAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:797,
        unique2:251,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:97,
        twothousand:197,
        fivethous:297,
        tenthous:797,
        odd:14,
        even:15,
        stringu1:"REAAAA",
        stringu2:"RJAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:661,
        unique2:252,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:61,
        twothousand:61,
        fivethous:161,
        tenthous:661,
        odd:2,
        even:3,
        stringu1:"LZAAAA",
        stringu2:"SJAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:50,
        unique2:253,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:50,
        twothousand:50,
        fivethous:50,
        tenthous:50,
        odd:0,
        even:1,
        stringu1:"YBAAAA",
        stringu2:"TJAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:102,
        unique2:254,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:2,
        twothousand:102,
        fivethous:102,
        tenthous:102,
        odd:4,
        even:5,
        stringu1:"YDAAAA",
        stringu2:"UJAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:484,
        unique2:255,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:84,
        twothousand:84,
        fivethous:484,
        tenthous:484,
        odd:8,
        even:9,
        stringu1:"QSAAAA",
        stringu2:"VJAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:108,
        unique2:256,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:8,
        twothousand:108,
        fivethous:108,
        tenthous:108,
        odd:16,
        even:17,
        stringu1:"EEAAAA",
        stringu2:"WJAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:140,
        unique2:257,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:40,
        twothousand:140,
        fivethous:140,
        tenthous:140,
        odd:0,
        even:1,
        stringu1:"KFAAAA",
        stringu2:"XJAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:996,
        unique2:258,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:96,
        twothousand:196,
        fivethous:496,
        tenthous:996,
        odd:12,
        even:13,
        stringu1:"IMAAAA",
        stringu2:"YJAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:687,
        unique2:259,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:87,
        twothousand:87,
        fivethous:187,
        tenthous:687,
        odd:14,
        even:15,
        stringu1:"LAAAAA",
        stringu2:"ZJAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:241,
        unique2:260,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:41,
        twothousand:41,
        fivethous:241,
        tenthous:241,
        odd:2,
        even:3,
        stringu1:"HJAAAA",
        stringu2:"AKAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:923,
        unique2:261,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:23,
        twothousand:123,
        fivethous:423,
        tenthous:923,
        odd:6,
        even:7,
        stringu1:"NJAAAA",
        stringu2:"BKAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:500,
        unique2:262,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:0,
        twothousand:100,
        fivethous:0,
        tenthous:500,
        odd:0,
        even:1,
        stringu1:"GTAAAA",
        stringu2:"CKAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:536,
        unique2:263,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:36,
        twothousand:136,
        fivethous:36,
        tenthous:536,
        odd:12,
        even:13,
        stringu1:"QUAAAA",
        stringu2:"DKAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:490,
        unique2:264,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:90,
        twothousand:90,
        fivethous:490,
        tenthous:490,
        odd:0,
        even:1,
        stringu1:"WSAAAA",
        stringu2:"EKAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:773,
        unique2:265,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:73,
        twothousand:173,
        fivethous:273,
        tenthous:773,
        odd:6,
        even:7,
        stringu1:"TDAAAA",
        stringu2:"FKAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:19,
        unique2:266,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:19,
        twothousand:19,
        fivethous:19,
        tenthous:19,
        odd:18,
        even:19,
        stringu1:"TAAAAA",
        stringu2:"GKAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:534,
        unique2:267,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:34,
        twothousand:134,
        fivethous:34,
        tenthous:534,
        odd:8,
        even:9,
        stringu1:"OUAAAA",
        stringu2:"HKAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:941,
        unique2:268,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:41,
        twothousand:141,
        fivethous:441,
        tenthous:941,
        odd:2,
        even:3,
        stringu1:"FKAAAA",
        stringu2:"IKAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:477,
        unique2:269,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:77,
        twothousand:77,
        fivethous:477,
        tenthous:477,
        odd:14,
        even:15,
        stringu1:"JSAAAA",
        stringu2:"JKAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:173,
        unique2:270,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:73,
        twothousand:173,
        fivethous:173,
        tenthous:173,
        odd:6,
        even:7,
        stringu1:"RGAAAA",
        stringu2:"KKAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:113,
        unique2:271,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:13,
        twothousand:113,
        fivethous:113,
        tenthous:113,
        odd:6,
        even:7,
        stringu1:"JEAAAA",
        stringu2:"LKAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:526,
        unique2:272,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:26,
        twothousand:126,
        fivethous:26,
        tenthous:526,
        odd:12,
        even:13,
        stringu1:"GUAAAA",
        stringu2:"MKAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:727,
        unique2:273,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:27,
        twothousand:127,
        fivethous:227,
        tenthous:727,
        odd:14,
        even:15,
        stringu1:"ZBAAAA",
        stringu2:"NKAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:302,
        unique2:274,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:2,
        twothousand:102,
        fivethous:302,
        tenthous:302,
        odd:4,
        even:5,
        stringu1:"QLAAAA",
        stringu2:"OKAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:789,
        unique2:275,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:89,
        twothousand:189,
        fivethous:289,
        tenthous:789,
        odd:18,
        even:19,
        stringu1:"JEAAAA",
        stringu2:"PKAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:447,
        unique2:276,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:47,
        twothousand:47,
        fivethous:447,
        tenthous:447,
        odd:14,
        even:15,
        stringu1:"FRAAAA",
        stringu2:"QKAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:884,
        unique2:277,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:84,
        twothousand:84,
        fivethous:384,
        tenthous:884,
        odd:8,
        even:9,
        stringu1:"AIAAAA",
        stringu2:"RKAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:718,
        unique2:278,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:18,
        twothousand:118,
        fivethous:218,
        tenthous:718,
        odd:16,
        even:17,
        stringu1:"QBAAAA",
        stringu2:"SKAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:818,
        unique2:279,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:18,
        twothousand:18,
        fivethous:318,
        tenthous:818,
        odd:16,
        even:17,
        stringu1:"MFAAAA",
        stringu2:"TKAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:466,
        unique2:280,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:66,
        twothousand:66,
        fivethous:466,
        tenthous:466,
        odd:12,
        even:13,
        stringu1:"YRAAAA",
        stringu2:"UKAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:131,
        unique2:281,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:31,
        twothousand:131,
        fivethous:131,
        tenthous:131,
        odd:2,
        even:3,
        stringu1:"BFAAAA",
        stringu2:"VKAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:503,
        unique2:282,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:3,
        twothousand:103,
        fivethous:3,
        tenthous:503,
        odd:6,
        even:7,
        stringu1:"JTAAAA",
        stringu2:"WKAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:364,
        unique2:283,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:64,
        twothousand:164,
        fivethous:364,
        tenthous:364,
        odd:8,
        even:9,
        stringu1:"AOAAAA",
        stringu2:"XKAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:934,
        unique2:284,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:34,
        twothousand:134,
        fivethous:434,
        tenthous:934,
        odd:8,
        even:9,
        stringu1:"YJAAAA",
        stringu2:"YKAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:542,
        unique2:285,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:42,
        twothousand:142,
        fivethous:42,
        tenthous:542,
        odd:4,
        even:5,
        stringu1:"WUAAAA",
        stringu2:"ZKAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:146,
        unique2:286,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:46,
        twothousand:146,
        fivethous:146,
        tenthous:146,
        odd:12,
        even:13,
        stringu1:"QFAAAA",
        stringu2:"ALAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:652,
        unique2:287,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:52,
        twothousand:52,
        fivethous:152,
        tenthous:652,
        odd:4,
        even:5,
        stringu1:"CZAAAA",
        stringu2:"BLAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:566,
        unique2:288,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:66,
        twothousand:166,
        fivethous:66,
        tenthous:566,
        odd:12,
        even:13,
        stringu1:"UVAAAA",
        stringu2:"CLAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:788,
        unique2:289,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:88,
        twothousand:188,
        fivethous:288,
        tenthous:788,
        odd:16,
        even:17,
        stringu1:"IEAAAA",
        stringu2:"DLAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:168,
        unique2:290,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:68,
        twothousand:168,
        fivethous:168,
        tenthous:168,
        odd:16,
        even:17,
        stringu1:"MGAAAA",
        stringu2:"ELAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:736,
        unique2:291,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:36,
        twothousand:136,
        fivethous:236,
        tenthous:736,
        odd:12,
        even:13,
        stringu1:"ICAAAA",
        stringu2:"FLAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:795,
        unique2:292,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:95,
        twothousand:195,
        fivethous:295,
        tenthous:795,
        odd:10,
        even:11,
        stringu1:"PEAAAA",
        stringu2:"GLAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:103,
        unique2:293,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:3,
        twothousand:103,
        fivethous:103,
        tenthous:103,
        odd:6,
        even:7,
        stringu1:"ZDAAAA",
        stringu2:"HLAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:763,
        unique2:294,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:63,
        twothousand:163,
        fivethous:263,
        tenthous:763,
        odd:6,
        even:7,
        stringu1:"JDAAAA",
        stringu2:"ILAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:256,
        unique2:295,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:56,
        twothousand:56,
        fivethous:256,
        tenthous:256,
        odd:12,
        even:13,
        stringu1:"WJAAAA",
        stringu2:"JLAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:63,
        unique2:296,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:63,
        twothousand:63,
        fivethous:63,
        tenthous:63,
        odd:6,
        even:7,
        stringu1:"LCAAAA",
        stringu2:"KLAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:702,
        unique2:297,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:2,
        twothousand:102,
        fivethous:202,
        tenthous:702,
        odd:4,
        even:5,
        stringu1:"ABAAAA",
        stringu2:"LLAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:390,
        unique2:298,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:90,
        twothousand:190,
        fivethous:390,
        tenthous:390,
        odd:0,
        even:1,
        stringu1:"APAAAA",
        stringu2:"MLAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:116,
        unique2:299,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:16,
        twothousand:116,
        fivethous:116,
        tenthous:116,
        odd:12,
        even:13,
        stringu1:"MEAAAA",
        stringu2:"NLAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:354,
        unique2:300,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:54,
        twothousand:154,
        fivethous:354,
        tenthous:354,
        odd:8,
        even:9,
        stringu1:"QNAAAA",
        stringu2:"OLAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:162,
        unique2:301,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:62,
        twothousand:162,
        fivethous:162,
        tenthous:162,
        odd:4,
        even:5,
        stringu1:"GGAAAA",
        stringu2:"PLAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:71,
        unique2:302,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:71,
        twothousand:71,
        fivethous:71,
        tenthous:71,
        odd:2,
        even:3,
        stringu1:"TCAAAA",
        stringu2:"QLAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:916,
        unique2:303,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:16,
        twothousand:116,
        fivethous:416,
        tenthous:916,
        odd:12,
        even:13,
        stringu1:"GJAAAA",
        stringu2:"RLAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:565,
        unique2:304,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:65,
        twothousand:165,
        fivethous:65,
        tenthous:565,
        odd:10,
        even:11,
        stringu1:"TVAAAA",
        stringu2:"SLAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:509,
        unique2:305,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:9,
        twothousand:109,
        fivethous:9,
        tenthous:509,
        odd:18,
        even:19,
        stringu1:"PTAAAA",
        stringu2:"TLAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:20,
        unique2:306,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:20,
        twothousand:20,
        fivethous:20,
        tenthous:20,
        odd:0,
        even:1,
        stringu1:"UAAAAA",
        stringu2:"ULAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:813,
        unique2:307,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:13,
        twothousand:13,
        fivethous:313,
        tenthous:813,
        odd:6,
        even:7,
        stringu1:"HFAAAA",
        stringu2:"VLAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:80,
        unique2:308,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:80,
        twothousand:80,
        fivethous:80,
        tenthous:80,
        odd:0,
        even:1,
        stringu1:"CDAAAA",
        stringu2:"WLAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:400,
        unique2:309,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:0,
        twothousand:0,
        fivethous:400,
        tenthous:400,
        odd:0,
        even:1,
        stringu1:"KPAAAA",
        stringu2:"XLAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:888,
        unique2:310,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:88,
        twothousand:88,
        fivethous:388,
        tenthous:888,
        odd:16,
        even:17,
        stringu1:"EIAAAA",
        stringu2:"YLAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:825,
        unique2:311,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:25,
        twothousand:25,
        fivethous:325,
        tenthous:825,
        odd:10,
        even:11,
        stringu1:"TFAAAA",
        stringu2:"ZLAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:401,
        unique2:312,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:1,
        twothousand:1,
        fivethous:401,
        tenthous:401,
        odd:2,
        even:3,
        stringu1:"LPAAAA",
        stringu2:"AMAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:158,
        unique2:313,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:58,
        twothousand:158,
        fivethous:158,
        tenthous:158,
        odd:16,
        even:17,
        stringu1:"CGAAAA",
        stringu2:"BMAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:973,
        unique2:314,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:73,
        twothousand:173,
        fivethous:473,
        tenthous:973,
        odd:6,
        even:7,
        stringu1:"LLAAAA",
        stringu2:"CMAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:324,
        unique2:315,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:24,
        twothousand:124,
        fivethous:324,
        tenthous:324,
        odd:8,
        even:9,
        stringu1:"MMAAAA",
        stringu2:"DMAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:873,
        unique2:316,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:73,
        twothousand:73,
        fivethous:373,
        tenthous:873,
        odd:6,
        even:7,
        stringu1:"PHAAAA",
        stringu2:"EMAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:676,
        unique2:317,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:76,
        twothousand:76,
        fivethous:176,
        tenthous:676,
        odd:12,
        even:13,
        stringu1:"AAAAAA",
        stringu2:"FMAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:199,
        unique2:318,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:99,
        twothousand:199,
        fivethous:199,
        tenthous:199,
        odd:18,
        even:19,
        stringu1:"RHAAAA",
        stringu2:"GMAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:304,
        unique2:319,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:4,
        twothousand:104,
        fivethous:304,
        tenthous:304,
        odd:8,
        even:9,
        stringu1:"SLAAAA",
        stringu2:"HMAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:338,
        unique2:320,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:38,
        twothousand:138,
        fivethous:338,
        tenthous:338,
        odd:16,
        even:17,
        stringu1:"ANAAAA",
        stringu2:"IMAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:743,
        unique2:321,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:43,
        twothousand:143,
        fivethous:243,
        tenthous:743,
        odd:6,
        even:7,
        stringu1:"PCAAAA",
        stringu2:"JMAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:730,
        unique2:322,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:30,
        twothousand:130,
        fivethous:230,
        tenthous:730,
        odd:0,
        even:1,
        stringu1:"CCAAAA",
        stringu2:"KMAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:130,
        unique2:323,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:30,
        twothousand:130,
        fivethous:130,
        tenthous:130,
        odd:0,
        even:1,
        stringu1:"AFAAAA",
        stringu2:"LMAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:224,
        unique2:324,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:24,
        twothousand:24,
        fivethous:224,
        tenthous:224,
        odd:8,
        even:9,
        stringu1:"QIAAAA",
        stringu2:"MMAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:216,
        unique2:325,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:16,
        twothousand:16,
        fivethous:216,
        tenthous:216,
        odd:12,
        even:13,
        stringu1:"IIAAAA",
        stringu2:"NMAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:2,
        unique2:326,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:2,
        twothousand:2,
        fivethous:2,
        tenthous:2,
        odd:4,
        even:5,
        stringu1:"CAAAAA",
        stringu2:"OMAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:836,
        unique2:327,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:36,
        twothousand:36,
        fivethous:336,
        tenthous:836,
        odd:12,
        even:13,
        stringu1:"EGAAAA",
        stringu2:"PMAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:443,
        unique2:328,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:43,
        twothousand:43,
        fivethous:443,
        tenthous:443,
        odd:6,
        even:7,
        stringu1:"BRAAAA",
        stringu2:"QMAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:777,
        unique2:329,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:77,
        twothousand:177,
        fivethous:277,
        tenthous:777,
        odd:14,
        even:15,
        stringu1:"XDAAAA",
        stringu2:"RMAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:126,
        unique2:330,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:26,
        twothousand:126,
        fivethous:126,
        tenthous:126,
        odd:12,
        even:13,
        stringu1:"WEAAAA",
        stringu2:"SMAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:117,
        unique2:331,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:17,
        twothousand:117,
        fivethous:117,
        tenthous:117,
        odd:14,
        even:15,
        stringu1:"NEAAAA",
        stringu2:"TMAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:633,
        unique2:332,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:33,
        twothousand:33,
        fivethous:133,
        tenthous:633,
        odd:6,
        even:7,
        stringu1:"JYAAAA",
        stringu2:"UMAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:310,
        unique2:333,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:10,
        twothousand:110,
        fivethous:310,
        tenthous:310,
        odd:0,
        even:1,
        stringu1:"YLAAAA",
        stringu2:"VMAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:622,
        unique2:334,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:22,
        twothousand:22,
        fivethous:122,
        tenthous:622,
        odd:4,
        even:5,
        stringu1:"YXAAAA",
        stringu2:"WMAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:268,
        unique2:335,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:68,
        twothousand:68,
        fivethous:268,
        tenthous:268,
        odd:16,
        even:17,
        stringu1:"IKAAAA",
        stringu2:"XMAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:384,
        unique2:336,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:84,
        twothousand:184,
        fivethous:384,
        tenthous:384,
        odd:8,
        even:9,
        stringu1:"UOAAAA",
        stringu2:"YMAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:460,
        unique2:337,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:60,
        twothousand:60,
        fivethous:460,
        tenthous:460,
        odd:0,
        even:1,
        stringu1:"SRAAAA",
        stringu2:"ZMAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:475,
        unique2:338,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:75,
        twothousand:75,
        fivethous:475,
        tenthous:475,
        odd:10,
        even:11,
        stringu1:"HSAAAA",
        stringu2:"ANAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:624,
        unique2:339,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:24,
        twothousand:24,
        fivethous:124,
        tenthous:624,
        odd:8,
        even:9,
        stringu1:"AYAAAA",
        stringu2:"BNAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:826,
        unique2:340,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:26,
        twothousand:26,
        fivethous:326,
        tenthous:826,
        odd:12,
        even:13,
        stringu1:"UFAAAA",
        stringu2:"CNAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:680,
        unique2:341,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:80,
        twothousand:80,
        fivethous:180,
        tenthous:680,
        odd:0,
        even:1,
        stringu1:"EAAAAA",
        stringu2:"DNAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:306,
        unique2:342,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:6,
        twothousand:106,
        fivethous:306,
        tenthous:306,
        odd:12,
        even:13,
        stringu1:"ULAAAA",
        stringu2:"ENAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:896,
        unique2:343,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:96,
        twothousand:96,
        fivethous:396,
        tenthous:896,
        odd:12,
        even:13,
        stringu1:"MIAAAA",
        stringu2:"FNAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:30,
        unique2:344,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:30,
        twothousand:30,
        fivethous:30,
        tenthous:30,
        odd:0,
        even:1,
        stringu1:"EBAAAA",
        stringu2:"GNAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:576,
        unique2:345,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:76,
        twothousand:176,
        fivethous:76,
        tenthous:576,
        odd:12,
        even:13,
        stringu1:"EWAAAA",
        stringu2:"HNAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:551,
        unique2:346,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:51,
        twothousand:151,
        fivethous:51,
        tenthous:551,
        odd:2,
        even:3,
        stringu1:"FVAAAA",
        stringu2:"INAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:639,
        unique2:347,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:39,
        twothousand:39,
        fivethous:139,
        tenthous:639,
        odd:18,
        even:19,
        stringu1:"PYAAAA",
        stringu2:"JNAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:975,
        unique2:348,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:75,
        twothousand:175,
        fivethous:475,
        tenthous:975,
        odd:10,
        even:11,
        stringu1:"NLAAAA",
        stringu2:"KNAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:882,
        unique2:349,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:82,
        twothousand:82,
        fivethous:382,
        tenthous:882,
        odd:4,
        even:5,
        stringu1:"YHAAAA",
        stringu2:"LNAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:160,
        unique2:350,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:60,
        twothousand:160,
        fivethous:160,
        tenthous:160,
        odd:0,
        even:1,
        stringu1:"EGAAAA",
        stringu2:"MNAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:522,
        unique2:351,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:22,
        twothousand:122,
        fivethous:22,
        tenthous:522,
        odd:4,
        even:5,
        stringu1:"CUAAAA",
        stringu2:"NNAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:620,
        unique2:352,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:20,
        twothousand:20,
        fivethous:120,
        tenthous:620,
        odd:0,
        even:1,
        stringu1:"WXAAAA",
        stringu2:"ONAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:719,
        unique2:353,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:19,
        twothousand:119,
        fivethous:219,
        tenthous:719,
        odd:18,
        even:19,
        stringu1:"RBAAAA",
        stringu2:"PNAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:88,
        unique2:354,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:88,
        twothousand:88,
        fivethous:88,
        tenthous:88,
        odd:16,
        even:17,
        stringu1:"KDAAAA",
        stringu2:"QNAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:614,
        unique2:355,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:14,
        twothousand:14,
        fivethous:114,
        tenthous:614,
        odd:8,
        even:9,
        stringu1:"QXAAAA",
        stringu2:"RNAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:54,
        unique2:356,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:54,
        twothousand:54,
        fivethous:54,
        tenthous:54,
        odd:8,
        even:9,
        stringu1:"CCAAAA",
        stringu2:"SNAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:209,
        unique2:357,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:9,
        twothousand:9,
        fivethous:209,
        tenthous:209,
        odd:18,
        even:19,
        stringu1:"BIAAAA",
        stringu2:"TNAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:67,
        unique2:358,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:67,
        twothousand:67,
        fivethous:67,
        tenthous:67,
        odd:14,
        even:15,
        stringu1:"PCAAAA",
        stringu2:"UNAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:809,
        unique2:359,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:9,
        twothousand:9,
        fivethous:309,
        tenthous:809,
        odd:18,
        even:19,
        stringu1:"DFAAAA",
        stringu2:"VNAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:982,
        unique2:360,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:82,
        twothousand:182,
        fivethous:482,
        tenthous:982,
        odd:4,
        even:5,
        stringu1:"ULAAAA",
        stringu2:"WNAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:817,
        unique2:361,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:17,
        twothousand:17,
        fivethous:317,
        tenthous:817,
        odd:14,
        even:15,
        stringu1:"LFAAAA",
        stringu2:"XNAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:187,
        unique2:362,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:87,
        twothousand:187,
        fivethous:187,
        tenthous:187,
        odd:14,
        even:15,
        stringu1:"FHAAAA",
        stringu2:"YNAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:992,
        unique2:363,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:92,
        twothousand:192,
        fivethous:492,
        tenthous:992,
        odd:4,
        even:5,
        stringu1:"EMAAAA",
        stringu2:"ZNAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:580,
        unique2:364,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:80,
        twothousand:180,
        fivethous:80,
        tenthous:580,
        odd:0,
        even:1,
        stringu1:"IWAAAA",
        stringu2:"AOAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:658,
        unique2:365,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:58,
        twothousand:58,
        fivethous:158,
        tenthous:658,
        odd:16,
        even:17,
        stringu1:"IZAAAA",
        stringu2:"BOAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:222,
        unique2:366,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:22,
        twothousand:22,
        fivethous:222,
        tenthous:222,
        odd:4,
        even:5,
        stringu1:"OIAAAA",
        stringu2:"COAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:667,
        unique2:367,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:67,
        twothousand:67,
        fivethous:167,
        tenthous:667,
        odd:14,
        even:15,
        stringu1:"RZAAAA",
        stringu2:"DOAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:715,
        unique2:368,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:15,
        twothousand:115,
        fivethous:215,
        tenthous:715,
        odd:10,
        even:11,
        stringu1:"NBAAAA",
        stringu2:"EOAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:990,
        unique2:369,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:90,
        twothousand:190,
        fivethous:490,
        tenthous:990,
        odd:0,
        even:1,
        stringu1:"CMAAAA",
        stringu2:"FOAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:22,
        unique2:370,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:22,
        twothousand:22,
        fivethous:22,
        tenthous:22,
        odd:4,
        even:5,
        stringu1:"WAAAAA",
        stringu2:"GOAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:362,
        unique2:371,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:62,
        twothousand:162,
        fivethous:362,
        tenthous:362,
        odd:4,
        even:5,
        stringu1:"YNAAAA",
        stringu2:"HOAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:376,
        unique2:372,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:76,
        twothousand:176,
        fivethous:376,
        tenthous:376,
        odd:12,
        even:13,
        stringu1:"MOAAAA",
        stringu2:"IOAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:246,
        unique2:373,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:46,
        twothousand:46,
        fivethous:246,
        tenthous:246,
        odd:12,
        even:13,
        stringu1:"MJAAAA",
        stringu2:"JOAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:300,
        unique2:374,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:0,
        twothousand:100,
        fivethous:300,
        tenthous:300,
        odd:0,
        even:1,
        stringu1:"OLAAAA",
        stringu2:"KOAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:231,
        unique2:375,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:31,
        twothousand:31,
        fivethous:231,
        tenthous:231,
        odd:2,
        even:3,
        stringu1:"XIAAAA",
        stringu2:"LOAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:151,
        unique2:376,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:51,
        twothousand:151,
        fivethous:151,
        tenthous:151,
        odd:2,
        even:3,
        stringu1:"VFAAAA",
        stringu2:"MOAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:29,
        unique2:377,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:29,
        twothousand:29,
        fivethous:29,
        tenthous:29,
        odd:18,
        even:19,
        stringu1:"DBAAAA",
        stringu2:"NOAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:297,
        unique2:378,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:97,
        twothousand:97,
        fivethous:297,
        tenthous:297,
        odd:14,
        even:15,
        stringu1:"LLAAAA",
        stringu2:"OOAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:403,
        unique2:379,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:3,
        twothousand:3,
        fivethous:403,
        tenthous:403,
        odd:6,
        even:7,
        stringu1:"NPAAAA",
        stringu2:"POAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:716,
        unique2:380,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:16,
        twothousand:116,
        fivethous:216,
        tenthous:716,
        odd:12,
        even:13,
        stringu1:"OBAAAA",
        stringu2:"QOAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:260,
        unique2:381,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:60,
        twothousand:60,
        fivethous:260,
        tenthous:260,
        odd:0,
        even:1,
        stringu1:"AKAAAA",
        stringu2:"ROAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:170,
        unique2:382,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:70,
        twothousand:170,
        fivethous:170,
        tenthous:170,
        odd:0,
        even:1,
        stringu1:"OGAAAA",
        stringu2:"SOAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:285,
        unique2:383,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:85,
        twothousand:85,
        fivethous:285,
        tenthous:285,
        odd:10,
        even:11,
        stringu1:"ZKAAAA",
        stringu2:"TOAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:82,
        unique2:384,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:82,
        twothousand:82,
        fivethous:82,
        tenthous:82,
        odd:4,
        even:5,
        stringu1:"EDAAAA",
        stringu2:"UOAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:958,
        unique2:385,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:58,
        twothousand:158,
        fivethous:458,
        tenthous:958,
        odd:16,
        even:17,
        stringu1:"WKAAAA",
        stringu2:"VOAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:175,
        unique2:386,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:75,
        twothousand:175,
        fivethous:175,
        tenthous:175,
        odd:10,
        even:11,
        stringu1:"TGAAAA",
        stringu2:"WOAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:671,
        unique2:387,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:71,
        twothousand:71,
        fivethous:171,
        tenthous:671,
        odd:2,
        even:3,
        stringu1:"VZAAAA",
        stringu2:"XOAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:822,
        unique2:388,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:22,
        twothousand:22,
        fivethous:322,
        tenthous:822,
        odd:4,
        even:5,
        stringu1:"QFAAAA",
        stringu2:"YOAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:573,
        unique2:389,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:73,
        twothousand:173,
        fivethous:73,
        tenthous:573,
        odd:6,
        even:7,
        stringu1:"BWAAAA",
        stringu2:"ZOAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:723,
        unique2:390,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:23,
        twothousand:123,
        fivethous:223,
        tenthous:723,
        odd:6,
        even:7,
        stringu1:"VBAAAA",
        stringu2:"APAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:195,
        unique2:391,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:95,
        twothousand:195,
        fivethous:195,
        tenthous:195,
        odd:10,
        even:11,
        stringu1:"NHAAAA",
        stringu2:"BPAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:197,
        unique2:392,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:97,
        twothousand:197,
        fivethous:197,
        tenthous:197,
        odd:14,
        even:15,
        stringu1:"PHAAAA",
        stringu2:"CPAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:755,
        unique2:393,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:55,
        twothousand:155,
        fivethous:255,
        tenthous:755,
        odd:10,
        even:11,
        stringu1:"BDAAAA",
        stringu2:"DPAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:42,
        unique2:394,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:42,
        twothousand:42,
        fivethous:42,
        tenthous:42,
        odd:4,
        even:5,
        stringu1:"QBAAAA",
        stringu2:"EPAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:897,
        unique2:395,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:97,
        twothousand:97,
        fivethous:397,
        tenthous:897,
        odd:14,
        even:15,
        stringu1:"NIAAAA",
        stringu2:"FPAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:309,
        unique2:396,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:9,
        twothousand:109,
        fivethous:309,
        tenthous:309,
        odd:18,
        even:19,
        stringu1:"XLAAAA",
        stringu2:"GPAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:724,
        unique2:397,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:24,
        twothousand:124,
        fivethous:224,
        tenthous:724,
        odd:8,
        even:9,
        stringu1:"WBAAAA",
        stringu2:"HPAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:474,
        unique2:398,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:74,
        twothousand:74,
        fivethous:474,
        tenthous:474,
        odd:8,
        even:9,
        stringu1:"GSAAAA",
        stringu2:"IPAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:345,
        unique2:399,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:45,
        twothousand:145,
        fivethous:345,
        tenthous:345,
        odd:10,
        even:11,
        stringu1:"HNAAAA",
        stringu2:"JPAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:678,
        unique2:400,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:78,
        twothousand:78,
        fivethous:178,
        tenthous:678,
        odd:16,
        even:17,
        stringu1:"CAAAAA",
        stringu2:"KPAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:757,
        unique2:401,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:57,
        twothousand:157,
        fivethous:257,
        tenthous:757,
        odd:14,
        even:15,
        stringu1:"DDAAAA",
        stringu2:"LPAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:600,
        unique2:402,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:0,
        twothousand:0,
        fivethous:100,
        tenthous:600,
        odd:0,
        even:1,
        stringu1:"CXAAAA",
        stringu2:"MPAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:184,
        unique2:403,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:84,
        twothousand:184,
        fivethous:184,
        tenthous:184,
        odd:8,
        even:9,
        stringu1:"CHAAAA",
        stringu2:"NPAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:155,
        unique2:404,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:55,
        twothousand:155,
        fivethous:155,
        tenthous:155,
        odd:10,
        even:11,
        stringu1:"ZFAAAA",
        stringu2:"OPAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:136,
        unique2:405,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:36,
        twothousand:136,
        fivethous:136,
        tenthous:136,
        odd:12,
        even:13,
        stringu1:"GFAAAA",
        stringu2:"PPAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:889,
        unique2:406,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:89,
        twothousand:89,
        fivethous:389,
        tenthous:889,
        odd:18,
        even:19,
        stringu1:"FIAAAA",
        stringu2:"QPAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:95,
        unique2:407,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:95,
        twothousand:95,
        fivethous:95,
        tenthous:95,
        odd:10,
        even:11,
        stringu1:"RDAAAA",
        stringu2:"RPAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:549,
        unique2:408,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:49,
        twothousand:149,
        fivethous:49,
        tenthous:549,
        odd:18,
        even:19,
        stringu1:"DVAAAA",
        stringu2:"SPAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:81,
        unique2:409,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:81,
        twothousand:81,
        fivethous:81,
        tenthous:81,
        odd:2,
        even:3,
        stringu1:"DDAAAA",
        stringu2:"TPAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:679,
        unique2:410,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:79,
        twothousand:79,
        fivethous:179,
        tenthous:679,
        odd:18,
        even:19,
        stringu1:"DAAAAA",
        stringu2:"UPAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:27,
        unique2:411,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:27,
        twothousand:27,
        fivethous:27,
        tenthous:27,
        odd:14,
        even:15,
        stringu1:"BBAAAA",
        stringu2:"VPAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:748,
        unique2:412,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:48,
        twothousand:148,
        fivethous:248,
        tenthous:748,
        odd:16,
        even:17,
        stringu1:"UCAAAA",
        stringu2:"WPAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:107,
        unique2:413,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:7,
        twothousand:107,
        fivethous:107,
        tenthous:107,
        odd:14,
        even:15,
        stringu1:"DEAAAA",
        stringu2:"XPAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:870,
        unique2:414,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:70,
        twothousand:70,
        fivethous:370,
        tenthous:870,
        odd:0,
        even:1,
        stringu1:"MHAAAA",
        stringu2:"YPAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:848,
        unique2:415,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:48,
        twothousand:48,
        fivethous:348,
        tenthous:848,
        odd:16,
        even:17,
        stringu1:"QGAAAA",
        stringu2:"ZPAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:764,
        unique2:416,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:64,
        twothousand:164,
        fivethous:264,
        tenthous:764,
        odd:8,
        even:9,
        stringu1:"KDAAAA",
        stringu2:"AQAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:535,
        unique2:417,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:35,
        twothousand:135,
        fivethous:35,
        tenthous:535,
        odd:10,
        even:11,
        stringu1:"PUAAAA",
        stringu2:"BQAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:211,
        unique2:418,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:11,
        twothousand:11,
        fivethous:211,
        tenthous:211,
        odd:2,
        even:3,
        stringu1:"DIAAAA",
        stringu2:"CQAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:625,
        unique2:419,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:25,
        twothousand:25,
        fivethous:125,
        tenthous:625,
        odd:10,
        even:11,
        stringu1:"BYAAAA",
        stringu2:"DQAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:96,
        unique2:420,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:96,
        twothousand:96,
        fivethous:96,
        tenthous:96,
        odd:12,
        even:13,
        stringu1:"SDAAAA",
        stringu2:"EQAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:828,
        unique2:421,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:28,
        twothousand:28,
        fivethous:328,
        tenthous:828,
        odd:16,
        even:17,
        stringu1:"WFAAAA",
        stringu2:"FQAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:229,
        unique2:422,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:29,
        twothousand:29,
        fivethous:229,
        tenthous:229,
        odd:18,
        even:19,
        stringu1:"VIAAAA",
        stringu2:"GQAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:602,
        unique2:423,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:2,
        twothousand:2,
        fivethous:102,
        tenthous:602,
        odd:4,
        even:5,
        stringu1:"EXAAAA",
        stringu2:"HQAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:742,
        unique2:424,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:42,
        twothousand:142,
        fivethous:242,
        tenthous:742,
        odd:4,
        even:5,
        stringu1:"OCAAAA",
        stringu2:"IQAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:451,
        unique2:425,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:51,
        twothousand:51,
        fivethous:451,
        tenthous:451,
        odd:2,
        even:3,
        stringu1:"JRAAAA",
        stringu2:"JQAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:991,
        unique2:426,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:91,
        twothousand:191,
        fivethous:491,
        tenthous:991,
        odd:2,
        even:3,
        stringu1:"DMAAAA",
        stringu2:"KQAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:301,
        unique2:427,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:1,
        twothousand:101,
        fivethous:301,
        tenthous:301,
        odd:2,
        even:3,
        stringu1:"PLAAAA",
        stringu2:"LQAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:510,
        unique2:428,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:10,
        twothousand:110,
        fivethous:10,
        tenthous:510,
        odd:0,
        even:1,
        stringu1:"QTAAAA",
        stringu2:"MQAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:299,
        unique2:429,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:99,
        twothousand:99,
        fivethous:299,
        tenthous:299,
        odd:18,
        even:19,
        stringu1:"NLAAAA",
        stringu2:"NQAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:961,
        unique2:430,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:61,
        twothousand:161,
        fivethous:461,
        tenthous:961,
        odd:2,
        even:3,
        stringu1:"ZKAAAA",
        stringu2:"OQAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:3,
        unique2:431,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:3,
        twothousand:3,
        fivethous:3,
        tenthous:3,
        odd:6,
        even:7,
        stringu1:"DAAAAA",
        stringu2:"PQAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:106,
        unique2:432,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:6,
        twothousand:106,
        fivethous:106,
        tenthous:106,
        odd:12,
        even:13,
        stringu1:"CEAAAA",
        stringu2:"QQAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:591,
        unique2:433,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:91,
        twothousand:191,
        fivethous:91,
        tenthous:591,
        odd:2,
        even:3,
        stringu1:"TWAAAA",
        stringu2:"RQAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:700,
        unique2:434,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:0,
        twothousand:100,
        fivethous:200,
        tenthous:700,
        odd:0,
        even:1,
        stringu1:"YAAAAA",
        stringu2:"SQAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:841,
        unique2:435,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:41,
        twothousand:41,
        fivethous:341,
        tenthous:841,
        odd:2,
        even:3,
        stringu1:"JGAAAA",
        stringu2:"TQAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:829,
        unique2:436,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:29,
        twothousand:29,
        fivethous:329,
        tenthous:829,
        odd:18,
        even:19,
        stringu1:"XFAAAA",
        stringu2:"UQAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:508,
        unique2:437,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:8,
        twothousand:108,
        fivethous:8,
        tenthous:508,
        odd:16,
        even:17,
        stringu1:"OTAAAA",
        stringu2:"VQAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:750,
        unique2:438,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:50,
        twothousand:150,
        fivethous:250,
        tenthous:750,
        odd:0,
        even:1,
        stringu1:"WCAAAA",
        stringu2:"WQAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:665,
        unique2:439,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:65,
        twothousand:65,
        fivethous:165,
        tenthous:665,
        odd:10,
        even:11,
        stringu1:"PZAAAA",
        stringu2:"XQAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:157,
        unique2:440,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:57,
        twothousand:157,
        fivethous:157,
        tenthous:157,
        odd:14,
        even:15,
        stringu1:"BGAAAA",
        stringu2:"YQAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:694,
        unique2:441,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:94,
        twothousand:94,
        fivethous:194,
        tenthous:694,
        odd:8,
        even:9,
        stringu1:"SAAAAA",
        stringu2:"ZQAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:176,
        unique2:442,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:76,
        twothousand:176,
        fivethous:176,
        tenthous:176,
        odd:12,
        even:13,
        stringu1:"UGAAAA",
        stringu2:"ARAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:950,
        unique2:443,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:50,
        twothousand:150,
        fivethous:450,
        tenthous:950,
        odd:0,
        even:1,
        stringu1:"OKAAAA",
        stringu2:"BRAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:970,
        unique2:444,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:70,
        twothousand:170,
        fivethous:470,
        tenthous:970,
        odd:0,
        even:1,
        stringu1:"ILAAAA",
        stringu2:"CRAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:496,
        unique2:445,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:96,
        twothousand:96,
        fivethous:496,
        tenthous:496,
        odd:12,
        even:13,
        stringu1:"CTAAAA",
        stringu2:"DRAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:429,
        unique2:446,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:29,
        twothousand:29,
        fivethous:429,
        tenthous:429,
        odd:18,
        even:19,
        stringu1:"NQAAAA",
        stringu2:"ERAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:907,
        unique2:447,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:7,
        twothousand:107,
        fivethous:407,
        tenthous:907,
        odd:14,
        even:15,
        stringu1:"XIAAAA",
        stringu2:"FRAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:72,
        unique2:448,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:72,
        twothousand:72,
        fivethous:72,
        tenthous:72,
        odd:4,
        even:5,
        stringu1:"UCAAAA",
        stringu2:"GRAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:186,
        unique2:449,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:86,
        twothousand:186,
        fivethous:186,
        tenthous:186,
        odd:12,
        even:13,
        stringu1:"EHAAAA",
        stringu2:"HRAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:713,
        unique2:450,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:13,
        twothousand:113,
        fivethous:213,
        tenthous:713,
        odd:6,
        even:7,
        stringu1:"LBAAAA",
        stringu2:"IRAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:432,
        unique2:451,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:32,
        twothousand:32,
        fivethous:432,
        tenthous:432,
        odd:4,
        even:5,
        stringu1:"QQAAAA",
        stringu2:"JRAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:735,
        unique2:452,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:35,
        twothousand:135,
        fivethous:235,
        tenthous:735,
        odd:10,
        even:11,
        stringu1:"HCAAAA",
        stringu2:"KRAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:516,
        unique2:453,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:16,
        twothousand:116,
        fivethous:16,
        tenthous:516,
        odd:12,
        even:13,
        stringu1:"WTAAAA",
        stringu2:"LRAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:964,
        unique2:454,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:64,
        twothousand:164,
        fivethous:464,
        tenthous:964,
        odd:8,
        even:9,
        stringu1:"CLAAAA",
        stringu2:"MRAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:840,
        unique2:455,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:40,
        twothousand:40,
        fivethous:340,
        tenthous:840,
        odd:0,
        even:1,
        stringu1:"IGAAAA",
        stringu2:"NRAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:550,
        unique2:456,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:50,
        twothousand:150,
        fivethous:50,
        tenthous:550,
        odd:0,
        even:1,
        stringu1:"EVAAAA",
        stringu2:"ORAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:360,
        unique2:457,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:60,
        twothousand:160,
        fivethous:360,
        tenthous:360,
        odd:0,
        even:1,
        stringu1:"WNAAAA",
        stringu2:"PRAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:827,
        unique2:458,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:27,
        twothousand:27,
        fivethous:327,
        tenthous:827,
        odd:14,
        even:15,
        stringu1:"VFAAAA",
        stringu2:"QRAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:959,
        unique2:459,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:59,
        twothousand:159,
        fivethous:459,
        tenthous:959,
        odd:18,
        even:19,
        stringu1:"XKAAAA",
        stringu2:"RRAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:454,
        unique2:460,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:54,
        twothousand:54,
        fivethous:454,
        tenthous:454,
        odd:8,
        even:9,
        stringu1:"MRAAAA",
        stringu2:"SRAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:819,
        unique2:461,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:19,
        twothousand:19,
        fivethous:319,
        tenthous:819,
        odd:18,
        even:19,
        stringu1:"NFAAAA",
        stringu2:"TRAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:745,
        unique2:462,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:45,
        twothousand:145,
        fivethous:245,
        tenthous:745,
        odd:10,
        even:11,
        stringu1:"RCAAAA",
        stringu2:"URAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:279,
        unique2:463,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:79,
        twothousand:79,
        fivethous:279,
        tenthous:279,
        odd:18,
        even:19,
        stringu1:"TKAAAA",
        stringu2:"VRAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:426,
        unique2:464,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:26,
        twothousand:26,
        fivethous:426,
        tenthous:426,
        odd:12,
        even:13,
        stringu1:"KQAAAA",
        stringu2:"WRAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:70,
        unique2:465,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:70,
        twothousand:70,
        fivethous:70,
        tenthous:70,
        odd:0,
        even:1,
        stringu1:"SCAAAA",
        stringu2:"XRAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:637,
        unique2:466,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:37,
        twothousand:37,
        fivethous:137,
        tenthous:637,
        odd:14,
        even:15,
        stringu1:"NYAAAA",
        stringu2:"YRAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:417,
        unique2:467,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:17,
        twothousand:17,
        fivethous:417,
        tenthous:417,
        odd:14,
        even:15,
        stringu1:"BQAAAA",
        stringu2:"ZRAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:586,
        unique2:468,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:86,
        twothousand:186,
        fivethous:86,
        tenthous:586,
        odd:12,
        even:13,
        stringu1:"OWAAAA",
        stringu2:"ASAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:314,
        unique2:469,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:14,
        twothousand:114,
        fivethous:314,
        tenthous:314,
        odd:8,
        even:9,
        stringu1:"CMAAAA",
        stringu2:"BSAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:101,
        unique2:470,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:1,
        twothousand:101,
        fivethous:101,
        tenthous:101,
        odd:2,
        even:3,
        stringu1:"XDAAAA",
        stringu2:"CSAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:205,
        unique2:471,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:5,
        twothousand:5,
        fivethous:205,
        tenthous:205,
        odd:10,
        even:11,
        stringu1:"XHAAAA",
        stringu2:"DSAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:969,
        unique2:472,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:69,
        twothousand:169,
        fivethous:469,
        tenthous:969,
        odd:18,
        even:19,
        stringu1:"HLAAAA",
        stringu2:"ESAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:217,
        unique2:473,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:17,
        twothousand:17,
        fivethous:217,
        tenthous:217,
        odd:14,
        even:15,
        stringu1:"JIAAAA",
        stringu2:"FSAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:281,
        unique2:474,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:81,
        twothousand:81,
        fivethous:281,
        tenthous:281,
        odd:2,
        even:3,
        stringu1:"VKAAAA",
        stringu2:"GSAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:984,
        unique2:475,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:84,
        twothousand:184,
        fivethous:484,
        tenthous:984,
        odd:8,
        even:9,
        stringu1:"WLAAAA",
        stringu2:"HSAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:366,
        unique2:476,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:66,
        twothousand:166,
        fivethous:366,
        tenthous:366,
        odd:12,
        even:13,
        stringu1:"COAAAA",
        stringu2:"ISAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:483,
        unique2:477,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:83,
        twothousand:83,
        fivethous:483,
        tenthous:483,
        odd:6,
        even:7,
        stringu1:"PSAAAA",
        stringu2:"JSAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:838,
        unique2:478,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:38,
        twothousand:38,
        fivethous:338,
        tenthous:838,
        odd:16,
        even:17,
        stringu1:"GGAAAA",
        stringu2:"KSAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:64,
        unique2:479,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:64,
        twothousand:64,
        fivethous:64,
        tenthous:64,
        odd:8,
        even:9,
        stringu1:"MCAAAA",
        stringu2:"LSAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:981,
        unique2:480,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:81,
        twothousand:181,
        fivethous:481,
        tenthous:981,
        odd:2,
        even:3,
        stringu1:"TLAAAA",
        stringu2:"MSAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:538,
        unique2:481,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:38,
        twothousand:138,
        fivethous:38,
        tenthous:538,
        odd:16,
        even:17,
        stringu1:"SUAAAA",
        stringu2:"NSAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:39,
        unique2:482,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:39,
        twothousand:39,
        fivethous:39,
        tenthous:39,
        odd:18,
        even:19,
        stringu1:"NBAAAA",
        stringu2:"OSAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:60,
        unique2:483,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:60,
        twothousand:60,
        fivethous:60,
        tenthous:60,
        odd:0,
        even:1,
        stringu1:"ICAAAA",
        stringu2:"PSAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:874,
        unique2:484,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:74,
        twothousand:74,
        fivethous:374,
        tenthous:874,
        odd:8,
        even:9,
        stringu1:"QHAAAA",
        stringu2:"QSAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:955,
        unique2:485,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:55,
        twothousand:155,
        fivethous:455,
        tenthous:955,
        odd:10,
        even:11,
        stringu1:"TKAAAA",
        stringu2:"RSAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:347,
        unique2:486,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:47,
        twothousand:147,
        fivethous:347,
        tenthous:347,
        odd:14,
        even:15,
        stringu1:"JNAAAA",
        stringu2:"SSAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:227,
        unique2:487,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:27,
        twothousand:27,
        fivethous:227,
        tenthous:227,
        odd:14,
        even:15,
        stringu1:"TIAAAA",
        stringu2:"TSAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:44,
        unique2:488,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:44,
        twothousand:44,
        fivethous:44,
        tenthous:44,
        odd:8,
        even:9,
        stringu1:"SBAAAA",
        stringu2:"USAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:446,
        unique2:489,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:46,
        twothousand:46,
        fivethous:446,
        tenthous:446,
        odd:12,
        even:13,
        stringu1:"ERAAAA",
        stringu2:"VSAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:605,
        unique2:490,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:5,
        twothousand:5,
        fivethous:105,
        tenthous:605,
        odd:10,
        even:11,
        stringu1:"HXAAAA",
        stringu2:"WSAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:570,
        unique2:491,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:70,
        twothousand:170,
        fivethous:70,
        tenthous:570,
        odd:0,
        even:1,
        stringu1:"YVAAAA",
        stringu2:"XSAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:895,
        unique2:492,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:95,
        twothousand:95,
        fivethous:395,
        tenthous:895,
        odd:10,
        even:11,
        stringu1:"LIAAAA",
        stringu2:"YSAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:760,
        unique2:493,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:60,
        twothousand:160,
        fivethous:260,
        tenthous:760,
        odd:0,
        even:1,
        stringu1:"GDAAAA",
        stringu2:"ZSAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:428,
        unique2:494,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:28,
        twothousand:28,
        fivethous:428,
        tenthous:428,
        odd:16,
        even:17,
        stringu1:"MQAAAA",
        stringu2:"ATAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:628,
        unique2:495,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:28,
        twothousand:28,
        fivethous:128,
        tenthous:628,
        odd:16,
        even:17,
        stringu1:"EYAAAA",
        stringu2:"BTAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:933,
        unique2:496,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:33,
        twothousand:133,
        fivethous:433,
        tenthous:933,
        odd:6,
        even:7,
        stringu1:"XJAAAA",
        stringu2:"CTAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:263,
        unique2:497,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:63,
        twothousand:63,
        fivethous:263,
        tenthous:263,
        odd:6,
        even:7,
        stringu1:"DKAAAA",
        stringu2:"DTAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:729,
        unique2:498,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:29,
        twothousand:129,
        fivethous:229,
        tenthous:729,
        odd:18,
        even:19,
        stringu1:"BCAAAA",
        stringu2:"ETAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:860,
        unique2:499,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:60,
        twothousand:60,
        fivethous:360,
        tenthous:860,
        odd:0,
        even:1,
        stringu1:"CHAAAA",
        stringu2:"FTAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:76,
        unique2:500,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:76,
        twothousand:76,
        fivethous:76,
        tenthous:76,
        odd:12,
        even:13,
        stringu1:"YCAAAA",
        stringu2:"GTAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:293,
        unique2:501,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:93,
        twothousand:93,
        fivethous:293,
        tenthous:293,
        odd:6,
        even:7,
        stringu1:"HLAAAA",
        stringu2:"HTAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:296,
        unique2:502,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:96,
        twothousand:96,
        fivethous:296,
        tenthous:296,
        odd:12,
        even:13,
        stringu1:"KLAAAA",
        stringu2:"ITAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:124,
        unique2:503,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:24,
        twothousand:124,
        fivethous:124,
        tenthous:124,
        odd:8,
        even:9,
        stringu1:"UEAAAA",
        stringu2:"JTAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:568,
        unique2:504,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:68,
        twothousand:168,
        fivethous:68,
        tenthous:568,
        odd:16,
        even:17,
        stringu1:"WVAAAA",
        stringu2:"KTAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:337,
        unique2:505,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:37,
        twothousand:137,
        fivethous:337,
        tenthous:337,
        odd:14,
        even:15,
        stringu1:"ZMAAAA",
        stringu2:"LTAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:464,
        unique2:506,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:64,
        twothousand:64,
        fivethous:464,
        tenthous:464,
        odd:8,
        even:9,
        stringu1:"WRAAAA",
        stringu2:"MTAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:582,
        unique2:507,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:82,
        twothousand:182,
        fivethous:82,
        tenthous:582,
        odd:4,
        even:5,
        stringu1:"KWAAAA",
        stringu2:"NTAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:207,
        unique2:508,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:7,
        twothousand:7,
        fivethous:207,
        tenthous:207,
        odd:14,
        even:15,
        stringu1:"ZHAAAA",
        stringu2:"OTAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:518,
        unique2:509,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:18,
        twothousand:118,
        fivethous:18,
        tenthous:518,
        odd:16,
        even:17,
        stringu1:"YTAAAA",
        stringu2:"PTAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:513,
        unique2:510,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:13,
        twothousand:113,
        fivethous:13,
        tenthous:513,
        odd:6,
        even:7,
        stringu1:"TTAAAA",
        stringu2:"QTAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:127,
        unique2:511,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:27,
        twothousand:127,
        fivethous:127,
        tenthous:127,
        odd:14,
        even:15,
        stringu1:"XEAAAA",
        stringu2:"RTAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:396,
        unique2:512,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:96,
        twothousand:196,
        fivethous:396,
        tenthous:396,
        odd:12,
        even:13,
        stringu1:"GPAAAA",
        stringu2:"STAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:781,
        unique2:513,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:81,
        twothousand:181,
        fivethous:281,
        tenthous:781,
        odd:2,
        even:3,
        stringu1:"BEAAAA",
        stringu2:"TTAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:233,
        unique2:514,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:33,
        twothousand:33,
        fivethous:233,
        tenthous:233,
        odd:6,
        even:7,
        stringu1:"ZIAAAA",
        stringu2:"UTAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:709,
        unique2:515,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:9,
        twothousand:109,
        fivethous:209,
        tenthous:709,
        odd:18,
        even:19,
        stringu1:"HBAAAA",
        stringu2:"VTAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:325,
        unique2:516,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:25,
        twothousand:125,
        fivethous:325,
        tenthous:325,
        odd:10,
        even:11,
        stringu1:"NMAAAA",
        stringu2:"WTAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:143,
        unique2:517,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:43,
        twothousand:143,
        fivethous:143,
        tenthous:143,
        odd:6,
        even:7,
        stringu1:"NFAAAA",
        stringu2:"XTAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:824,
        unique2:518,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:24,
        twothousand:24,
        fivethous:324,
        tenthous:824,
        odd:8,
        even:9,
        stringu1:"SFAAAA",
        stringu2:"YTAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:122,
        unique2:519,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:22,
        twothousand:122,
        fivethous:122,
        tenthous:122,
        odd:4,
        even:5,
        stringu1:"SEAAAA",
        stringu2:"ZTAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:10,
        unique2:520,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:10,
        twothousand:10,
        fivethous:10,
        tenthous:10,
        odd:0,
        even:1,
        stringu1:"KAAAAA",
        stringu2:"AUAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:41,
        unique2:521,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:41,
        twothousand:41,
        fivethous:41,
        tenthous:41,
        odd:2,
        even:3,
        stringu1:"PBAAAA",
        stringu2:"BUAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:618,
        unique2:522,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:18,
        twothousand:18,
        fivethous:118,
        tenthous:618,
        odd:16,
        even:17,
        stringu1:"UXAAAA",
        stringu2:"CUAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:161,
        unique2:523,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:61,
        twothousand:161,
        fivethous:161,
        tenthous:161,
        odd:2,
        even:3,
        stringu1:"FGAAAA",
        stringu2:"DUAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:801,
        unique2:524,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:1,
        twothousand:1,
        fivethous:301,
        tenthous:801,
        odd:2,
        even:3,
        stringu1:"VEAAAA",
        stringu2:"EUAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:768,
        unique2:525,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:68,
        twothousand:168,
        fivethous:268,
        tenthous:768,
        odd:16,
        even:17,
        stringu1:"ODAAAA",
        stringu2:"FUAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:642,
        unique2:526,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:42,
        twothousand:42,
        fivethous:142,
        tenthous:642,
        odd:4,
        even:5,
        stringu1:"SYAAAA",
        stringu2:"GUAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:803,
        unique2:527,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:3,
        twothousand:3,
        fivethous:303,
        tenthous:803,
        odd:6,
        even:7,
        stringu1:"XEAAAA",
        stringu2:"HUAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:317,
        unique2:528,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:17,
        twothousand:117,
        fivethous:317,
        tenthous:317,
        odd:14,
        even:15,
        stringu1:"FMAAAA",
        stringu2:"IUAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:938,
        unique2:529,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:38,
        twothousand:138,
        fivethous:438,
        tenthous:938,
        odd:16,
        even:17,
        stringu1:"CKAAAA",
        stringu2:"JUAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:649,
        unique2:530,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:49,
        twothousand:49,
        fivethous:149,
        tenthous:649,
        odd:18,
        even:19,
        stringu1:"ZYAAAA",
        stringu2:"KUAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:738,
        unique2:531,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:38,
        twothousand:138,
        fivethous:238,
        tenthous:738,
        odd:16,
        even:17,
        stringu1:"KCAAAA",
        stringu2:"LUAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:344,
        unique2:532,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:44,
        twothousand:144,
        fivethous:344,
        tenthous:344,
        odd:8,
        even:9,
        stringu1:"GNAAAA",
        stringu2:"MUAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:399,
        unique2:533,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:99,
        twothousand:199,
        fivethous:399,
        tenthous:399,
        odd:18,
        even:19,
        stringu1:"JPAAAA",
        stringu2:"NUAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:609,
        unique2:534,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:9,
        twothousand:9,
        fivethous:109,
        tenthous:609,
        odd:18,
        even:19,
        stringu1:"LXAAAA",
        stringu2:"OUAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:677,
        unique2:535,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:77,
        twothousand:77,
        fivethous:177,
        tenthous:677,
        odd:14,
        even:15,
        stringu1:"BAAAAA",
        stringu2:"PUAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:478,
        unique2:536,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:78,
        twothousand:78,
        fivethous:478,
        tenthous:478,
        odd:16,
        even:17,
        stringu1:"KSAAAA",
        stringu2:"QUAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:452,
        unique2:537,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:52,
        twothousand:52,
        fivethous:452,
        tenthous:452,
        odd:4,
        even:5,
        stringu1:"KRAAAA",
        stringu2:"RUAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:261,
        unique2:538,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:61,
        twothousand:61,
        fivethous:261,
        tenthous:261,
        odd:2,
        even:3,
        stringu1:"BKAAAA",
        stringu2:"SUAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:449,
        unique2:539,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:49,
        twothousand:49,
        fivethous:449,
        tenthous:449,
        odd:18,
        even:19,
        stringu1:"HRAAAA",
        stringu2:"TUAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:433,
        unique2:540,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:33,
        twothousand:33,
        fivethous:433,
        tenthous:433,
        odd:6,
        even:7,
        stringu1:"RQAAAA",
        stringu2:"UUAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:5,
        unique2:541,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:5,
        twothousand:5,
        fivethous:5,
        tenthous:5,
        odd:10,
        even:11,
        stringu1:"FAAAAA",
        stringu2:"VUAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:664,
        unique2:542,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:64,
        twothousand:64,
        fivethous:164,
        tenthous:664,
        odd:8,
        even:9,
        stringu1:"OZAAAA",
        stringu2:"WUAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:887,
        unique2:543,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:87,
        twothousand:87,
        fivethous:387,
        tenthous:887,
        odd:14,
        even:15,
        stringu1:"DIAAAA",
        stringu2:"XUAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:546,
        unique2:544,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:46,
        twothousand:146,
        fivethous:46,
        tenthous:546,
        odd:12,
        even:13,
        stringu1:"AVAAAA",
        stringu2:"YUAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:253,
        unique2:545,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:53,
        twothousand:53,
        fivethous:253,
        tenthous:253,
        odd:6,
        even:7,
        stringu1:"TJAAAA",
        stringu2:"ZUAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:235,
        unique2:546,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:35,
        twothousand:35,
        fivethous:235,
        tenthous:235,
        odd:10,
        even:11,
        stringu1:"BJAAAA",
        stringu2:"AVAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:258,
        unique2:547,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:58,
        twothousand:58,
        fivethous:258,
        tenthous:258,
        odd:16,
        even:17,
        stringu1:"YJAAAA",
        stringu2:"BVAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:621,
        unique2:548,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:21,
        twothousand:21,
        fivethous:121,
        tenthous:621,
        odd:2,
        even:3,
        stringu1:"XXAAAA",
        stringu2:"CVAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:998,
        unique2:549,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:98,
        twothousand:198,
        fivethous:498,
        tenthous:998,
        odd:16,
        even:17,
        stringu1:"KMAAAA",
        stringu2:"DVAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:236,
        unique2:550,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:36,
        twothousand:36,
        fivethous:236,
        tenthous:236,
        odd:12,
        even:13,
        stringu1:"CJAAAA",
        stringu2:"EVAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:537,
        unique2:551,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:37,
        twothousand:137,
        fivethous:37,
        tenthous:537,
        odd:14,
        even:15,
        stringu1:"RUAAAA",
        stringu2:"FVAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:769,
        unique2:552,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:69,
        twothousand:169,
        fivethous:269,
        tenthous:769,
        odd:18,
        even:19,
        stringu1:"PDAAAA",
        stringu2:"GVAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:921,
        unique2:553,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:21,
        twothousand:121,
        fivethous:421,
        tenthous:921,
        odd:2,
        even:3,
        stringu1:"LJAAAA",
        stringu2:"HVAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:951,
        unique2:554,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:51,
        twothousand:151,
        fivethous:451,
        tenthous:951,
        odd:2,
        even:3,
        stringu1:"PKAAAA",
        stringu2:"IVAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:240,
        unique2:555,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:40,
        twothousand:40,
        fivethous:240,
        tenthous:240,
        odd:0,
        even:1,
        stringu1:"GJAAAA",
        stringu2:"JVAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:644,
        unique2:556,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:44,
        twothousand:44,
        fivethous:144,
        tenthous:644,
        odd:8,
        even:9,
        stringu1:"UYAAAA",
        stringu2:"KVAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:352,
        unique2:557,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:52,
        twothousand:152,
        fivethous:352,
        tenthous:352,
        odd:4,
        even:5,
        stringu1:"ONAAAA",
        stringu2:"LVAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:613,
        unique2:558,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:13,
        twothousand:13,
        fivethous:113,
        tenthous:613,
        odd:6,
        even:7,
        stringu1:"PXAAAA",
        stringu2:"MVAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:784,
        unique2:559,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:84,
        twothousand:184,
        fivethous:284,
        tenthous:784,
        odd:8,
        even:9,
        stringu1:"EEAAAA",
        stringu2:"NVAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:61,
        unique2:560,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:61,
        twothousand:61,
        fivethous:61,
        tenthous:61,
        odd:2,
        even:3,
        stringu1:"JCAAAA",
        stringu2:"OVAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:144,
        unique2:561,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:44,
        twothousand:144,
        fivethous:144,
        tenthous:144,
        odd:8,
        even:9,
        stringu1:"OFAAAA",
        stringu2:"PVAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:94,
        unique2:562,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:94,
        twothousand:94,
        fivethous:94,
        tenthous:94,
        odd:8,
        even:9,
        stringu1:"QDAAAA",
        stringu2:"QVAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:270,
        unique2:563,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:70,
        twothousand:70,
        fivethous:270,
        tenthous:270,
        odd:0,
        even:1,
        stringu1:"KKAAAA",
        stringu2:"RVAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:942,
        unique2:564,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:42,
        twothousand:142,
        fivethous:442,
        tenthous:942,
        odd:4,
        even:5,
        stringu1:"GKAAAA",
        stringu2:"SVAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:756,
        unique2:565,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:56,
        twothousand:156,
        fivethous:256,
        tenthous:756,
        odd:12,
        even:13,
        stringu1:"CDAAAA",
        stringu2:"TVAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:321,
        unique2:566,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:21,
        twothousand:121,
        fivethous:321,
        tenthous:321,
        odd:2,
        even:3,
        stringu1:"JMAAAA",
        stringu2:"UVAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:36,
        unique2:567,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:36,
        twothousand:36,
        fivethous:36,
        tenthous:36,
        odd:12,
        even:13,
        stringu1:"KBAAAA",
        stringu2:"VVAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:232,
        unique2:568,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:32,
        twothousand:32,
        fivethous:232,
        tenthous:232,
        odd:4,
        even:5,
        stringu1:"YIAAAA",
        stringu2:"WVAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:430,
        unique2:569,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:30,
        twothousand:30,
        fivethous:430,
        tenthous:430,
        odd:0,
        even:1,
        stringu1:"OQAAAA",
        stringu2:"XVAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:177,
        unique2:570,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:77,
        twothousand:177,
        fivethous:177,
        tenthous:177,
        odd:14,
        even:15,
        stringu1:"VGAAAA",
        stringu2:"YVAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:220,
        unique2:571,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:20,
        twothousand:20,
        fivethous:220,
        tenthous:220,
        odd:0,
        even:1,
        stringu1:"MIAAAA",
        stringu2:"ZVAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:109,
        unique2:572,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:9,
        twothousand:109,
        fivethous:109,
        tenthous:109,
        odd:18,
        even:19,
        stringu1:"FEAAAA",
        stringu2:"AWAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:419,
        unique2:573,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:19,
        twothousand:19,
        fivethous:419,
        tenthous:419,
        odd:18,
        even:19,
        stringu1:"DQAAAA",
        stringu2:"BWAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:135,
        unique2:574,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:35,
        twothousand:135,
        fivethous:135,
        tenthous:135,
        odd:10,
        even:11,
        stringu1:"FFAAAA",
        stringu2:"CWAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:610,
        unique2:575,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:10,
        twothousand:10,
        fivethous:110,
        tenthous:610,
        odd:0,
        even:1,
        stringu1:"MXAAAA",
        stringu2:"DWAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:956,
        unique2:576,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:56,
        twothousand:156,
        fivethous:456,
        tenthous:956,
        odd:12,
        even:13,
        stringu1:"UKAAAA",
        stringu2:"EWAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:626,
        unique2:577,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:26,
        twothousand:26,
        fivethous:126,
        tenthous:626,
        odd:12,
        even:13,
        stringu1:"CYAAAA",
        stringu2:"FWAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:375,
        unique2:578,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:75,
        twothousand:175,
        fivethous:375,
        tenthous:375,
        odd:10,
        even:11,
        stringu1:"LOAAAA",
        stringu2:"GWAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:976,
        unique2:579,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:76,
        twothousand:176,
        fivethous:476,
        tenthous:976,
        odd:12,
        even:13,
        stringu1:"OLAAAA",
        stringu2:"HWAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:152,
        unique2:580,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:52,
        twothousand:152,
        fivethous:152,
        tenthous:152,
        odd:4,
        even:5,
        stringu1:"WFAAAA",
        stringu2:"IWAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:308,
        unique2:581,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:8,
        twothousand:108,
        fivethous:308,
        tenthous:308,
        odd:16,
        even:17,
        stringu1:"WLAAAA",
        stringu2:"JWAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:445,
        unique2:582,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:45,
        twothousand:45,
        fivethous:445,
        tenthous:445,
        odd:10,
        even:11,
        stringu1:"DRAAAA",
        stringu2:"KWAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:326,
        unique2:583,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:26,
        twothousand:126,
        fivethous:326,
        tenthous:326,
        odd:12,
        even:13,
        stringu1:"OMAAAA",
        stringu2:"LWAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:422,
        unique2:584,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:22,
        twothousand:22,
        fivethous:422,
        tenthous:422,
        odd:4,
        even:5,
        stringu1:"GQAAAA",
        stringu2:"MWAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:972,
        unique2:585,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:72,
        twothousand:172,
        fivethous:472,
        tenthous:972,
        odd:4,
        even:5,
        stringu1:"KLAAAA",
        stringu2:"NWAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:45,
        unique2:586,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:45,
        twothousand:45,
        fivethous:45,
        tenthous:45,
        odd:10,
        even:11,
        stringu1:"TBAAAA",
        stringu2:"OWAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:725,
        unique2:587,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:25,
        twothousand:125,
        fivethous:225,
        tenthous:725,
        odd:10,
        even:11,
        stringu1:"XBAAAA",
        stringu2:"PWAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:753,
        unique2:588,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:53,
        twothousand:153,
        fivethous:253,
        tenthous:753,
        odd:6,
        even:7,
        stringu1:"ZCAAAA",
        stringu2:"QWAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:493,
        unique2:589,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:93,
        twothousand:93,
        fivethous:493,
        tenthous:493,
        odd:6,
        even:7,
        stringu1:"ZSAAAA",
        stringu2:"RWAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:601,
        unique2:590,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:1,
        twothousand:1,
        fivethous:101,
        tenthous:601,
        odd:2,
        even:3,
        stringu1:"DXAAAA",
        stringu2:"SWAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:463,
        unique2:591,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:63,
        twothousand:63,
        fivethous:463,
        tenthous:463,
        odd:6,
        even:7,
        stringu1:"VRAAAA",
        stringu2:"TWAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:303,
        unique2:592,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:3,
        twothousand:103,
        fivethous:303,
        tenthous:303,
        odd:6,
        even:7,
        stringu1:"RLAAAA",
        stringu2:"UWAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:59,
        unique2:593,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:59,
        twothousand:59,
        fivethous:59,
        tenthous:59,
        odd:18,
        even:19,
        stringu1:"HCAAAA",
        stringu2:"VWAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:595,
        unique2:594,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:95,
        twothousand:195,
        fivethous:95,
        tenthous:595,
        odd:10,
        even:11,
        stringu1:"XWAAAA",
        stringu2:"WWAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:807,
        unique2:595,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:7,
        twothousand:7,
        fivethous:307,
        tenthous:807,
        odd:14,
        even:15,
        stringu1:"BFAAAA",
        stringu2:"XWAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:424,
        unique2:596,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:24,
        twothousand:24,
        fivethous:424,
        tenthous:424,
        odd:8,
        even:9,
        stringu1:"IQAAAA",
        stringu2:"YWAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:521,
        unique2:597,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:21,
        twothousand:121,
        fivethous:21,
        tenthous:521,
        odd:2,
        even:3,
        stringu1:"BUAAAA",
        stringu2:"ZWAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:341,
        unique2:598,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:41,
        twothousand:141,
        fivethous:341,
        tenthous:341,
        odd:2,
        even:3,
        stringu1:"DNAAAA",
        stringu2:"AXAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:571,
        unique2:599,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:71,
        twothousand:171,
        fivethous:71,
        tenthous:571,
        odd:2,
        even:3,
        stringu1:"ZVAAAA",
        stringu2:"BXAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:165,
        unique2:600,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:65,
        twothousand:165,
        fivethous:165,
        tenthous:165,
        odd:10,
        even:11,
        stringu1:"JGAAAA",
        stringu2:"CXAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:908,
        unique2:601,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:8,
        twothousand:108,
        fivethous:408,
        tenthous:908,
        odd:16,
        even:17,
        stringu1:"YIAAAA",
        stringu2:"DXAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:351,
        unique2:602,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:51,
        twothousand:151,
        fivethous:351,
        tenthous:351,
        odd:2,
        even:3,
        stringu1:"NNAAAA",
        stringu2:"EXAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:334,
        unique2:603,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:34,
        twothousand:134,
        fivethous:334,
        tenthous:334,
        odd:8,
        even:9,
        stringu1:"WMAAAA",
        stringu2:"FXAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:636,
        unique2:604,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:36,
        twothousand:36,
        fivethous:136,
        tenthous:636,
        odd:12,
        even:13,
        stringu1:"MYAAAA",
        stringu2:"GXAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:138,
        unique2:605,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:38,
        twothousand:138,
        fivethous:138,
        tenthous:138,
        odd:16,
        even:17,
        stringu1:"IFAAAA",
        stringu2:"HXAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:438,
        unique2:606,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:38,
        twothousand:38,
        fivethous:438,
        tenthous:438,
        odd:16,
        even:17,
        stringu1:"WQAAAA",
        stringu2:"IXAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:391,
        unique2:607,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:91,
        twothousand:191,
        fivethous:391,
        tenthous:391,
        odd:2,
        even:3,
        stringu1:"BPAAAA",
        stringu2:"JXAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:395,
        unique2:608,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:95,
        twothousand:195,
        fivethous:395,
        tenthous:395,
        odd:10,
        even:11,
        stringu1:"FPAAAA",
        stringu2:"KXAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:502,
        unique2:609,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:2,
        twothousand:102,
        fivethous:2,
        tenthous:502,
        odd:4,
        even:5,
        stringu1:"ITAAAA",
        stringu2:"LXAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:85,
        unique2:610,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:85,
        twothousand:85,
        fivethous:85,
        tenthous:85,
        odd:10,
        even:11,
        stringu1:"HDAAAA",
        stringu2:"MXAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:786,
        unique2:611,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:86,
        twothousand:186,
        fivethous:286,
        tenthous:786,
        odd:12,
        even:13,
        stringu1:"GEAAAA",
        stringu2:"NXAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:619,
        unique2:612,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:19,
        twothousand:19,
        fivethous:119,
        tenthous:619,
        odd:18,
        even:19,
        stringu1:"VXAAAA",
        stringu2:"OXAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:440,
        unique2:613,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:40,
        twothousand:40,
        fivethous:440,
        tenthous:440,
        odd:0,
        even:1,
        stringu1:"YQAAAA",
        stringu2:"PXAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:949,
        unique2:614,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:49,
        twothousand:149,
        fivethous:449,
        tenthous:949,
        odd:18,
        even:19,
        stringu1:"NKAAAA",
        stringu2:"QXAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:691,
        unique2:615,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:91,
        twothousand:91,
        fivethous:191,
        tenthous:691,
        odd:2,
        even:3,
        stringu1:"PAAAAA",
        stringu2:"RXAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:348,
        unique2:616,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:48,
        twothousand:148,
        fivethous:348,
        tenthous:348,
        odd:16,
        even:17,
        stringu1:"KNAAAA",
        stringu2:"SXAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:506,
        unique2:617,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:6,
        twothousand:106,
        fivethous:6,
        tenthous:506,
        odd:12,
        even:13,
        stringu1:"MTAAAA",
        stringu2:"TXAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:192,
        unique2:618,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:92,
        twothousand:192,
        fivethous:192,
        tenthous:192,
        odd:4,
        even:5,
        stringu1:"KHAAAA",
        stringu2:"UXAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:369,
        unique2:619,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:69,
        twothousand:169,
        fivethous:369,
        tenthous:369,
        odd:18,
        even:19,
        stringu1:"FOAAAA",
        stringu2:"VXAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:311,
        unique2:620,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:11,
        twothousand:111,
        fivethous:311,
        tenthous:311,
        odd:2,
        even:3,
        stringu1:"ZLAAAA",
        stringu2:"WXAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:273,
        unique2:621,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:73,
        twothousand:73,
        fivethous:273,
        tenthous:273,
        odd:6,
        even:7,
        stringu1:"NKAAAA",
        stringu2:"XXAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:770,
        unique2:622,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:70,
        twothousand:170,
        fivethous:270,
        tenthous:770,
        odd:0,
        even:1,
        stringu1:"QDAAAA",
        stringu2:"YXAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:191,
        unique2:623,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:91,
        twothousand:191,
        fivethous:191,
        tenthous:191,
        odd:2,
        even:3,
        stringu1:"JHAAAA",
        stringu2:"ZXAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:90,
        unique2:624,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:90,
        twothousand:90,
        fivethous:90,
        tenthous:90,
        odd:0,
        even:1,
        stringu1:"MDAAAA",
        stringu2:"AYAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:163,
        unique2:625,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:63,
        twothousand:163,
        fivethous:163,
        tenthous:163,
        odd:6,
        even:7,
        stringu1:"HGAAAA",
        stringu2:"BYAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:350,
        unique2:626,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:50,
        twothousand:150,
        fivethous:350,
        tenthous:350,
        odd:0,
        even:1,
        stringu1:"MNAAAA",
        stringu2:"CYAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:55,
        unique2:627,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:55,
        twothousand:55,
        fivethous:55,
        tenthous:55,
        odd:10,
        even:11,
        stringu1:"DCAAAA",
        stringu2:"DYAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:488,
        unique2:628,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:88,
        twothousand:88,
        fivethous:488,
        tenthous:488,
        odd:16,
        even:17,
        stringu1:"USAAAA",
        stringu2:"EYAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:215,
        unique2:629,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:15,
        twothousand:15,
        fivethous:215,
        tenthous:215,
        odd:10,
        even:11,
        stringu1:"HIAAAA",
        stringu2:"FYAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:732,
        unique2:630,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:32,
        twothousand:132,
        fivethous:232,
        tenthous:732,
        odd:4,
        even:5,
        stringu1:"ECAAAA",
        stringu2:"GYAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:688,
        unique2:631,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:88,
        twothousand:88,
        fivethous:188,
        tenthous:688,
        odd:16,
        even:17,
        stringu1:"MAAAAA",
        stringu2:"HYAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:520,
        unique2:632,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:20,
        twothousand:120,
        fivethous:20,
        tenthous:520,
        odd:0,
        even:1,
        stringu1:"AUAAAA",
        stringu2:"IYAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:62,
        unique2:633,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:62,
        twothousand:62,
        fivethous:62,
        tenthous:62,
        odd:4,
        even:5,
        stringu1:"KCAAAA",
        stringu2:"JYAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:423,
        unique2:634,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:23,
        twothousand:23,
        fivethous:423,
        tenthous:423,
        odd:6,
        even:7,
        stringu1:"HQAAAA",
        stringu2:"KYAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:242,
        unique2:635,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:42,
        twothousand:42,
        fivethous:242,
        tenthous:242,
        odd:4,
        even:5,
        stringu1:"IJAAAA",
        stringu2:"LYAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:193,
        unique2:636,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:93,
        twothousand:193,
        fivethous:193,
        tenthous:193,
        odd:6,
        even:7,
        stringu1:"LHAAAA",
        stringu2:"MYAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:648,
        unique2:637,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:48,
        twothousand:48,
        fivethous:148,
        tenthous:648,
        odd:16,
        even:17,
        stringu1:"YYAAAA",
        stringu2:"NYAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:459,
        unique2:638,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:59,
        twothousand:59,
        fivethous:459,
        tenthous:459,
        odd:18,
        even:19,
        stringu1:"RRAAAA",
        stringu2:"OYAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:196,
        unique2:639,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:96,
        twothousand:196,
        fivethous:196,
        tenthous:196,
        odd:12,
        even:13,
        stringu1:"OHAAAA",
        stringu2:"PYAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:476,
        unique2:640,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:76,
        twothousand:76,
        fivethous:476,
        tenthous:476,
        odd:12,
        even:13,
        stringu1:"ISAAAA",
        stringu2:"QYAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:903,
        unique2:641,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:3,
        twothousand:103,
        fivethous:403,
        tenthous:903,
        odd:6,
        even:7,
        stringu1:"TIAAAA",
        stringu2:"RYAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:974,
        unique2:642,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:74,
        twothousand:174,
        fivethous:474,
        tenthous:974,
        odd:8,
        even:9,
        stringu1:"MLAAAA",
        stringu2:"SYAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:603,
        unique2:643,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:3,
        twothousand:3,
        fivethous:103,
        tenthous:603,
        odd:6,
        even:7,
        stringu1:"FXAAAA",
        stringu2:"TYAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:12,
        unique2:644,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:12,
        twothousand:12,
        fivethous:12,
        tenthous:12,
        odd:4,
        even:5,
        stringu1:"MAAAAA",
        stringu2:"UYAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:599,
        unique2:645,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:99,
        twothousand:199,
        fivethous:99,
        tenthous:599,
        odd:18,
        even:19,
        stringu1:"BXAAAA",
        stringu2:"VYAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:914,
        unique2:646,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:14,
        twothousand:114,
        fivethous:414,
        tenthous:914,
        odd:8,
        even:9,
        stringu1:"EJAAAA",
        stringu2:"WYAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:7,
        unique2:647,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:7,
        twothousand:7,
        fivethous:7,
        tenthous:7,
        odd:14,
        even:15,
        stringu1:"HAAAAA",
        stringu2:"XYAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:213,
        unique2:648,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:13,
        twothousand:13,
        fivethous:213,
        tenthous:213,
        odd:6,
        even:7,
        stringu1:"FIAAAA",
        stringu2:"YYAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:174,
        unique2:649,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:74,
        twothousand:174,
        fivethous:174,
        tenthous:174,
        odd:8,
        even:9,
        stringu1:"SGAAAA",
        stringu2:"ZYAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:392,
        unique2:650,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:92,
        twothousand:192,
        fivethous:392,
        tenthous:392,
        odd:4,
        even:5,
        stringu1:"CPAAAA",
        stringu2:"AZAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:674,
        unique2:651,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:74,
        twothousand:74,
        fivethous:174,
        tenthous:674,
        odd:8,
        even:9,
        stringu1:"YZAAAA",
        stringu2:"BZAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:650,
        unique2:652,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:50,
        twothousand:50,
        fivethous:150,
        tenthous:650,
        odd:0,
        even:1,
        stringu1:"AZAAAA",
        stringu2:"CZAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:8,
        unique2:653,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:8,
        twothousand:8,
        fivethous:8,
        tenthous:8,
        odd:16,
        even:17,
        stringu1:"IAAAAA",
        stringu2:"DZAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:492,
        unique2:654,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:92,
        twothousand:92,
        fivethous:492,
        tenthous:492,
        odd:4,
        even:5,
        stringu1:"YSAAAA",
        stringu2:"EZAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:322,
        unique2:655,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:22,
        twothousand:122,
        fivethous:322,
        tenthous:322,
        odd:4,
        even:5,
        stringu1:"KMAAAA",
        stringu2:"FZAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:315,
        unique2:656,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:15,
        twothousand:115,
        fivethous:315,
        tenthous:315,
        odd:10,
        even:11,
        stringu1:"DMAAAA",
        stringu2:"GZAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:380,
        unique2:657,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:80,
        twothousand:180,
        fivethous:380,
        tenthous:380,
        odd:0,
        even:1,
        stringu1:"QOAAAA",
        stringu2:"HZAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:353,
        unique2:658,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:53,
        twothousand:153,
        fivethous:353,
        tenthous:353,
        odd:6,
        even:7,
        stringu1:"PNAAAA",
        stringu2:"IZAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:892,
        unique2:659,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:92,
        twothousand:92,
        fivethous:392,
        tenthous:892,
        odd:4,
        even:5,
        stringu1:"IIAAAA",
        stringu2:"JZAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:932,
        unique2:660,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:32,
        twothousand:132,
        fivethous:432,
        tenthous:932,
        odd:4,
        even:5,
        stringu1:"WJAAAA",
        stringu2:"KZAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:993,
        unique2:661,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:93,
        twothousand:193,
        fivethous:493,
        tenthous:993,
        odd:6,
        even:7,
        stringu1:"FMAAAA",
        stringu2:"LZAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:859,
        unique2:662,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:59,
        twothousand:59,
        fivethous:359,
        tenthous:859,
        odd:18,
        even:19,
        stringu1:"BHAAAA",
        stringu2:"MZAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:806,
        unique2:663,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:6,
        twothousand:6,
        fivethous:306,
        tenthous:806,
        odd:12,
        even:13,
        stringu1:"AFAAAA",
        stringu2:"NZAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:145,
        unique2:664,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:45,
        twothousand:145,
        fivethous:145,
        tenthous:145,
        odd:10,
        even:11,
        stringu1:"PFAAAA",
        stringu2:"OZAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:373,
        unique2:665,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:73,
        twothousand:173,
        fivethous:373,
        tenthous:373,
        odd:6,
        even:7,
        stringu1:"JOAAAA",
        stringu2:"PZAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:418,
        unique2:666,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:18,
        twothousand:18,
        fivethous:418,
        tenthous:418,
        odd:16,
        even:17,
        stringu1:"CQAAAA",
        stringu2:"QZAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:865,
        unique2:667,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:65,
        twothousand:65,
        fivethous:365,
        tenthous:865,
        odd:10,
        even:11,
        stringu1:"HHAAAA",
        stringu2:"RZAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:462,
        unique2:668,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:62,
        twothousand:62,
        fivethous:462,
        tenthous:462,
        odd:4,
        even:5,
        stringu1:"URAAAA",
        stringu2:"SZAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:24,
        unique2:669,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:24,
        twothousand:24,
        fivethous:24,
        tenthous:24,
        odd:8,
        even:9,
        stringu1:"YAAAAA",
        stringu2:"TZAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:920,
        unique2:670,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:20,
        twothousand:120,
        fivethous:420,
        tenthous:920,
        odd:0,
        even:1,
        stringu1:"KJAAAA",
        stringu2:"UZAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:672,
        unique2:671,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:72,
        twothousand:72,
        fivethous:172,
        tenthous:672,
        odd:4,
        even:5,
        stringu1:"WZAAAA",
        stringu2:"VZAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:92,
        unique2:672,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:92,
        twothousand:92,
        fivethous:92,
        tenthous:92,
        odd:4,
        even:5,
        stringu1:"ODAAAA",
        stringu2:"WZAAAA",
        string4:"AAAAxx"
      },
      {
        unique1:721,
        unique2:673,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:21,
        twothousand:121,
        fivethous:221,
        tenthous:721,
        odd:2,
        even:3,
        stringu1:"TBAAAA",
        stringu2:"XZAAAA",
        string4:"HHHHxx"
      },
      {
        unique1:646,
        unique2:674,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:46,
        twothousand:46,
        fivethous:146,
        tenthous:646,
        odd:12,
        even:13,
        stringu1:"WYAAAA",
        stringu2:"YZAAAA",
        string4:"OOOOxx"
      },
      {
        unique1:910,
        unique2:675,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:10,
        twothousand:110,
        fivethous:410,
        tenthous:910,
        odd:0,
        even:1,
        stringu1:"AJAAAA",
        stringu2:"ZZAAAA",
        string4:"VVVVxx"
      },
      {
        unique1:909,
        unique2:676,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:9,
        twothousand:109,
        fivethous:409,
        tenthous:909,
        odd:18,
        even:19,
        stringu1:"ZIAAAA",
        stringu2:"AABAAA",
        string4:"AAAAxx"
      },
      {
        unique1:630,
        unique2:677,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:30,
        twothousand:30,
        fivethous:130,
        tenthous:630,
        odd:0,
        even:1,
        stringu1:"GYAAAA",
        stringu2:"BABAAA",
        string4:"HHHHxx"
      },
      {
        unique1:482,
        unique2:678,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:82,
        twothousand:82,
        fivethous:482,
        tenthous:482,
        odd:4,
        even:5,
        stringu1:"OSAAAA",
        stringu2:"CABAAA",
        string4:"OOOOxx"
      },
      {
        unique1:559,
        unique2:679,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:59,
        twothousand:159,
        fivethous:59,
        tenthous:559,
        odd:18,
        even:19,
        stringu1:"NVAAAA",
        stringu2:"DABAAA",
        string4:"VVVVxx"
      },
      {
        unique1:853,
        unique2:680,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:53,
        twothousand:53,
        fivethous:353,
        tenthous:853,
        odd:6,
        even:7,
        stringu1:"VGAAAA",
        stringu2:"EABAAA",
        string4:"AAAAxx"
      },
      {
        unique1:141,
        unique2:681,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:41,
        twothousand:141,
        fivethous:141,
        tenthous:141,
        odd:2,
        even:3,
        stringu1:"LFAAAA",
        stringu2:"FABAAA",
        string4:"HHHHxx"
      },
      {
        unique1:266,
        unique2:682,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:66,
        twothousand:66,
        fivethous:266,
        tenthous:266,
        odd:12,
        even:13,
        stringu1:"GKAAAA",
        stringu2:"GABAAA",
        string4:"OOOOxx"
      },
      {
        unique1:835,
        unique2:683,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:35,
        twothousand:35,
        fivethous:335,
        tenthous:835,
        odd:10,
        even:11,
        stringu1:"DGAAAA",
        stringu2:"HABAAA",
        string4:"VVVVxx"
      },
      {
        unique1:164,
        unique2:684,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:64,
        twothousand:164,
        fivethous:164,
        tenthous:164,
        odd:8,
        even:9,
        stringu1:"IGAAAA",
        stringu2:"IABAAA",
        string4:"AAAAxx"
      },
      {
        unique1:629,
        unique2:685,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:29,
        twothousand:29,
        fivethous:129,
        tenthous:629,
        odd:18,
        even:19,
        stringu1:"FYAAAA",
        stringu2:"JABAAA",
        string4:"HHHHxx"
      },
      {
        unique1:203,
        unique2:686,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:3,
        twothousand:3,
        fivethous:203,
        tenthous:203,
        odd:6,
        even:7,
        stringu1:"VHAAAA",
        stringu2:"KABAAA",
        string4:"OOOOxx"
      },
      {
        unique1:411,
        unique2:687,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:11,
        twothousand:11,
        fivethous:411,
        tenthous:411,
        odd:2,
        even:3,
        stringu1:"VPAAAA",
        stringu2:"LABAAA",
        string4:"VVVVxx"
      },
      {
        unique1:930,
        unique2:688,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:30,
        twothousand:130,
        fivethous:430,
        tenthous:930,
        odd:0,
        even:1,
        stringu1:"UJAAAA",
        stringu2:"MABAAA",
        string4:"AAAAxx"
      },
      {
        unique1:435,
        unique2:689,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:35,
        twothousand:35,
        fivethous:435,
        tenthous:435,
        odd:10,
        even:11,
        stringu1:"TQAAAA",
        stringu2:"NABAAA",
        string4:"HHHHxx"
      },
      {
        unique1:563,
        unique2:690,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:63,
        twothousand:163,
        fivethous:63,
        tenthous:563,
        odd:6,
        even:7,
        stringu1:"RVAAAA",
        stringu2:"OABAAA",
        string4:"OOOOxx"
      },
      {
        unique1:960,
        unique2:691,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:60,
        twothousand:160,
        fivethous:460,
        tenthous:960,
        odd:0,
        even:1,
        stringu1:"YKAAAA",
        stringu2:"PABAAA",
        string4:"VVVVxx"
      },
      {
        unique1:733,
        unique2:692,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:33,
        twothousand:133,
        fivethous:233,
        tenthous:733,
        odd:6,
        even:7,
        stringu1:"FCAAAA",
        stringu2:"QABAAA",
        string4:"AAAAxx"
      },
      {
        unique1:967,
        unique2:693,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:67,
        twothousand:167,
        fivethous:467,
        tenthous:967,
        odd:14,
        even:15,
        stringu1:"FLAAAA",
        stringu2:"RABAAA",
        string4:"HHHHxx"
      },
      {
        unique1:668,
        unique2:694,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:68,
        twothousand:68,
        fivethous:168,
        tenthous:668,
        odd:16,
        even:17,
        stringu1:"SZAAAA",
        stringu2:"SABAAA",
        string4:"OOOOxx"
      },
      {
        unique1:994,
        unique2:695,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:94,
        twothousand:194,
        fivethous:494,
        tenthous:994,
        odd:8,
        even:9,
        stringu1:"GMAAAA",
        stringu2:"TABAAA",
        string4:"VVVVxx"
      },
      {
        unique1:129,
        unique2:696,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:29,
        twothousand:129,
        fivethous:129,
        tenthous:129,
        odd:18,
        even:19,
        stringu1:"ZEAAAA",
        stringu2:"UABAAA",
        string4:"AAAAxx"
      },
      {
        unique1:954,
        unique2:697,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:54,
        twothousand:154,
        fivethous:454,
        tenthous:954,
        odd:8,
        even:9,
        stringu1:"SKAAAA",
        stringu2:"VABAAA",
        string4:"HHHHxx"
      },
      {
        unique1:68,
        unique2:698,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:68,
        twothousand:68,
        fivethous:68,
        tenthous:68,
        odd:16,
        even:17,
        stringu1:"QCAAAA",
        stringu2:"WABAAA",
        string4:"OOOOxx"
      },
      {
        unique1:79,
        unique2:699,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:79,
        twothousand:79,
        fivethous:79,
        tenthous:79,
        odd:18,
        even:19,
        stringu1:"BDAAAA",
        stringu2:"XABAAA",
        string4:"VVVVxx"
      },
      {
        unique1:121,
        unique2:700,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:21,
        twothousand:121,
        fivethous:121,
        tenthous:121,
        odd:2,
        even:3,
        stringu1:"REAAAA",
        stringu2:"YABAAA",
        string4:"AAAAxx"
      },
      {
        unique1:740,
        unique2:701,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:40,
        twothousand:140,
        fivethous:240,
        tenthous:740,
        odd:0,
        even:1,
        stringu1:"MCAAAA",
        stringu2:"ZABAAA",
        string4:"HHHHxx"
      },
      {
        unique1:902,
        unique2:702,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:2,
        twothousand:102,
        fivethous:402,
        tenthous:902,
        odd:4,
        even:5,
        stringu1:"SIAAAA",
        stringu2:"ABBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:695,
        unique2:703,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:95,
        twothousand:95,
        fivethous:195,
        tenthous:695,
        odd:10,
        even:11,
        stringu1:"TAAAAA",
        stringu2:"BBBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:455,
        unique2:704,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:55,
        twothousand:55,
        fivethous:455,
        tenthous:455,
        odd:10,
        even:11,
        stringu1:"NRAAAA",
        stringu2:"CBBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:89,
        unique2:705,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:89,
        twothousand:89,
        fivethous:89,
        tenthous:89,
        odd:18,
        even:19,
        stringu1:"LDAAAA",
        stringu2:"DBBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:893,
        unique2:706,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:93,
        twothousand:93,
        fivethous:393,
        tenthous:893,
        odd:6,
        even:7,
        stringu1:"JIAAAA",
        stringu2:"EBBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:202,
        unique2:707,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:2,
        twothousand:2,
        fivethous:202,
        tenthous:202,
        odd:4,
        even:5,
        stringu1:"UHAAAA",
        stringu2:"FBBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:132,
        unique2:708,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:32,
        twothousand:132,
        fivethous:132,
        tenthous:132,
        odd:4,
        even:5,
        stringu1:"CFAAAA",
        stringu2:"GBBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:782,
        unique2:709,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:82,
        twothousand:182,
        fivethous:282,
        tenthous:782,
        odd:4,
        even:5,
        stringu1:"CEAAAA",
        stringu2:"HBBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:512,
        unique2:710,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:12,
        twothousand:112,
        fivethous:12,
        tenthous:512,
        odd:4,
        even:5,
        stringu1:"STAAAA",
        stringu2:"IBBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:857,
        unique2:711,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:57,
        twothousand:57,
        fivethous:357,
        tenthous:857,
        odd:14,
        even:15,
        stringu1:"ZGAAAA",
        stringu2:"JBBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:248,
        unique2:712,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:48,
        twothousand:48,
        fivethous:248,
        tenthous:248,
        odd:16,
        even:17,
        stringu1:"OJAAAA",
        stringu2:"KBBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:858,
        unique2:713,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:58,
        twothousand:58,
        fivethous:358,
        tenthous:858,
        odd:16,
        even:17,
        stringu1:"AHAAAA",
        stringu2:"LBBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:527,
        unique2:714,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:27,
        twothousand:127,
        fivethous:27,
        tenthous:527,
        odd:14,
        even:15,
        stringu1:"HUAAAA",
        stringu2:"MBBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:450,
        unique2:715,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:50,
        twothousand:50,
        fivethous:450,
        tenthous:450,
        odd:0,
        even:1,
        stringu1:"IRAAAA",
        stringu2:"NBBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:712,
        unique2:716,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:12,
        twothousand:112,
        fivethous:212,
        tenthous:712,
        odd:4,
        even:5,
        stringu1:"KBAAAA",
        stringu2:"OBBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:153,
        unique2:717,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:53,
        twothousand:153,
        fivethous:153,
        tenthous:153,
        odd:6,
        even:7,
        stringu1:"XFAAAA",
        stringu2:"PBBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:587,
        unique2:718,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:87,
        twothousand:187,
        fivethous:87,
        tenthous:587,
        odd:14,
        even:15,
        stringu1:"PWAAAA",
        stringu2:"QBBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:593,
        unique2:719,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:93,
        twothousand:193,
        fivethous:93,
        tenthous:593,
        odd:6,
        even:7,
        stringu1:"VWAAAA",
        stringu2:"RBBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:249,
        unique2:720,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:49,
        twothousand:49,
        fivethous:249,
        tenthous:249,
        odd:18,
        even:19,
        stringu1:"PJAAAA",
        stringu2:"SBBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:128,
        unique2:721,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:28,
        twothousand:128,
        fivethous:128,
        tenthous:128,
        odd:16,
        even:17,
        stringu1:"YEAAAA",
        stringu2:"TBBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:675,
        unique2:722,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:75,
        twothousand:75,
        fivethous:175,
        tenthous:675,
        odd:10,
        even:11,
        stringu1:"ZZAAAA",
        stringu2:"UBBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:929,
        unique2:723,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:29,
        twothousand:129,
        fivethous:429,
        tenthous:929,
        odd:18,
        even:19,
        stringu1:"TJAAAA",
        stringu2:"VBBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:156,
        unique2:724,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:56,
        twothousand:156,
        fivethous:156,
        tenthous:156,
        odd:12,
        even:13,
        stringu1:"AGAAAA",
        stringu2:"WBBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:415,
        unique2:725,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:15,
        twothousand:15,
        fivethous:415,
        tenthous:415,
        odd:10,
        even:11,
        stringu1:"ZPAAAA",
        stringu2:"XBBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:28,
        unique2:726,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:28,
        twothousand:28,
        fivethous:28,
        tenthous:28,
        odd:16,
        even:17,
        stringu1:"CBAAAA",
        stringu2:"YBBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:18,
        unique2:727,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:18,
        twothousand:18,
        fivethous:18,
        tenthous:18,
        odd:16,
        even:17,
        stringu1:"SAAAAA",
        stringu2:"ZBBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:255,
        unique2:728,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:55,
        twothousand:55,
        fivethous:255,
        tenthous:255,
        odd:10,
        even:11,
        stringu1:"VJAAAA",
        stringu2:"ACBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:793,
        unique2:729,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:93,
        twothousand:193,
        fivethous:293,
        tenthous:793,
        odd:6,
        even:7,
        stringu1:"NEAAAA",
        stringu2:"BCBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:554,
        unique2:730,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:54,
        twothousand:154,
        fivethous:54,
        tenthous:554,
        odd:8,
        even:9,
        stringu1:"IVAAAA",
        stringu2:"CCBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:467,
        unique2:731,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:67,
        twothousand:67,
        fivethous:467,
        tenthous:467,
        odd:14,
        even:15,
        stringu1:"ZRAAAA",
        stringu2:"DCBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:410,
        unique2:732,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:10,
        twothousand:10,
        fivethous:410,
        tenthous:410,
        odd:0,
        even:1,
        stringu1:"UPAAAA",
        stringu2:"ECBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:651,
        unique2:733,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:51,
        twothousand:51,
        fivethous:151,
        tenthous:651,
        odd:2,
        even:3,
        stringu1:"BZAAAA",
        stringu2:"FCBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:287,
        unique2:734,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:87,
        twothousand:87,
        fivethous:287,
        tenthous:287,
        odd:14,
        even:15,
        stringu1:"BLAAAA",
        stringu2:"GCBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:640,
        unique2:735,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:40,
        twothousand:40,
        fivethous:140,
        tenthous:640,
        odd:0,
        even:1,
        stringu1:"QYAAAA",
        stringu2:"HCBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:245,
        unique2:736,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:45,
        twothousand:45,
        fivethous:245,
        tenthous:245,
        odd:10,
        even:11,
        stringu1:"LJAAAA",
        stringu2:"ICBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:21,
        unique2:737,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:21,
        twothousand:21,
        fivethous:21,
        tenthous:21,
        odd:2,
        even:3,
        stringu1:"VAAAAA",
        stringu2:"JCBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:83,
        unique2:738,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:83,
        twothousand:83,
        fivethous:83,
        tenthous:83,
        odd:6,
        even:7,
        stringu1:"FDAAAA",
        stringu2:"KCBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:228,
        unique2:739,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:28,
        twothousand:28,
        fivethous:228,
        tenthous:228,
        odd:16,
        even:17,
        stringu1:"UIAAAA",
        stringu2:"LCBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:323,
        unique2:740,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:23,
        twothousand:123,
        fivethous:323,
        tenthous:323,
        odd:6,
        even:7,
        stringu1:"LMAAAA",
        stringu2:"MCBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:594,
        unique2:741,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:94,
        twothousand:194,
        fivethous:94,
        tenthous:594,
        odd:8,
        even:9,
        stringu1:"WWAAAA",
        stringu2:"NCBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:528,
        unique2:742,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:28,
        twothousand:128,
        fivethous:28,
        tenthous:528,
        odd:16,
        even:17,
        stringu1:"IUAAAA",
        stringu2:"OCBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:276,
        unique2:743,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:76,
        twothousand:76,
        fivethous:276,
        tenthous:276,
        odd:12,
        even:13,
        stringu1:"QKAAAA",
        stringu2:"PCBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:598,
        unique2:744,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:98,
        twothousand:198,
        fivethous:98,
        tenthous:598,
        odd:16,
        even:17,
        stringu1:"AXAAAA",
        stringu2:"QCBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:635,
        unique2:745,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:35,
        twothousand:35,
        fivethous:135,
        tenthous:635,
        odd:10,
        even:11,
        stringu1:"LYAAAA",
        stringu2:"RCBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:868,
        unique2:746,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:68,
        twothousand:68,
        fivethous:368,
        tenthous:868,
        odd:16,
        even:17,
        stringu1:"KHAAAA",
        stringu2:"SCBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:290,
        unique2:747,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:90,
        twothousand:90,
        fivethous:290,
        tenthous:290,
        odd:0,
        even:1,
        stringu1:"ELAAAA",
        stringu2:"TCBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:468,
        unique2:748,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:68,
        twothousand:68,
        fivethous:468,
        tenthous:468,
        odd:16,
        even:17,
        stringu1:"ASAAAA",
        stringu2:"UCBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:689,
        unique2:749,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:89,
        twothousand:89,
        fivethous:189,
        tenthous:689,
        odd:18,
        even:19,
        stringu1:"NAAAAA",
        stringu2:"VCBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:799,
        unique2:750,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:99,
        twothousand:199,
        fivethous:299,
        tenthous:799,
        odd:18,
        even:19,
        stringu1:"TEAAAA",
        stringu2:"WCBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:210,
        unique2:751,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:10,
        twothousand:10,
        fivethous:210,
        tenthous:210,
        odd:0,
        even:1,
        stringu1:"CIAAAA",
        stringu2:"XCBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:346,
        unique2:752,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:46,
        twothousand:146,
        fivethous:346,
        tenthous:346,
        odd:12,
        even:13,
        stringu1:"INAAAA",
        stringu2:"YCBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:957,
        unique2:753,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:57,
        twothousand:157,
        fivethous:457,
        tenthous:957,
        odd:14,
        even:15,
        stringu1:"VKAAAA",
        stringu2:"ZCBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:905,
        unique2:754,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:5,
        twothousand:105,
        fivethous:405,
        tenthous:905,
        odd:10,
        even:11,
        stringu1:"VIAAAA",
        stringu2:"ADBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:523,
        unique2:755,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:23,
        twothousand:123,
        fivethous:23,
        tenthous:523,
        odd:6,
        even:7,
        stringu1:"DUAAAA",
        stringu2:"BDBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:899,
        unique2:756,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:99,
        twothousand:99,
        fivethous:399,
        tenthous:899,
        odd:18,
        even:19,
        stringu1:"PIAAAA",
        stringu2:"CDBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:867,
        unique2:757,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:67,
        twothousand:67,
        fivethous:367,
        tenthous:867,
        odd:14,
        even:15,
        stringu1:"JHAAAA",
        stringu2:"DDBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:11,
        unique2:758,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:11,
        twothousand:11,
        fivethous:11,
        tenthous:11,
        odd:2,
        even:3,
        stringu1:"LAAAAA",
        stringu2:"EDBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:320,
        unique2:759,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:20,
        twothousand:120,
        fivethous:320,
        tenthous:320,
        odd:0,
        even:1,
        stringu1:"IMAAAA",
        stringu2:"FDBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:766,
        unique2:760,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:66,
        twothousand:166,
        fivethous:266,
        tenthous:766,
        odd:12,
        even:13,
        stringu1:"MDAAAA",
        stringu2:"GDBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:84,
        unique2:761,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:84,
        twothousand:84,
        fivethous:84,
        tenthous:84,
        odd:8,
        even:9,
        stringu1:"GDAAAA",
        stringu2:"HDBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:507,
        unique2:762,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:7,
        twothousand:107,
        fivethous:7,
        tenthous:507,
        odd:14,
        even:15,
        stringu1:"NTAAAA",
        stringu2:"IDBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:471,
        unique2:763,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:71,
        twothousand:71,
        fivethous:471,
        tenthous:471,
        odd:2,
        even:3,
        stringu1:"DSAAAA",
        stringu2:"JDBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:517,
        unique2:764,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:17,
        twothousand:117,
        fivethous:17,
        tenthous:517,
        odd:14,
        even:15,
        stringu1:"XTAAAA",
        stringu2:"KDBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:234,
        unique2:765,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:34,
        twothousand:34,
        fivethous:234,
        tenthous:234,
        odd:8,
        even:9,
        stringu1:"AJAAAA",
        stringu2:"LDBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:988,
        unique2:766,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:88,
        twothousand:188,
        fivethous:488,
        tenthous:988,
        odd:16,
        even:17,
        stringu1:"AMAAAA",
        stringu2:"MDBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:473,
        unique2:767,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:73,
        twothousand:73,
        fivethous:473,
        tenthous:473,
        odd:6,
        even:7,
        stringu1:"FSAAAA",
        stringu2:"NDBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:66,
        unique2:768,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:66,
        twothousand:66,
        fivethous:66,
        tenthous:66,
        odd:12,
        even:13,
        stringu1:"OCAAAA",
        stringu2:"ODBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:530,
        unique2:769,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:30,
        twothousand:130,
        fivethous:30,
        tenthous:530,
        odd:0,
        even:1,
        stringu1:"KUAAAA",
        stringu2:"PDBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:834,
        unique2:770,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:34,
        twothousand:34,
        fivethous:334,
        tenthous:834,
        odd:8,
        even:9,
        stringu1:"CGAAAA",
        stringu2:"QDBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:894,
        unique2:771,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:94,
        twothousand:94,
        fivethous:394,
        tenthous:894,
        odd:8,
        even:9,
        stringu1:"KIAAAA",
        stringu2:"RDBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:481,
        unique2:772,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:81,
        twothousand:81,
        fivethous:481,
        tenthous:481,
        odd:2,
        even:3,
        stringu1:"NSAAAA",
        stringu2:"SDBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:280,
        unique2:773,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:80,
        twothousand:80,
        fivethous:280,
        tenthous:280,
        odd:0,
        even:1,
        stringu1:"UKAAAA",
        stringu2:"TDBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:705,
        unique2:774,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:5,
        twothousand:105,
        fivethous:205,
        tenthous:705,
        odd:10,
        even:11,
        stringu1:"DBAAAA",
        stringu2:"UDBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:218,
        unique2:775,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:18,
        twothousand:18,
        fivethous:218,
        tenthous:218,
        odd:16,
        even:17,
        stringu1:"KIAAAA",
        stringu2:"VDBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:560,
        unique2:776,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:60,
        twothousand:160,
        fivethous:60,
        tenthous:560,
        odd:0,
        even:1,
        stringu1:"OVAAAA",
        stringu2:"WDBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:123,
        unique2:777,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:23,
        twothousand:123,
        fivethous:123,
        tenthous:123,
        odd:6,
        even:7,
        stringu1:"TEAAAA",
        stringu2:"XDBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:289,
        unique2:778,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:89,
        twothousand:89,
        fivethous:289,
        tenthous:289,
        odd:18,
        even:19,
        stringu1:"DLAAAA",
        stringu2:"YDBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:189,
        unique2:779,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:89,
        twothousand:189,
        fivethous:189,
        tenthous:189,
        odd:18,
        even:19,
        stringu1:"HHAAAA",
        stringu2:"ZDBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:541,
        unique2:780,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:41,
        twothousand:141,
        fivethous:41,
        tenthous:541,
        odd:2,
        even:3,
        stringu1:"VUAAAA",
        stringu2:"AEBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:876,
        unique2:781,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:76,
        twothousand:76,
        fivethous:376,
        tenthous:876,
        odd:12,
        even:13,
        stringu1:"SHAAAA",
        stringu2:"BEBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:504,
        unique2:782,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:4,
        twothousand:104,
        fivethous:4,
        tenthous:504,
        odd:8,
        even:9,
        stringu1:"KTAAAA",
        stringu2:"CEBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:643,
        unique2:783,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:43,
        twothousand:43,
        fivethous:143,
        tenthous:643,
        odd:6,
        even:7,
        stringu1:"TYAAAA",
        stringu2:"DEBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:73,
        unique2:784,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:73,
        twothousand:73,
        fivethous:73,
        tenthous:73,
        odd:6,
        even:7,
        stringu1:"VCAAAA",
        stringu2:"EEBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:465,
        unique2:785,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:65,
        twothousand:65,
        fivethous:465,
        tenthous:465,
        odd:10,
        even:11,
        stringu1:"XRAAAA",
        stringu2:"FEBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:861,
        unique2:786,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:61,
        twothousand:61,
        fivethous:361,
        tenthous:861,
        odd:2,
        even:3,
        stringu1:"DHAAAA",
        stringu2:"GEBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:355,
        unique2:787,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:55,
        twothousand:155,
        fivethous:355,
        tenthous:355,
        odd:10,
        even:11,
        stringu1:"RNAAAA",
        stringu2:"HEBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:441,
        unique2:788,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:41,
        twothousand:41,
        fivethous:441,
        tenthous:441,
        odd:2,
        even:3,
        stringu1:"ZQAAAA",
        stringu2:"IEBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:219,
        unique2:789,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:19,
        twothousand:19,
        fivethous:219,
        tenthous:219,
        odd:18,
        even:19,
        stringu1:"LIAAAA",
        stringu2:"JEBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:839,
        unique2:790,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:39,
        twothousand:39,
        fivethous:339,
        tenthous:839,
        odd:18,
        even:19,
        stringu1:"HGAAAA",
        stringu2:"KEBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:271,
        unique2:791,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:71,
        twothousand:71,
        fivethous:271,
        tenthous:271,
        odd:2,
        even:3,
        stringu1:"LKAAAA",
        stringu2:"LEBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:212,
        unique2:792,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:12,
        twothousand:12,
        fivethous:212,
        tenthous:212,
        odd:4,
        even:5,
        stringu1:"EIAAAA",
        stringu2:"MEBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:904,
        unique2:793,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:4,
        twothousand:104,
        fivethous:404,
        tenthous:904,
        odd:8,
        even:9,
        stringu1:"UIAAAA",
        stringu2:"NEBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:244,
        unique2:794,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:44,
        twothousand:44,
        fivethous:244,
        tenthous:244,
        odd:8,
        even:9,
        stringu1:"KJAAAA",
        stringu2:"OEBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:751,
        unique2:795,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:51,
        twothousand:151,
        fivethous:251,
        tenthous:751,
        odd:2,
        even:3,
        stringu1:"XCAAAA",
        stringu2:"PEBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:944,
        unique2:796,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:44,
        twothousand:144,
        fivethous:444,
        tenthous:944,
        odd:8,
        even:9,
        stringu1:"IKAAAA",
        stringu2:"QEBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:305,
        unique2:797,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:5,
        twothousand:105,
        fivethous:305,
        tenthous:305,
        odd:10,
        even:11,
        stringu1:"TLAAAA",
        stringu2:"REBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:617,
        unique2:798,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:17,
        twothousand:17,
        fivethous:117,
        tenthous:617,
        odd:14,
        even:15,
        stringu1:"TXAAAA",
        stringu2:"SEBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:891,
        unique2:799,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:91,
        twothousand:91,
        fivethous:391,
        tenthous:891,
        odd:2,
        even:3,
        stringu1:"HIAAAA",
        stringu2:"TEBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:653,
        unique2:800,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:53,
        twothousand:53,
        fivethous:153,
        tenthous:653,
        odd:6,
        even:7,
        stringu1:"DZAAAA",
        stringu2:"UEBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:845,
        unique2:801,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:45,
        twothousand:45,
        fivethous:345,
        tenthous:845,
        odd:10,
        even:11,
        stringu1:"NGAAAA",
        stringu2:"VEBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:936,
        unique2:802,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:36,
        twothousand:136,
        fivethous:436,
        tenthous:936,
        odd:12,
        even:13,
        stringu1:"AKAAAA",
        stringu2:"WEBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:91,
        unique2:803,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:91,
        twothousand:91,
        fivethous:91,
        tenthous:91,
        odd:2,
        even:3,
        stringu1:"NDAAAA",
        stringu2:"XEBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:442,
        unique2:804,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:42,
        twothousand:42,
        fivethous:442,
        tenthous:442,
        odd:4,
        even:5,
        stringu1:"ARAAAA",
        stringu2:"YEBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:498,
        unique2:805,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:98,
        twothousand:98,
        fivethous:498,
        tenthous:498,
        odd:16,
        even:17,
        stringu1:"ETAAAA",
        stringu2:"ZEBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:987,
        unique2:806,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:87,
        twothousand:187,
        fivethous:487,
        tenthous:987,
        odd:14,
        even:15,
        stringu1:"ZLAAAA",
        stringu2:"AFBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:194,
        unique2:807,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:94,
        twothousand:194,
        fivethous:194,
        tenthous:194,
        odd:8,
        even:9,
        stringu1:"MHAAAA",
        stringu2:"BFBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:927,
        unique2:808,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:27,
        twothousand:127,
        fivethous:427,
        tenthous:927,
        odd:14,
        even:15,
        stringu1:"RJAAAA",
        stringu2:"CFBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:607,
        unique2:809,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:7,
        twothousand:7,
        fivethous:107,
        tenthous:607,
        odd:14,
        even:15,
        stringu1:"JXAAAA",
        stringu2:"DFBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:119,
        unique2:810,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:19,
        twothousand:119,
        fivethous:119,
        tenthous:119,
        odd:18,
        even:19,
        stringu1:"PEAAAA",
        stringu2:"EFBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:182,
        unique2:811,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:82,
        twothousand:182,
        fivethous:182,
        tenthous:182,
        odd:4,
        even:5,
        stringu1:"AHAAAA",
        stringu2:"FFBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:606,
        unique2:812,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:6,
        twothousand:6,
        fivethous:106,
        tenthous:606,
        odd:12,
        even:13,
        stringu1:"IXAAAA",
        stringu2:"GFBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:849,
        unique2:813,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:49,
        twothousand:49,
        fivethous:349,
        tenthous:849,
        odd:18,
        even:19,
        stringu1:"RGAAAA",
        stringu2:"HFBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:34,
        unique2:814,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:34,
        twothousand:34,
        fivethous:34,
        tenthous:34,
        odd:8,
        even:9,
        stringu1:"IBAAAA",
        stringu2:"IFBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:683,
        unique2:815,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:83,
        twothousand:83,
        fivethous:183,
        tenthous:683,
        odd:6,
        even:7,
        stringu1:"HAAAAA",
        stringu2:"JFBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:134,
        unique2:816,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:34,
        twothousand:134,
        fivethous:134,
        tenthous:134,
        odd:8,
        even:9,
        stringu1:"EFAAAA",
        stringu2:"KFBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:331,
        unique2:817,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:31,
        twothousand:131,
        fivethous:331,
        tenthous:331,
        odd:2,
        even:3,
        stringu1:"TMAAAA",
        stringu2:"LFBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:808,
        unique2:818,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:8,
        twothousand:8,
        fivethous:308,
        tenthous:808,
        odd:16,
        even:17,
        stringu1:"CFAAAA",
        stringu2:"MFBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:703,
        unique2:819,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:3,
        twothousand:103,
        fivethous:203,
        tenthous:703,
        odd:6,
        even:7,
        stringu1:"BBAAAA",
        stringu2:"NFBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:669,
        unique2:820,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:69,
        twothousand:69,
        fivethous:169,
        tenthous:669,
        odd:18,
        even:19,
        stringu1:"TZAAAA",
        stringu2:"OFBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:264,
        unique2:821,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:64,
        twothousand:64,
        fivethous:264,
        tenthous:264,
        odd:8,
        even:9,
        stringu1:"EKAAAA",
        stringu2:"PFBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:277,
        unique2:822,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:77,
        twothousand:77,
        fivethous:277,
        tenthous:277,
        odd:14,
        even:15,
        stringu1:"RKAAAA",
        stringu2:"QFBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:877,
        unique2:823,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:77,
        twothousand:77,
        fivethous:377,
        tenthous:877,
        odd:14,
        even:15,
        stringu1:"THAAAA",
        stringu2:"RFBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:783,
        unique2:824,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:83,
        twothousand:183,
        fivethous:283,
        tenthous:783,
        odd:6,
        even:7,
        stringu1:"DEAAAA",
        stringu2:"SFBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:791,
        unique2:825,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:91,
        twothousand:191,
        fivethous:291,
        tenthous:791,
        odd:2,
        even:3,
        stringu1:"LEAAAA",
        stringu2:"TFBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:171,
        unique2:826,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:71,
        twothousand:171,
        fivethous:171,
        tenthous:171,
        odd:2,
        even:3,
        stringu1:"PGAAAA",
        stringu2:"UFBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:564,
        unique2:827,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:64,
        twothousand:164,
        fivethous:64,
        tenthous:564,
        odd:8,
        even:9,
        stringu1:"SVAAAA",
        stringu2:"VFBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:230,
        unique2:828,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:30,
        twothousand:30,
        fivethous:230,
        tenthous:230,
        odd:0,
        even:1,
        stringu1:"WIAAAA",
        stringu2:"WFBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:881,
        unique2:829,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:81,
        twothousand:81,
        fivethous:381,
        tenthous:881,
        odd:2,
        even:3,
        stringu1:"XHAAAA",
        stringu2:"XFBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:890,
        unique2:830,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:90,
        twothousand:90,
        fivethous:390,
        tenthous:890,
        odd:0,
        even:1,
        stringu1:"GIAAAA",
        stringu2:"YFBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:374,
        unique2:831,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:74,
        twothousand:174,
        fivethous:374,
        tenthous:374,
        odd:8,
        even:9,
        stringu1:"KOAAAA",
        stringu2:"ZFBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:697,
        unique2:832,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:97,
        twothousand:97,
        fivethous:197,
        tenthous:697,
        odd:14,
        even:15,
        stringu1:"VAAAAA",
        stringu2:"AGBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:4,
        unique2:833,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:4,
        twothousand:4,
        fivethous:4,
        tenthous:4,
        odd:8,
        even:9,
        stringu1:"EAAAAA",
        stringu2:"BGBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:385,
        unique2:834,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:85,
        twothousand:185,
        fivethous:385,
        tenthous:385,
        odd:10,
        even:11,
        stringu1:"VOAAAA",
        stringu2:"CGBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:739,
        unique2:835,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:39,
        twothousand:139,
        fivethous:239,
        tenthous:739,
        odd:18,
        even:19,
        stringu1:"LCAAAA",
        stringu2:"DGBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:623,
        unique2:836,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:23,
        twothousand:23,
        fivethous:123,
        tenthous:623,
        odd:6,
        even:7,
        stringu1:"ZXAAAA",
        stringu2:"EGBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:547,
        unique2:837,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:47,
        twothousand:147,
        fivethous:47,
        tenthous:547,
        odd:14,
        even:15,
        stringu1:"BVAAAA",
        stringu2:"FGBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:532,
        unique2:838,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:32,
        twothousand:132,
        fivethous:32,
        tenthous:532,
        odd:4,
        even:5,
        stringu1:"MUAAAA",
        stringu2:"GGBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:383,
        unique2:839,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:83,
        twothousand:183,
        fivethous:383,
        tenthous:383,
        odd:6,
        even:7,
        stringu1:"TOAAAA",
        stringu2:"HGBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:181,
        unique2:840,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:81,
        twothousand:181,
        fivethous:181,
        tenthous:181,
        odd:2,
        even:3,
        stringu1:"ZGAAAA",
        stringu2:"IGBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:327,
        unique2:841,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:27,
        twothousand:127,
        fivethous:327,
        tenthous:327,
        odd:14,
        even:15,
        stringu1:"PMAAAA",
        stringu2:"JGBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:701,
        unique2:842,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:1,
        twothousand:101,
        fivethous:201,
        tenthous:701,
        odd:2,
        even:3,
        stringu1:"ZAAAAA",
        stringu2:"KGBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:111,
        unique2:843,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:11,
        twothousand:111,
        fivethous:111,
        tenthous:111,
        odd:2,
        even:3,
        stringu1:"HEAAAA",
        stringu2:"LGBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:977,
        unique2:844,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:77,
        twothousand:177,
        fivethous:477,
        tenthous:977,
        odd:14,
        even:15,
        stringu1:"PLAAAA",
        stringu2:"MGBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:431,
        unique2:845,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:31,
        twothousand:31,
        fivethous:431,
        tenthous:431,
        odd:2,
        even:3,
        stringu1:"PQAAAA",
        stringu2:"NGBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:456,
        unique2:846,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:56,
        twothousand:56,
        fivethous:456,
        tenthous:456,
        odd:12,
        even:13,
        stringu1:"ORAAAA",
        stringu2:"OGBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:368,
        unique2:847,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:68,
        twothousand:168,
        fivethous:368,
        tenthous:368,
        odd:16,
        even:17,
        stringu1:"EOAAAA",
        stringu2:"PGBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:32,
        unique2:848,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:32,
        twothousand:32,
        fivethous:32,
        tenthous:32,
        odd:4,
        even:5,
        stringu1:"GBAAAA",
        stringu2:"QGBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:125,
        unique2:849,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:25,
        twothousand:125,
        fivethous:125,
        tenthous:125,
        odd:10,
        even:11,
        stringu1:"VEAAAA",
        stringu2:"RGBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:847,
        unique2:850,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:47,
        twothousand:47,
        fivethous:347,
        tenthous:847,
        odd:14,
        even:15,
        stringu1:"PGAAAA",
        stringu2:"SGBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:485,
        unique2:851,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:85,
        twothousand:85,
        fivethous:485,
        tenthous:485,
        odd:10,
        even:11,
        stringu1:"RSAAAA",
        stringu2:"TGBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:387,
        unique2:852,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:87,
        twothousand:187,
        fivethous:387,
        tenthous:387,
        odd:14,
        even:15,
        stringu1:"XOAAAA",
        stringu2:"UGBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:288,
        unique2:853,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:88,
        twothousand:88,
        fivethous:288,
        tenthous:288,
        odd:16,
        even:17,
        stringu1:"CLAAAA",
        stringu2:"VGBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:919,
        unique2:854,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:19,
        twothousand:119,
        fivethous:419,
        tenthous:919,
        odd:18,
        even:19,
        stringu1:"JJAAAA",
        stringu2:"WGBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:393,
        unique2:855,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:93,
        twothousand:193,
        fivethous:393,
        tenthous:393,
        odd:6,
        even:7,
        stringu1:"DPAAAA",
        stringu2:"XGBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:953,
        unique2:856,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:53,
        twothousand:153,
        fivethous:453,
        tenthous:953,
        odd:6,
        even:7,
        stringu1:"RKAAAA",
        stringu2:"YGBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:798,
        unique2:857,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:98,
        twothousand:198,
        fivethous:298,
        tenthous:798,
        odd:16,
        even:17,
        stringu1:"SEAAAA",
        stringu2:"ZGBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:940,
        unique2:858,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:40,
        twothousand:140,
        fivethous:440,
        tenthous:940,
        odd:0,
        even:1,
        stringu1:"EKAAAA",
        stringu2:"AHBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:198,
        unique2:859,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:98,
        twothousand:198,
        fivethous:198,
        tenthous:198,
        odd:16,
        even:17,
        stringu1:"QHAAAA",
        stringu2:"BHBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:25,
        unique2:860,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:25,
        twothousand:25,
        fivethous:25,
        tenthous:25,
        odd:10,
        even:11,
        stringu1:"ZAAAAA",
        stringu2:"CHBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:190,
        unique2:861,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:90,
        twothousand:190,
        fivethous:190,
        tenthous:190,
        odd:0,
        even:1,
        stringu1:"IHAAAA",
        stringu2:"DHBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:820,
        unique2:862,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:20,
        twothousand:20,
        fivethous:320,
        tenthous:820,
        odd:0,
        even:1,
        stringu1:"OFAAAA",
        stringu2:"EHBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:15,
        unique2:863,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:15,
        twothousand:15,
        fivethous:15,
        tenthous:15,
        odd:10,
        even:11,
        stringu1:"PAAAAA",
        stringu2:"FHBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:427,
        unique2:864,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:27,
        twothousand:27,
        fivethous:427,
        tenthous:427,
        odd:14,
        even:15,
        stringu1:"LQAAAA",
        stringu2:"GHBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:349,
        unique2:865,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:49,
        twothousand:149,
        fivethous:349,
        tenthous:349,
        odd:18,
        even:19,
        stringu1:"LNAAAA",
        stringu2:"HHBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:785,
        unique2:866,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:85,
        twothousand:185,
        fivethous:285,
        tenthous:785,
        odd:10,
        even:11,
        stringu1:"FEAAAA",
        stringu2:"IHBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:340,
        unique2:867,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:40,
        twothousand:140,
        fivethous:340,
        tenthous:340,
        odd:0,
        even:1,
        stringu1:"CNAAAA",
        stringu2:"JHBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:292,
        unique2:868,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:92,
        twothousand:92,
        fivethous:292,
        tenthous:292,
        odd:4,
        even:5,
        stringu1:"GLAAAA",
        stringu2:"KHBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:17,
        unique2:869,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:17,
        twothousand:17,
        fivethous:17,
        tenthous:17,
        odd:14,
        even:15,
        stringu1:"RAAAAA",
        stringu2:"LHBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:985,
        unique2:870,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:85,
        twothousand:185,
        fivethous:485,
        tenthous:985,
        odd:10,
        even:11,
        stringu1:"XLAAAA",
        stringu2:"MHBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:645,
        unique2:871,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:45,
        twothousand:45,
        fivethous:145,
        tenthous:645,
        odd:10,
        even:11,
        stringu1:"VYAAAA",
        stringu2:"NHBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:631,
        unique2:872,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:31,
        twothousand:31,
        fivethous:131,
        tenthous:631,
        odd:2,
        even:3,
        stringu1:"HYAAAA",
        stringu2:"OHBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:761,
        unique2:873,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:61,
        twothousand:161,
        fivethous:261,
        tenthous:761,
        odd:2,
        even:3,
        stringu1:"HDAAAA",
        stringu2:"PHBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:707,
        unique2:874,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:7,
        twothousand:107,
        fivethous:207,
        tenthous:707,
        odd:14,
        even:15,
        stringu1:"FBAAAA",
        stringu2:"QHBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:776,
        unique2:875,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:76,
        twothousand:176,
        fivethous:276,
        tenthous:776,
        odd:12,
        even:13,
        stringu1:"WDAAAA",
        stringu2:"RHBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:856,
        unique2:876,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:56,
        twothousand:56,
        fivethous:356,
        tenthous:856,
        odd:12,
        even:13,
        stringu1:"YGAAAA",
        stringu2:"SHBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:978,
        unique2:877,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:78,
        twothousand:178,
        fivethous:478,
        tenthous:978,
        odd:16,
        even:17,
        stringu1:"QLAAAA",
        stringu2:"THBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:710,
        unique2:878,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:10,
        twothousand:110,
        fivethous:210,
        tenthous:710,
        odd:0,
        even:1,
        stringu1:"IBAAAA",
        stringu2:"UHBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:604,
        unique2:879,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:4,
        twothousand:4,
        fivethous:104,
        tenthous:604,
        odd:8,
        even:9,
        stringu1:"GXAAAA",
        stringu2:"VHBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:291,
        unique2:880,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:91,
        twothousand:91,
        fivethous:291,
        tenthous:291,
        odd:2,
        even:3,
        stringu1:"FLAAAA",
        stringu2:"WHBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:747,
        unique2:881,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:47,
        twothousand:147,
        fivethous:247,
        tenthous:747,
        odd:14,
        even:15,
        stringu1:"TCAAAA",
        stringu2:"XHBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:837,
        unique2:882,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:37,
        twothousand:37,
        fivethous:337,
        tenthous:837,
        odd:14,
        even:15,
        stringu1:"FGAAAA",
        stringu2:"YHBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:722,
        unique2:883,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:22,
        twothousand:122,
        fivethous:222,
        tenthous:722,
        odd:4,
        even:5,
        stringu1:"UBAAAA",
        stringu2:"ZHBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:925,
        unique2:884,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:25,
        twothousand:125,
        fivethous:425,
        tenthous:925,
        odd:10,
        even:11,
        stringu1:"PJAAAA",
        stringu2:"AIBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:49,
        unique2:885,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:49,
        twothousand:49,
        fivethous:49,
        tenthous:49,
        odd:18,
        even:19,
        stringu1:"XBAAAA",
        stringu2:"BIBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:832,
        unique2:886,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:32,
        twothousand:32,
        fivethous:332,
        tenthous:832,
        odd:4,
        even:5,
        stringu1:"AGAAAA",
        stringu2:"CIBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:336,
        unique2:887,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:36,
        twothousand:136,
        fivethous:336,
        tenthous:336,
        odd:12,
        even:13,
        stringu1:"YMAAAA",
        stringu2:"DIBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:185,
        unique2:888,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:85,
        twothousand:185,
        fivethous:185,
        tenthous:185,
        odd:10,
        even:11,
        stringu1:"DHAAAA",
        stringu2:"EIBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:434,
        unique2:889,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:34,
        twothousand:34,
        fivethous:434,
        tenthous:434,
        odd:8,
        even:9,
        stringu1:"SQAAAA",
        stringu2:"FIBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:284,
        unique2:890,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:84,
        twothousand:84,
        fivethous:284,
        tenthous:284,
        odd:8,
        even:9,
        stringu1:"YKAAAA",
        stringu2:"GIBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:812,
        unique2:891,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:12,
        twothousand:12,
        fivethous:312,
        tenthous:812,
        odd:4,
        even:5,
        stringu1:"GFAAAA",
        stringu2:"HIBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:810,
        unique2:892,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:10,
        twothousand:10,
        fivethous:310,
        tenthous:810,
        odd:0,
        even:1,
        stringu1:"EFAAAA",
        stringu2:"IIBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:252,
        unique2:893,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:52,
        twothousand:52,
        fivethous:252,
        tenthous:252,
        odd:4,
        even:5,
        stringu1:"SJAAAA",
        stringu2:"JIBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:965,
        unique2:894,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:65,
        twothousand:165,
        fivethous:465,
        tenthous:965,
        odd:10,
        even:11,
        stringu1:"DLAAAA",
        stringu2:"KIBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:110,
        unique2:895,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:10,
        twothousand:110,
        fivethous:110,
        tenthous:110,
        odd:0,
        even:1,
        stringu1:"GEAAAA",
        stringu2:"LIBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:698,
        unique2:896,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:98,
        twothousand:98,
        fivethous:198,
        tenthous:698,
        odd:16,
        even:17,
        stringu1:"WAAAAA",
        stringu2:"MIBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:283,
        unique2:897,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:83,
        twothousand:83,
        fivethous:283,
        tenthous:283,
        odd:6,
        even:7,
        stringu1:"XKAAAA",
        stringu2:"NIBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:533,
        unique2:898,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:33,
        twothousand:133,
        fivethous:33,
        tenthous:533,
        odd:6,
        even:7,
        stringu1:"NUAAAA",
        stringu2:"OIBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:662,
        unique2:899,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:62,
        twothousand:62,
        fivethous:162,
        tenthous:662,
        odd:4,
        even:5,
        stringu1:"MZAAAA",
        stringu2:"PIBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:329,
        unique2:900,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:29,
        twothousand:129,
        fivethous:329,
        tenthous:329,
        odd:18,
        even:19,
        stringu1:"RMAAAA",
        stringu2:"QIBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:250,
        unique2:901,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:50,
        twothousand:50,
        fivethous:250,
        tenthous:250,
        odd:0,
        even:1,
        stringu1:"QJAAAA",
        stringu2:"RIBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:407,
        unique2:902,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:7,
        twothousand:7,
        fivethous:407,
        tenthous:407,
        odd:14,
        even:15,
        stringu1:"RPAAAA",
        stringu2:"SIBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:823,
        unique2:903,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:23,
        twothousand:23,
        fivethous:323,
        tenthous:823,
        odd:6,
        even:7,
        stringu1:"RFAAAA",
        stringu2:"TIBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:852,
        unique2:904,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:52,
        twothousand:52,
        fivethous:352,
        tenthous:852,
        odd:4,
        even:5,
        stringu1:"UGAAAA",
        stringu2:"UIBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:871,
        unique2:905,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:71,
        twothousand:71,
        fivethous:371,
        tenthous:871,
        odd:2,
        even:3,
        stringu1:"NHAAAA",
        stringu2:"VIBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:118,
        unique2:906,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:18,
        twothousand:118,
        fivethous:118,
        tenthous:118,
        odd:16,
        even:17,
        stringu1:"OEAAAA",
        stringu2:"WIBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:912,
        unique2:907,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:12,
        twothousand:112,
        fivethous:412,
        tenthous:912,
        odd:4,
        even:5,
        stringu1:"CJAAAA",
        stringu2:"XIBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:458,
        unique2:908,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:58,
        twothousand:58,
        fivethous:458,
        tenthous:458,
        odd:16,
        even:17,
        stringu1:"QRAAAA",
        stringu2:"YIBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:926,
        unique2:909,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:26,
        twothousand:126,
        fivethous:426,
        tenthous:926,
        odd:12,
        even:13,
        stringu1:"QJAAAA",
        stringu2:"ZIBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:328,
        unique2:910,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:28,
        twothousand:128,
        fivethous:328,
        tenthous:328,
        odd:16,
        even:17,
        stringu1:"QMAAAA",
        stringu2:"AJBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:980,
        unique2:911,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:80,
        twothousand:180,
        fivethous:480,
        tenthous:980,
        odd:0,
        even:1,
        stringu1:"SLAAAA",
        stringu2:"BJBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:259,
        unique2:912,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:59,
        twothousand:59,
        fivethous:259,
        tenthous:259,
        odd:18,
        even:19,
        stringu1:"ZJAAAA",
        stringu2:"CJBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:900,
        unique2:913,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:0,
        twothousand:100,
        fivethous:400,
        tenthous:900,
        odd:0,
        even:1,
        stringu1:"QIAAAA",
        stringu2:"DJBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:137,
        unique2:914,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:37,
        twothousand:137,
        fivethous:137,
        tenthous:137,
        odd:14,
        even:15,
        stringu1:"HFAAAA",
        stringu2:"EJBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:159,
        unique2:915,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:59,
        twothousand:159,
        fivethous:159,
        tenthous:159,
        odd:18,
        even:19,
        stringu1:"DGAAAA",
        stringu2:"FJBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:243,
        unique2:916,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:43,
        twothousand:43,
        fivethous:243,
        tenthous:243,
        odd:6,
        even:7,
        stringu1:"JJAAAA",
        stringu2:"GJBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:472,
        unique2:917,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:72,
        twothousand:72,
        fivethous:472,
        tenthous:472,
        odd:4,
        even:5,
        stringu1:"ESAAAA",
        stringu2:"HJBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:796,
        unique2:918,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:96,
        twothousand:196,
        fivethous:296,
        tenthous:796,
        odd:12,
        even:13,
        stringu1:"QEAAAA",
        stringu2:"IJBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:382,
        unique2:919,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:82,
        twothousand:182,
        fivethous:382,
        tenthous:382,
        odd:4,
        even:5,
        stringu1:"SOAAAA",
        stringu2:"JJBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:911,
        unique2:920,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:11,
        twothousand:111,
        fivethous:411,
        tenthous:911,
        odd:2,
        even:3,
        stringu1:"BJAAAA",
        stringu2:"KJBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:179,
        unique2:921,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:79,
        twothousand:179,
        fivethous:179,
        tenthous:179,
        odd:18,
        even:19,
        stringu1:"XGAAAA",
        stringu2:"LJBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:778,
        unique2:922,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:78,
        twothousand:178,
        fivethous:278,
        tenthous:778,
        odd:16,
        even:17,
        stringu1:"YDAAAA",
        stringu2:"MJBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:405,
        unique2:923,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:5,
        twothousand:5,
        fivethous:405,
        tenthous:405,
        odd:10,
        even:11,
        stringu1:"PPAAAA",
        stringu2:"NJBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:265,
        unique2:924,
        two:1,
        four:1,
        ten:5,
        twenty:5,
        hundred:5,
        thousand:65,
        twothousand:65,
        fivethous:265,
        tenthous:265,
        odd:10,
        even:11,
        stringu1:"FKAAAA",
        stringu2:"OJBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:556,
        unique2:925,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:56,
        twothousand:156,
        fivethous:56,
        tenthous:556,
        odd:12,
        even:13,
        stringu1:"KVAAAA",
        stringu2:"PJBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:16,
        unique2:926,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:16,
        twothousand:16,
        fivethous:16,
        tenthous:16,
        odd:12,
        even:13,
        stringu1:"QAAAAA",
        stringu2:"QJBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:706,
        unique2:927,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:6,
        twothousand:106,
        fivethous:206,
        tenthous:706,
        odd:12,
        even:13,
        stringu1:"EBAAAA",
        stringu2:"RJBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:497,
        unique2:928,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:97,
        twothousand:97,
        fivethous:497,
        tenthous:497,
        odd:14,
        even:15,
        stringu1:"DTAAAA",
        stringu2:"SJBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:708,
        unique2:929,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:8,
        twothousand:108,
        fivethous:208,
        tenthous:708,
        odd:16,
        even:17,
        stringu1:"GBAAAA",
        stringu2:"TJBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:46,
        unique2:930,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:46,
        twothousand:46,
        fivethous:46,
        tenthous:46,
        odd:12,
        even:13,
        stringu1:"UBAAAA",
        stringu2:"UJBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:901,
        unique2:931,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:1,
        twothousand:101,
        fivethous:401,
        tenthous:901,
        odd:2,
        even:3,
        stringu1:"RIAAAA",
        stringu2:"VJBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:416,
        unique2:932,
        two:0,
        four:0,
        ten:6,
        twenty:16,
        hundred:6,
        thousand:16,
        twothousand:16,
        fivethous:416,
        tenthous:416,
        odd:12,
        even:13,
        stringu1:"AQAAAA",
        stringu2:"WJBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:307,
        unique2:933,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:7,
        twothousand:107,
        fivethous:307,
        tenthous:307,
        odd:14,
        even:15,
        stringu1:"VLAAAA",
        stringu2:"XJBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:166,
        unique2:934,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:66,
        twothousand:166,
        fivethous:166,
        tenthous:166,
        odd:12,
        even:13,
        stringu1:"KGAAAA",
        stringu2:"YJBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:178,
        unique2:935,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:78,
        twothousand:178,
        fivethous:178,
        tenthous:178,
        odd:16,
        even:17,
        stringu1:"WGAAAA",
        stringu2:"ZJBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:499,
        unique2:936,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:99,
        twothousand:99,
        fivethous:499,
        tenthous:499,
        odd:18,
        even:19,
        stringu1:"FTAAAA",
        stringu2:"AKBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:257,
        unique2:937,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:57,
        twothousand:57,
        fivethous:257,
        tenthous:257,
        odd:14,
        even:15,
        stringu1:"XJAAAA",
        stringu2:"BKBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:342,
        unique2:938,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:42,
        twothousand:142,
        fivethous:342,
        tenthous:342,
        odd:4,
        even:5,
        stringu1:"ENAAAA",
        stringu2:"CKBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:850,
        unique2:939,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:50,
        twothousand:50,
        fivethous:350,
        tenthous:850,
        odd:0,
        even:1,
        stringu1:"SGAAAA",
        stringu2:"DKBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:313,
        unique2:940,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:13,
        twothousand:113,
        fivethous:313,
        tenthous:313,
        odd:6,
        even:7,
        stringu1:"BMAAAA",
        stringu2:"EKBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:831,
        unique2:941,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:31,
        twothousand:31,
        fivethous:331,
        tenthous:831,
        odd:2,
        even:3,
        stringu1:"ZFAAAA",
        stringu2:"FKBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:57,
        unique2:942,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:57,
        twothousand:57,
        fivethous:57,
        tenthous:57,
        odd:14,
        even:15,
        stringu1:"FCAAAA",
        stringu2:"GKBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:37,
        unique2:943,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:37,
        twothousand:37,
        fivethous:37,
        tenthous:37,
        odd:14,
        even:15,
        stringu1:"LBAAAA",
        stringu2:"HKBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:511,
        unique2:944,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:11,
        twothousand:111,
        fivethous:11,
        tenthous:511,
        odd:2,
        even:3,
        stringu1:"RTAAAA",
        stringu2:"IKBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:578,
        unique2:945,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:78,
        twothousand:178,
        fivethous:78,
        tenthous:578,
        odd:16,
        even:17,
        stringu1:"GWAAAA",
        stringu2:"JKBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:100,
        unique2:946,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:0,
        twothousand:100,
        fivethous:100,
        tenthous:100,
        odd:0,
        even:1,
        stringu1:"WDAAAA",
        stringu2:"KKBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:935,
        unique2:947,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:35,
        twothousand:135,
        fivethous:435,
        tenthous:935,
        odd:10,
        even:11,
        stringu1:"ZJAAAA",
        stringu2:"LKBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:821,
        unique2:948,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:21,
        twothousand:21,
        fivethous:321,
        tenthous:821,
        odd:2,
        even:3,
        stringu1:"PFAAAA",
        stringu2:"MKBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:294,
        unique2:949,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:94,
        twothousand:94,
        fivethous:294,
        tenthous:294,
        odd:8,
        even:9,
        stringu1:"ILAAAA",
        stringu2:"NKBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:575,
        unique2:950,
        two:1,
        four:3,
        ten:5,
        twenty:15,
        hundred:5,
        thousand:75,
        twothousand:175,
        fivethous:75,
        tenthous:575,
        odd:10,
        even:11,
        stringu1:"DWAAAA",
        stringu2:"OKBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:272,
        unique2:951,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:72,
        twothousand:72,
        fivethous:272,
        tenthous:272,
        odd:4,
        even:5,
        stringu1:"MKAAAA",
        stringu2:"PKBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:491,
        unique2:952,
        two:1,
        four:3,
        ten:1,
        twenty:11,
        hundred:1,
        thousand:91,
        twothousand:91,
        fivethous:491,
        tenthous:491,
        odd:2,
        even:3,
        stringu1:"XSAAAA",
        stringu2:"QKBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:43,
        unique2:953,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:43,
        twothousand:43,
        fivethous:43,
        tenthous:43,
        odd:6,
        even:7,
        stringu1:"RBAAAA",
        stringu2:"RKBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:167,
        unique2:954,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:67,
        twothousand:167,
        fivethous:167,
        tenthous:167,
        odd:14,
        even:15,
        stringu1:"LGAAAA",
        stringu2:"SKBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:457,
        unique2:955,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:57,
        twothousand:57,
        fivethous:457,
        tenthous:457,
        odd:14,
        even:15,
        stringu1:"PRAAAA",
        stringu2:"TKBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:647,
        unique2:956,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:47,
        twothousand:47,
        fivethous:147,
        tenthous:647,
        odd:14,
        even:15,
        stringu1:"XYAAAA",
        stringu2:"UKBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:180,
        unique2:957,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:80,
        twothousand:180,
        fivethous:180,
        tenthous:180,
        odd:0,
        even:1,
        stringu1:"YGAAAA",
        stringu2:"VKBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:48,
        unique2:958,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:48,
        twothousand:48,
        fivethous:48,
        tenthous:48,
        odd:16,
        even:17,
        stringu1:"WBAAAA",
        stringu2:"WKBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:553,
        unique2:959,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:53,
        twothousand:153,
        fivethous:53,
        tenthous:553,
        odd:6,
        even:7,
        stringu1:"HVAAAA",
        stringu2:"XKBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:188,
        unique2:960,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:88,
        twothousand:188,
        fivethous:188,
        tenthous:188,
        odd:16,
        even:17,
        stringu1:"GHAAAA",
        stringu2:"YKBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:262,
        unique2:961,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:62,
        twothousand:62,
        fivethous:262,
        tenthous:262,
        odd:4,
        even:5,
        stringu1:"CKAAAA",
        stringu2:"ZKBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:728,
        unique2:962,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:28,
        twothousand:128,
        fivethous:228,
        tenthous:728,
        odd:16,
        even:17,
        stringu1:"ACAAAA",
        stringu2:"ALBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:581,
        unique2:963,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:81,
        twothousand:181,
        fivethous:81,
        tenthous:581,
        odd:2,
        even:3,
        stringu1:"JWAAAA",
        stringu2:"BLBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:937,
        unique2:964,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:37,
        twothousand:137,
        fivethous:437,
        tenthous:937,
        odd:14,
        even:15,
        stringu1:"BKAAAA",
        stringu2:"CLBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:370,
        unique2:965,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:70,
        twothousand:170,
        fivethous:370,
        tenthous:370,
        odd:0,
        even:1,
        stringu1:"GOAAAA",
        stringu2:"DLBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:590,
        unique2:966,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:90,
        twothousand:190,
        fivethous:90,
        tenthous:590,
        odd:0,
        even:1,
        stringu1:"SWAAAA",
        stringu2:"ELBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:421,
        unique2:967,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:21,
        twothousand:21,
        fivethous:421,
        tenthous:421,
        odd:2,
        even:3,
        stringu1:"FQAAAA",
        stringu2:"FLBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:693,
        unique2:968,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:93,
        twothousand:93,
        fivethous:193,
        tenthous:693,
        odd:6,
        even:7,
        stringu1:"RAAAAA",
        stringu2:"GLBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:906,
        unique2:969,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:6,
        twothousand:106,
        fivethous:406,
        tenthous:906,
        odd:12,
        even:13,
        stringu1:"WIAAAA",
        stringu2:"HLBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:802,
        unique2:970,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:2,
        twothousand:2,
        fivethous:302,
        tenthous:802,
        odd:4,
        even:5,
        stringu1:"WEAAAA",
        stringu2:"ILBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:38,
        unique2:971,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:38,
        twothousand:38,
        fivethous:38,
        tenthous:38,
        odd:16,
        even:17,
        stringu1:"MBAAAA",
        stringu2:"JLBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:790,
        unique2:972,
        two:0,
        four:2,
        ten:0,
        twenty:10,
        hundred:0,
        thousand:90,
        twothousand:190,
        fivethous:290,
        tenthous:790,
        odd:0,
        even:1,
        stringu1:"KEAAAA",
        stringu2:"KLBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:726,
        unique2:973,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:26,
        twothousand:126,
        fivethous:226,
        tenthous:726,
        odd:12,
        even:13,
        stringu1:"YBAAAA",
        stringu2:"LLBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:23,
        unique2:974,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:23,
        twothousand:23,
        fivethous:23,
        tenthous:23,
        odd:6,
        even:7,
        stringu1:"XAAAAA",
        stringu2:"MLBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:641,
        unique2:975,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:41,
        twothousand:41,
        fivethous:141,
        tenthous:641,
        odd:2,
        even:3,
        stringu1:"RYAAAA",
        stringu2:"NLBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:524,
        unique2:976,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:24,
        twothousand:124,
        fivethous:24,
        tenthous:524,
        odd:8,
        even:9,
        stringu1:"EUAAAA",
        stringu2:"OLBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:169,
        unique2:977,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:69,
        twothousand:169,
        fivethous:169,
        tenthous:169,
        odd:18,
        even:19,
        stringu1:"NGAAAA",
        stringu2:"PLBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:6,
        unique2:978,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:6,
        twothousand:6,
        fivethous:6,
        tenthous:6,
        odd:12,
        even:13,
        stringu1:"GAAAAA",
        stringu2:"QLBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:943,
        unique2:979,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:43,
        twothousand:143,
        fivethous:443,
        tenthous:943,
        odd:6,
        even:7,
        stringu1:"HKAAAA",
        stringu2:"RLBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:26,
        unique2:980,
        two:0,
        four:2,
        ten:6,
        twenty:6,
        hundred:6,
        thousand:26,
        twothousand:26,
        fivethous:26,
        tenthous:26,
        odd:12,
        even:13,
        stringu1:"ABAAAA",
        stringu2:"SLBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:469,
        unique2:981,
        two:1,
        four:1,
        ten:9,
        twenty:9,
        hundred:9,
        thousand:69,
        twothousand:69,
        fivethous:469,
        tenthous:469,
        odd:18,
        even:19,
        stringu1:"BSAAAA",
        stringu2:"TLBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:968,
        unique2:982,
        two:0,
        four:0,
        ten:8,
        twenty:8,
        hundred:8,
        thousand:68,
        twothousand:168,
        fivethous:468,
        tenthous:968,
        odd:16,
        even:17,
        stringu1:"GLAAAA",
        stringu2:"ULBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:947,
        unique2:983,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:47,
        twothousand:147,
        fivethous:447,
        tenthous:947,
        odd:14,
        even:15,
        stringu1:"LKAAAA",
        stringu2:"VLBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:133,
        unique2:984,
        two:1,
        four:1,
        ten:3,
        twenty:13,
        hundred:3,
        thousand:33,
        twothousand:133,
        fivethous:133,
        tenthous:133,
        odd:6,
        even:7,
        stringu1:"DFAAAA",
        stringu2:"WLBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:52,
        unique2:985,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:52,
        twothousand:52,
        fivethous:52,
        tenthous:52,
        odd:4,
        even:5,
        stringu1:"ACAAAA",
        stringu2:"XLBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:660,
        unique2:986,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:60,
        twothousand:60,
        fivethous:160,
        tenthous:660,
        odd:0,
        even:1,
        stringu1:"KZAAAA",
        stringu2:"YLBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:780,
        unique2:987,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:80,
        twothousand:180,
        fivethous:280,
        tenthous:780,
        odd:0,
        even:1,
        stringu1:"AEAAAA",
        stringu2:"ZLBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:963,
        unique2:988,
        two:1,
        four:3,
        ten:3,
        twenty:3,
        hundred:3,
        thousand:63,
        twothousand:163,
        fivethous:463,
        tenthous:963,
        odd:6,
        even:7,
        stringu1:"BLAAAA",
        stringu2:"AMBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:561,
        unique2:989,
        two:1,
        four:1,
        ten:1,
        twenty:1,
        hundred:1,
        thousand:61,
        twothousand:161,
        fivethous:61,
        tenthous:561,
        odd:2,
        even:3,
        stringu1:"PVAAAA",
        stringu2:"BMBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:402,
        unique2:990,
        two:0,
        four:2,
        ten:2,
        twenty:2,
        hundred:2,
        thousand:2,
        twothousand:2,
        fivethous:402,
        tenthous:402,
        odd:4,
        even:5,
        stringu1:"MPAAAA",
        stringu2:"CMBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:437,
        unique2:991,
        two:1,
        four:1,
        ten:7,
        twenty:17,
        hundred:7,
        thousand:37,
        twothousand:37,
        fivethous:437,
        tenthous:437,
        odd:14,
        even:15,
        stringu1:"VQAAAA",
        stringu2:"DMBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:112,
        unique2:992,
        two:0,
        four:0,
        ten:2,
        twenty:12,
        hundred:2,
        thousand:12,
        twothousand:112,
        fivethous:112,
        tenthous:112,
        odd:4,
        even:5,
        stringu1:"IEAAAA",
        stringu2:"EMBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:247,
        unique2:993,
        two:1,
        four:3,
        ten:7,
        twenty:7,
        hundred:7,
        thousand:47,
        twothousand:47,
        fivethous:247,
        tenthous:247,
        odd:14,
        even:15,
        stringu1:"NJAAAA",
        stringu2:"FMBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:579,
        unique2:994,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:79,
        twothousand:179,
        fivethous:79,
        tenthous:579,
        odd:18,
        even:19,
        stringu1:"HWAAAA",
        stringu2:"GMBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:379,
        unique2:995,
        two:1,
        four:3,
        ten:9,
        twenty:19,
        hundred:9,
        thousand:79,
        twothousand:179,
        fivethous:379,
        tenthous:379,
        odd:18,
        even:19,
        stringu1:"POAAAA",
        stringu2:"HMBAAA",
        string4:"VVVVxx"
      },
      {
        unique1:74,
        unique2:996,
        two:0,
        four:2,
        ten:4,
        twenty:14,
        hundred:4,
        thousand:74,
        twothousand:74,
        fivethous:74,
        tenthous:74,
        odd:8,
        even:9,
        stringu1:"WCAAAA",
        stringu2:"IMBAAA",
        string4:"AAAAxx"
      },
      {
        unique1:744,
        unique2:997,
        two:0,
        four:0,
        ten:4,
        twenty:4,
        hundred:4,
        thousand:44,
        twothousand:144,
        fivethous:244,
        tenthous:744,
        odd:8,
        even:9,
        stringu1:"QCAAAA",
        stringu2:"JMBAAA",
        string4:"HHHHxx"
      },
      {
        unique1:0,
        unique2:998,
        two:0,
        four:0,
        ten:0,
        twenty:0,
        hundred:0,
        thousand:0,
        twothousand:0,
        fivethous:0,
        tenthous:0,
        odd:0,
        even:1,
        stringu1:"AAAAAA",
        stringu2:"KMBAAA",
        string4:"OOOOxx"
      },
      {
        unique1:278,
        unique2:999,
        two:0,
        four:2,
        ten:8,
        twenty:18,
        hundred:8,
        thousand:78,
        twothousand:78,
        fivethous:278,
        tenthous:278,
        odd:16,
        even:17,
        stringu1:"SKAAAA",
        stringu2:"LMBAAA",
        string4:"VVVVxx"
      }
    ]
  },
  {
    name:"PG_SELECT_01",
    statement:"SELECT * FROM onek WHERE onek.unique1 < 10",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          unique1:9,
          unique2:49,
          two:1,
          four:1,
          ten:9,
          twenty:9,
          hundred:9,
          thousand:9,
          twothousand:9,
          fivethous:9,
          tenthous:9,
          odd:18,
          even:19,
          stringu1:"JAAAAA",
          stringu2:"XBAAAA",
          string4:"HHHHxx"
        },
        {
          unique1:1,
          unique2:214,
          two:1,
          four:1,
          ten:1,
          twenty:1,
          hundred:1,
          thousand:1,
          twothousand:1,
          fivethous:1,
          tenthous:1,
          odd:2,
          even:3,
          stringu1:"BAAAAA",
          stringu2:"GIAAAA",
          string4:"OOOOxx"
        },
        {
          unique1:2,
          unique2:326,
          two:0,
          four:2,
          ten:2,
          twenty:2,
          hundred:2,
          thousand:2,
          twothousand:2,
          fivethous:2,
          tenthous:2,
          odd:4,
          even:5,
          stringu1:"CAAAAA",
          stringu2:"OMAAAA",
          string4:"OOOOxx"
        },
        {
          unique1:3,
          unique2:431,
          two:1,
          four:3,
          ten:3,
          twenty:3,
          hundred:3,
          thousand:3,
          twothousand:3,
          fivethous:3,
          tenthous:3,
          odd:6,
          even:7,
          stringu1:"DAAAAA",
          stringu2:"PQAAAA",
          string4:"VVVVxx"
        },
        {
          unique1:5,
          unique2:541,
          two:1,
          four:1,
          ten:5,
          twenty:5,
          hundred:5,
          thousand:5,
          twothousand:5,
          fivethous:5,
          tenthous:5,
          odd:10,
          even:11,
          stringu1:"FAAAAA",
          stringu2:"VUAAAA",
          string4:"HHHHxx"
        },
        {
          unique1:7,
          unique2:647,
          two:1,
          four:3,
          ten:7,
          twenty:7,
          hundred:7,
          thousand:7,
          twothousand:7,
          fivethous:7,
          tenthous:7,
          odd:14,
          even:15,
          stringu1:"HAAAAA",
          stringu2:"XYAAAA",
          string4:"VVVVxx"
        },
        {
          unique1:8,
          unique2:653,
          two:0,
          four:0,
          ten:8,
          twenty:8,
          hundred:8,
          thousand:8,
          twothousand:8,
          fivethous:8,
          tenthous:8,
          odd:16,
          even:17,
          stringu1:"IAAAAA",
          stringu2:"DZAAAA",
          string4:"HHHHxx"
        },
        {
          unique1:4,
          unique2:833,
          two:0,
          four:0,
          ten:4,
          twenty:4,
          hundred:4,
          thousand:4,
          twothousand:4,
          fivethous:4,
          tenthous:4,
          odd:8,
          even:9,
          stringu1:"EAAAAA",
          stringu2:"BGBAAA",
          string4:"HHHHxx"
        },
        {
          unique1:6,
          unique2:978,
          two:0,
          four:2,
          ten:6,
          twenty:6,
          hundred:6,
          thousand:6,
          twothousand:6,
          fivethous:6,
          tenthous:6,
          odd:12,
          even:13,
          stringu1:"GAAAAA",
          stringu2:"QLBAAA",
          string4:"OOOOxx"
        },
        {
          unique1:0,
          unique2:998,
          two:0,
          four:0,
          ten:0,
          twenty:0,
          hundred:0,
          thousand:0,
          twothousand:0,
          fivethous:0,
          tenthous:0,
          odd:0,
          even:1,
          stringu1:"AAAAAA",
          stringu2:"KMBAAA",
          string4:"OOOOxx"
        }
      ]
    }
  },
  {
    name:"PG_SELECT_02",
    statement:"SELECT onek.unique1, onek.stringu1 FROM onek WHERE onek.unique1 < 20",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          unique1:9,
          stringu1:"JAAAAA"
        },
        {
          unique1:14,
          stringu1:"OAAAAA"
        },
        {
          unique1:13,
          stringu1:"NAAAAA"
        },
        {
          unique1:1,
          stringu1:"BAAAAA"
        },
        {
          unique1:19,
          stringu1:"TAAAAA"
        },
        {
          unique1:2,
          stringu1:"CAAAAA"
        },
        {
          unique1:3,
          stringu1:"DAAAAA"
        },
        {
          unique1:10,
          stringu1:"KAAAAA"
        },
        {
          unique1:5,
          stringu1:"FAAAAA"
        },
        {
          unique1:12,
          stringu1:"MAAAAA"
        },
        {
          unique1:7,
          stringu1:"HAAAAA"
        },
        {
          unique1:8,
          stringu1:"IAAAAA"
        },
        {
          unique1:18,
          stringu1:"SAAAAA"
        },
        {
          unique1:11,
          stringu1:"LAAAAA"
        },
        {
          unique1:4,
          stringu1:"EAAAAA"
        },
        {
          unique1:15,
          stringu1:"PAAAAA"
        },
        {
          unique1:17,
          stringu1:"RAAAAA"
        },
        {
          unique1:16,
          stringu1:"QAAAAA"
        },
        {
          unique1:6,
          stringu1:"GAAAAA"
        },
        {
          unique1:0,
          stringu1:"AAAAAA"
        }
      ]
    }
  },
  {
    name:"PG_SELECT_03",
    statement:"SELECT * from onek2 where unique2 = 11 and stringu1 < 'B'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          unique1:494,
          unique2:11,
          two:0,
          four:2,
          ten:4,
          twenty:14,
          hundred:4,
          thousand:94,
          twothousand:94,
          fivethous:494,
          tenthous:494,
          odd:8,
          even:9,
          stringu1:"ATAAAA",
          stringu2:"LAAAAA",
          string4:"VVVVxx"
        }
      ]
    }
  },
  {
    name:"PG_SELECT_04",
    statement:"SELECT * from onek2 where unique2 = 11 and stringu1 = 'ATAAAA'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          unique1:494,
          unique2:11,
          two:0,
          four:2,
          ten:4,
          twenty:14,
          hundred:4,
          thousand:94,
          twothousand:94,
          fivethous:494,
          tenthous:494,
          odd:8,
          even:9,
          stringu1:"ATAAAA",
          stringu2:"LAAAAA",
          string4:"VVVVxx"
        }
      ]
    }
  },
  {
    name:"PG_SELECT_05",
    statement:"SELECT onek.unique1, onek.string4 FROM onek WHERE onek.unique1 < 10",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          unique1:9,
          string4:"HHHHxx"
        },
        {
          unique1:1,
          string4:"OOOOxx"
        },
        {
          unique1:2,
          string4:"OOOOxx"
        },
        {
          unique1:3,
          string4:"VVVVxx"
        },
        {
          unique1:5,
          string4:"HHHHxx"
        },
        {
          unique1:7,
          string4:"VVVVxx"
        },
        {
          unique1:8,
          string4:"HHHHxx"
        },
        {
          unique1:4,
          string4:"HHHHxx"
        },
        {
          unique1:6,
          string4:"OOOOxx"
        },
        {
          unique1:0,
          string4:"OOOOxx"
        }
      ]
    }
  },
  {
    name:"PG_SELECT_06",
    statement:"SELECT onek.unique1, onek.string4 FROM onek WHERE onek.unique1 > 980",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          unique1:997,
          string4:"HHHHxx"
        },
        {
          unique1:995,
          string4:"AAAAxx"
        },
        {
          unique1:999,
          string4:"AAAAxx"
        },
        {
          unique1:983,
          string4:"AAAAxx"
        },
        {
          unique1:989,
          string4:"VVVVxx"
        },
        {
          unique1:986,
          string4:"HHHHxx"
        },
        {
          unique1:996,
          string4:"OOOOxx"
        },
        {
          unique1:982,
          string4:"AAAAxx"
        },
        {
          unique1:992,
          string4:"VVVVxx"
        },
        {
          unique1:990,
          string4:"HHHHxx"
        },
        {
          unique1:991,
          string4:"OOOOxx"
        },
        {
          unique1:984,
          string4:"VVVVxx"
        },
        {
          unique1:981,
          string4:"AAAAxx"
        },
        {
          unique1:998,
          string4:"HHHHxx"
        },
        {
          unique1:993,
          string4:"HHHHxx"
        },
        {
          unique1:994,
          string4:"VVVVxx"
        },
        {
          unique1:988,
          string4:"OOOOxx"
        },
        {
          unique1:987,
          string4:"OOOOxx"
        },
        {
          unique1:985,
          string4:"OOOOxx"
        }
      ]
    }
  },
  {
    name:"PG_SELECT_07",
    statement:"SELECT onek.unique1, onek.stringu1 FROM onek WHERE onek.unique1 > 980",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          unique1:997,
          stringu1:"JMAAAA"
        },
        {
          unique1:995,
          stringu1:"HMAAAA"
        },
        {
          unique1:999,
          stringu1:"LMAAAA"
        },
        {
          unique1:983,
          stringu1:"VLAAAA"
        },
        {
          unique1:989,
          stringu1:"BMAAAA"
        },
        {
          unique1:986,
          stringu1:"YLAAAA"
        },
        {
          unique1:996,
          stringu1:"IMAAAA"
        },
        {
          unique1:982,
          stringu1:"ULAAAA"
        },
        {
          unique1:992,
          stringu1:"EMAAAA"
        },
        {
          unique1:990,
          stringu1:"CMAAAA"
        },
        {
          unique1:991,
          stringu1:"DMAAAA"
        },
        {
          unique1:984,
          stringu1:"WLAAAA"
        },
        {
          unique1:981,
          stringu1:"TLAAAA"
        },
        {
          unique1:998,
          stringu1:"KMAAAA"
        },
        {
          unique1:993,
          stringu1:"FMAAAA"
        },
        {
          unique1:994,
          stringu1:"GMAAAA"
        },
        {
          unique1:988,
          stringu1:"AMAAAA"
        },
        {
          unique1:987,
          stringu1:"ZLAAAA"
        },
        {
          unique1:985,
          stringu1:"XLAAAA"
        }
      ]
    }
  },
  {
    name:"PG_SELECT_08",
    statement:"SELECT unique1, unique2 from onek2 where (unique2 = 11 and stringu1 < 'B') or unique1 = 0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          unique1:494,
          unique2:11
        },
        {
          unique1:0,
          unique2:998
        }
      ]
    }
  },
  {
    name:"PG_SELECT_09",
    statement:"SELECT unique1, unique2 from onek2 where (unique2 = 11 or unique1 = 0) and stringu1 < 'B'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          unique1:494,
          unique2:11
        },
        {
          unique1:0,
          unique2:998
        }
      ]
    }
  },
  {
    name:"PG_SELECT_10",
    statement:"SELECT unique2 from onek2 where unique2 = 11 and stringu1 < 'B'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          unique2:11
        }
      ]
    }
  },
  {
    name:"PG_SELECT_12",
    statement:"SELECT unique2 from onek2 where unique2 = 11 and stringu1 < 'C'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          unique2:11
        }
      ]
    }
  },
  {
    name:"PG_SELECT_13",
    statement:"SELECT unique2 from onek2 where unique2 = 11 and stringu1 = 'ATAAAA'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          unique2:11
        }
      ]
    }
  }
]
int8::[
  envs::{
    int8_tbl:[
      {
        q1:123,
        q2:456
      },
      {
        q1:123,
        q2:4567890123456789
      },
      {
        q1:4567890123456789,
        q2:123
      },
      {
        q1:4567890123456789,
        q2:4567890123456789
      },
      {
        q1:4567890123456789,
        q2:-4567890123456789
      }
    ]
  },
  {
    name:"PG_INT8_01",
    statement:"SELECT * FROM int8_tbl WHERE q2 = 4567890123456789",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          q1:123,
          q2:4567890123456789
        },
        {
          q1:4567890123456789,
          q2:4567890123456789
        }
      ]
    }
  },
  {
    name:"PG_INT8_02",
    statement:"SELECT * FROM int8_tbl WHERE q2 <> 4567890123456789",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          q1:123,
          q2:456
        },
        {
          q1:4567890123456789,
          q2:123
        },
        {
          q1:4567890123456789,
          q2:-4567890123456789
        }
      ]
    }
  },
  {
    name:"PG_INT8_03",
    statement:"SELECT * FROM int8_tbl WHERE q2 < 4567890123456789",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          q1:123,
          q2:456
        },
        {
          q1:4567890123456789,
          q2:123
        },
        {
          q1:4567890123456789,
          q2:-4567890123456789
        }
      ]
    }
  },
  {
    name:"PG_INT8_04",
    statement:"SELECT * FROM int8_tbl WHERE q2 > 4567890123456789",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"PG_INT8_05",
    statement:"SELECT * FROM int8_tbl WHERE q2 <= 4567890123456789",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          q1:123,
          q2:456
        },
        {
          q1:123,
          q2:4567890123456789
        },
        {
          q1:4567890123456789,
          q2:123
        },
        {
          q1:4567890123456789,
          q2:4567890123456789
        },
        {
          q1:4567890123456789,
          q2:-4567890123456789
        }
      ]
    }
  },
  {
    name:"PG_INT8_06",
    statement:"SELECT * FROM int8_tbl WHERE q2 >= 4567890123456789",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          q1:123,
          q2:4567890123456789
        },
        {
          q1:4567890123456789,
          q2:4567890123456789
        }
      ]
    }
  },
  {
    name:"PG_INT8_07",
    statement:"SELECT * FROM int8_tbl WHERE q2 = 456",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          q1:123,
          q2:456
        }
      ]
    }
  },
  {
    name:"PG_INT8_08",
    statement:"SELECT * FROM int8_tbl WHERE q2 <> 456",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          q1:123,
          q2:4567890123456789
        },
        {
          q1:4567890123456789,
          q2:123
        },
        {
          q1:4567890123456789,
          q2:4567890123456789
        },
        {
          q1:4567890123456789,
          q2:-4567890123456789
        }
      ]
    }
  },
  {
    name:"PG_INT8_09",
    statement:"SELECT * FROM int8_tbl WHERE q2 < 456",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          q1:4567890123456789,
          q2:123
        },
        {
          q1:4567890123456789,
          q2:-4567890123456789
        }
      ]
    }
  },
  {
    name:"PG_INT8_10",
    statement:"SELECT * FROM int8_tbl WHERE q2 > 456",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          q1:123,
          q2:4567890123456789
        },
        {
          q1:4567890123456789,
          q2:4567890123456789
        }
      ]
    }
  },
  {
    name:"PG_INT8_11",
    statement:"SELECT * FROM int8_tbl WHERE q2 <= 456",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          q1:123,
          q2:456
        },
        {
          q1:4567890123456789,
          q2:123
        },
        {
          q1:4567890123456789,
          q2:-4567890123456789
        }
      ]
    }
  },
  {
    name:"PG_INT8_12",
    statement:"SELECT * FROM int8_tbl WHERE q2 >= 456",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          q1:123,
          q2:456
        },
        {
          q1:123,
          q2:4567890123456789
        },
        {
          q1:4567890123456789,
          q2:4567890123456789
        }
      ]
    }
  },
  {
    name:"PG_INT8_13",
    statement:"SELECT * FROM int8_tbl WHERE 123 = q1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          q1:123,
          q2:456
        },
        {
          q1:123,
          q2:4567890123456789
        }
      ]
    }
  },
  {
    name:"PG_INT8_14",
    statement:"SELECT * FROM int8_tbl WHERE 123 <> q1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          q1:4567890123456789,
          q2:123
        },
        {
          q1:4567890123456789,
          q2:4567890123456789
        },
        {
          q1:4567890123456789,
          q2:-4567890123456789
        }
      ]
    }
  },
  {
    name:"PG_INT8_15",
    statement:"SELECT * FROM int8_tbl WHERE 123 < q1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          q1:4567890123456789,
          q2:123
        },
        {
          q1:4567890123456789,
          q2:4567890123456789
        },
        {
          q1:4567890123456789,
          q2:-4567890123456789
        }
      ]
    }
  },
  {
    name:"PG_INT8_16",
    statement:"SELECT * FROM int8_tbl WHERE 123 > q1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"PG_INT8_17",
    statement:"SELECT * FROM int8_tbl WHERE 123 <= q1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          q1:123,
          q2:456
        },
        {
          q1:123,
          q2:4567890123456789
        },
        {
          q1:4567890123456789,
          q2:123
        },
        {
          q1:4567890123456789,
          q2:4567890123456789
        },
        {
          q1:4567890123456789,
          q2:-4567890123456789
        }
      ]
    }
  },
  {
    name:"PG_INT8_18",
    statement:"SELECT * FROM int8_tbl WHERE 123 >= q1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          q1:123,
          q2:456
        },
        {
          q1:123,
          q2:4567890123456789
        }
      ]
    }
  },
  {
    name:"PG_INT8_19",
    statement:"SELECT '' AS five, q1 AS plus, -q1 AS minus FROM int8_tbl",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          five:"",
          plus:123,
          minus:-123
        },
        {
          five:"",
          plus:123,
          minus:-123
        },
        {
          five:"",
          plus:4567890123456789,
          minus:-4567890123456789
        },
        {
          five:"",
          plus:4567890123456789,
          minus:-4567890123456789
        },
        {
          five:"",
          plus:4567890123456789,
          minus:-4567890123456789
        }
      ]
    }
  },
  {
    name:"PG_INT8_20",
    statement:"SELECT '' AS five, q1, q2, q1 + q2 AS plus FROM int8_tbl",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          five:"",
          q1:123,
          q2:456,
          plus:579
        },
        {
          five:"",
          q1:123,
          q2:4567890123456789,
          plus:4567890123456912
        },
        {
          five:"",
          q1:4567890123456789,
          q2:123,
          plus:4567890123456912
        },
        {
          five:"",
          q1:4567890123456789,
          q2:4567890123456789,
          plus:9135780246913578
        },
        {
          five:"",
          q1:4567890123456789,
          q2:-4567890123456789,
          plus:0
        }
      ]
    }
  },
  {
    name:"PG_INT8_21",
    statement:"SELECT '' AS five, q1, q2, q1 + q2 AS plus FROM int8_tbl",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          five:"",
          q1:123,
          q2:456,
          plus:579
        },
        {
          five:"",
          q1:123,
          q2:4567890123456789,
          plus:4567890123456912
        },
        {
          five:"",
          q1:4567890123456789,
          q2:123,
          plus:4567890123456912
        },
        {
          five:"",
          q1:4567890123456789,
          q2:4567890123456789,
          plus:9135780246913578
        },
        {
          five:"",
          q1:4567890123456789,
          q2:-4567890123456789,
          plus:0
        }
      ]
    }
  },
  {
    name:"PG_INT8_22",
    statement:"SELECT '' AS five, q1, q2, q1 - q2 AS minus FROM int8_tbl",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          five:"",
          q1:123,
          q2:456,
          minus:-333
        },
        {
          five:"",
          q1:123,
          q2:4567890123456789,
          minus:-4567890123456666
        },
        {
          five:"",
          q1:4567890123456789,
          q2:123,
          minus:4567890123456666
        },
        {
          five:"",
          q1:4567890123456789,
          q2:4567890123456789,
          minus:0
        },
        {
          five:"",
          q1:4567890123456789,
          q2:-4567890123456789,
          minus:9135780246913578
        }
      ]
    }
  },
  {
    name:"PG_INT8_23",
    statement:"SELECT '' AS three, q1, q2, q1 * q2 AS multiply FROM int8_tbl WHERE q1 < 1000 or (q2 > 0 and q2 < 1000)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          three:"",
          q1:123,
          q2:456,
          multiply:56088
        },
        {
          three:"",
          q1:123,
          q2:4567890123456789,
          multiply:561850485185185047
        },
        {
          three:"",
          q1:4567890123456789,
          q2:123,
          multiply:561850485185185047
        }
      ]
    }
  },
  {
    name:"PG_INT8_24",
    statement:"SELECT '' AS five, q1, q2, q1 / q2 AS divide, q1 % q2 AS modulo FROM int8_tbl",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          five:"",
          q1:123,
          q2:456,
          divide:0,
          modulo:123
        },
        {
          five:"",
          q1:123,
          q2:4567890123456789,
          divide:0,
          modulo:123
        },
        {
          five:"",
          q1:4567890123456789,
          q2:123,
          divide:37137318076884,
          modulo:57
        },
        {
          five:"",
          q1:4567890123456789,
          q2:4567890123456789,
          divide:1,
          modulo:0
        },
        {
          five:"",
          q1:4567890123456789,
          q2:-4567890123456789,
          divide:-1,
          modulo:0
        }
      ]
    }
  },
  {
    name:"PG_INT8_25",
    statement:"SELECT 37 + q1 AS plus4 FROM int8_tbl",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          plus4:160
        },
        {
          plus4:160
        },
        {
          plus4:4567890123456826
        },
        {
          plus4:4567890123456826
        },
        {
          plus4:4567890123456826
        }
      ]
    }
  },
  {
    name:"PG_INT8_26",
    statement:"SELECT 37 - q1 AS minus4 FROM int8_tbl",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          minus4:-86
        },
        {
          minus4:-86
        },
        {
          minus4:-4567890123456752
        },
        {
          minus4:-4567890123456752
        },
        {
          minus4:-4567890123456752
        }
      ]
    }
  },
  {
    name:"PG_INT8_27",
    statement:"SELECT '' AS five, 2 * q1 AS \"twice int4\" FROM int8_tbl",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          five:"",
          'twice int4':246
        },
        {
          five:"",
          'twice int4':246
        },
        {
          five:"",
          'twice int4':9135780246913578
        },
        {
          five:"",
          'twice int4':9135780246913578
        },
        {
          five:"",
          'twice int4':9135780246913578
        }
      ]
    }
  },
  {
    name:"PG_INT8_28",
    statement:"SELECT '' AS five, q1 * 2 AS \"twice int4\" FROM int8_tbl",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          five:"",
          'twice int4':246
        },
        {
          five:"",
          'twice int4':246
        },
        {
          five:"",
          'twice int4':9135780246913578
        },
        {
          five:"",
          'twice int4':9135780246913578
        },
        {
          five:"",
          'twice int4':9135780246913578
        }
      ]
    }
  }
]
select_bugs::[
  {
    name:"MYSQL_SELECT_BUG_01",
    statement:"select * from t1 left join t2 on t1.a = t2.c where t2.d in (4);",
    env:{
      t1:[
        {
          a:1,
          b:2
        },
        {
          a:2,
          b:2
        },
        {
          a:3,
          b:2
        },
        {
          a:4,
          b:2
        }
      ],
      t2:[
        {
          c:1,
          d:3
        },
        {
          c:2,
          d:3
        },
        {
          c:3,
          d:4
        },
        {
          c:4,
          d:4
        }
      ]
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:3,
          b:2,
          c:3,
          d:4
        },
        {
          a:4,
          b:2,
          c:4,
          d:4
        }
      ]
    }
  },
  {
    name:"MYSQL_SELECT_BUG_02",
    statement:"select * from t1 left join t2 on t1.a = t2.c where t2.d = 4;",
    env:{
      t1:[
        {
          a:1,
          b:2
        },
        {
          a:2,
          b:2
        },
        {
          a:3,
          b:2
        },
        {
          a:4,
          b:2
        }
      ],
      t2:[
        {
          c:1,
          d:3
        },
        {
          c:2,
          d:3
        },
        {
          c:3,
          d:4
        },
        {
          c:4,
          d:4
        }
      ]
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:3,
          b:2,
          c:3,
          d:4
        },
        {
          a:4,
          b:2,
          c:4,
          d:4
        }
      ]
    }
  },
  {
    name:"MYSQL_SELECT_BUG_03",
    statement:"SELECT kunde_id ,FK_firma_id ,aktuell, vorname, nachname, geloescht FROM t1 WHERE ( ( ( '' != '' AND firma LIKE ('%' || '' || '%') ) OR ( vorname LIKE ('%' || 'Vorname1' || '%') AND nachname LIKE ('%' || '1Nachname' || '%') AND 'Vorname1' != '' AND 'xxxx' != '' ) ) AND ( aktuell = 'Ja' AND geloescht = 'Nein' AND FK_firma_id = 2 ) )",
    env:{
      t1:[
        {
          kunde_intern_id:3964,
          kunde_id:3051,
          FK_firma_id:1,
          aktuell:"Ja",
          vorname:"Vorname1",
          nachname:"1Nachname",
          geloescht:"Nein",
          firma:"Print Schau XXXX"
        },
        {
          kunde_intern_id:3965,
          kunde_id:3051111,
          FK_firma_id:1,
          aktuell:"Ja",
          vorname:"Vorname1111",
          nachname:"1111Nachname",
          geloescht:"Nein",
          firma:"Print Schau XXXX"
        }
      ]
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"MYSQL_SELECT_BUG_04",
    statement:"SELECT kunde_id ,FK_firma_id ,aktuell, vorname, nachname, geloescht FROM t1 WHERE ( ( aktuell = 'Ja' AND geloescht = 'Nein' AND FK_firma_id = 2 ) AND ( ( '' != '' AND firma LIKE ('%' || '' || '%') ) OR ( vorname LIKE ('%' || 'Vorname1' || '%') AND nachname LIKE ('%' || '1Nachname' || '%') AND 'Vorname1' != '' AND 'xxxx' != '' ) ) )",
    env:{
      t1:[
        {
          kunde_intern_id:3964,
          kunde_id:3051,
          FK_firma_id:1,
          aktuell:"Ja",
          vorname:"Vorname1",
          nachname:"1Nachname",
          geloescht:"Nein",
          firma:"Print Schau XXXX"
        },
        {
          kunde_intern_id:3965,
          kunde_id:3051111,
          FK_firma_id:1,
          aktuell:"Ja",
          vorname:"Vorname1111",
          nachname:"1111Nachname",
          geloescht:"Nein",
          firma:"Print Schau XXXX"
        }
      ]
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  }
]
select::[
  envs::{
    t1:[
      {
        period:9410,
        varor_period:9412
      }
    ],
    t2:[
      {
        auto:1,
        fld1:1,
        companynr:0,
        fld3:"Omaha",
        fld4:"teethe",
        fld5:"neat",
        fld6:""
      },
      {
        auto:2,
        fld1:11401,
        companynr:37,
        fld3:"breaking",
        fld4:"dreaded",
        fld5:"Steinberg",
        fld6:"W"
      },
      {
        auto:3,
        fld1:11402,
        companynr:37,
        fld3:"Romans",
        fld4:"scholastics",
        fld5:"jarring",
        fld6:""
      },
      {
        auto:4,
        fld1:11403,
        companynr:37,
        fld3:"intercepted",
        fld4:"audiology",
        fld5:"tinily",
        fld6:""
      },
      {
        auto:5,
        fld1:11501,
        companynr:37,
        fld3:"bewilderingly",
        fld4:"wallet",
        fld5:"balled",
        fld6:""
      },
      {
        auto:6,
        fld1:11701,
        companynr:37,
        fld3:"astound",
        fld4:"parters",
        fld5:"persist",
        fld6:"W"
      },
      {
        auto:7,
        fld1:11702,
        companynr:37,
        fld3:"admonishing",
        fld4:"eschew",
        fld5:"attainments",
        fld6:""
      },
      {
        auto:8,
        fld1:11703,
        companynr:37,
        fld3:"sumac",
        fld4:"quitter",
        fld5:"fanatic",
        fld6:""
      },
      {
        auto:9,
        fld1:12001,
        companynr:37,
        fld3:"flanking",
        fld4:"neat",
        fld5:"measures",
        fld6:"FAS"
      },
      {
        auto:10,
        fld1:12003,
        companynr:37,
        fld3:"combed",
        fld4:"Steinberg",
        fld5:"rightfulness",
        fld6:""
      },
      {
        auto:11,
        fld1:12004,
        companynr:37,
        fld3:"subjective",
        fld4:"jarring",
        fld5:"capably",
        fld6:""
      },
      {
        auto:12,
        fld1:12005,
        companynr:37,
        fld3:"scatterbrain",
        fld4:"tinily",
        fld5:"impulsive",
        fld6:""
      },
      {
        auto:13,
        fld1:12301,
        companynr:37,
        fld3:"Eulerian",
        fld4:"balled",
        fld5:"starlet",
        fld6:""
      },
      {
        auto:14,
        fld1:12302,
        companynr:36,
        fld3:"dubbed",
        fld4:"persist",
        fld5:"terminators",
        fld6:""
      },
      {
        auto:15,
        fld1:12303,
        companynr:37,
        fld3:"Kane",
        fld4:"attainments",
        fld5:"untying",
        fld6:""
      },
      {
        auto:16,
        fld1:12304,
        companynr:37,
        fld3:"overlay",
        fld4:"fanatic",
        fld5:"announces",
        fld6:"FAS"
      },
      {
        auto:17,
        fld1:12305,
        companynr:37,
        fld3:"perturb",
        fld4:"measures",
        fld5:"featherweight",
        fld6:"FAS"
      },
      {
        auto:18,
        fld1:12306,
        companynr:37,
        fld3:"goblins",
        fld4:"rightfulness",
        fld5:"pessimist",
        fld6:"FAS"
      },
      {
        auto:19,
        fld1:12501,
        companynr:37,
        fld3:"annihilates",
        fld4:"capably",
        fld5:"daughter",
        fld6:""
      },
      {
        auto:20,
        fld1:12602,
        companynr:37,
        fld3:"Wotan",
        fld4:"impulsive",
        fld5:"decliner",
        fld6:"FAS"
      },
      {
        auto:21,
        fld1:12603,
        companynr:37,
        fld3:"snatching",
        fld4:"starlet",
        fld5:"lawgiver",
        fld6:""
      },
      {
        auto:22,
        fld1:12604,
        companynr:37,
        fld3:"concludes",
        fld4:"terminators",
        fld5:"stated",
        fld6:""
      },
      {
        auto:23,
        fld1:12605,
        companynr:37,
        fld3:"laterally",
        fld4:"untying",
        fld5:"readable",
        fld6:""
      },
      {
        auto:24,
        fld1:12606,
        companynr:37,
        fld3:"yelped",
        fld4:"announces",
        fld5:"attrition",
        fld6:""
      },
      {
        auto:25,
        fld1:12701,
        companynr:37,
        fld3:"grazing",
        fld4:"featherweight",
        fld5:"cascade",
        fld6:"FAS"
      },
      {
        auto:26,
        fld1:12702,
        companynr:37,
        fld3:"Baird",
        fld4:"pessimist",
        fld5:"motors",
        fld6:"FAS"
      },
      {
        auto:27,
        fld1:12703,
        companynr:37,
        fld3:"celery",
        fld4:"daughter",
        fld5:"interrogate",
        fld6:""
      },
      {
        auto:28,
        fld1:12704,
        companynr:37,
        fld3:"misunderstander",
        fld4:"decliner",
        fld5:"pests",
        fld6:"W"
      },
      {
        auto:29,
        fld1:13601,
        companynr:37,
        fld3:"handgun",
        fld4:"lawgiver",
        fld5:"stairway",
        fld6:""
      },
      {
        auto:30,
        fld1:13602,
        companynr:37,
        fld3:"foldout",
        fld4:"stated",
        fld5:"dopers",
        fld6:"FAS"
      },
      {
        auto:31,
        fld1:13603,
        companynr:37,
        fld3:"mystic",
        fld4:"readable",
        fld5:"testicle",
        fld6:"W"
      },
      {
        auto:32,
        fld1:13604,
        companynr:37,
        fld3:"succumbed",
        fld4:"attrition",
        fld5:"Parsifal",
        fld6:"W"
      },
      {
        auto:33,
        fld1:13605,
        companynr:37,
        fld3:"Nabisco",
        fld4:"cascade",
        fld5:"leavings",
        fld6:""
      },
      {
        auto:34,
        fld1:13606,
        companynr:37,
        fld3:"fingerings",
        fld4:"motors",
        fld5:"postulation",
        fld6:"W"
      },
      {
        auto:35,
        fld1:13607,
        companynr:37,
        fld3:"aging",
        fld4:"interrogate",
        fld5:"squeaking",
        fld6:""
      },
      {
        auto:36,
        fld1:13608,
        companynr:37,
        fld3:"afield",
        fld4:"pests",
        fld5:"contrasted",
        fld6:""
      },
      {
        auto:37,
        fld1:13609,
        companynr:37,
        fld3:"ammonium",
        fld4:"stairway",
        fld5:"leftover",
        fld6:""
      },
      {
        auto:38,
        fld1:13610,
        companynr:37,
        fld3:"boat",
        fld4:"dopers",
        fld5:"whiteners",
        fld6:""
      },
      {
        auto:39,
        fld1:13801,
        companynr:37,
        fld3:"intelligibility",
        fld4:"testicle",
        fld5:"erases",
        fld6:"W"
      },
      {
        auto:40,
        fld1:13802,
        companynr:37,
        fld3:"Augustine",
        fld4:"Parsifal",
        fld5:"Punjab",
        fld6:"W"
      },
      {
        auto:41,
        fld1:13803,
        companynr:37,
        fld3:"teethe",
        fld4:"leavings",
        fld5:"Merritt",
        fld6:""
      },
      {
        auto:42,
        fld1:13804,
        companynr:37,
        fld3:"dreaded",
        fld4:"postulation",
        fld5:"Quixotism",
        fld6:""
      },
      {
        auto:43,
        fld1:13901,
        companynr:37,
        fld3:"scholastics",
        fld4:"squeaking",
        fld5:"sweetish",
        fld6:"FAS"
      },
      {
        auto:44,
        fld1:16001,
        companynr:37,
        fld3:"audiology",
        fld4:"contrasted",
        fld5:"dogging",
        fld6:"FAS"
      },
      {
        auto:45,
        fld1:16201,
        companynr:37,
        fld3:"wallet",
        fld4:"leftover",
        fld5:"scornfully",
        fld6:"FAS"
      },
      {
        auto:46,
        fld1:16202,
        companynr:37,
        fld3:"parters",
        fld4:"whiteners",
        fld5:"bellow",
        fld6:""
      },
      {
        auto:47,
        fld1:16301,
        companynr:37,
        fld3:"eschew",
        fld4:"erases",
        fld5:"bills",
        fld6:""
      },
      {
        auto:48,
        fld1:16302,
        companynr:37,
        fld3:"quitter",
        fld4:"Punjab",
        fld5:"cupboard",
        fld6:"FAS"
      },
      {
        auto:49,
        fld1:16303,
        companynr:37,
        fld3:"neat",
        fld4:"Merritt",
        fld5:"sureties",
        fld6:"FAS"
      },
      {
        auto:50,
        fld1:16304,
        companynr:37,
        fld3:"Steinberg",
        fld4:"Quixotism",
        fld5:"puddings",
        fld6:""
      },
      {
        auto:51,
        fld1:18001,
        companynr:37,
        fld3:"jarring",
        fld4:"sweetish",
        fld5:"tapestry",
        fld6:""
      },
      {
        auto:52,
        fld1:18002,
        companynr:37,
        fld3:"tinily",
        fld4:"dogging",
        fld5:"fetters",
        fld6:""
      },
      {
        auto:53,
        fld1:18003,
        companynr:37,
        fld3:"balled",
        fld4:"scornfully",
        fld5:"bivalves",
        fld6:""
      },
      {
        auto:54,
        fld1:18004,
        companynr:37,
        fld3:"persist",
        fld4:"bellow",
        fld5:"incurring",
        fld6:""
      },
      {
        auto:55,
        fld1:18005,
        companynr:37,
        fld3:"attainments",
        fld4:"bills",
        fld5:"Adolph",
        fld6:""
      },
      {
        auto:56,
        fld1:18007,
        companynr:37,
        fld3:"fanatic",
        fld4:"cupboard",
        fld5:"pithed",
        fld6:""
      },
      {
        auto:57,
        fld1:18008,
        companynr:37,
        fld3:"measures",
        fld4:"sureties",
        fld5:"emergency",
        fld6:""
      },
      {
        auto:58,
        fld1:18009,
        companynr:37,
        fld3:"rightfulness",
        fld4:"puddings",
        fld5:"Miles",
        fld6:""
      },
      {
        auto:59,
        fld1:18010,
        companynr:37,
        fld3:"capably",
        fld4:"tapestry",
        fld5:"trimmings",
        fld6:""
      },
      {
        auto:60,
        fld1:18012,
        companynr:37,
        fld3:"impulsive",
        fld4:"fetters",
        fld5:"tragedies",
        fld6:"W"
      },
      {
        auto:61,
        fld1:18013,
        companynr:37,
        fld3:"starlet",
        fld4:"bivalves",
        fld5:"skulking",
        fld6:"W"
      },
      {
        auto:62,
        fld1:18014,
        companynr:37,
        fld3:"terminators",
        fld4:"incurring",
        fld5:"flint",
        fld6:""
      },
      {
        auto:63,
        fld1:18015,
        companynr:37,
        fld3:"untying",
        fld4:"Adolph",
        fld5:"flopping",
        fld6:"W"
      },
      {
        auto:64,
        fld1:18016,
        companynr:37,
        fld3:"announces",
        fld4:"pithed",
        fld5:"relaxing",
        fld6:"FAS"
      },
      {
        auto:65,
        fld1:18017,
        companynr:37,
        fld3:"featherweight",
        fld4:"emergency",
        fld5:"offload",
        fld6:"FAS"
      },
      {
        auto:66,
        fld1:18018,
        companynr:37,
        fld3:"pessimist",
        fld4:"Miles",
        fld5:"suites",
        fld6:"W"
      },
      {
        auto:67,
        fld1:18019,
        companynr:37,
        fld3:"daughter",
        fld4:"trimmings",
        fld5:"lists",
        fld6:"FAS"
      },
      {
        auto:68,
        fld1:18020,
        companynr:37,
        fld3:"decliner",
        fld4:"tragedies",
        fld5:"animized",
        fld6:"FAS"
      },
      {
        auto:69,
        fld1:18021,
        companynr:37,
        fld3:"lawgiver",
        fld4:"skulking",
        fld5:"multilayer",
        fld6:"W"
      },
      {
        auto:70,
        fld1:18022,
        companynr:37,
        fld3:"stated",
        fld4:"flint",
        fld5:"standardizes",
        fld6:"FAS"
      },
      {
        auto:71,
        fld1:18023,
        companynr:37,
        fld3:"readable",
        fld4:"flopping",
        fld5:"Judas",
        fld6:""
      },
      {
        auto:72,
        fld1:18024,
        companynr:37,
        fld3:"attrition",
        fld4:"relaxing",
        fld5:"vacuuming",
        fld6:"W"
      },
      {
        auto:73,
        fld1:18025,
        companynr:37,
        fld3:"cascade",
        fld4:"offload",
        fld5:"dentally",
        fld6:"W"
      },
      {
        auto:74,
        fld1:18026,
        companynr:37,
        fld3:"motors",
        fld4:"suites",
        fld5:"humanness",
        fld6:"W"
      },
      {
        auto:75,
        fld1:18027,
        companynr:37,
        fld3:"interrogate",
        fld4:"lists",
        fld5:"inch",
        fld6:"W"
      },
      {
        auto:76,
        fld1:18028,
        companynr:37,
        fld3:"pests",
        fld4:"animized",
        fld5:"Weissmuller",
        fld6:"W"
      },
      {
        auto:77,
        fld1:18029,
        companynr:37,
        fld3:"stairway",
        fld4:"multilayer",
        fld5:"irresponsibly",
        fld6:"W"
      },
      {
        auto:78,
        fld1:18030,
        companynr:37,
        fld3:"dopers",
        fld4:"standardizes",
        fld5:"luckily",
        fld6:"FAS"
      },
      {
        auto:79,
        fld1:18032,
        companynr:37,
        fld3:"testicle",
        fld4:"Judas",
        fld5:"culled",
        fld6:"W"
      },
      {
        auto:80,
        fld1:18033,
        companynr:37,
        fld3:"Parsifal",
        fld4:"vacuuming",
        fld5:"medical",
        fld6:"FAS"
      },
      {
        auto:81,
        fld1:18034,
        companynr:37,
        fld3:"leavings",
        fld4:"dentally",
        fld5:"bloodbath",
        fld6:"FAS"
      },
      {
        auto:82,
        fld1:18035,
        companynr:37,
        fld3:"postulation",
        fld4:"humanness",
        fld5:"subschema",
        fld6:"W"
      },
      {
        auto:83,
        fld1:18036,
        companynr:37,
        fld3:"squeaking",
        fld4:"inch",
        fld5:"animals",
        fld6:"W"
      },
      {
        auto:84,
        fld1:18037,
        companynr:37,
        fld3:"contrasted",
        fld4:"Weissmuller",
        fld5:"Micronesia",
        fld6:""
      },
      {
        auto:85,
        fld1:18038,
        companynr:37,
        fld3:"leftover",
        fld4:"irresponsibly",
        fld5:"repetitions",
        fld6:""
      },
      {
        auto:86,
        fld1:18039,
        companynr:37,
        fld3:"whiteners",
        fld4:"luckily",
        fld5:"Antares",
        fld6:""
      },
      {
        auto:87,
        fld1:18040,
        companynr:37,
        fld3:"erases",
        fld4:"culled",
        fld5:"ventilate",
        fld6:"W"
      },
      {
        auto:88,
        fld1:18041,
        companynr:37,
        fld3:"Punjab",
        fld4:"medical",
        fld5:"pityingly",
        fld6:""
      },
      {
        auto:89,
        fld1:18042,
        companynr:37,
        fld3:"Merritt",
        fld4:"bloodbath",
        fld5:"interdependent",
        fld6:""
      },
      {
        auto:90,
        fld1:18043,
        companynr:37,
        fld3:"Quixotism",
        fld4:"subschema",
        fld5:"Graves",
        fld6:"FAS"
      },
      {
        auto:91,
        fld1:18044,
        companynr:37,
        fld3:"sweetish",
        fld4:"animals",
        fld5:"neonatal",
        fld6:""
      },
      {
        auto:92,
        fld1:18045,
        companynr:37,
        fld3:"dogging",
        fld4:"Micronesia",
        fld5:"scribbled",
        fld6:"FAS"
      },
      {
        auto:93,
        fld1:18046,
        companynr:37,
        fld3:"scornfully",
        fld4:"repetitions",
        fld5:"chafe",
        fld6:"W"
      },
      {
        auto:94,
        fld1:18048,
        companynr:37,
        fld3:"bellow",
        fld4:"Antares",
        fld5:"honoring",
        fld6:""
      },
      {
        auto:95,
        fld1:18049,
        companynr:37,
        fld3:"bills",
        fld4:"ventilate",
        fld5:"realtor",
        fld6:""
      },
      {
        auto:96,
        fld1:18050,
        companynr:37,
        fld3:"cupboard",
        fld4:"pityingly",
        fld5:"elite",
        fld6:""
      },
      {
        auto:97,
        fld1:18051,
        companynr:37,
        fld3:"sureties",
        fld4:"interdependent",
        fld5:"funereal",
        fld6:""
      },
      {
        auto:98,
        fld1:18052,
        companynr:37,
        fld3:"puddings",
        fld4:"Graves",
        fld5:"abrogating",
        fld6:""
      },
      {
        auto:99,
        fld1:18053,
        companynr:50,
        fld3:"tapestry",
        fld4:"neonatal",
        fld5:"sorters",
        fld6:""
      },
      {
        auto:100,
        fld1:18054,
        companynr:37,
        fld3:"fetters",
        fld4:"scribbled",
        fld5:"Conley",
        fld6:""
      },
      {
        auto:101,
        fld1:18055,
        companynr:37,
        fld3:"bivalves",
        fld4:"chafe",
        fld5:"lectured",
        fld6:""
      },
      {
        auto:102,
        fld1:18056,
        companynr:37,
        fld3:"incurring",
        fld4:"honoring",
        fld5:"Abraham",
        fld6:""
      },
      {
        auto:103,
        fld1:18057,
        companynr:37,
        fld3:"Adolph",
        fld4:"realtor",
        fld5:"Hawaii",
        fld6:"W"
      },
      {
        auto:104,
        fld1:18058,
        companynr:37,
        fld3:"pithed",
        fld4:"elite",
        fld5:"cage",
        fld6:""
      },
      {
        auto:105,
        fld1:18059,
        companynr:36,
        fld3:"emergency",
        fld4:"funereal",
        fld5:"hushes",
        fld6:""
      },
      {
        auto:106,
        fld1:18060,
        companynr:37,
        fld3:"Miles",
        fld4:"abrogating",
        fld5:"Simla",
        fld6:""
      },
      {
        auto:107,
        fld1:18061,
        companynr:37,
        fld3:"trimmings",
        fld4:"sorters",
        fld5:"reporters",
        fld6:""
      },
      {
        auto:108,
        fld1:18101,
        companynr:37,
        fld3:"tragedies",
        fld4:"Conley",
        fld5:"Dutchman",
        fld6:"FAS"
      },
      {
        auto:109,
        fld1:18102,
        companynr:37,
        fld3:"skulking",
        fld4:"lectured",
        fld5:"descendants",
        fld6:"FAS"
      },
      {
        auto:110,
        fld1:18103,
        companynr:37,
        fld3:"flint",
        fld4:"Abraham",
        fld5:"groupings",
        fld6:"FAS"
      },
      {
        auto:111,
        fld1:18104,
        companynr:37,
        fld3:"flopping",
        fld4:"Hawaii",
        fld5:"dissociate",
        fld6:""
      },
      {
        auto:112,
        fld1:18201,
        companynr:37,
        fld3:"relaxing",
        fld4:"cage",
        fld5:"coexist",
        fld6:"W"
      },
      {
        auto:113,
        fld1:18202,
        companynr:37,
        fld3:"offload",
        fld4:"hushes",
        fld5:"Beebe",
        fld6:""
      },
      {
        auto:114,
        fld1:18402,
        companynr:37,
        fld3:"suites",
        fld4:"Simla",
        fld5:"Taoism",
        fld6:""
      },
      {
        auto:115,
        fld1:18403,
        companynr:37,
        fld3:"lists",
        fld4:"reporters",
        fld5:"Connally",
        fld6:""
      },
      {
        auto:116,
        fld1:18404,
        companynr:37,
        fld3:"animized",
        fld4:"Dutchman",
        fld5:"fetched",
        fld6:"FAS"
      },
      {
        auto:117,
        fld1:18405,
        companynr:37,
        fld3:"multilayer",
        fld4:"descendants",
        fld5:"checkpoints",
        fld6:"FAS"
      },
      {
        auto:118,
        fld1:18406,
        companynr:37,
        fld3:"standardizes",
        fld4:"groupings",
        fld5:"rusting",
        fld6:""
      },
      {
        auto:119,
        fld1:18409,
        companynr:37,
        fld3:"Judas",
        fld4:"dissociate",
        fld5:"galling",
        fld6:""
      },
      {
        auto:120,
        fld1:18601,
        companynr:37,
        fld3:"vacuuming",
        fld4:"coexist",
        fld5:"obliterates",
        fld6:""
      },
      {
        auto:121,
        fld1:18602,
        companynr:37,
        fld3:"dentally",
        fld4:"Beebe",
        fld5:"traitor",
        fld6:""
      },
      {
        auto:122,
        fld1:18603,
        companynr:37,
        fld3:"humanness",
        fld4:"Taoism",
        fld5:"resumes",
        fld6:"FAS"
      },
      {
        auto:123,
        fld1:18801,
        companynr:37,
        fld3:"inch",
        fld4:"Connally",
        fld5:"analyzable",
        fld6:"FAS"
      },
      {
        auto:124,
        fld1:18802,
        companynr:37,
        fld3:"Weissmuller",
        fld4:"fetched",
        fld5:"terminator",
        fld6:"FAS"
      },
      {
        auto:125,
        fld1:18803,
        companynr:37,
        fld3:"irresponsibly",
        fld4:"checkpoints",
        fld5:"gritty",
        fld6:"FAS"
      },
      {
        auto:126,
        fld1:18804,
        companynr:37,
        fld3:"luckily",
        fld4:"rusting",
        fld5:"firearm",
        fld6:"W"
      },
      {
        auto:127,
        fld1:18805,
        companynr:37,
        fld3:"culled",
        fld4:"galling",
        fld5:"minima",
        fld6:""
      },
      {
        auto:128,
        fld1:18806,
        companynr:37,
        fld3:"medical",
        fld4:"obliterates",
        fld5:"Selfridge",
        fld6:""
      },
      {
        auto:129,
        fld1:18807,
        companynr:37,
        fld3:"bloodbath",
        fld4:"traitor",
        fld5:"disable",
        fld6:""
      },
      {
        auto:130,
        fld1:18808,
        companynr:37,
        fld3:"subschema",
        fld4:"resumes",
        fld5:"witchcraft",
        fld6:"W"
      },
      {
        auto:131,
        fld1:18809,
        companynr:37,
        fld3:"animals",
        fld4:"analyzable",
        fld5:"betroth",
        fld6:"W"
      },
      {
        auto:132,
        fld1:18810,
        companynr:37,
        fld3:"Micronesia",
        fld4:"terminator",
        fld5:"Manhattanize",
        fld6:""
      },
      {
        auto:133,
        fld1:18811,
        companynr:37,
        fld3:"repetitions",
        fld4:"gritty",
        fld5:"imprint",
        fld6:""
      },
      {
        auto:134,
        fld1:18812,
        companynr:37,
        fld3:"Antares",
        fld4:"firearm",
        fld5:"peeked",
        fld6:""
      },
      {
        auto:135,
        fld1:19101,
        companynr:37,
        fld3:"ventilate",
        fld4:"minima",
        fld5:"swelling",
        fld6:""
      },
      {
        auto:136,
        fld1:19102,
        companynr:37,
        fld3:"pityingly",
        fld4:"Selfridge",
        fld5:"interrelationships",
        fld6:"W"
      },
      {
        auto:137,
        fld1:19103,
        companynr:37,
        fld3:"interdependent",
        fld4:"disable",
        fld5:"riser",
        fld6:""
      },
      {
        auto:138,
        fld1:19201,
        companynr:37,
        fld3:"Graves",
        fld4:"witchcraft",
        fld5:"Gandhian",
        fld6:"W"
      },
      {
        auto:139,
        fld1:30501,
        companynr:37,
        fld3:"neonatal",
        fld4:"betroth",
        fld5:"peacock",
        fld6:"A"
      },
      {
        auto:140,
        fld1:30502,
        companynr:50,
        fld3:"scribbled",
        fld4:"Manhattanize",
        fld5:"bee",
        fld6:"A"
      },
      {
        auto:141,
        fld1:30503,
        companynr:37,
        fld3:"chafe",
        fld4:"imprint",
        fld5:"kanji",
        fld6:""
      },
      {
        auto:142,
        fld1:30504,
        companynr:37,
        fld3:"honoring",
        fld4:"peeked",
        fld5:"dental",
        fld6:""
      },
      {
        auto:143,
        fld1:31901,
        companynr:37,
        fld3:"realtor",
        fld4:"swelling",
        fld5:"scarf",
        fld6:"FAS"
      },
      {
        auto:144,
        fld1:36001,
        companynr:37,
        fld3:"elite",
        fld4:"interrelationships",
        fld5:"chasm",
        fld6:"A"
      },
      {
        auto:145,
        fld1:36002,
        companynr:37,
        fld3:"funereal",
        fld4:"riser",
        fld5:"insolence",
        fld6:"A"
      },
      {
        auto:146,
        fld1:36004,
        companynr:37,
        fld3:"abrogating",
        fld4:"Gandhian",
        fld5:"syndicate",
        fld6:""
      },
      {
        auto:147,
        fld1:36005,
        companynr:37,
        fld3:"sorters",
        fld4:"peacock",
        fld5:"alike",
        fld6:""
      },
      {
        auto:148,
        fld1:38001,
        companynr:37,
        fld3:"Conley",
        fld4:"bee",
        fld5:"imperial",
        fld6:"A"
      },
      {
        auto:149,
        fld1:38002,
        companynr:37,
        fld3:"lectured",
        fld4:"kanji",
        fld5:"convulsion",
        fld6:"A"
      },
      {
        auto:150,
        fld1:38003,
        companynr:37,
        fld3:"Abraham",
        fld4:"dental",
        fld5:"railway",
        fld6:"A"
      },
      {
        auto:151,
        fld1:38004,
        companynr:37,
        fld3:"Hawaii",
        fld4:"scarf",
        fld5:"validate",
        fld6:"A"
      },
      {
        auto:152,
        fld1:38005,
        companynr:37,
        fld3:"cage",
        fld4:"chasm",
        fld5:"normalizes",
        fld6:"A"
      },
      {
        auto:153,
        fld1:38006,
        companynr:37,
        fld3:"hushes",
        fld4:"insolence",
        fld5:"comprehensive",
        fld6:""
      },
      {
        auto:154,
        fld1:38007,
        companynr:37,
        fld3:"Simla",
        fld4:"syndicate",
        fld5:"chewing",
        fld6:""
      },
      {
        auto:155,
        fld1:38008,
        companynr:37,
        fld3:"reporters",
        fld4:"alike",
        fld5:"denizen",
        fld6:""
      },
      {
        auto:156,
        fld1:38009,
        companynr:37,
        fld3:"Dutchman",
        fld4:"imperial",
        fld5:"schemer",
        fld6:""
      },
      {
        auto:157,
        fld1:38010,
        companynr:37,
        fld3:"descendants",
        fld4:"convulsion",
        fld5:"chronicle",
        fld6:""
      },
      {
        auto:158,
        fld1:38011,
        companynr:37,
        fld3:"groupings",
        fld4:"railway",
        fld5:"Kline",
        fld6:""
      },
      {
        auto:159,
        fld1:38012,
        companynr:37,
        fld3:"dissociate",
        fld4:"validate",
        fld5:"Anatole",
        fld6:""
      },
      {
        auto:160,
        fld1:38013,
        companynr:37,
        fld3:"coexist",
        fld4:"normalizes",
        fld5:"partridges",
        fld6:""
      },
      {
        auto:161,
        fld1:38014,
        companynr:37,
        fld3:"Beebe",
        fld4:"comprehensive",
        fld5:"brunch",
        fld6:""
      },
      {
        auto:162,
        fld1:38015,
        companynr:37,
        fld3:"Taoism",
        fld4:"chewing",
        fld5:"recruited",
        fld6:""
      },
      {
        auto:163,
        fld1:38016,
        companynr:37,
        fld3:"Connally",
        fld4:"denizen",
        fld5:"dimensions",
        fld6:"W"
      },
      {
        auto:164,
        fld1:38017,
        companynr:37,
        fld3:"fetched",
        fld4:"schemer",
        fld5:"Chicana",
        fld6:"W"
      },
      {
        auto:165,
        fld1:38018,
        companynr:37,
        fld3:"checkpoints",
        fld4:"chronicle",
        fld5:"announced",
        fld6:""
      },
      {
        auto:166,
        fld1:38101,
        companynr:37,
        fld3:"rusting",
        fld4:"Kline",
        fld5:"praised",
        fld6:"FAS"
      },
      {
        auto:167,
        fld1:38102,
        companynr:37,
        fld3:"galling",
        fld4:"Anatole",
        fld5:"employing",
        fld6:""
      },
      {
        auto:168,
        fld1:38103,
        companynr:37,
        fld3:"obliterates",
        fld4:"partridges",
        fld5:"linear",
        fld6:""
      },
      {
        auto:169,
        fld1:38104,
        companynr:37,
        fld3:"traitor",
        fld4:"brunch",
        fld5:"quagmire",
        fld6:""
      },
      {
        auto:170,
        fld1:38201,
        companynr:37,
        fld3:"resumes",
        fld4:"recruited",
        fld5:"western",
        fld6:"A"
      },
      {
        auto:171,
        fld1:38202,
        companynr:37,
        fld3:"analyzable",
        fld4:"dimensions",
        fld5:"relishing",
        fld6:""
      },
      {
        auto:172,
        fld1:38203,
        companynr:37,
        fld3:"terminator",
        fld4:"Chicana",
        fld5:"serving",
        fld6:"A"
      },
      {
        auto:173,
        fld1:38204,
        companynr:37,
        fld3:"gritty",
        fld4:"announced",
        fld5:"scheduling",
        fld6:""
      },
      {
        auto:174,
        fld1:38205,
        companynr:37,
        fld3:"firearm",
        fld4:"praised",
        fld5:"lore",
        fld6:""
      },
      {
        auto:175,
        fld1:38206,
        companynr:37,
        fld3:"minima",
        fld4:"employing",
        fld5:"eventful",
        fld6:""
      },
      {
        auto:176,
        fld1:38208,
        companynr:37,
        fld3:"Selfridge",
        fld4:"linear",
        fld5:"arteriole",
        fld6:"A"
      },
      {
        auto:177,
        fld1:42801,
        companynr:37,
        fld3:"disable",
        fld4:"quagmire",
        fld5:"disentangle",
        fld6:""
      },
      {
        auto:178,
        fld1:42802,
        companynr:37,
        fld3:"witchcraft",
        fld4:"western",
        fld5:"cured",
        fld6:"A"
      },
      {
        auto:179,
        fld1:46101,
        companynr:37,
        fld3:"betroth",
        fld4:"relishing",
        fld5:"Fenton",
        fld6:"W"
      },
      {
        auto:180,
        fld1:48001,
        companynr:37,
        fld3:"Manhattanize",
        fld4:"serving",
        fld5:"avoidable",
        fld6:"A"
      },
      {
        auto:181,
        fld1:48002,
        companynr:37,
        fld3:"imprint",
        fld4:"scheduling",
        fld5:"drains",
        fld6:"A"
      },
      {
        auto:182,
        fld1:48003,
        companynr:37,
        fld3:"peeked",
        fld4:"lore",
        fld5:"detectably",
        fld6:"FAS"
      },
      {
        auto:183,
        fld1:48004,
        companynr:37,
        fld3:"swelling",
        fld4:"eventful",
        fld5:"husky",
        fld6:""
      },
      {
        auto:184,
        fld1:48005,
        companynr:37,
        fld3:"interrelationships",
        fld4:"arteriole",
        fld5:"impelling",
        fld6:""
      },
      {
        auto:185,
        fld1:48006,
        companynr:37,
        fld3:"riser",
        fld4:"disentangle",
        fld5:"undoes",
        fld6:""
      },
      {
        auto:186,
        fld1:48007,
        companynr:37,
        fld3:"Gandhian",
        fld4:"cured",
        fld5:"evened",
        fld6:""
      },
      {
        auto:187,
        fld1:48008,
        companynr:37,
        fld3:"peacock",
        fld4:"Fenton",
        fld5:"squeezes",
        fld6:""
      },
      {
        auto:188,
        fld1:48101,
        companynr:37,
        fld3:"bee",
        fld4:"avoidable",
        fld5:"destroyer",
        fld6:"FAS"
      },
      {
        auto:189,
        fld1:48102,
        companynr:37,
        fld3:"kanji",
        fld4:"drains",
        fld5:"rudeness",
        fld6:""
      },
      {
        auto:190,
        fld1:48201,
        companynr:37,
        fld3:"dental",
        fld4:"detectably",
        fld5:"beaner",
        fld6:"FAS"
      },
      {
        auto:191,
        fld1:48202,
        companynr:37,
        fld3:"scarf",
        fld4:"husky",
        fld5:"boorish",
        fld6:""
      },
      {
        auto:192,
        fld1:48203,
        companynr:37,
        fld3:"chasm",
        fld4:"impelling",
        fld5:"Everhart",
        fld6:""
      },
      {
        auto:193,
        fld1:48204,
        companynr:37,
        fld3:"insolence",
        fld4:"undoes",
        fld5:"encompass",
        fld6:"A"
      },
      {
        auto:194,
        fld1:48205,
        companynr:37,
        fld3:"syndicate",
        fld4:"evened",
        fld5:"mushrooms",
        fld6:""
      },
      {
        auto:195,
        fld1:48301,
        companynr:37,
        fld3:"alike",
        fld4:"squeezes",
        fld5:"Alison",
        fld6:"A"
      },
      {
        auto:196,
        fld1:48302,
        companynr:37,
        fld3:"imperial",
        fld4:"destroyer",
        fld5:"externally",
        fld6:"FAS"
      },
      {
        auto:197,
        fld1:48303,
        companynr:37,
        fld3:"convulsion",
        fld4:"rudeness",
        fld5:"pellagra",
        fld6:""
      },
      {
        auto:198,
        fld1:48304,
        companynr:37,
        fld3:"railway",
        fld4:"beaner",
        fld5:"cult",
        fld6:""
      },
      {
        auto:199,
        fld1:48305,
        companynr:37,
        fld3:"validate",
        fld4:"boorish",
        fld5:"creek",
        fld6:"A"
      },
      {
        auto:200,
        fld1:48401,
        companynr:37,
        fld3:"normalizes",
        fld4:"Everhart",
        fld5:"Huffman",
        fld6:""
      },
      {
        auto:201,
        fld1:48402,
        companynr:37,
        fld3:"comprehensive",
        fld4:"encompass",
        fld5:"Majorca",
        fld6:"FAS"
      },
      {
        auto:202,
        fld1:48403,
        companynr:37,
        fld3:"chewing",
        fld4:"mushrooms",
        fld5:"governing",
        fld6:"A"
      },
      {
        auto:203,
        fld1:48404,
        companynr:37,
        fld3:"denizen",
        fld4:"Alison",
        fld5:"gadfly",
        fld6:"FAS"
      },
      {
        auto:204,
        fld1:48405,
        companynr:37,
        fld3:"schemer",
        fld4:"externally",
        fld5:"reassigned",
        fld6:"FAS"
      },
      {
        auto:205,
        fld1:48406,
        companynr:37,
        fld3:"chronicle",
        fld4:"pellagra",
        fld5:"intentness",
        fld6:"W"
      },
      {
        auto:206,
        fld1:48407,
        companynr:37,
        fld3:"Kline",
        fld4:"cult",
        fld5:"craziness",
        fld6:""
      },
      {
        auto:207,
        fld1:48408,
        companynr:37,
        fld3:"Anatole",
        fld4:"creek",
        fld5:"psychic",
        fld6:""
      },
      {
        auto:208,
        fld1:48409,
        companynr:37,
        fld3:"partridges",
        fld4:"Huffman",
        fld5:"squabbled",
        fld6:""
      },
      {
        auto:209,
        fld1:48410,
        companynr:37,
        fld3:"brunch",
        fld4:"Majorca",
        fld5:"burlesque",
        fld6:""
      },
      {
        auto:210,
        fld1:48411,
        companynr:37,
        fld3:"recruited",
        fld4:"governing",
        fld5:"capped",
        fld6:""
      },
      {
        auto:211,
        fld1:48412,
        companynr:37,
        fld3:"dimensions",
        fld4:"gadfly",
        fld5:"extracted",
        fld6:"A"
      },
      {
        auto:212,
        fld1:48413,
        companynr:37,
        fld3:"Chicana",
        fld4:"reassigned",
        fld5:"DiMaggio",
        fld6:""
      },
      {
        auto:213,
        fld1:48601,
        companynr:37,
        fld3:"announced",
        fld4:"intentness",
        fld5:"exclamation",
        fld6:"FAS"
      },
      {
        auto:214,
        fld1:48602,
        companynr:37,
        fld3:"praised",
        fld4:"craziness",
        fld5:"subdirectory",
        fld6:""
      },
      {
        auto:215,
        fld1:48603,
        companynr:37,
        fld3:"employing",
        fld4:"psychic",
        fld5:"fangs",
        fld6:""
      },
      {
        auto:216,
        fld1:48604,
        companynr:37,
        fld3:"linear",
        fld4:"squabbled",
        fld5:"buyer",
        fld6:"A"
      },
      {
        auto:217,
        fld1:48801,
        companynr:37,
        fld3:"quagmire",
        fld4:"burlesque",
        fld5:"pithing",
        fld6:"A"
      },
      {
        auto:218,
        fld1:50901,
        companynr:37,
        fld3:"western",
        fld4:"capped",
        fld5:"transistorizing",
        fld6:"A"
      },
      {
        auto:219,
        fld1:51201,
        companynr:37,
        fld3:"relishing",
        fld4:"extracted",
        fld5:"nonbiodegradable",
        fld6:""
      },
      {
        auto:220,
        fld1:56002,
        companynr:37,
        fld3:"serving",
        fld4:"DiMaggio",
        fld5:"dislocate",
        fld6:""
      },
      {
        auto:221,
        fld1:56003,
        companynr:37,
        fld3:"scheduling",
        fld4:"exclamation",
        fld5:"monochromatic",
        fld6:"FAS"
      },
      {
        auto:222,
        fld1:56004,
        companynr:37,
        fld3:"lore",
        fld4:"subdirectory",
        fld5:"batting",
        fld6:""
      },
      {
        auto:223,
        fld1:56102,
        companynr:37,
        fld3:"eventful",
        fld4:"fangs",
        fld5:"postcondition",
        fld6:"A"
      },
      {
        auto:224,
        fld1:56203,
        companynr:37,
        fld3:"arteriole",
        fld4:"buyer",
        fld5:"catalog",
        fld6:"FAS"
      },
      {
        auto:225,
        fld1:56204,
        companynr:37,
        fld3:"disentangle",
        fld4:"pithing",
        fld5:"Remus",
        fld6:""
      },
      {
        auto:226,
        fld1:58003,
        companynr:37,
        fld3:"cured",
        fld4:"transistorizing",
        fld5:"devices",
        fld6:"A"
      },
      {
        auto:227,
        fld1:58004,
        companynr:37,
        fld3:"Fenton",
        fld4:"nonbiodegradable",
        fld5:"bike",
        fld6:"A"
      },
      {
        auto:228,
        fld1:58005,
        companynr:37,
        fld3:"avoidable",
        fld4:"dislocate",
        fld5:"qualify",
        fld6:""
      },
      {
        auto:229,
        fld1:58006,
        companynr:37,
        fld3:"drains",
        fld4:"monochromatic",
        fld5:"detained",
        fld6:""
      },
      {
        auto:230,
        fld1:58007,
        companynr:37,
        fld3:"detectably",
        fld4:"batting",
        fld5:"commended",
        fld6:""
      },
      {
        auto:231,
        fld1:58101,
        companynr:37,
        fld3:"husky",
        fld4:"postcondition",
        fld5:"civilize",
        fld6:""
      },
      {
        auto:232,
        fld1:58102,
        companynr:37,
        fld3:"impelling",
        fld4:"catalog",
        fld5:"Elmhurst",
        fld6:""
      },
      {
        auto:233,
        fld1:58103,
        companynr:37,
        fld3:"undoes",
        fld4:"Remus",
        fld5:"anesthetizing",
        fld6:""
      },
      {
        auto:234,
        fld1:58105,
        companynr:37,
        fld3:"evened",
        fld4:"devices",
        fld5:"deaf",
        fld6:""
      },
      {
        auto:235,
        fld1:58111,
        companynr:37,
        fld3:"squeezes",
        fld4:"bike",
        fld5:"Brigham",
        fld6:""
      },
      {
        auto:236,
        fld1:58112,
        companynr:37,
        fld3:"destroyer",
        fld4:"qualify",
        fld5:"title",
        fld6:""
      },
      {
        auto:237,
        fld1:58113,
        companynr:37,
        fld3:"rudeness",
        fld4:"detained",
        fld5:"coarse",
        fld6:""
      },
      {
        auto:238,
        fld1:58114,
        companynr:37,
        fld3:"beaner",
        fld4:"commended",
        fld5:"combinations",
        fld6:""
      },
      {
        auto:239,
        fld1:58115,
        companynr:37,
        fld3:"boorish",
        fld4:"civilize",
        fld5:"grayness",
        fld6:""
      },
      {
        auto:240,
        fld1:58116,
        companynr:37,
        fld3:"Everhart",
        fld4:"Elmhurst",
        fld5:"innumerable",
        fld6:"FAS"
      },
      {
        auto:241,
        fld1:58117,
        companynr:37,
        fld3:"encompass",
        fld4:"anesthetizing",
        fld5:"Caroline",
        fld6:"A"
      },
      {
        auto:242,
        fld1:58118,
        companynr:37,
        fld3:"mushrooms",
        fld4:"deaf",
        fld5:"fatty",
        fld6:"FAS"
      },
      {
        auto:243,
        fld1:58119,
        companynr:37,
        fld3:"Alison",
        fld4:"Brigham",
        fld5:"eastbound",
        fld6:""
      },
      {
        auto:244,
        fld1:58120,
        companynr:37,
        fld3:"externally",
        fld4:"title",
        fld5:"inexperienced",
        fld6:""
      },
      {
        auto:245,
        fld1:58121,
        companynr:37,
        fld3:"pellagra",
        fld4:"coarse",
        fld5:"hoarder",
        fld6:"A"
      },
      {
        auto:246,
        fld1:58122,
        companynr:37,
        fld3:"cult",
        fld4:"combinations",
        fld5:"scotch",
        fld6:"W"
      },
      {
        auto:247,
        fld1:58123,
        companynr:37,
        fld3:"creek",
        fld4:"grayness",
        fld5:"passport",
        fld6:"A"
      },
      {
        auto:248,
        fld1:58124,
        companynr:37,
        fld3:"Huffman",
        fld4:"innumerable",
        fld5:"strategic",
        fld6:"FAS"
      },
      {
        auto:249,
        fld1:58125,
        companynr:37,
        fld3:"Majorca",
        fld4:"Caroline",
        fld5:"gated",
        fld6:""
      },
      {
        auto:250,
        fld1:58126,
        companynr:37,
        fld3:"governing",
        fld4:"fatty",
        fld5:"flog",
        fld6:""
      },
      {
        auto:251,
        fld1:58127,
        companynr:37,
        fld3:"gadfly",
        fld4:"eastbound",
        fld5:"Pipestone",
        fld6:""
      },
      {
        auto:252,
        fld1:58128,
        companynr:37,
        fld3:"reassigned",
        fld4:"inexperienced",
        fld5:"Dar",
        fld6:""
      },
      {
        auto:253,
        fld1:58201,
        companynr:37,
        fld3:"intentness",
        fld4:"hoarder",
        fld5:"Corcoran",
        fld6:""
      },
      {
        auto:254,
        fld1:58202,
        companynr:37,
        fld3:"craziness",
        fld4:"scotch",
        fld5:"flyers",
        fld6:"A"
      },
      {
        auto:255,
        fld1:58303,
        companynr:37,
        fld3:"psychic",
        fld4:"passport",
        fld5:"competitions",
        fld6:"W"
      },
      {
        auto:256,
        fld1:58304,
        companynr:37,
        fld3:"squabbled",
        fld4:"strategic",
        fld5:"suppliers",
        fld6:"FAS"
      },
      {
        auto:257,
        fld1:58602,
        companynr:37,
        fld3:"burlesque",
        fld4:"gated",
        fld5:"skips",
        fld6:""
      },
      {
        auto:258,
        fld1:58603,
        companynr:37,
        fld3:"capped",
        fld4:"flog",
        fld5:"institutes",
        fld6:""
      },
      {
        auto:259,
        fld1:58604,
        companynr:37,
        fld3:"extracted",
        fld4:"Pipestone",
        fld5:"troop",
        fld6:"A"
      },
      {
        auto:260,
        fld1:58605,
        companynr:37,
        fld3:"DiMaggio",
        fld4:"Dar",
        fld5:"connective",
        fld6:"W"
      },
      {
        auto:261,
        fld1:58606,
        companynr:37,
        fld3:"exclamation",
        fld4:"Corcoran",
        fld5:"denies",
        fld6:""
      },
      {
        auto:262,
        fld1:58607,
        companynr:37,
        fld3:"subdirectory",
        fld4:"flyers",
        fld5:"polka",
        fld6:""
      },
      {
        auto:263,
        fld1:60401,
        companynr:36,
        fld3:"fangs",
        fld4:"competitions",
        fld5:"observations",
        fld6:"FAS"
      },
      {
        auto:264,
        fld1:61701,
        companynr:36,
        fld3:"buyer",
        fld4:"suppliers",
        fld5:"askers",
        fld6:""
      },
      {
        auto:265,
        fld1:66201,
        companynr:36,
        fld3:"pithing",
        fld4:"skips",
        fld5:"homeless",
        fld6:"FAS"
      },
      {
        auto:266,
        fld1:66501,
        companynr:36,
        fld3:"transistorizing",
        fld4:"institutes",
        fld5:"Anna",
        fld6:""
      },
      {
        auto:267,
        fld1:68001,
        companynr:36,
        fld3:"nonbiodegradable",
        fld4:"troop",
        fld5:"subdirectories",
        fld6:"W"
      },
      {
        auto:268,
        fld1:68002,
        companynr:36,
        fld3:"dislocate",
        fld4:"connective",
        fld5:"decaying",
        fld6:"FAS"
      },
      {
        auto:269,
        fld1:68005,
        companynr:36,
        fld3:"monochromatic",
        fld4:"denies",
        fld5:"outwitting",
        fld6:"W"
      },
      {
        auto:270,
        fld1:68006,
        companynr:36,
        fld3:"batting",
        fld4:"polka",
        fld5:"Harpy",
        fld6:"W"
      },
      {
        auto:271,
        fld1:68007,
        companynr:36,
        fld3:"postcondition",
        fld4:"observations",
        fld5:"crazed",
        fld6:""
      },
      {
        auto:272,
        fld1:68008,
        companynr:36,
        fld3:"catalog",
        fld4:"askers",
        fld5:"suffocate",
        fld6:""
      },
      {
        auto:273,
        fld1:68009,
        companynr:36,
        fld3:"Remus",
        fld4:"homeless",
        fld5:"provers",
        fld6:"FAS"
      },
      {
        auto:274,
        fld1:68010,
        companynr:36,
        fld3:"devices",
        fld4:"Anna",
        fld5:"technically",
        fld6:""
      },
      {
        auto:275,
        fld1:68011,
        companynr:36,
        fld3:"bike",
        fld4:"subdirectories",
        fld5:"Franklinizations",
        fld6:""
      },
      {
        auto:276,
        fld1:68202,
        companynr:36,
        fld3:"qualify",
        fld4:"decaying",
        fld5:"considered",
        fld6:""
      },
      {
        auto:277,
        fld1:68302,
        companynr:36,
        fld3:"detained",
        fld4:"outwitting",
        fld5:"tinnily",
        fld6:""
      },
      {
        auto:278,
        fld1:68303,
        companynr:36,
        fld3:"commended",
        fld4:"Harpy",
        fld5:"uninterruptedly",
        fld6:""
      },
      {
        auto:279,
        fld1:68401,
        companynr:36,
        fld3:"civilize",
        fld4:"crazed",
        fld5:"whistled",
        fld6:"A"
      },
      {
        auto:280,
        fld1:68501,
        companynr:36,
        fld3:"Elmhurst",
        fld4:"suffocate",
        fld5:"automate",
        fld6:""
      },
      {
        auto:281,
        fld1:68502,
        companynr:36,
        fld3:"anesthetizing",
        fld4:"provers",
        fld5:"gutting",
        fld6:"W"
      },
      {
        auto:282,
        fld1:68503,
        companynr:36,
        fld3:"deaf",
        fld4:"technically",
        fld5:"surreptitious",
        fld6:""
      },
      {
        auto:283,
        fld1:68602,
        companynr:36,
        fld3:"Brigham",
        fld4:"Franklinizations",
        fld5:"Choctaw",
        fld6:""
      },
      {
        auto:284,
        fld1:68603,
        companynr:36,
        fld3:"title",
        fld4:"considered",
        fld5:"cooks",
        fld6:""
      },
      {
        auto:285,
        fld1:68701,
        companynr:36,
        fld3:"coarse",
        fld4:"tinnily",
        fld5:"millivolt",
        fld6:"FAS"
      },
      {
        auto:286,
        fld1:68702,
        companynr:36,
        fld3:"combinations",
        fld4:"uninterruptedly",
        fld5:"counterpoise",
        fld6:""
      },
      {
        auto:287,
        fld1:68703,
        companynr:36,
        fld3:"grayness",
        fld4:"whistled",
        fld5:"Gothicism",
        fld6:""
      },
      {
        auto:288,
        fld1:76001,
        companynr:36,
        fld3:"innumerable",
        fld4:"automate",
        fld5:"feminine",
        fld6:""
      },
      {
        auto:289,
        fld1:76002,
        companynr:36,
        fld3:"Caroline",
        fld4:"gutting",
        fld5:"metaphysically",
        fld6:"W"
      },
      {
        auto:290,
        fld1:76101,
        companynr:36,
        fld3:"fatty",
        fld4:"surreptitious",
        fld5:"sanding",
        fld6:"A"
      },
      {
        auto:291,
        fld1:76102,
        companynr:36,
        fld3:"eastbound",
        fld4:"Choctaw",
        fld5:"contributorily",
        fld6:""
      },
      {
        auto:292,
        fld1:76103,
        companynr:36,
        fld3:"inexperienced",
        fld4:"cooks",
        fld5:"receivers",
        fld6:"FAS"
      },
      {
        auto:293,
        fld1:76302,
        companynr:36,
        fld3:"hoarder",
        fld4:"millivolt",
        fld5:"adjourn",
        fld6:""
      },
      {
        auto:294,
        fld1:76303,
        companynr:36,
        fld3:"scotch",
        fld4:"counterpoise",
        fld5:"straggled",
        fld6:"A"
      },
      {
        auto:295,
        fld1:76304,
        companynr:36,
        fld3:"passport",
        fld4:"Gothicism",
        fld5:"druggists",
        fld6:""
      },
      {
        auto:296,
        fld1:76305,
        companynr:36,
        fld3:"strategic",
        fld4:"feminine",
        fld5:"thanking",
        fld6:"FAS"
      },
      {
        auto:297,
        fld1:76306,
        companynr:36,
        fld3:"gated",
        fld4:"metaphysically",
        fld5:"ostrich",
        fld6:""
      },
      {
        auto:298,
        fld1:76307,
        companynr:36,
        fld3:"flog",
        fld4:"sanding",
        fld5:"hopelessness",
        fld6:"FAS"
      },
      {
        auto:299,
        fld1:76402,
        companynr:36,
        fld3:"Pipestone",
        fld4:"contributorily",
        fld5:"Eurydice",
        fld6:""
      },
      {
        auto:300,
        fld1:76501,
        companynr:36,
        fld3:"Dar",
        fld4:"receivers",
        fld5:"excitation",
        fld6:"W"
      },
      {
        auto:301,
        fld1:76502,
        companynr:36,
        fld3:"Corcoran",
        fld4:"adjourn",
        fld5:"presumes",
        fld6:"FAS"
      },
      {
        auto:302,
        fld1:76701,
        companynr:36,
        fld3:"flyers",
        fld4:"straggled",
        fld5:"imaginable",
        fld6:"FAS"
      },
      {
        auto:303,
        fld1:78001,
        companynr:36,
        fld3:"competitions",
        fld4:"druggists",
        fld5:"concoct",
        fld6:"W"
      },
      {
        auto:304,
        fld1:78002,
        companynr:36,
        fld3:"suppliers",
        fld4:"thanking",
        fld5:"peering",
        fld6:"W"
      },
      {
        auto:305,
        fld1:78003,
        companynr:36,
        fld3:"skips",
        fld4:"ostrich",
        fld5:"Phelps",
        fld6:"FAS"
      },
      {
        auto:306,
        fld1:78004,
        companynr:36,
        fld3:"institutes",
        fld4:"hopelessness",
        fld5:"ferociousness",
        fld6:"FAS"
      },
      {
        auto:307,
        fld1:78005,
        companynr:36,
        fld3:"troop",
        fld4:"Eurydice",
        fld5:"sentences",
        fld6:""
      },
      {
        auto:308,
        fld1:78006,
        companynr:36,
        fld3:"connective",
        fld4:"excitation",
        fld5:"unlocks",
        fld6:""
      },
      {
        auto:309,
        fld1:78007,
        companynr:36,
        fld3:"denies",
        fld4:"presumes",
        fld5:"engrossing",
        fld6:"W"
      },
      {
        auto:310,
        fld1:78008,
        companynr:36,
        fld3:"polka",
        fld4:"imaginable",
        fld5:"Ruth",
        fld6:""
      },
      {
        auto:311,
        fld1:78101,
        companynr:36,
        fld3:"observations",
        fld4:"concoct",
        fld5:"tying",
        fld6:""
      },
      {
        auto:312,
        fld1:78103,
        companynr:36,
        fld3:"askers",
        fld4:"peering",
        fld5:"exclaimers",
        fld6:""
      },
      {
        auto:313,
        fld1:78104,
        companynr:36,
        fld3:"homeless",
        fld4:"Phelps",
        fld5:"synergy",
        fld6:""
      },
      {
        auto:314,
        fld1:78105,
        companynr:36,
        fld3:"Anna",
        fld4:"ferociousness",
        fld5:"Huey",
        fld6:"W"
      },
      {
        auto:315,
        fld1:82101,
        companynr:36,
        fld3:"subdirectories",
        fld4:"sentences",
        fld5:"merging",
        fld6:""
      },
      {
        auto:316,
        fld1:83401,
        companynr:36,
        fld3:"decaying",
        fld4:"unlocks",
        fld5:"judges",
        fld6:"A"
      },
      {
        auto:317,
        fld1:84001,
        companynr:36,
        fld3:"outwitting",
        fld4:"engrossing",
        fld5:"Shylock",
        fld6:"W"
      },
      {
        auto:318,
        fld1:84002,
        companynr:36,
        fld3:"Harpy",
        fld4:"Ruth",
        fld5:"Miltonism",
        fld6:""
      },
      {
        auto:319,
        fld1:86001,
        companynr:36,
        fld3:"crazed",
        fld4:"tying",
        fld5:"hen",
        fld6:"W"
      },
      {
        auto:320,
        fld1:86102,
        companynr:36,
        fld3:"suffocate",
        fld4:"exclaimers",
        fld5:"honeybee",
        fld6:"FAS"
      },
      {
        auto:321,
        fld1:86201,
        companynr:36,
        fld3:"provers",
        fld4:"synergy",
        fld5:"towers",
        fld6:""
      },
      {
        auto:322,
        fld1:88001,
        companynr:36,
        fld3:"technically",
        fld4:"Huey",
        fld5:"dilutes",
        fld6:"W"
      },
      {
        auto:323,
        fld1:88002,
        companynr:36,
        fld3:"Franklinizations",
        fld4:"merging",
        fld5:"numerals",
        fld6:"FAS"
      },
      {
        auto:324,
        fld1:88003,
        companynr:36,
        fld3:"considered",
        fld4:"judges",
        fld5:"democracy",
        fld6:"FAS"
      },
      {
        auto:325,
        fld1:88004,
        companynr:36,
        fld3:"tinnily",
        fld4:"Shylock",
        fld5:"Ibero-",
        fld6:""
      },
      {
        auto:326,
        fld1:88101,
        companynr:36,
        fld3:"uninterruptedly",
        fld4:"Miltonism",
        fld5:"invalids",
        fld6:""
      },
      {
        auto:327,
        fld1:88102,
        companynr:36,
        fld3:"whistled",
        fld4:"hen",
        fld5:"behavior",
        fld6:""
      },
      {
        auto:328,
        fld1:88103,
        companynr:36,
        fld3:"automate",
        fld4:"honeybee",
        fld5:"accruing",
        fld6:""
      },
      {
        auto:329,
        fld1:88104,
        companynr:36,
        fld3:"gutting",
        fld4:"towers",
        fld5:"relics",
        fld6:"A"
      },
      {
        auto:330,
        fld1:88105,
        companynr:36,
        fld3:"surreptitious",
        fld4:"dilutes",
        fld5:"rackets",
        fld6:""
      },
      {
        auto:331,
        fld1:88106,
        companynr:36,
        fld3:"Choctaw",
        fld4:"numerals",
        fld5:"Fischbein",
        fld6:"W"
      },
      {
        auto:332,
        fld1:88201,
        companynr:36,
        fld3:"cooks",
        fld4:"democracy",
        fld5:"phony",
        fld6:"W"
      },
      {
        auto:333,
        fld1:88203,
        companynr:36,
        fld3:"millivolt",
        fld4:"Ibero-",
        fld5:"cross",
        fld6:"FAS"
      },
      {
        auto:334,
        fld1:88204,
        companynr:36,
        fld3:"counterpoise",
        fld4:"invalids",
        fld5:"cleanup",
        fld6:""
      },
      {
        auto:335,
        fld1:88302,
        companynr:37,
        fld3:"Gothicism",
        fld4:"behavior",
        fld5:"conspirator",
        fld6:""
      },
      {
        auto:336,
        fld1:88303,
        companynr:37,
        fld3:"feminine",
        fld4:"accruing",
        fld5:"label",
        fld6:"FAS"
      },
      {
        auto:337,
        fld1:88305,
        companynr:37,
        fld3:"metaphysically",
        fld4:"relics",
        fld5:"university",
        fld6:""
      },
      {
        auto:338,
        fld1:88402,
        companynr:37,
        fld3:"sanding",
        fld4:"rackets",
        fld5:"cleansed",
        fld6:"FAS"
      },
      {
        auto:339,
        fld1:88501,
        companynr:36,
        fld3:"contributorily",
        fld4:"Fischbein",
        fld5:"ballgown",
        fld6:""
      },
      {
        auto:340,
        fld1:88502,
        companynr:36,
        fld3:"receivers",
        fld4:"phony",
        fld5:"starlet",
        fld6:""
      },
      {
        auto:341,
        fld1:88503,
        companynr:36,
        fld3:"adjourn",
        fld4:"cross",
        fld5:"aqueous",
        fld6:""
      },
      {
        auto:342,
        fld1:98001,
        companynr:58,
        fld3:"straggled",
        fld4:"cleanup",
        fld5:"portrayal",
        fld6:"A"
      },
      {
        auto:343,
        fld1:98002,
        companynr:58,
        fld3:"druggists",
        fld4:"conspirator",
        fld5:"despising",
        fld6:"W"
      },
      {
        auto:344,
        fld1:98003,
        companynr:58,
        fld3:"thanking",
        fld4:"label",
        fld5:"distort",
        fld6:"W"
      },
      {
        auto:345,
        fld1:98004,
        companynr:58,
        fld3:"ostrich",
        fld4:"university",
        fld5:"palmed",
        fld6:""
      },
      {
        auto:346,
        fld1:98005,
        companynr:58,
        fld3:"hopelessness",
        fld4:"cleansed",
        fld5:"faced",
        fld6:""
      },
      {
        auto:347,
        fld1:98006,
        companynr:58,
        fld3:"Eurydice",
        fld4:"ballgown",
        fld5:"silverware",
        fld6:""
      },
      {
        auto:348,
        fld1:141903,
        companynr:29,
        fld3:"excitation",
        fld4:"starlet",
        fld5:"assessor",
        fld6:""
      },
      {
        auto:349,
        fld1:98008,
        companynr:58,
        fld3:"presumes",
        fld4:"aqueous",
        fld5:"spiders",
        fld6:""
      },
      {
        auto:350,
        fld1:98009,
        companynr:58,
        fld3:"imaginable",
        fld4:"portrayal",
        fld5:"artificially",
        fld6:""
      },
      {
        auto:351,
        fld1:98010,
        companynr:58,
        fld3:"concoct",
        fld4:"despising",
        fld5:"reminiscence",
        fld6:""
      },
      {
        auto:352,
        fld1:98011,
        companynr:58,
        fld3:"peering",
        fld4:"distort",
        fld5:"Mexican",
        fld6:""
      },
      {
        auto:353,
        fld1:98012,
        companynr:58,
        fld3:"Phelps",
        fld4:"palmed",
        fld5:"obnoxious",
        fld6:""
      },
      {
        auto:354,
        fld1:98013,
        companynr:58,
        fld3:"ferociousness",
        fld4:"faced",
        fld5:"fragile",
        fld6:""
      },
      {
        auto:355,
        fld1:98014,
        companynr:58,
        fld3:"sentences",
        fld4:"silverware",
        fld5:"apprehensible",
        fld6:""
      },
      {
        auto:356,
        fld1:98015,
        companynr:58,
        fld3:"unlocks",
        fld4:"assessor",
        fld5:"births",
        fld6:""
      },
      {
        auto:357,
        fld1:98016,
        companynr:58,
        fld3:"engrossing",
        fld4:"spiders",
        fld5:"garages",
        fld6:""
      },
      {
        auto:358,
        fld1:98017,
        companynr:58,
        fld3:"Ruth",
        fld4:"artificially",
        fld5:"panty",
        fld6:""
      },
      {
        auto:359,
        fld1:98018,
        companynr:58,
        fld3:"tying",
        fld4:"reminiscence",
        fld5:"anteater",
        fld6:""
      },
      {
        auto:360,
        fld1:98019,
        companynr:58,
        fld3:"exclaimers",
        fld4:"Mexican",
        fld5:"displacement",
        fld6:"A"
      },
      {
        auto:361,
        fld1:98020,
        companynr:58,
        fld3:"synergy",
        fld4:"obnoxious",
        fld5:"drovers",
        fld6:"A"
      },
      {
        auto:362,
        fld1:98021,
        companynr:58,
        fld3:"Huey",
        fld4:"fragile",
        fld5:"patenting",
        fld6:"A"
      },
      {
        auto:363,
        fld1:98022,
        companynr:58,
        fld3:"merging",
        fld4:"apprehensible",
        fld5:"far",
        fld6:"A"
      },
      {
        auto:364,
        fld1:98023,
        companynr:58,
        fld3:"judges",
        fld4:"births",
        fld5:"shrieks",
        fld6:""
      },
      {
        auto:365,
        fld1:98024,
        companynr:58,
        fld3:"Shylock",
        fld4:"garages",
        fld5:"aligning",
        fld6:"W"
      },
      {
        auto:366,
        fld1:98025,
        companynr:37,
        fld3:"Miltonism",
        fld4:"panty",
        fld5:"pragmatism",
        fld6:""
      },
      {
        auto:367,
        fld1:106001,
        companynr:36,
        fld3:"hen",
        fld4:"anteater",
        fld5:"fevers",
        fld6:"W"
      },
      {
        auto:368,
        fld1:108001,
        companynr:36,
        fld3:"honeybee",
        fld4:"displacement",
        fld5:"reexamines",
        fld6:"A"
      },
      {
        auto:369,
        fld1:108002,
        companynr:36,
        fld3:"towers",
        fld4:"drovers",
        fld5:"occupancies",
        fld6:""
      },
      {
        auto:370,
        fld1:108003,
        companynr:36,
        fld3:"dilutes",
        fld4:"patenting",
        fld5:"sweats",
        fld6:"FAS"
      },
      {
        auto:371,
        fld1:108004,
        companynr:36,
        fld3:"numerals",
        fld4:"far",
        fld5:"modulators",
        fld6:""
      },
      {
        auto:372,
        fld1:108005,
        companynr:36,
        fld3:"democracy",
        fld4:"shrieks",
        fld5:"demand",
        fld6:"W"
      },
      {
        auto:373,
        fld1:108007,
        companynr:36,
        fld3:"Ibero-",
        fld4:"aligning",
        fld5:"Madeira",
        fld6:""
      },
      {
        auto:374,
        fld1:108008,
        companynr:36,
        fld3:"invalids",
        fld4:"pragmatism",
        fld5:"Viennese",
        fld6:"W"
      },
      {
        auto:375,
        fld1:108009,
        companynr:36,
        fld3:"behavior",
        fld4:"fevers",
        fld5:"chillier",
        fld6:"W"
      },
      {
        auto:376,
        fld1:108010,
        companynr:36,
        fld3:"accruing",
        fld4:"reexamines",
        fld5:"wildcats",
        fld6:"FAS"
      },
      {
        auto:377,
        fld1:108011,
        companynr:36,
        fld3:"relics",
        fld4:"occupancies",
        fld5:"gentle",
        fld6:""
      },
      {
        auto:378,
        fld1:108012,
        companynr:36,
        fld3:"rackets",
        fld4:"sweats",
        fld5:"Angles",
        fld6:"W"
      },
      {
        auto:379,
        fld1:108101,
        companynr:36,
        fld3:"Fischbein",
        fld4:"modulators",
        fld5:"accuracies",
        fld6:""
      },
      {
        auto:380,
        fld1:108102,
        companynr:36,
        fld3:"phony",
        fld4:"demand",
        fld5:"toggle",
        fld6:""
      },
      {
        auto:381,
        fld1:108103,
        companynr:36,
        fld3:"cross",
        fld4:"Madeira",
        fld5:"Mendelssohn",
        fld6:"W"
      },
      {
        auto:382,
        fld1:108111,
        companynr:50,
        fld3:"cleanup",
        fld4:"Viennese",
        fld5:"behaviorally",
        fld6:""
      },
      {
        auto:383,
        fld1:108105,
        companynr:36,
        fld3:"conspirator",
        fld4:"chillier",
        fld5:"Rochford",
        fld6:""
      },
      {
        auto:384,
        fld1:108106,
        companynr:36,
        fld3:"label",
        fld4:"wildcats",
        fld5:"mirror",
        fld6:"W"
      },
      {
        auto:385,
        fld1:108107,
        companynr:36,
        fld3:"university",
        fld4:"gentle",
        fld5:"Modula",
        fld6:""
      },
      {
        auto:386,
        fld1:108108,
        companynr:50,
        fld3:"cleansed",
        fld4:"Angles",
        fld5:"clobbering",
        fld6:""
      },
      {
        auto:387,
        fld1:108109,
        companynr:36,
        fld3:"ballgown",
        fld4:"accuracies",
        fld5:"chronography",
        fld6:""
      },
      {
        auto:388,
        fld1:108110,
        companynr:36,
        fld3:"starlet",
        fld4:"toggle",
        fld5:"Eskimoizeds",
        fld6:""
      },
      {
        auto:389,
        fld1:108201,
        companynr:36,
        fld3:"aqueous",
        fld4:"Mendelssohn",
        fld5:"British",
        fld6:"W"
      },
      {
        auto:390,
        fld1:108202,
        companynr:36,
        fld3:"portrayal",
        fld4:"behaviorally",
        fld5:"pitfalls",
        fld6:""
      },
      {
        auto:391,
        fld1:108203,
        companynr:36,
        fld3:"despising",
        fld4:"Rochford",
        fld5:"verify",
        fld6:"W"
      },
      {
        auto:392,
        fld1:108204,
        companynr:36,
        fld3:"distort",
        fld4:"mirror",
        fld5:"scatter",
        fld6:"FAS"
      },
      {
        auto:393,
        fld1:108205,
        companynr:36,
        fld3:"palmed",
        fld4:"Modula",
        fld5:"Aztecan",
        fld6:""
      },
      {
        auto:394,
        fld1:108301,
        companynr:36,
        fld3:"faced",
        fld4:"clobbering",
        fld5:"acuity",
        fld6:"W"
      },
      {
        auto:395,
        fld1:108302,
        companynr:36,
        fld3:"silverware",
        fld4:"chronography",
        fld5:"sinking",
        fld6:"W"
      },
      {
        auto:396,
        fld1:112101,
        companynr:36,
        fld3:"assessor",
        fld4:"Eskimoizeds",
        fld5:"beasts",
        fld6:"FAS"
      },
      {
        auto:397,
        fld1:112102,
        companynr:36,
        fld3:"spiders",
        fld4:"British",
        fld5:"Witt",
        fld6:"W"
      },
      {
        auto:398,
        fld1:113701,
        companynr:36,
        fld3:"artificially",
        fld4:"pitfalls",
        fld5:"physicists",
        fld6:"FAS"
      },
      {
        auto:399,
        fld1:116001,
        companynr:36,
        fld3:"reminiscence",
        fld4:"verify",
        fld5:"folksong",
        fld6:"A"
      },
      {
        auto:400,
        fld1:116201,
        companynr:36,
        fld3:"Mexican",
        fld4:"scatter",
        fld5:"strokes",
        fld6:"FAS"
      },
      {
        auto:401,
        fld1:116301,
        companynr:36,
        fld3:"obnoxious",
        fld4:"Aztecan",
        fld5:"crowder",
        fld6:""
      },
      {
        auto:402,
        fld1:116302,
        companynr:36,
        fld3:"fragile",
        fld4:"acuity",
        fld5:"merry",
        fld6:""
      },
      {
        auto:403,
        fld1:116601,
        companynr:36,
        fld3:"apprehensible",
        fld4:"sinking",
        fld5:"cadenced",
        fld6:""
      },
      {
        auto:404,
        fld1:116602,
        companynr:36,
        fld3:"births",
        fld4:"beasts",
        fld5:"alimony",
        fld6:"A"
      },
      {
        auto:405,
        fld1:116603,
        companynr:36,
        fld3:"garages",
        fld4:"Witt",
        fld5:"principled",
        fld6:"A"
      },
      {
        auto:406,
        fld1:116701,
        companynr:36,
        fld3:"panty",
        fld4:"physicists",
        fld5:"golfing",
        fld6:""
      },
      {
        auto:407,
        fld1:116702,
        companynr:36,
        fld3:"anteater",
        fld4:"folksong",
        fld5:"undiscovered",
        fld6:""
      },
      {
        auto:408,
        fld1:118001,
        companynr:36,
        fld3:"displacement",
        fld4:"strokes",
        fld5:"irritates",
        fld6:""
      },
      {
        auto:409,
        fld1:118002,
        companynr:36,
        fld3:"drovers",
        fld4:"crowder",
        fld5:"patriots",
        fld6:"A"
      },
      {
        auto:410,
        fld1:118003,
        companynr:36,
        fld3:"patenting",
        fld4:"merry",
        fld5:"rooms",
        fld6:"FAS"
      },
      {
        auto:411,
        fld1:118004,
        companynr:36,
        fld3:"far",
        fld4:"cadenced",
        fld5:"towering",
        fld6:"W"
      },
      {
        auto:412,
        fld1:118005,
        companynr:36,
        fld3:"shrieks",
        fld4:"alimony",
        fld5:"displease",
        fld6:""
      },
      {
        auto:413,
        fld1:118006,
        companynr:36,
        fld3:"aligning",
        fld4:"principled",
        fld5:"photosensitive",
        fld6:""
      },
      {
        auto:414,
        fld1:118007,
        companynr:36,
        fld3:"pragmatism",
        fld4:"golfing",
        fld5:"inking",
        fld6:""
      },
      {
        auto:415,
        fld1:118008,
        companynr:36,
        fld3:"fevers",
        fld4:"undiscovered",
        fld5:"gainers",
        fld6:""
      },
      {
        auto:416,
        fld1:118101,
        companynr:36,
        fld3:"reexamines",
        fld4:"irritates",
        fld5:"leaning",
        fld6:"A"
      },
      {
        auto:417,
        fld1:118102,
        companynr:36,
        fld3:"occupancies",
        fld4:"patriots",
        fld5:"hydrant",
        fld6:"A"
      },
      {
        auto:418,
        fld1:118103,
        companynr:36,
        fld3:"sweats",
        fld4:"rooms",
        fld5:"preserve",
        fld6:""
      },
      {
        auto:419,
        fld1:118202,
        companynr:36,
        fld3:"modulators",
        fld4:"towering",
        fld5:"blinded",
        fld6:"A"
      },
      {
        auto:420,
        fld1:118203,
        companynr:36,
        fld3:"demand",
        fld4:"displease",
        fld5:"interactions",
        fld6:"A"
      },
      {
        auto:421,
        fld1:118204,
        companynr:36,
        fld3:"Madeira",
        fld4:"photosensitive",
        fld5:"Barry",
        fld6:""
      },
      {
        auto:422,
        fld1:118302,
        companynr:36,
        fld3:"Viennese",
        fld4:"inking",
        fld5:"whiteness",
        fld6:"A"
      },
      {
        auto:423,
        fld1:118304,
        companynr:36,
        fld3:"chillier",
        fld4:"gainers",
        fld5:"pastimes",
        fld6:"W"
      },
      {
        auto:424,
        fld1:118305,
        companynr:36,
        fld3:"wildcats",
        fld4:"leaning",
        fld5:"Edenization",
        fld6:""
      },
      {
        auto:425,
        fld1:118306,
        companynr:36,
        fld3:"gentle",
        fld4:"hydrant",
        fld5:"Muscat",
        fld6:""
      },
      {
        auto:426,
        fld1:118307,
        companynr:36,
        fld3:"Angles",
        fld4:"preserve",
        fld5:"assassinated",
        fld6:""
      },
      {
        auto:427,
        fld1:123101,
        companynr:36,
        fld3:"accuracies",
        fld4:"blinded",
        fld5:"labeled",
        fld6:""
      },
      {
        auto:428,
        fld1:123102,
        companynr:36,
        fld3:"toggle",
        fld4:"interactions",
        fld5:"glacial",
        fld6:"A"
      },
      {
        auto:429,
        fld1:123301,
        companynr:36,
        fld3:"Mendelssohn",
        fld4:"Barry",
        fld5:"implied",
        fld6:"W"
      },
      {
        auto:430,
        fld1:126001,
        companynr:36,
        fld3:"behaviorally",
        fld4:"whiteness",
        fld5:"bibliographies",
        fld6:"W"
      },
      {
        auto:431,
        fld1:126002,
        companynr:36,
        fld3:"Rochford",
        fld4:"pastimes",
        fld5:"Buchanan",
        fld6:""
      },
      {
        auto:432,
        fld1:126003,
        companynr:36,
        fld3:"mirror",
        fld4:"Edenization",
        fld5:"forgivably",
        fld6:"FAS"
      },
      {
        auto:433,
        fld1:126101,
        companynr:36,
        fld3:"Modula",
        fld4:"Muscat",
        fld5:"innuendo",
        fld6:"A"
      },
      {
        auto:434,
        fld1:126301,
        companynr:36,
        fld3:"clobbering",
        fld4:"assassinated",
        fld5:"den",
        fld6:"FAS"
      },
      {
        auto:435,
        fld1:126302,
        companynr:36,
        fld3:"chronography",
        fld4:"labeled",
        fld5:"submarines",
        fld6:"W"
      },
      {
        auto:436,
        fld1:126402,
        companynr:36,
        fld3:"Eskimoizeds",
        fld4:"glacial",
        fld5:"mouthful",
        fld6:"A"
      },
      {
        auto:437,
        fld1:126601,
        companynr:36,
        fld3:"British",
        fld4:"implied",
        fld5:"expiring",
        fld6:""
      },
      {
        auto:438,
        fld1:126602,
        companynr:36,
        fld3:"pitfalls",
        fld4:"bibliographies",
        fld5:"unfulfilled",
        fld6:"FAS"
      },
      {
        auto:439,
        fld1:126702,
        companynr:36,
        fld3:"verify",
        fld4:"Buchanan",
        fld5:"precession",
        fld6:""
      },
      {
        auto:440,
        fld1:128001,
        companynr:36,
        fld3:"scatter",
        fld4:"forgivably",
        fld5:"nullified",
        fld6:""
      },
      {
        auto:441,
        fld1:128002,
        companynr:36,
        fld3:"Aztecan",
        fld4:"innuendo",
        fld5:"affects",
        fld6:""
      },
      {
        auto:442,
        fld1:128003,
        companynr:36,
        fld3:"acuity",
        fld4:"den",
        fld5:"Cynthia",
        fld6:""
      },
      {
        auto:443,
        fld1:128004,
        companynr:36,
        fld3:"sinking",
        fld4:"submarines",
        fld5:"Chablis",
        fld6:"A"
      },
      {
        auto:444,
        fld1:128005,
        companynr:36,
        fld3:"beasts",
        fld4:"mouthful",
        fld5:"betterments",
        fld6:"FAS"
      },
      {
        auto:445,
        fld1:128007,
        companynr:36,
        fld3:"Witt",
        fld4:"expiring",
        fld5:"advertising",
        fld6:""
      },
      {
        auto:446,
        fld1:128008,
        companynr:36,
        fld3:"physicists",
        fld4:"unfulfilled",
        fld5:"rubies",
        fld6:"A"
      },
      {
        auto:447,
        fld1:128009,
        companynr:36,
        fld3:"folksong",
        fld4:"precession",
        fld5:"southwest",
        fld6:"FAS"
      },
      {
        auto:448,
        fld1:128010,
        companynr:36,
        fld3:"strokes",
        fld4:"nullified",
        fld5:"superstitious",
        fld6:"A"
      },
      {
        auto:449,
        fld1:128011,
        companynr:36,
        fld3:"crowder",
        fld4:"affects",
        fld5:"tabernacle",
        fld6:"W"
      },
      {
        auto:450,
        fld1:128012,
        companynr:36,
        fld3:"merry",
        fld4:"Cynthia",
        fld5:"silk",
        fld6:"A"
      },
      {
        auto:451,
        fld1:128013,
        companynr:36,
        fld3:"cadenced",
        fld4:"Chablis",
        fld5:"handsomest",
        fld6:"A"
      },
      {
        auto:452,
        fld1:128014,
        companynr:36,
        fld3:"alimony",
        fld4:"betterments",
        fld5:"Persian",
        fld6:"A"
      },
      {
        auto:453,
        fld1:128015,
        companynr:36,
        fld3:"principled",
        fld4:"advertising",
        fld5:"analog",
        fld6:"W"
      },
      {
        auto:454,
        fld1:128016,
        companynr:36,
        fld3:"golfing",
        fld4:"rubies",
        fld5:"complex",
        fld6:"W"
      },
      {
        auto:455,
        fld1:128017,
        companynr:36,
        fld3:"undiscovered",
        fld4:"southwest",
        fld5:"Taoist",
        fld6:""
      },
      {
        auto:456,
        fld1:128018,
        companynr:36,
        fld3:"irritates",
        fld4:"superstitious",
        fld5:"suspend",
        fld6:""
      },
      {
        auto:457,
        fld1:128019,
        companynr:36,
        fld3:"patriots",
        fld4:"tabernacle",
        fld5:"relegated",
        fld6:""
      },
      {
        auto:458,
        fld1:128020,
        companynr:36,
        fld3:"rooms",
        fld4:"silk",
        fld5:"awesome",
        fld6:"W"
      },
      {
        auto:459,
        fld1:128021,
        companynr:36,
        fld3:"towering",
        fld4:"handsomest",
        fld5:"Bruxelles",
        fld6:""
      },
      {
        auto:460,
        fld1:128022,
        companynr:36,
        fld3:"displease",
        fld4:"Persian",
        fld5:"imprecisely",
        fld6:"A"
      },
      {
        auto:461,
        fld1:128023,
        companynr:36,
        fld3:"photosensitive",
        fld4:"analog",
        fld5:"televise",
        fld6:""
      },
      {
        auto:462,
        fld1:128101,
        companynr:36,
        fld3:"inking",
        fld4:"complex",
        fld5:"braking",
        fld6:""
      },
      {
        auto:463,
        fld1:128102,
        companynr:36,
        fld3:"gainers",
        fld4:"Taoist",
        fld5:"true",
        fld6:"FAS"
      },
      {
        auto:464,
        fld1:128103,
        companynr:36,
        fld3:"leaning",
        fld4:"suspend",
        fld5:"disappointing",
        fld6:"FAS"
      },
      {
        auto:465,
        fld1:128104,
        companynr:36,
        fld3:"hydrant",
        fld4:"relegated",
        fld5:"navally",
        fld6:"W"
      },
      {
        auto:466,
        fld1:128106,
        companynr:36,
        fld3:"preserve",
        fld4:"awesome",
        fld5:"circus",
        fld6:""
      },
      {
        auto:467,
        fld1:128107,
        companynr:36,
        fld3:"blinded",
        fld4:"Bruxelles",
        fld5:"beetles",
        fld6:""
      },
      {
        auto:468,
        fld1:128108,
        companynr:36,
        fld3:"interactions",
        fld4:"imprecisely",
        fld5:"trumps",
        fld6:""
      },
      {
        auto:469,
        fld1:128202,
        companynr:36,
        fld3:"Barry",
        fld4:"televise",
        fld5:"fourscore",
        fld6:"W"
      },
      {
        auto:470,
        fld1:128203,
        companynr:36,
        fld3:"whiteness",
        fld4:"braking",
        fld5:"Blackfoots",
        fld6:""
      },
      {
        auto:471,
        fld1:128301,
        companynr:36,
        fld3:"pastimes",
        fld4:"true",
        fld5:"Grady",
        fld6:""
      },
      {
        auto:472,
        fld1:128302,
        companynr:36,
        fld3:"Edenization",
        fld4:"disappointing",
        fld5:"quiets",
        fld6:"FAS"
      },
      {
        auto:473,
        fld1:128303,
        companynr:36,
        fld3:"Muscat",
        fld4:"navally",
        fld5:"floundered",
        fld6:"FAS"
      },
      {
        auto:474,
        fld1:128304,
        companynr:36,
        fld3:"assassinated",
        fld4:"circus",
        fld5:"profundity",
        fld6:"W"
      },
      {
        auto:475,
        fld1:128305,
        companynr:36,
        fld3:"labeled",
        fld4:"beetles",
        fld5:"Garrisonian",
        fld6:"W"
      },
      {
        auto:476,
        fld1:128307,
        companynr:36,
        fld3:"glacial",
        fld4:"trumps",
        fld5:"Strauss",
        fld6:""
      },
      {
        auto:477,
        fld1:128401,
        companynr:36,
        fld3:"implied",
        fld4:"fourscore",
        fld5:"cemented",
        fld6:"FAS"
      },
      {
        auto:478,
        fld1:128502,
        companynr:36,
        fld3:"bibliographies",
        fld4:"Blackfoots",
        fld5:"contrition",
        fld6:"A"
      },
      {
        auto:479,
        fld1:128503,
        companynr:36,
        fld3:"Buchanan",
        fld4:"Grady",
        fld5:"mutations",
        fld6:""
      },
      {
        auto:480,
        fld1:128504,
        companynr:36,
        fld3:"forgivably",
        fld4:"quiets",
        fld5:"exhibits",
        fld6:"W"
      },
      {
        auto:481,
        fld1:128505,
        companynr:36,
        fld3:"innuendo",
        fld4:"floundered",
        fld5:"tits",
        fld6:""
      },
      {
        auto:482,
        fld1:128601,
        companynr:36,
        fld3:"den",
        fld4:"profundity",
        fld5:"mate",
        fld6:"A"
      },
      {
        auto:483,
        fld1:128603,
        companynr:36,
        fld3:"submarines",
        fld4:"Garrisonian",
        fld5:"arches",
        fld6:""
      },
      {
        auto:484,
        fld1:128604,
        companynr:36,
        fld3:"mouthful",
        fld4:"Strauss",
        fld5:"Moll",
        fld6:""
      },
      {
        auto:485,
        fld1:128702,
        companynr:36,
        fld3:"expiring",
        fld4:"cemented",
        fld5:"ropers",
        fld6:""
      },
      {
        auto:486,
        fld1:128703,
        companynr:36,
        fld3:"unfulfilled",
        fld4:"contrition",
        fld5:"bombast",
        fld6:""
      },
      {
        auto:487,
        fld1:128704,
        companynr:36,
        fld3:"precession",
        fld4:"mutations",
        fld5:"difficultly",
        fld6:"A"
      },
      {
        auto:488,
        fld1:138001,
        companynr:36,
        fld3:"nullified",
        fld4:"exhibits",
        fld5:"adsorption",
        fld6:""
      },
      {
        auto:489,
        fld1:138002,
        companynr:36,
        fld3:"affects",
        fld4:"tits",
        fld5:"definiteness",
        fld6:"FAS"
      },
      {
        auto:490,
        fld1:138003,
        companynr:36,
        fld3:"Cynthia",
        fld4:"mate",
        fld5:"cultivation",
        fld6:"A"
      },
      {
        auto:491,
        fld1:138004,
        companynr:36,
        fld3:"Chablis",
        fld4:"arches",
        fld5:"heals",
        fld6:"A"
      },
      {
        auto:492,
        fld1:138005,
        companynr:36,
        fld3:"betterments",
        fld4:"Moll",
        fld5:"Heusen",
        fld6:"W"
      },
      {
        auto:493,
        fld1:138006,
        companynr:36,
        fld3:"advertising",
        fld4:"ropers",
        fld5:"target",
        fld6:"FAS"
      },
      {
        auto:494,
        fld1:138007,
        companynr:36,
        fld3:"rubies",
        fld4:"bombast",
        fld5:"cited",
        fld6:"A"
      },
      {
        auto:495,
        fld1:138008,
        companynr:36,
        fld3:"southwest",
        fld4:"difficultly",
        fld5:"congresswoman",
        fld6:"W"
      },
      {
        auto:496,
        fld1:138009,
        companynr:36,
        fld3:"superstitious",
        fld4:"adsorption",
        fld5:"Katherine",
        fld6:""
      },
      {
        auto:497,
        fld1:138102,
        companynr:36,
        fld3:"tabernacle",
        fld4:"definiteness",
        fld5:"titter",
        fld6:"A"
      },
      {
        auto:498,
        fld1:138103,
        companynr:36,
        fld3:"silk",
        fld4:"cultivation",
        fld5:"aspire",
        fld6:"A"
      },
      {
        auto:499,
        fld1:138104,
        companynr:36,
        fld3:"handsomest",
        fld4:"heals",
        fld5:"Mardis",
        fld6:""
      },
      {
        auto:500,
        fld1:138105,
        companynr:36,
        fld3:"Persian",
        fld4:"Heusen",
        fld5:"Nadia",
        fld6:"W"
      },
      {
        auto:501,
        fld1:138201,
        companynr:36,
        fld3:"analog",
        fld4:"target",
        fld5:"estimating",
        fld6:"FAS"
      },
      {
        auto:502,
        fld1:138302,
        companynr:36,
        fld3:"complex",
        fld4:"cited",
        fld5:"stuck",
        fld6:"A"
      },
      {
        auto:503,
        fld1:138303,
        companynr:36,
        fld3:"Taoist",
        fld4:"congresswoman",
        fld5:"fifteenth",
        fld6:"A"
      },
      {
        auto:504,
        fld1:138304,
        companynr:36,
        fld3:"suspend",
        fld4:"Katherine",
        fld5:"Colombo",
        fld6:""
      },
      {
        auto:505,
        fld1:138401,
        companynr:29,
        fld3:"relegated",
        fld4:"titter",
        fld5:"survey",
        fld6:"A"
      },
      {
        auto:506,
        fld1:140102,
        companynr:29,
        fld3:"awesome",
        fld4:"aspire",
        fld5:"staffing",
        fld6:""
      },
      {
        auto:507,
        fld1:140103,
        companynr:29,
        fld3:"Bruxelles",
        fld4:"Mardis",
        fld5:"obtain",
        fld6:""
      },
      {
        auto:508,
        fld1:140104,
        companynr:29,
        fld3:"imprecisely",
        fld4:"Nadia",
        fld5:"loaded",
        fld6:""
      },
      {
        auto:509,
        fld1:140105,
        companynr:29,
        fld3:"televise",
        fld4:"estimating",
        fld5:"slaughtered",
        fld6:""
      },
      {
        auto:510,
        fld1:140201,
        companynr:29,
        fld3:"braking",
        fld4:"stuck",
        fld5:"lights",
        fld6:"A"
      },
      {
        auto:511,
        fld1:140701,
        companynr:29,
        fld3:"true",
        fld4:"fifteenth",
        fld5:"circumference",
        fld6:""
      },
      {
        auto:512,
        fld1:141501,
        companynr:29,
        fld3:"disappointing",
        fld4:"Colombo",
        fld5:"dull",
        fld6:"A"
      },
      {
        auto:513,
        fld1:141502,
        companynr:29,
        fld3:"navally",
        fld4:"survey",
        fld5:"weekly",
        fld6:"A"
      },
      {
        auto:514,
        fld1:141901,
        companynr:29,
        fld3:"circus",
        fld4:"staffing",
        fld5:"wetness",
        fld6:""
      },
      {
        auto:515,
        fld1:141902,
        companynr:29,
        fld3:"beetles",
        fld4:"obtain",
        fld5:"visualized",
        fld6:""
      },
      {
        auto:516,
        fld1:142101,
        companynr:29,
        fld3:"trumps",
        fld4:"loaded",
        fld5:"Tannenbaum",
        fld6:""
      },
      {
        auto:517,
        fld1:142102,
        companynr:29,
        fld3:"fourscore",
        fld4:"slaughtered",
        fld5:"moribund",
        fld6:""
      },
      {
        auto:518,
        fld1:142103,
        companynr:29,
        fld3:"Blackfoots",
        fld4:"lights",
        fld5:"demultiplex",
        fld6:""
      },
      {
        auto:519,
        fld1:142701,
        companynr:29,
        fld3:"Grady",
        fld4:"circumference",
        fld5:"lockings",
        fld6:""
      },
      {
        auto:520,
        fld1:143001,
        companynr:29,
        fld3:"quiets",
        fld4:"dull",
        fld5:"thugs",
        fld6:"FAS"
      },
      {
        auto:521,
        fld1:143501,
        companynr:29,
        fld3:"floundered",
        fld4:"weekly",
        fld5:"unnerves",
        fld6:""
      },
      {
        auto:522,
        fld1:143502,
        companynr:29,
        fld3:"profundity",
        fld4:"wetness",
        fld5:"abut",
        fld6:""
      },
      {
        auto:523,
        fld1:148001,
        companynr:29,
        fld3:"Garrisonian",
        fld4:"visualized",
        fld5:"Chippewa",
        fld6:"A"
      },
      {
        auto:524,
        fld1:148002,
        companynr:29,
        fld3:"Strauss",
        fld4:"Tannenbaum",
        fld5:"stratifications",
        fld6:"A"
      },
      {
        auto:525,
        fld1:148003,
        companynr:29,
        fld3:"cemented",
        fld4:"moribund",
        fld5:"signaled",
        fld6:""
      },
      {
        auto:526,
        fld1:148004,
        companynr:29,
        fld3:"contrition",
        fld4:"demultiplex",
        fld5:"Italianizes",
        fld6:"A"
      },
      {
        auto:527,
        fld1:148005,
        companynr:29,
        fld3:"mutations",
        fld4:"lockings",
        fld5:"algorithmic",
        fld6:"A"
      },
      {
        auto:528,
        fld1:148006,
        companynr:29,
        fld3:"exhibits",
        fld4:"thugs",
        fld5:"paranoid",
        fld6:"FAS"
      },
      {
        auto:529,
        fld1:148007,
        companynr:29,
        fld3:"tits",
        fld4:"unnerves",
        fld5:"camping",
        fld6:"A"
      },
      {
        auto:530,
        fld1:148009,
        companynr:29,
        fld3:"mate",
        fld4:"abut",
        fld5:"signifying",
        fld6:"A"
      },
      {
        auto:531,
        fld1:148010,
        companynr:29,
        fld3:"arches",
        fld4:"Chippewa",
        fld5:"Patrice",
        fld6:"W"
      },
      {
        auto:532,
        fld1:148011,
        companynr:29,
        fld3:"Moll",
        fld4:"stratifications",
        fld5:"search",
        fld6:"A"
      },
      {
        auto:533,
        fld1:148012,
        companynr:29,
        fld3:"ropers",
        fld4:"signaled",
        fld5:"Angeles",
        fld6:"A"
      },
      {
        auto:534,
        fld1:148013,
        companynr:29,
        fld3:"bombast",
        fld4:"Italianizes",
        fld5:"semblance",
        fld6:""
      },
      {
        auto:535,
        fld1:148023,
        companynr:36,
        fld3:"difficultly",
        fld4:"algorithmic",
        fld5:"taxed",
        fld6:""
      },
      {
        auto:536,
        fld1:148015,
        companynr:29,
        fld3:"adsorption",
        fld4:"paranoid",
        fld5:"Beatrice",
        fld6:""
      },
      {
        auto:537,
        fld1:148016,
        companynr:29,
        fld3:"definiteness",
        fld4:"camping",
        fld5:"retrace",
        fld6:""
      },
      {
        auto:538,
        fld1:148017,
        companynr:29,
        fld3:"cultivation",
        fld4:"signifying",
        fld5:"lockout",
        fld6:""
      },
      {
        auto:539,
        fld1:148018,
        companynr:29,
        fld3:"heals",
        fld4:"Patrice",
        fld5:"grammatic",
        fld6:""
      },
      {
        auto:540,
        fld1:148019,
        companynr:29,
        fld3:"Heusen",
        fld4:"search",
        fld5:"helmsman",
        fld6:""
      },
      {
        auto:541,
        fld1:148020,
        companynr:29,
        fld3:"target",
        fld4:"Angeles",
        fld5:"uniform",
        fld6:"W"
      },
      {
        auto:542,
        fld1:148021,
        companynr:29,
        fld3:"cited",
        fld4:"semblance",
        fld5:"hamming",
        fld6:""
      },
      {
        auto:543,
        fld1:148022,
        companynr:29,
        fld3:"congresswoman",
        fld4:"taxed",
        fld5:"disobedience",
        fld6:""
      },
      {
        auto:544,
        fld1:148101,
        companynr:29,
        fld3:"Katherine",
        fld4:"Beatrice",
        fld5:"captivated",
        fld6:"A"
      },
      {
        auto:545,
        fld1:148102,
        companynr:29,
        fld3:"titter",
        fld4:"retrace",
        fld5:"transferals",
        fld6:"A"
      },
      {
        auto:546,
        fld1:148201,
        companynr:29,
        fld3:"aspire",
        fld4:"lockout",
        fld5:"cartographer",
        fld6:"A"
      },
      {
        auto:547,
        fld1:148401,
        companynr:29,
        fld3:"Mardis",
        fld4:"grammatic",
        fld5:"aims",
        fld6:"FAS"
      },
      {
        auto:548,
        fld1:148402,
        companynr:29,
        fld3:"Nadia",
        fld4:"helmsman",
        fld5:"Pakistani",
        fld6:""
      },
      {
        auto:549,
        fld1:148501,
        companynr:29,
        fld3:"estimating",
        fld4:"uniform",
        fld5:"burglarized",
        fld6:"FAS"
      },
      {
        auto:550,
        fld1:148502,
        companynr:29,
        fld3:"stuck",
        fld4:"hamming",
        fld5:"saucepans",
        fld6:"A"
      },
      {
        auto:551,
        fld1:148503,
        companynr:29,
        fld3:"fifteenth",
        fld4:"disobedience",
        fld5:"lacerating",
        fld6:"A"
      },
      {
        auto:552,
        fld1:148504,
        companynr:29,
        fld3:"Colombo",
        fld4:"captivated",
        fld5:"corny",
        fld6:""
      },
      {
        auto:553,
        fld1:148601,
        companynr:29,
        fld3:"survey",
        fld4:"transferals",
        fld5:"megabytes",
        fld6:"FAS"
      },
      {
        auto:554,
        fld1:148602,
        companynr:29,
        fld3:"staffing",
        fld4:"cartographer",
        fld5:"chancellor",
        fld6:""
      },
      {
        auto:555,
        fld1:150701,
        companynr:29,
        fld3:"obtain",
        fld4:"aims",
        fld5:"bulk",
        fld6:"A"
      },
      {
        auto:556,
        fld1:152101,
        companynr:29,
        fld3:"loaded",
        fld4:"Pakistani",
        fld5:"commits",
        fld6:"A"
      },
      {
        auto:557,
        fld1:152102,
        companynr:29,
        fld3:"slaughtered",
        fld4:"burglarized",
        fld5:"meson",
        fld6:"W"
      },
      {
        auto:558,
        fld1:155202,
        companynr:36,
        fld3:"lights",
        fld4:"saucepans",
        fld5:"deputies",
        fld6:""
      },
      {
        auto:559,
        fld1:155203,
        companynr:29,
        fld3:"circumference",
        fld4:"lacerating",
        fld5:"northeaster",
        fld6:"A"
      },
      {
        auto:560,
        fld1:155204,
        companynr:29,
        fld3:"dull",
        fld4:"corny",
        fld5:"dipole",
        fld6:""
      },
      {
        auto:561,
        fld1:155205,
        companynr:29,
        fld3:"weekly",
        fld4:"megabytes",
        fld5:"machining",
        fld6:"0"
      },
      {
        auto:562,
        fld1:156001,
        companynr:29,
        fld3:"wetness",
        fld4:"chancellor",
        fld5:"therefore",
        fld6:""
      },
      {
        auto:563,
        fld1:156002,
        companynr:29,
        fld3:"visualized",
        fld4:"bulk",
        fld5:"Telefunken",
        fld6:""
      },
      {
        auto:564,
        fld1:156102,
        companynr:29,
        fld3:"Tannenbaum",
        fld4:"commits",
        fld5:"salvaging",
        fld6:""
      },
      {
        auto:565,
        fld1:156301,
        companynr:29,
        fld3:"moribund",
        fld4:"meson",
        fld5:"Corinthianizes",
        fld6:"A"
      },
      {
        auto:566,
        fld1:156302,
        companynr:29,
        fld3:"demultiplex",
        fld4:"deputies",
        fld5:"restlessly",
        fld6:"A"
      },
      {
        auto:567,
        fld1:156303,
        companynr:29,
        fld3:"lockings",
        fld4:"northeaster",
        fld5:"bromides",
        fld6:""
      },
      {
        auto:568,
        fld1:156304,
        companynr:29,
        fld3:"thugs",
        fld4:"dipole",
        fld5:"generalized",
        fld6:"A"
      },
      {
        auto:569,
        fld1:156305,
        companynr:29,
        fld3:"unnerves",
        fld4:"machining",
        fld5:"mishaps",
        fld6:""
      },
      {
        auto:570,
        fld1:156306,
        companynr:29,
        fld3:"abut",
        fld4:"therefore",
        fld5:"quelling",
        fld6:""
      },
      {
        auto:571,
        fld1:156501,
        companynr:29,
        fld3:"Chippewa",
        fld4:"Telefunken",
        fld5:"spiritual",
        fld6:"A"
      },
      {
        auto:572,
        fld1:158001,
        companynr:29,
        fld3:"stratifications",
        fld4:"salvaging",
        fld5:"beguiles",
        fld6:"FAS"
      },
      {
        auto:573,
        fld1:158002,
        companynr:29,
        fld3:"signaled",
        fld4:"Corinthianizes",
        fld5:"Trobriand",
        fld6:"FAS"
      },
      {
        auto:574,
        fld1:158101,
        companynr:29,
        fld3:"Italianizes",
        fld4:"restlessly",
        fld5:"fleeing",
        fld6:"A"
      },
      {
        auto:575,
        fld1:158102,
        companynr:29,
        fld3:"algorithmic",
        fld4:"bromides",
        fld5:"Armour",
        fld6:"A"
      },
      {
        auto:576,
        fld1:158103,
        companynr:29,
        fld3:"paranoid",
        fld4:"generalized",
        fld5:"chin",
        fld6:"A"
      },
      {
        auto:577,
        fld1:158201,
        companynr:29,
        fld3:"camping",
        fld4:"mishaps",
        fld5:"provers",
        fld6:"A"
      },
      {
        auto:578,
        fld1:158202,
        companynr:29,
        fld3:"signifying",
        fld4:"quelling",
        fld5:"aeronautic",
        fld6:"A"
      },
      {
        auto:579,
        fld1:158203,
        companynr:29,
        fld3:"Patrice",
        fld4:"spiritual",
        fld5:"voltage",
        fld6:"W"
      },
      {
        auto:580,
        fld1:158204,
        companynr:29,
        fld3:"search",
        fld4:"beguiles",
        fld5:"sash",
        fld6:""
      },
      {
        auto:581,
        fld1:158301,
        companynr:29,
        fld3:"Angeles",
        fld4:"Trobriand",
        fld5:"anaerobic",
        fld6:"A"
      },
      {
        auto:582,
        fld1:158302,
        companynr:29,
        fld3:"semblance",
        fld4:"fleeing",
        fld5:"simultaneous",
        fld6:"A"
      },
      {
        auto:583,
        fld1:158303,
        companynr:29,
        fld3:"taxed",
        fld4:"Armour",
        fld5:"accumulating",
        fld6:"A"
      },
      {
        auto:584,
        fld1:158304,
        companynr:29,
        fld3:"Beatrice",
        fld4:"chin",
        fld5:"Medusan",
        fld6:"A"
      },
      {
        auto:585,
        fld1:158305,
        companynr:29,
        fld3:"retrace",
        fld4:"provers",
        fld5:"shouted",
        fld6:"A"
      },
      {
        auto:586,
        fld1:158306,
        companynr:29,
        fld3:"lockout",
        fld4:"aeronautic",
        fld5:"freakish",
        fld6:""
      },
      {
        auto:587,
        fld1:158501,
        companynr:29,
        fld3:"grammatic",
        fld4:"voltage",
        fld5:"index",
        fld6:"FAS"
      },
      {
        auto:588,
        fld1:160301,
        companynr:29,
        fld3:"helmsman",
        fld4:"sash",
        fld5:"commercially",
        fld6:""
      },
      {
        auto:589,
        fld1:166101,
        companynr:50,
        fld3:"uniform",
        fld4:"anaerobic",
        fld5:"mistiness",
        fld6:"A"
      },
      {
        auto:590,
        fld1:166102,
        companynr:50,
        fld3:"hamming",
        fld4:"simultaneous",
        fld5:"endpoint",
        fld6:""
      },
      {
        auto:591,
        fld1:168001,
        companynr:29,
        fld3:"disobedience",
        fld4:"accumulating",
        fld5:"straight",
        fld6:"A"
      },
      {
        auto:592,
        fld1:168002,
        companynr:29,
        fld3:"captivated",
        fld4:"Medusan",
        fld5:"flurried",
        fld6:""
      },
      {
        auto:593,
        fld1:168003,
        companynr:29,
        fld3:"transferals",
        fld4:"shouted",
        fld5:"denotative",
        fld6:"A"
      },
      {
        auto:594,
        fld1:168101,
        companynr:29,
        fld3:"cartographer",
        fld4:"freakish",
        fld5:"coming",
        fld6:"FAS"
      },
      {
        auto:595,
        fld1:168102,
        companynr:29,
        fld3:"aims",
        fld4:"index",
        fld5:"commencements",
        fld6:"FAS"
      },
      {
        auto:596,
        fld1:168103,
        companynr:29,
        fld3:"Pakistani",
        fld4:"commercially",
        fld5:"gentleman",
        fld6:""
      },
      {
        auto:597,
        fld1:168104,
        companynr:29,
        fld3:"burglarized",
        fld4:"mistiness",
        fld5:"gifted",
        fld6:""
      },
      {
        auto:598,
        fld1:168202,
        companynr:29,
        fld3:"saucepans",
        fld4:"endpoint",
        fld5:"Shanghais",
        fld6:""
      },
      {
        auto:599,
        fld1:168301,
        companynr:29,
        fld3:"lacerating",
        fld4:"straight",
        fld5:"sportswriting",
        fld6:"A"
      },
      {
        auto:600,
        fld1:168502,
        companynr:29,
        fld3:"corny",
        fld4:"flurried",
        fld5:"sloping",
        fld6:"A"
      },
      {
        auto:601,
        fld1:168503,
        companynr:29,
        fld3:"megabytes",
        fld4:"denotative",
        fld5:"navies",
        fld6:""
      },
      {
        auto:602,
        fld1:168601,
        companynr:29,
        fld3:"chancellor",
        fld4:"coming",
        fld5:"leaflet",
        fld6:"A"
      },
      {
        auto:603,
        fld1:173001,
        companynr:40,
        fld3:"bulk",
        fld4:"commencements",
        fld5:"shooter",
        fld6:""
      },
      {
        auto:604,
        fld1:173701,
        companynr:40,
        fld3:"commits",
        fld4:"gentleman",
        fld5:"Joplin",
        fld6:"FAS"
      },
      {
        auto:605,
        fld1:173702,
        companynr:40,
        fld3:"meson",
        fld4:"gifted",
        fld5:"babies",
        fld6:""
      },
      {
        auto:606,
        fld1:176001,
        companynr:40,
        fld3:"deputies",
        fld4:"Shanghais",
        fld5:"subdivision",
        fld6:"FAS"
      },
      {
        auto:607,
        fld1:176101,
        companynr:40,
        fld3:"northeaster",
        fld4:"sportswriting",
        fld5:"burstiness",
        fld6:"W"
      },
      {
        auto:608,
        fld1:176201,
        companynr:40,
        fld3:"dipole",
        fld4:"sloping",
        fld5:"belted",
        fld6:"FAS"
      },
      {
        auto:609,
        fld1:176401,
        companynr:40,
        fld3:"machining",
        fld4:"navies",
        fld5:"assails",
        fld6:"FAS"
      },
      {
        auto:610,
        fld1:176501,
        companynr:40,
        fld3:"therefore",
        fld4:"leaflet",
        fld5:"admiring",
        fld6:"W"
      },
      {
        auto:611,
        fld1:176601,
        companynr:40,
        fld3:"Telefunken",
        fld4:"shooter",
        fld5:"swaying",
        fld6:"0"
      },
      {
        auto:612,
        fld1:176602,
        companynr:40,
        fld3:"salvaging",
        fld4:"Joplin",
        fld5:"Goldstine",
        fld6:"FAS"
      },
      {
        auto:613,
        fld1:176603,
        companynr:40,
        fld3:"Corinthianizes",
        fld4:"babies",
        fld5:"fitting",
        fld6:""
      },
      {
        auto:614,
        fld1:178001,
        companynr:40,
        fld3:"restlessly",
        fld4:"subdivision",
        fld5:"Norwalk",
        fld6:"W"
      },
      {
        auto:615,
        fld1:178002,
        companynr:40,
        fld3:"bromides",
        fld4:"burstiness",
        fld5:"weakening",
        fld6:"W"
      },
      {
        auto:616,
        fld1:178003,
        companynr:40,
        fld3:"generalized",
        fld4:"belted",
        fld5:"analogy",
        fld6:"FAS"
      },
      {
        auto:617,
        fld1:178004,
        companynr:40,
        fld3:"mishaps",
        fld4:"assails",
        fld5:"deludes",
        fld6:""
      },
      {
        auto:618,
        fld1:178005,
        companynr:40,
        fld3:"quelling",
        fld4:"admiring",
        fld5:"cokes",
        fld6:""
      },
      {
        auto:619,
        fld1:178006,
        companynr:40,
        fld3:"spiritual",
        fld4:"swaying",
        fld5:"Clayton",
        fld6:""
      },
      {
        auto:620,
        fld1:178007,
        companynr:40,
        fld3:"beguiles",
        fld4:"Goldstine",
        fld5:"exhausts",
        fld6:""
      },
      {
        auto:621,
        fld1:178008,
        companynr:40,
        fld3:"Trobriand",
        fld4:"fitting",
        fld5:"causality",
        fld6:""
      },
      {
        auto:622,
        fld1:178101,
        companynr:40,
        fld3:"fleeing",
        fld4:"Norwalk",
        fld5:"sating",
        fld6:"FAS"
      },
      {
        auto:623,
        fld1:178102,
        companynr:40,
        fld3:"Armour",
        fld4:"weakening",
        fld5:"icon",
        fld6:""
      },
      {
        auto:624,
        fld1:178103,
        companynr:40,
        fld3:"chin",
        fld4:"analogy",
        fld5:"throttles",
        fld6:""
      },
      {
        auto:625,
        fld1:178201,
        companynr:40,
        fld3:"provers",
        fld4:"deludes",
        fld5:"communicants",
        fld6:"FAS"
      },
      {
        auto:626,
        fld1:178202,
        companynr:40,
        fld3:"aeronautic",
        fld4:"cokes",
        fld5:"dehydrate",
        fld6:"FAS"
      },
      {
        auto:627,
        fld1:178301,
        companynr:40,
        fld3:"voltage",
        fld4:"Clayton",
        fld5:"priceless",
        fld6:"FAS"
      },
      {
        auto:628,
        fld1:178302,
        companynr:40,
        fld3:"sash",
        fld4:"exhausts",
        fld5:"publicly",
        fld6:""
      },
      {
        auto:629,
        fld1:178401,
        companynr:40,
        fld3:"anaerobic",
        fld4:"causality",
        fld5:"incidentals",
        fld6:"FAS"
      },
      {
        auto:630,
        fld1:178402,
        companynr:40,
        fld3:"simultaneous",
        fld4:"sating",
        fld5:"commonplace",
        fld6:""
      },
      {
        auto:631,
        fld1:178403,
        companynr:40,
        fld3:"accumulating",
        fld4:"icon",
        fld5:"mumbles",
        fld6:""
      },
      {
        auto:632,
        fld1:178404,
        companynr:40,
        fld3:"Medusan",
        fld4:"throttles",
        fld5:"furthermore",
        fld6:"W"
      },
      {
        auto:633,
        fld1:178501,
        companynr:40,
        fld3:"shouted",
        fld4:"communicants",
        fld5:"cautioned",
        fld6:"W"
      },
      {
        auto:634,
        fld1:186002,
        companynr:37,
        fld3:"freakish",
        fld4:"dehydrate",
        fld5:"parametrized",
        fld6:"A"
      },
      {
        auto:635,
        fld1:186102,
        companynr:37,
        fld3:"index",
        fld4:"priceless",
        fld5:"registration",
        fld6:"A"
      },
      {
        auto:636,
        fld1:186201,
        companynr:40,
        fld3:"commercially",
        fld4:"publicly",
        fld5:"sadly",
        fld6:"FAS"
      },
      {
        auto:637,
        fld1:186202,
        companynr:40,
        fld3:"mistiness",
        fld4:"incidentals",
        fld5:"positioning",
        fld6:""
      },
      {
        auto:638,
        fld1:186203,
        companynr:40,
        fld3:"endpoint",
        fld4:"commonplace",
        fld5:"babysitting",
        fld6:""
      },
      {
        auto:639,
        fld1:186302,
        companynr:37,
        fld3:"straight",
        fld4:"mumbles",
        fld5:"eternal",
        fld6:"A"
      },
      {
        auto:640,
        fld1:188007,
        companynr:37,
        fld3:"flurried",
        fld4:"furthermore",
        fld5:"hoarder",
        fld6:""
      },
      {
        auto:641,
        fld1:188008,
        companynr:37,
        fld3:"denotative",
        fld4:"cautioned",
        fld5:"congregates",
        fld6:""
      },
      {
        auto:642,
        fld1:188009,
        companynr:37,
        fld3:"coming",
        fld4:"parametrized",
        fld5:"rains",
        fld6:""
      },
      {
        auto:643,
        fld1:188010,
        companynr:37,
        fld3:"commencements",
        fld4:"registration",
        fld5:"workers",
        fld6:"W"
      },
      {
        auto:644,
        fld1:188011,
        companynr:37,
        fld3:"gentleman",
        fld4:"sadly",
        fld5:"sags",
        fld6:"A"
      },
      {
        auto:645,
        fld1:188012,
        companynr:37,
        fld3:"gifted",
        fld4:"positioning",
        fld5:"unplug",
        fld6:"W"
      },
      {
        auto:646,
        fld1:188013,
        companynr:37,
        fld3:"Shanghais",
        fld4:"babysitting",
        fld5:"garage",
        fld6:"A"
      },
      {
        auto:647,
        fld1:188014,
        companynr:37,
        fld3:"sportswriting",
        fld4:"eternal",
        fld5:"boulder",
        fld6:"A"
      },
      {
        auto:648,
        fld1:188015,
        companynr:37,
        fld3:"sloping",
        fld4:"hoarder",
        fld5:"hollowly",
        fld6:"A"
      },
      {
        auto:649,
        fld1:188016,
        companynr:37,
        fld3:"navies",
        fld4:"congregates",
        fld5:"specifics",
        fld6:""
      },
      {
        auto:650,
        fld1:188017,
        companynr:37,
        fld3:"leaflet",
        fld4:"rains",
        fld5:"Teresa",
        fld6:""
      },
      {
        auto:651,
        fld1:188102,
        companynr:37,
        fld3:"shooter",
        fld4:"workers",
        fld5:"Winsett",
        fld6:""
      },
      {
        auto:652,
        fld1:188103,
        companynr:37,
        fld3:"Joplin",
        fld4:"sags",
        fld5:"convenient",
        fld6:"A"
      },
      {
        auto:653,
        fld1:188202,
        companynr:37,
        fld3:"babies",
        fld4:"unplug",
        fld5:"buckboards",
        fld6:"FAS"
      },
      {
        auto:654,
        fld1:188301,
        companynr:40,
        fld3:"subdivision",
        fld4:"garage",
        fld5:"amenities",
        fld6:""
      },
      {
        auto:655,
        fld1:188302,
        companynr:40,
        fld3:"burstiness",
        fld4:"boulder",
        fld5:"resplendent",
        fld6:"FAS"
      },
      {
        auto:656,
        fld1:188303,
        companynr:40,
        fld3:"belted",
        fld4:"hollowly",
        fld5:"priding",
        fld6:"FAS"
      },
      {
        auto:657,
        fld1:188401,
        companynr:37,
        fld3:"assails",
        fld4:"specifics",
        fld5:"configurations",
        fld6:""
      },
      {
        auto:658,
        fld1:188402,
        companynr:37,
        fld3:"admiring",
        fld4:"Teresa",
        fld5:"untidiness",
        fld6:"A"
      },
      {
        auto:659,
        fld1:188503,
        companynr:37,
        fld3:"swaying",
        fld4:"Winsett",
        fld5:"Brice",
        fld6:"W"
      },
      {
        auto:660,
        fld1:188504,
        companynr:37,
        fld3:"Goldstine",
        fld4:"convenient",
        fld5:"sews",
        fld6:"FAS"
      },
      {
        auto:661,
        fld1:188505,
        companynr:37,
        fld3:"fitting",
        fld4:"buckboards",
        fld5:"participated",
        fld6:""
      },
      {
        auto:662,
        fld1:190701,
        companynr:37,
        fld3:"Norwalk",
        fld4:"amenities",
        fld5:"Simon",
        fld6:"FAS"
      },
      {
        auto:663,
        fld1:190703,
        companynr:50,
        fld3:"weakening",
        fld4:"resplendent",
        fld5:"certificates",
        fld6:""
      },
      {
        auto:664,
        fld1:191701,
        companynr:37,
        fld3:"analogy",
        fld4:"priding",
        fld5:"Fitzpatrick",
        fld6:""
      },
      {
        auto:665,
        fld1:191702,
        companynr:37,
        fld3:"deludes",
        fld4:"configurations",
        fld5:"Evanston",
        fld6:"A"
      },
      {
        auto:666,
        fld1:191703,
        companynr:37,
        fld3:"cokes",
        fld4:"untidiness",
        fld5:"misted",
        fld6:""
      },
      {
        auto:667,
        fld1:196001,
        companynr:37,
        fld3:"Clayton",
        fld4:"Brice",
        fld5:"textures",
        fld6:"A"
      },
      {
        auto:668,
        fld1:196002,
        companynr:37,
        fld3:"exhausts",
        fld4:"sews",
        fld5:"save",
        fld6:""
      },
      {
        auto:669,
        fld1:196003,
        companynr:37,
        fld3:"causality",
        fld4:"participated",
        fld5:"count",
        fld6:""
      },
      {
        auto:670,
        fld1:196101,
        companynr:37,
        fld3:"sating",
        fld4:"Simon",
        fld5:"rightful",
        fld6:"A"
      },
      {
        auto:671,
        fld1:196103,
        companynr:37,
        fld3:"icon",
        fld4:"certificates",
        fld5:"chaperone",
        fld6:""
      },
      {
        auto:672,
        fld1:196104,
        companynr:37,
        fld3:"throttles",
        fld4:"Fitzpatrick",
        fld5:"Lizzy",
        fld6:"A"
      },
      {
        auto:673,
        fld1:196201,
        companynr:37,
        fld3:"communicants",
        fld4:"Evanston",
        fld5:"clenched",
        fld6:"A"
      },
      {
        auto:674,
        fld1:196202,
        companynr:37,
        fld3:"dehydrate",
        fld4:"misted",
        fld5:"effortlessly",
        fld6:""
      },
      {
        auto:675,
        fld1:196203,
        companynr:37,
        fld3:"priceless",
        fld4:"textures",
        fld5:"accessed",
        fld6:""
      },
      {
        auto:676,
        fld1:198001,
        companynr:37,
        fld3:"publicly",
        fld4:"save",
        fld5:"beaters",
        fld6:"A"
      },
      {
        auto:677,
        fld1:198003,
        companynr:37,
        fld3:"incidentals",
        fld4:"count",
        fld5:"Hornblower",
        fld6:"FAS"
      },
      {
        auto:678,
        fld1:198004,
        companynr:37,
        fld3:"commonplace",
        fld4:"rightful",
        fld5:"vests",
        fld6:"A"
      },
      {
        auto:679,
        fld1:198005,
        companynr:37,
        fld3:"mumbles",
        fld4:"chaperone",
        fld5:"indulgences",
        fld6:"FAS"
      },
      {
        auto:680,
        fld1:198006,
        companynr:37,
        fld3:"furthermore",
        fld4:"Lizzy",
        fld5:"infallibly",
        fld6:"A"
      },
      {
        auto:681,
        fld1:198007,
        companynr:37,
        fld3:"cautioned",
        fld4:"clenched",
        fld5:"unwilling",
        fld6:"FAS"
      },
      {
        auto:682,
        fld1:198008,
        companynr:37,
        fld3:"parametrized",
        fld4:"effortlessly",
        fld5:"excrete",
        fld6:"FAS"
      },
      {
        auto:683,
        fld1:198009,
        companynr:37,
        fld3:"registration",
        fld4:"accessed",
        fld5:"spools",
        fld6:"A"
      },
      {
        auto:684,
        fld1:198010,
        companynr:37,
        fld3:"sadly",
        fld4:"beaters",
        fld5:"crunches",
        fld6:"FAS"
      },
      {
        auto:685,
        fld1:198011,
        companynr:37,
        fld3:"positioning",
        fld4:"Hornblower",
        fld5:"overestimating",
        fld6:"FAS"
      },
      {
        auto:686,
        fld1:198012,
        companynr:37,
        fld3:"babysitting",
        fld4:"vests",
        fld5:"ineffective",
        fld6:""
      },
      {
        auto:687,
        fld1:198013,
        companynr:37,
        fld3:"eternal",
        fld4:"indulgences",
        fld5:"humiliation",
        fld6:"A"
      },
      {
        auto:688,
        fld1:198014,
        companynr:37,
        fld3:"hoarder",
        fld4:"infallibly",
        fld5:"sophomore",
        fld6:""
      },
      {
        auto:689,
        fld1:198015,
        companynr:37,
        fld3:"congregates",
        fld4:"unwilling",
        fld5:"star",
        fld6:""
      },
      {
        auto:690,
        fld1:198017,
        companynr:37,
        fld3:"rains",
        fld4:"excrete",
        fld5:"rifles",
        fld6:""
      },
      {
        auto:691,
        fld1:198018,
        companynr:37,
        fld3:"workers",
        fld4:"spools",
        fld5:"dialysis",
        fld6:""
      },
      {
        auto:692,
        fld1:198019,
        companynr:37,
        fld3:"sags",
        fld4:"crunches",
        fld5:"arriving",
        fld6:""
      },
      {
        auto:693,
        fld1:198020,
        companynr:37,
        fld3:"unplug",
        fld4:"overestimating",
        fld5:"indulge",
        fld6:""
      },
      {
        auto:694,
        fld1:198021,
        companynr:37,
        fld3:"garage",
        fld4:"ineffective",
        fld5:"clockers",
        fld6:""
      },
      {
        auto:695,
        fld1:198022,
        companynr:37,
        fld3:"boulder",
        fld4:"humiliation",
        fld5:"languages",
        fld6:""
      },
      {
        auto:696,
        fld1:198023,
        companynr:50,
        fld3:"hollowly",
        fld4:"sophomore",
        fld5:"Antarctica",
        fld6:"A"
      },
      {
        auto:697,
        fld1:198024,
        companynr:37,
        fld3:"specifics",
        fld4:"star",
        fld5:"percentage",
        fld6:""
      },
      {
        auto:698,
        fld1:198101,
        companynr:37,
        fld3:"Teresa",
        fld4:"rifles",
        fld5:"ceiling",
        fld6:"A"
      },
      {
        auto:699,
        fld1:198103,
        companynr:37,
        fld3:"Winsett",
        fld4:"dialysis",
        fld5:"specification",
        fld6:""
      },
      {
        auto:700,
        fld1:198105,
        companynr:37,
        fld3:"convenient",
        fld4:"arriving",
        fld5:"regimented",
        fld6:"A"
      },
      {
        auto:701,
        fld1:198106,
        companynr:37,
        fld3:"buckboards",
        fld4:"indulge",
        fld5:"ciphers",
        fld6:""
      },
      {
        auto:702,
        fld1:198201,
        companynr:37,
        fld3:"amenities",
        fld4:"clockers",
        fld5:"pictures",
        fld6:"A"
      },
      {
        auto:703,
        fld1:198204,
        companynr:37,
        fld3:"resplendent",
        fld4:"languages",
        fld5:"serpents",
        fld6:"A"
      },
      {
        auto:704,
        fld1:198301,
        companynr:53,
        fld3:"priding",
        fld4:"Antarctica",
        fld5:"allot",
        fld6:"A"
      },
      {
        auto:705,
        fld1:198302,
        companynr:53,
        fld3:"configurations",
        fld4:"percentage",
        fld5:"realized",
        fld6:"A"
      },
      {
        auto:706,
        fld1:198303,
        companynr:53,
        fld3:"untidiness",
        fld4:"ceiling",
        fld5:"mayoral",
        fld6:"A"
      },
      {
        auto:707,
        fld1:198304,
        companynr:53,
        fld3:"Brice",
        fld4:"specification",
        fld5:"opaquely",
        fld6:"A"
      },
      {
        auto:708,
        fld1:198401,
        companynr:37,
        fld3:"sews",
        fld4:"regimented",
        fld5:"hostess",
        fld6:"FAS"
      },
      {
        auto:709,
        fld1:198402,
        companynr:37,
        fld3:"participated",
        fld4:"ciphers",
        fld5:"fiftieth",
        fld6:""
      },
      {
        auto:710,
        fld1:198403,
        companynr:37,
        fld3:"Simon",
        fld4:"pictures",
        fld5:"incorrectly",
        fld6:""
      },
      {
        auto:711,
        fld1:202101,
        companynr:37,
        fld3:"certificates",
        fld4:"serpents",
        fld5:"decomposition",
        fld6:"FAS"
      },
      {
        auto:712,
        fld1:202301,
        companynr:37,
        fld3:"Fitzpatrick",
        fld4:"allot",
        fld5:"stranglings",
        fld6:""
      },
      {
        auto:713,
        fld1:202302,
        companynr:37,
        fld3:"Evanston",
        fld4:"realized",
        fld5:"mixture",
        fld6:"FAS"
      },
      {
        auto:714,
        fld1:202303,
        companynr:37,
        fld3:"misted",
        fld4:"mayoral",
        fld5:"electroencephalography",
        fld6:"FAS"
      },
      {
        auto:715,
        fld1:202304,
        companynr:37,
        fld3:"textures",
        fld4:"opaquely",
        fld5:"similarities",
        fld6:"FAS"
      },
      {
        auto:716,
        fld1:202305,
        companynr:37,
        fld3:"save",
        fld4:"hostess",
        fld5:"charges",
        fld6:"W"
      },
      {
        auto:717,
        fld1:202601,
        companynr:37,
        fld3:"count",
        fld4:"fiftieth",
        fld5:"freest",
        fld6:"FAS"
      },
      {
        auto:718,
        fld1:202602,
        companynr:37,
        fld3:"rightful",
        fld4:"incorrectly",
        fld5:"Greenberg",
        fld6:"FAS"
      },
      {
        auto:719,
        fld1:202605,
        companynr:37,
        fld3:"chaperone",
        fld4:"decomposition",
        fld5:"tinting",
        fld6:""
      },
      {
        auto:720,
        fld1:202606,
        companynr:37,
        fld3:"Lizzy",
        fld4:"stranglings",
        fld5:"expelled",
        fld6:"W"
      },
      {
        auto:721,
        fld1:202607,
        companynr:37,
        fld3:"clenched",
        fld4:"mixture",
        fld5:"warm",
        fld6:""
      },
      {
        auto:722,
        fld1:202901,
        companynr:37,
        fld3:"effortlessly",
        fld4:"electroencephalography",
        fld5:"smoothed",
        fld6:""
      },
      {
        auto:723,
        fld1:202902,
        companynr:37,
        fld3:"accessed",
        fld4:"similarities",
        fld5:"deductions",
        fld6:"FAS"
      },
      {
        auto:724,
        fld1:202903,
        companynr:37,
        fld3:"beaters",
        fld4:"charges",
        fld5:"Romano",
        fld6:"W"
      },
      {
        auto:725,
        fld1:202904,
        companynr:37,
        fld3:"Hornblower",
        fld4:"freest",
        fld5:"bitterroot",
        fld6:""
      },
      {
        auto:726,
        fld1:202907,
        companynr:37,
        fld3:"vests",
        fld4:"Greenberg",
        fld5:"corset",
        fld6:""
      },
      {
        auto:727,
        fld1:202908,
        companynr:37,
        fld3:"indulgences",
        fld4:"tinting",
        fld5:"securing",
        fld6:""
      },
      {
        auto:728,
        fld1:203101,
        companynr:37,
        fld3:"infallibly",
        fld4:"expelled",
        fld5:"environing",
        fld6:"FAS"
      },
      {
        auto:729,
        fld1:203103,
        companynr:37,
        fld3:"unwilling",
        fld4:"warm",
        fld5:"cute",
        fld6:""
      },
      {
        auto:730,
        fld1:203104,
        companynr:37,
        fld3:"excrete",
        fld4:"smoothed",
        fld5:"Crays",
        fld6:""
      },
      {
        auto:731,
        fld1:203105,
        companynr:37,
        fld3:"spools",
        fld4:"deductions",
        fld5:"heiress",
        fld6:"FAS"
      },
      {
        auto:732,
        fld1:203401,
        companynr:37,
        fld3:"crunches",
        fld4:"Romano",
        fld5:"inform",
        fld6:"FAS"
      },
      {
        auto:733,
        fld1:203402,
        companynr:37,
        fld3:"overestimating",
        fld4:"bitterroot",
        fld5:"avenge",
        fld6:""
      },
      {
        auto:734,
        fld1:203404,
        companynr:37,
        fld3:"ineffective",
        fld4:"corset",
        fld5:"universals",
        fld6:""
      },
      {
        auto:735,
        fld1:203901,
        companynr:37,
        fld3:"humiliation",
        fld4:"securing",
        fld5:"Kinsey",
        fld6:"W"
      },
      {
        auto:736,
        fld1:203902,
        companynr:37,
        fld3:"sophomore",
        fld4:"environing",
        fld5:"ravines",
        fld6:"FAS"
      },
      {
        auto:737,
        fld1:203903,
        companynr:37,
        fld3:"star",
        fld4:"cute",
        fld5:"bestseller",
        fld6:""
      },
      {
        auto:738,
        fld1:203906,
        companynr:37,
        fld3:"rifles",
        fld4:"Crays",
        fld5:"equilibrium",
        fld6:""
      },
      {
        auto:739,
        fld1:203907,
        companynr:37,
        fld3:"dialysis",
        fld4:"heiress",
        fld5:"extents",
        fld6:"0"
      },
      {
        auto:740,
        fld1:203908,
        companynr:37,
        fld3:"arriving",
        fld4:"inform",
        fld5:"relatively",
        fld6:""
      },
      {
        auto:741,
        fld1:203909,
        companynr:37,
        fld3:"indulge",
        fld4:"avenge",
        fld5:"pressure",
        fld6:"FAS"
      },
      {
        auto:742,
        fld1:206101,
        companynr:37,
        fld3:"clockers",
        fld4:"universals",
        fld5:"critiques",
        fld6:"FAS"
      },
      {
        auto:743,
        fld1:206201,
        companynr:37,
        fld3:"languages",
        fld4:"Kinsey",
        fld5:"befouled",
        fld6:""
      },
      {
        auto:744,
        fld1:206202,
        companynr:37,
        fld3:"Antarctica",
        fld4:"ravines",
        fld5:"rightfully",
        fld6:"FAS"
      },
      {
        auto:745,
        fld1:206203,
        companynr:37,
        fld3:"percentage",
        fld4:"bestseller",
        fld5:"mechanizing",
        fld6:"FAS"
      },
      {
        auto:746,
        fld1:206206,
        companynr:37,
        fld3:"ceiling",
        fld4:"equilibrium",
        fld5:"Latinizes",
        fld6:""
      },
      {
        auto:747,
        fld1:206207,
        companynr:37,
        fld3:"specification",
        fld4:"extents",
        fld5:"timesharing",
        fld6:""
      },
      {
        auto:748,
        fld1:206208,
        companynr:37,
        fld3:"regimented",
        fld4:"relatively",
        fld5:"Aden",
        fld6:""
      },
      {
        auto:749,
        fld1:208001,
        companynr:37,
        fld3:"ciphers",
        fld4:"pressure",
        fld5:"embassies",
        fld6:""
      },
      {
        auto:750,
        fld1:208002,
        companynr:37,
        fld3:"pictures",
        fld4:"critiques",
        fld5:"males",
        fld6:"FAS"
      },
      {
        auto:751,
        fld1:208003,
        companynr:37,
        fld3:"serpents",
        fld4:"befouled",
        fld5:"shapelessly",
        fld6:"FAS"
      },
      {
        auto:752,
        fld1:208004,
        companynr:37,
        fld3:"allot",
        fld4:"rightfully",
        fld5:"genres",
        fld6:"FAS"
      },
      {
        auto:753,
        fld1:208008,
        companynr:37,
        fld3:"realized",
        fld4:"mechanizing",
        fld5:"mastering",
        fld6:""
      },
      {
        auto:754,
        fld1:208009,
        companynr:37,
        fld3:"mayoral",
        fld4:"Latinizes",
        fld5:"Newtonian",
        fld6:""
      },
      {
        auto:755,
        fld1:208010,
        companynr:37,
        fld3:"opaquely",
        fld4:"timesharing",
        fld5:"finishers",
        fld6:"FAS"
      },
      {
        auto:756,
        fld1:208011,
        companynr:37,
        fld3:"hostess",
        fld4:"Aden",
        fld5:"abates",
        fld6:""
      },
      {
        auto:757,
        fld1:208101,
        companynr:37,
        fld3:"fiftieth",
        fld4:"embassies",
        fld5:"teem",
        fld6:""
      },
      {
        auto:758,
        fld1:208102,
        companynr:37,
        fld3:"incorrectly",
        fld4:"males",
        fld5:"kiting",
        fld6:"FAS"
      },
      {
        auto:759,
        fld1:208103,
        companynr:37,
        fld3:"decomposition",
        fld4:"shapelessly",
        fld5:"stodgy",
        fld6:"FAS"
      },
      {
        auto:760,
        fld1:208104,
        companynr:37,
        fld3:"stranglings",
        fld4:"genres",
        fld5:"scalps",
        fld6:"FAS"
      },
      {
        auto:761,
        fld1:208105,
        companynr:37,
        fld3:"mixture",
        fld4:"mastering",
        fld5:"feed",
        fld6:"FAS"
      },
      {
        auto:762,
        fld1:208110,
        companynr:37,
        fld3:"electroencephalography",
        fld4:"Newtonian",
        fld5:"guitars",
        fld6:""
      },
      {
        auto:763,
        fld1:208111,
        companynr:37,
        fld3:"similarities",
        fld4:"finishers",
        fld5:"airships",
        fld6:""
      },
      {
        auto:764,
        fld1:208112,
        companynr:37,
        fld3:"charges",
        fld4:"abates",
        fld5:"store",
        fld6:""
      },
      {
        auto:765,
        fld1:208113,
        companynr:37,
        fld3:"freest",
        fld4:"teem",
        fld5:"denounces",
        fld6:""
      },
      {
        auto:766,
        fld1:208201,
        companynr:37,
        fld3:"Greenberg",
        fld4:"kiting",
        fld5:"Pyle",
        fld6:"FAS"
      },
      {
        auto:767,
        fld1:208203,
        companynr:37,
        fld3:"tinting",
        fld4:"stodgy",
        fld5:"Saxony",
        fld6:""
      },
      {
        auto:768,
        fld1:208301,
        companynr:37,
        fld3:"expelled",
        fld4:"scalps",
        fld5:"serializations",
        fld6:"FAS"
      },
      {
        auto:769,
        fld1:208302,
        companynr:37,
        fld3:"warm",
        fld4:"feed",
        fld5:"Peruvian",
        fld6:"FAS"
      },
      {
        auto:770,
        fld1:208305,
        companynr:37,
        fld3:"smoothed",
        fld4:"guitars",
        fld5:"taxonomically",
        fld6:"FAS"
      },
      {
        auto:771,
        fld1:208401,
        companynr:37,
        fld3:"deductions",
        fld4:"airships",
        fld5:"kingdom",
        fld6:"A"
      },
      {
        auto:772,
        fld1:208402,
        companynr:37,
        fld3:"Romano",
        fld4:"store",
        fld5:"stint",
        fld6:"A"
      },
      {
        auto:773,
        fld1:208403,
        companynr:37,
        fld3:"bitterroot",
        fld4:"denounces",
        fld5:"Sault",
        fld6:"A"
      },
      {
        auto:774,
        fld1:208404,
        companynr:37,
        fld3:"corset",
        fld4:"Pyle",
        fld5:"faithful",
        fld6:""
      },
      {
        auto:775,
        fld1:208501,
        companynr:37,
        fld3:"securing",
        fld4:"Saxony",
        fld5:"Ganymede",
        fld6:"FAS"
      },
      {
        auto:776,
        fld1:208502,
        companynr:37,
        fld3:"environing",
        fld4:"serializations",
        fld5:"tidiness",
        fld6:"FAS"
      },
      {
        auto:777,
        fld1:208503,
        companynr:37,
        fld3:"cute",
        fld4:"Peruvian",
        fld5:"gainful",
        fld6:"FAS"
      },
      {
        auto:778,
        fld1:208504,
        companynr:37,
        fld3:"Crays",
        fld4:"taxonomically",
        fld5:"contrary",
        fld6:"FAS"
      },
      {
        auto:779,
        fld1:208505,
        companynr:37,
        fld3:"heiress",
        fld4:"kingdom",
        fld5:"Tipperary",
        fld6:"FAS"
      },
      {
        auto:780,
        fld1:210101,
        companynr:37,
        fld3:"inform",
        fld4:"stint",
        fld5:"tropics",
        fld6:"W"
      },
      {
        auto:781,
        fld1:210102,
        companynr:37,
        fld3:"avenge",
        fld4:"Sault",
        fld5:"theorizers",
        fld6:""
      },
      {
        auto:782,
        fld1:210103,
        companynr:37,
        fld3:"universals",
        fld4:"faithful",
        fld5:"renew",
        fld6:"0"
      },
      {
        auto:783,
        fld1:210104,
        companynr:37,
        fld3:"Kinsey",
        fld4:"Ganymede",
        fld5:"already",
        fld6:""
      },
      {
        auto:784,
        fld1:210105,
        companynr:37,
        fld3:"ravines",
        fld4:"tidiness",
        fld5:"terminal",
        fld6:""
      },
      {
        auto:785,
        fld1:210106,
        companynr:37,
        fld3:"bestseller",
        fld4:"gainful",
        fld5:"Hegelian",
        fld6:""
      },
      {
        auto:786,
        fld1:210107,
        companynr:37,
        fld3:"equilibrium",
        fld4:"contrary",
        fld5:"hypothesizer",
        fld6:""
      },
      {
        auto:787,
        fld1:210401,
        companynr:37,
        fld3:"extents",
        fld4:"Tipperary",
        fld5:"warningly",
        fld6:"FAS"
      },
      {
        auto:788,
        fld1:213201,
        companynr:37,
        fld3:"relatively",
        fld4:"tropics",
        fld5:"journalizing",
        fld6:"FAS"
      },
      {
        auto:789,
        fld1:213203,
        companynr:37,
        fld3:"pressure",
        fld4:"theorizers",
        fld5:"nested",
        fld6:""
      },
      {
        auto:790,
        fld1:213204,
        companynr:37,
        fld3:"critiques",
        fld4:"renew",
        fld5:"Lars",
        fld6:""
      },
      {
        auto:791,
        fld1:213205,
        companynr:37,
        fld3:"befouled",
        fld4:"already",
        fld5:"saplings",
        fld6:""
      },
      {
        auto:792,
        fld1:213206,
        companynr:37,
        fld3:"rightfully",
        fld4:"terminal",
        fld5:"foothill",
        fld6:""
      },
      {
        auto:793,
        fld1:213207,
        companynr:37,
        fld3:"mechanizing",
        fld4:"Hegelian",
        fld5:"labeled",
        fld6:""
      },
      {
        auto:794,
        fld1:216101,
        companynr:37,
        fld3:"Latinizes",
        fld4:"hypothesizer",
        fld5:"imperiously",
        fld6:"FAS"
      },
      {
        auto:795,
        fld1:216103,
        companynr:37,
        fld3:"timesharing",
        fld4:"warningly",
        fld5:"reporters",
        fld6:"FAS"
      },
      {
        auto:796,
        fld1:218001,
        companynr:37,
        fld3:"Aden",
        fld4:"journalizing",
        fld5:"furnishings",
        fld6:"FAS"
      },
      {
        auto:797,
        fld1:218002,
        companynr:37,
        fld3:"embassies",
        fld4:"nested",
        fld5:"precipitable",
        fld6:"FAS"
      },
      {
        auto:798,
        fld1:218003,
        companynr:37,
        fld3:"males",
        fld4:"Lars",
        fld5:"discounts",
        fld6:"FAS"
      },
      {
        auto:799,
        fld1:218004,
        companynr:37,
        fld3:"shapelessly",
        fld4:"saplings",
        fld5:"excises",
        fld6:"FAS"
      },
      {
        auto:800,
        fld1:143503,
        companynr:50,
        fld3:"genres",
        fld4:"foothill",
        fld5:"Stalin",
        fld6:""
      },
      {
        auto:801,
        fld1:218006,
        companynr:37,
        fld3:"mastering",
        fld4:"labeled",
        fld5:"despot",
        fld6:"FAS"
      },
      {
        auto:802,
        fld1:218007,
        companynr:37,
        fld3:"Newtonian",
        fld4:"imperiously",
        fld5:"ripeness",
        fld6:"FAS"
      },
      {
        auto:803,
        fld1:218008,
        companynr:37,
        fld3:"finishers",
        fld4:"reporters",
        fld5:"Arabia",
        fld6:""
      },
      {
        auto:804,
        fld1:218009,
        companynr:37,
        fld3:"abates",
        fld4:"furnishings",
        fld5:"unruly",
        fld6:""
      },
      {
        auto:805,
        fld1:218010,
        companynr:37,
        fld3:"teem",
        fld4:"precipitable",
        fld5:"mournfulness",
        fld6:""
      },
      {
        auto:806,
        fld1:218011,
        companynr:37,
        fld3:"kiting",
        fld4:"discounts",
        fld5:"boom",
        fld6:"FAS"
      },
      {
        auto:807,
        fld1:218020,
        companynr:37,
        fld3:"stodgy",
        fld4:"excises",
        fld5:"slaughter",
        fld6:"A"
      },
      {
        auto:808,
        fld1:218021,
        companynr:50,
        fld3:"scalps",
        fld4:"Stalin",
        fld5:"Sabine",
        fld6:""
      },
      {
        auto:809,
        fld1:218022,
        companynr:37,
        fld3:"feed",
        fld4:"despot",
        fld5:"handy",
        fld6:"FAS"
      },
      {
        auto:810,
        fld1:218023,
        companynr:37,
        fld3:"guitars",
        fld4:"ripeness",
        fld5:"rural",
        fld6:""
      },
      {
        auto:811,
        fld1:218024,
        companynr:37,
        fld3:"airships",
        fld4:"Arabia",
        fld5:"organizer",
        fld6:""
      },
      {
        auto:812,
        fld1:218101,
        companynr:37,
        fld3:"store",
        fld4:"unruly",
        fld5:"shipyard",
        fld6:"FAS"
      },
      {
        auto:813,
        fld1:218102,
        companynr:37,
        fld3:"denounces",
        fld4:"mournfulness",
        fld5:"civics",
        fld6:"FAS"
      },
      {
        auto:814,
        fld1:218103,
        companynr:37,
        fld3:"Pyle",
        fld4:"boom",
        fld5:"inaccuracy",
        fld6:"FAS"
      },
      {
        auto:815,
        fld1:218201,
        companynr:37,
        fld3:"Saxony",
        fld4:"slaughter",
        fld5:"rules",
        fld6:"FAS"
      },
      {
        auto:816,
        fld1:218202,
        companynr:37,
        fld3:"serializations",
        fld4:"Sabine",
        fld5:"juveniles",
        fld6:"FAS"
      },
      {
        auto:817,
        fld1:218203,
        companynr:37,
        fld3:"Peruvian",
        fld4:"handy",
        fld5:"comprised",
        fld6:"W"
      },
      {
        auto:818,
        fld1:218204,
        companynr:37,
        fld3:"taxonomically",
        fld4:"rural",
        fld5:"investigations",
        fld6:""
      },
      {
        auto:819,
        fld1:218205,
        companynr:37,
        fld3:"kingdom",
        fld4:"organizer",
        fld5:"stabilizes",
        fld6:"A"
      },
      {
        auto:820,
        fld1:218301,
        companynr:37,
        fld3:"stint",
        fld4:"shipyard",
        fld5:"seminaries",
        fld6:"FAS"
      },
      {
        auto:821,
        fld1:218302,
        companynr:37,
        fld3:"Sault",
        fld4:"civics",
        fld5:"Hunter",
        fld6:"A"
      },
      {
        auto:822,
        fld1:218401,
        companynr:37,
        fld3:"faithful",
        fld4:"inaccuracy",
        fld5:"sporty",
        fld6:"FAS"
      },
      {
        auto:823,
        fld1:218402,
        companynr:37,
        fld3:"Ganymede",
        fld4:"rules",
        fld5:"test",
        fld6:"FAS"
      },
      {
        auto:824,
        fld1:218403,
        companynr:37,
        fld3:"tidiness",
        fld4:"juveniles",
        fld5:"weasels",
        fld6:""
      },
      {
        auto:825,
        fld1:218404,
        companynr:37,
        fld3:"gainful",
        fld4:"comprised",
        fld5:"CERN",
        fld6:""
      },
      {
        auto:826,
        fld1:218407,
        companynr:37,
        fld3:"contrary",
        fld4:"investigations",
        fld5:"tempering",
        fld6:""
      },
      {
        auto:827,
        fld1:218408,
        companynr:37,
        fld3:"Tipperary",
        fld4:"stabilizes",
        fld5:"afore",
        fld6:"FAS"
      },
      {
        auto:828,
        fld1:218409,
        companynr:37,
        fld3:"tropics",
        fld4:"seminaries",
        fld5:"Galatean",
        fld6:""
      },
      {
        auto:829,
        fld1:218410,
        companynr:37,
        fld3:"theorizers",
        fld4:"Hunter",
        fld5:"techniques",
        fld6:"W"
      },
      {
        auto:830,
        fld1:226001,
        companynr:37,
        fld3:"renew",
        fld4:"sporty",
        fld5:"error",
        fld6:""
      },
      {
        auto:831,
        fld1:226002,
        companynr:37,
        fld3:"already",
        fld4:"test",
        fld5:"veranda",
        fld6:""
      },
      {
        auto:832,
        fld1:226003,
        companynr:37,
        fld3:"terminal",
        fld4:"weasels",
        fld5:"severely",
        fld6:""
      },
      {
        auto:833,
        fld1:226004,
        companynr:37,
        fld3:"Hegelian",
        fld4:"CERN",
        fld5:"Cassites",
        fld6:"FAS"
      },
      {
        auto:834,
        fld1:226005,
        companynr:37,
        fld3:"hypothesizer",
        fld4:"tempering",
        fld5:"forthcoming",
        fld6:""
      },
      {
        auto:835,
        fld1:226006,
        companynr:37,
        fld3:"warningly",
        fld4:"afore",
        fld5:"guides",
        fld6:""
      },
      {
        auto:836,
        fld1:226007,
        companynr:37,
        fld3:"journalizing",
        fld4:"Galatean",
        fld5:"vanish",
        fld6:"FAS"
      },
      {
        auto:837,
        fld1:226008,
        companynr:37,
        fld3:"nested",
        fld4:"techniques",
        fld5:"lied",
        fld6:"A"
      },
      {
        auto:838,
        fld1:226203,
        companynr:37,
        fld3:"Lars",
        fld4:"error",
        fld5:"sawtooth",
        fld6:"FAS"
      },
      {
        auto:839,
        fld1:226204,
        companynr:37,
        fld3:"saplings",
        fld4:"veranda",
        fld5:"fated",
        fld6:"FAS"
      },
      {
        auto:840,
        fld1:226205,
        companynr:37,
        fld3:"foothill",
        fld4:"severely",
        fld5:"gradually",
        fld6:""
      },
      {
        auto:841,
        fld1:226206,
        companynr:37,
        fld3:"labeled",
        fld4:"Cassites",
        fld5:"widens",
        fld6:""
      },
      {
        auto:842,
        fld1:226207,
        companynr:37,
        fld3:"imperiously",
        fld4:"forthcoming",
        fld5:"preclude",
        fld6:""
      },
      {
        auto:843,
        fld1:226208,
        companynr:37,
        fld3:"reporters",
        fld4:"guides",
        fld5:"Jobrel",
        fld6:""
      },
      {
        auto:844,
        fld1:226209,
        companynr:37,
        fld3:"furnishings",
        fld4:"vanish",
        fld5:"hooker",
        fld6:""
      },
      {
        auto:845,
        fld1:226210,
        companynr:37,
        fld3:"precipitable",
        fld4:"lied",
        fld5:"rainstorm",
        fld6:""
      },
      {
        auto:846,
        fld1:226211,
        companynr:37,
        fld3:"discounts",
        fld4:"sawtooth",
        fld5:"disconnects",
        fld6:""
      },
      {
        auto:847,
        fld1:228001,
        companynr:37,
        fld3:"excises",
        fld4:"fated",
        fld5:"cruelty",
        fld6:""
      },
      {
        auto:848,
        fld1:228004,
        companynr:37,
        fld3:"Stalin",
        fld4:"gradually",
        fld5:"exponentials",
        fld6:"A"
      },
      {
        auto:849,
        fld1:228005,
        companynr:37,
        fld3:"despot",
        fld4:"widens",
        fld5:"affective",
        fld6:"A"
      },
      {
        auto:850,
        fld1:228006,
        companynr:37,
        fld3:"ripeness",
        fld4:"preclude",
        fld5:"arteries",
        fld6:""
      },
      {
        auto:851,
        fld1:228007,
        companynr:37,
        fld3:"Arabia",
        fld4:"Jobrel",
        fld5:"Crosby",
        fld6:"FAS"
      },
      {
        auto:852,
        fld1:228008,
        companynr:37,
        fld3:"unruly",
        fld4:"hooker",
        fld5:"acquaint",
        fld6:""
      },
      {
        auto:853,
        fld1:228009,
        companynr:37,
        fld3:"mournfulness",
        fld4:"rainstorm",
        fld5:"evenhandedly",
        fld6:""
      },
      {
        auto:854,
        fld1:228101,
        companynr:37,
        fld3:"boom",
        fld4:"disconnects",
        fld5:"percentage",
        fld6:""
      },
      {
        auto:855,
        fld1:228108,
        companynr:37,
        fld3:"slaughter",
        fld4:"cruelty",
        fld5:"disobedience",
        fld6:""
      },
      {
        auto:856,
        fld1:228109,
        companynr:37,
        fld3:"Sabine",
        fld4:"exponentials",
        fld5:"humility",
        fld6:""
      },
      {
        auto:857,
        fld1:228110,
        companynr:37,
        fld3:"handy",
        fld4:"affective",
        fld5:"gleaning",
        fld6:"A"
      },
      {
        auto:858,
        fld1:228111,
        companynr:37,
        fld3:"rural",
        fld4:"arteries",
        fld5:"petted",
        fld6:"A"
      },
      {
        auto:859,
        fld1:228112,
        companynr:37,
        fld3:"organizer",
        fld4:"Crosby",
        fld5:"bloater",
        fld6:"A"
      },
      {
        auto:860,
        fld1:228113,
        companynr:37,
        fld3:"shipyard",
        fld4:"acquaint",
        fld5:"minion",
        fld6:"A"
      },
      {
        auto:861,
        fld1:228114,
        companynr:37,
        fld3:"civics",
        fld4:"evenhandedly",
        fld5:"marginal",
        fld6:"A"
      },
      {
        auto:862,
        fld1:228115,
        companynr:37,
        fld3:"inaccuracy",
        fld4:"percentage",
        fld5:"apiary",
        fld6:"A"
      },
      {
        auto:863,
        fld1:228116,
        companynr:37,
        fld3:"rules",
        fld4:"disobedience",
        fld5:"measures",
        fld6:""
      },
      {
        auto:864,
        fld1:228117,
        companynr:37,
        fld3:"juveniles",
        fld4:"humility",
        fld5:"precaution",
        fld6:""
      },
      {
        auto:865,
        fld1:228118,
        companynr:37,
        fld3:"comprised",
        fld4:"gleaning",
        fld5:"repelled",
        fld6:""
      },
      {
        auto:866,
        fld1:228119,
        companynr:37,
        fld3:"investigations",
        fld4:"petted",
        fld5:"primary",
        fld6:"FAS"
      },
      {
        auto:867,
        fld1:228120,
        companynr:37,
        fld3:"stabilizes",
        fld4:"bloater",
        fld5:"coverings",
        fld6:""
      },
      {
        auto:868,
        fld1:228121,
        companynr:37,
        fld3:"seminaries",
        fld4:"minion",
        fld5:"Artemia",
        fld6:"A"
      },
      {
        auto:869,
        fld1:228122,
        companynr:37,
        fld3:"Hunter",
        fld4:"marginal",
        fld5:"navigate",
        fld6:""
      },
      {
        auto:870,
        fld1:228201,
        companynr:37,
        fld3:"sporty",
        fld4:"apiary",
        fld5:"spatial",
        fld6:""
      },
      {
        auto:871,
        fld1:228206,
        companynr:37,
        fld3:"test",
        fld4:"measures",
        fld5:"Gurkha",
        fld6:""
      },
      {
        auto:872,
        fld1:228207,
        companynr:37,
        fld3:"weasels",
        fld4:"precaution",
        fld5:"meanwhile",
        fld6:"A"
      },
      {
        auto:873,
        fld1:228208,
        companynr:37,
        fld3:"CERN",
        fld4:"repelled",
        fld5:"Melinda",
        fld6:"A"
      },
      {
        auto:874,
        fld1:228209,
        companynr:37,
        fld3:"tempering",
        fld4:"primary",
        fld5:"Butterfield",
        fld6:""
      },
      {
        auto:875,
        fld1:228210,
        companynr:37,
        fld3:"afore",
        fld4:"coverings",
        fld5:"Aldrich",
        fld6:"A"
      },
      {
        auto:876,
        fld1:228211,
        companynr:37,
        fld3:"Galatean",
        fld4:"Artemia",
        fld5:"previewing",
        fld6:"A"
      },
      {
        auto:877,
        fld1:228212,
        companynr:37,
        fld3:"techniques",
        fld4:"navigate",
        fld5:"glut",
        fld6:"A"
      },
      {
        auto:878,
        fld1:228213,
        companynr:37,
        fld3:"error",
        fld4:"spatial",
        fld5:"unaffected",
        fld6:""
      },
      {
        auto:879,
        fld1:228214,
        companynr:37,
        fld3:"veranda",
        fld4:"Gurkha",
        fld5:"inmate",
        fld6:""
      },
      {
        auto:880,
        fld1:228301,
        companynr:37,
        fld3:"severely",
        fld4:"meanwhile",
        fld5:"mineral",
        fld6:""
      },
      {
        auto:881,
        fld1:228305,
        companynr:37,
        fld3:"Cassites",
        fld4:"Melinda",
        fld5:"impending",
        fld6:"A"
      },
      {
        auto:882,
        fld1:228306,
        companynr:37,
        fld3:"forthcoming",
        fld4:"Butterfield",
        fld5:"meditation",
        fld6:"A"
      },
      {
        auto:883,
        fld1:228307,
        companynr:37,
        fld3:"guides",
        fld4:"Aldrich",
        fld5:"ideas",
        fld6:""
      },
      {
        auto:884,
        fld1:228308,
        companynr:37,
        fld3:"vanish",
        fld4:"previewing",
        fld5:"miniaturizes",
        fld6:"W"
      },
      {
        auto:885,
        fld1:228309,
        companynr:37,
        fld3:"lied",
        fld4:"glut",
        fld5:"lewdly",
        fld6:""
      },
      {
        auto:886,
        fld1:228310,
        companynr:37,
        fld3:"sawtooth",
        fld4:"unaffected",
        fld5:"title",
        fld6:""
      },
      {
        auto:887,
        fld1:228311,
        companynr:37,
        fld3:"fated",
        fld4:"inmate",
        fld5:"youthfulness",
        fld6:""
      },
      {
        auto:888,
        fld1:228312,
        companynr:37,
        fld3:"gradually",
        fld4:"mineral",
        fld5:"creak",
        fld6:"FAS"
      },
      {
        auto:889,
        fld1:228313,
        companynr:37,
        fld3:"widens",
        fld4:"impending",
        fld5:"Chippewa",
        fld6:""
      },
      {
        auto:890,
        fld1:228314,
        companynr:37,
        fld3:"preclude",
        fld4:"meditation",
        fld5:"clamored",
        fld6:""
      },
      {
        auto:891,
        fld1:228401,
        companynr:65,
        fld3:"Jobrel",
        fld4:"ideas",
        fld5:"freezes",
        fld6:""
      },
      {
        auto:892,
        fld1:228402,
        companynr:65,
        fld3:"hooker",
        fld4:"miniaturizes",
        fld5:"forgivably",
        fld6:"FAS"
      },
      {
        auto:893,
        fld1:228403,
        companynr:65,
        fld3:"rainstorm",
        fld4:"lewdly",
        fld5:"reduce",
        fld6:"FAS"
      },
      {
        auto:894,
        fld1:228404,
        companynr:65,
        fld3:"disconnects",
        fld4:"title",
        fld5:"McGovern",
        fld6:"W"
      },
      {
        auto:895,
        fld1:228405,
        companynr:65,
        fld3:"cruelty",
        fld4:"youthfulness",
        fld5:"Nazis",
        fld6:"W"
      },
      {
        auto:896,
        fld1:228406,
        companynr:65,
        fld3:"exponentials",
        fld4:"creak",
        fld5:"epistle",
        fld6:"W"
      },
      {
        auto:897,
        fld1:228407,
        companynr:65,
        fld3:"affective",
        fld4:"Chippewa",
        fld5:"socializes",
        fld6:"W"
      },
      {
        auto:898,
        fld1:228408,
        companynr:65,
        fld3:"arteries",
        fld4:"clamored",
        fld5:"conceptions",
        fld6:""
      },
      {
        auto:899,
        fld1:228409,
        companynr:65,
        fld3:"Crosby",
        fld4:"freezes",
        fld5:"Kevin",
        fld6:""
      },
      {
        auto:900,
        fld1:228410,
        companynr:65,
        fld3:"acquaint",
        fld4:"forgivably",
        fld5:"uncovering",
        fld6:""
      },
      {
        auto:901,
        fld1:230301,
        companynr:37,
        fld3:"evenhandedly",
        fld4:"reduce",
        fld5:"chews",
        fld6:"FAS"
      },
      {
        auto:902,
        fld1:230302,
        companynr:37,
        fld3:"percentage",
        fld4:"McGovern",
        fld5:"appendixes",
        fld6:"FAS"
      },
      {
        auto:903,
        fld1:230303,
        companynr:37,
        fld3:"disobedience",
        fld4:"Nazis",
        fld5:"raining",
        fld6:""
      },
      {
        auto:904,
        fld1:18062,
        companynr:37,
        fld3:"humility",
        fld4:"epistle",
        fld5:"infest",
        fld6:""
      },
      {
        auto:905,
        fld1:230501,
        companynr:37,
        fld3:"gleaning",
        fld4:"socializes",
        fld5:"compartment",
        fld6:""
      },
      {
        auto:906,
        fld1:230502,
        companynr:37,
        fld3:"petted",
        fld4:"conceptions",
        fld5:"minting",
        fld6:""
      },
      {
        auto:907,
        fld1:230503,
        companynr:37,
        fld3:"bloater",
        fld4:"Kevin",
        fld5:"ducks",
        fld6:""
      },
      {
        auto:908,
        fld1:230504,
        companynr:37,
        fld3:"minion",
        fld4:"uncovering",
        fld5:"roped",
        fld6:"A"
      },
      {
        auto:909,
        fld1:230505,
        companynr:37,
        fld3:"marginal",
        fld4:"chews",
        fld5:"waltz",
        fld6:""
      },
      {
        auto:910,
        fld1:230506,
        companynr:37,
        fld3:"apiary",
        fld4:"appendixes",
        fld5:"Lillian",
        fld6:""
      },
      {
        auto:911,
        fld1:230507,
        companynr:37,
        fld3:"measures",
        fld4:"raining",
        fld5:"repressions",
        fld6:"A"
      },
      {
        auto:912,
        fld1:230508,
        companynr:37,
        fld3:"precaution",
        fld4:"infest",
        fld5:"chillingly",
        fld6:""
      },
      {
        auto:913,
        fld1:230509,
        companynr:37,
        fld3:"repelled",
        fld4:"compartment",
        fld5:"noncritical",
        fld6:""
      },
      {
        auto:914,
        fld1:230901,
        companynr:37,
        fld3:"primary",
        fld4:"minting",
        fld5:"lithograph",
        fld6:""
      },
      {
        auto:915,
        fld1:230902,
        companynr:37,
        fld3:"coverings",
        fld4:"ducks",
        fld5:"spongers",
        fld6:""
      },
      {
        auto:916,
        fld1:230903,
        companynr:37,
        fld3:"Artemia",
        fld4:"roped",
        fld5:"parenthood",
        fld6:""
      },
      {
        auto:917,
        fld1:230904,
        companynr:37,
        fld3:"navigate",
        fld4:"waltz",
        fld5:"posed",
        fld6:""
      },
      {
        auto:918,
        fld1:230905,
        companynr:37,
        fld3:"spatial",
        fld4:"Lillian",
        fld5:"instruments",
        fld6:""
      },
      {
        auto:919,
        fld1:230906,
        companynr:37,
        fld3:"Gurkha",
        fld4:"repressions",
        fld5:"filial",
        fld6:""
      },
      {
        auto:920,
        fld1:230907,
        companynr:37,
        fld3:"meanwhile",
        fld4:"chillingly",
        fld5:"fixedly",
        fld6:""
      },
      {
        auto:921,
        fld1:230908,
        companynr:37,
        fld3:"Melinda",
        fld4:"noncritical",
        fld5:"relives",
        fld6:""
      },
      {
        auto:922,
        fld1:230909,
        companynr:37,
        fld3:"Butterfield",
        fld4:"lithograph",
        fld5:"Pandora",
        fld6:""
      },
      {
        auto:923,
        fld1:230910,
        companynr:37,
        fld3:"Aldrich",
        fld4:"spongers",
        fld5:"watering",
        fld6:"A"
      },
      {
        auto:924,
        fld1:230911,
        companynr:37,
        fld3:"previewing",
        fld4:"parenthood",
        fld5:"ungrateful",
        fld6:""
      },
      {
        auto:925,
        fld1:230912,
        companynr:37,
        fld3:"glut",
        fld4:"posed",
        fld5:"secures",
        fld6:""
      },
      {
        auto:926,
        fld1:230913,
        companynr:37,
        fld3:"unaffected",
        fld4:"instruments",
        fld5:"chastisers",
        fld6:""
      },
      {
        auto:927,
        fld1:230914,
        companynr:37,
        fld3:"inmate",
        fld4:"filial",
        fld5:"icon",
        fld6:""
      },
      {
        auto:928,
        fld1:231304,
        companynr:37,
        fld3:"mineral",
        fld4:"fixedly",
        fld5:"reuniting",
        fld6:"A"
      },
      {
        auto:929,
        fld1:231305,
        companynr:37,
        fld3:"impending",
        fld4:"relives",
        fld5:"imagining",
        fld6:"A"
      },
      {
        auto:930,
        fld1:231306,
        companynr:37,
        fld3:"meditation",
        fld4:"Pandora",
        fld5:"abiding",
        fld6:"A"
      },
      {
        auto:931,
        fld1:231307,
        companynr:37,
        fld3:"ideas",
        fld4:"watering",
        fld5:"omnisciently",
        fld6:""
      },
      {
        auto:932,
        fld1:231308,
        companynr:37,
        fld3:"miniaturizes",
        fld4:"ungrateful",
        fld5:"Britannic",
        fld6:""
      },
      {
        auto:933,
        fld1:231309,
        companynr:37,
        fld3:"lewdly",
        fld4:"secures",
        fld5:"scholastics",
        fld6:"A"
      },
      {
        auto:934,
        fld1:231310,
        companynr:37,
        fld3:"title",
        fld4:"chastisers",
        fld5:"mechanics",
        fld6:"A"
      },
      {
        auto:935,
        fld1:231311,
        companynr:37,
        fld3:"youthfulness",
        fld4:"icon",
        fld5:"humidly",
        fld6:"A"
      },
      {
        auto:936,
        fld1:231312,
        companynr:37,
        fld3:"creak",
        fld4:"reuniting",
        fld5:"masterpiece",
        fld6:""
      },
      {
        auto:937,
        fld1:231313,
        companynr:37,
        fld3:"Chippewa",
        fld4:"imagining",
        fld5:"however",
        fld6:""
      },
      {
        auto:938,
        fld1:231314,
        companynr:37,
        fld3:"clamored",
        fld4:"abiding",
        fld5:"Mendelian",
        fld6:""
      },
      {
        auto:939,
        fld1:231315,
        companynr:37,
        fld3:"freezes",
        fld4:"omnisciently",
        fld5:"jarred",
        fld6:""
      },
      {
        auto:940,
        fld1:232102,
        companynr:37,
        fld3:"forgivably",
        fld4:"Britannic",
        fld5:"scolds",
        fld6:""
      },
      {
        auto:941,
        fld1:232103,
        companynr:37,
        fld3:"reduce",
        fld4:"scholastics",
        fld5:"infatuate",
        fld6:""
      },
      {
        auto:942,
        fld1:232104,
        companynr:37,
        fld3:"McGovern",
        fld4:"mechanics",
        fld5:"willed",
        fld6:"A"
      },
      {
        auto:943,
        fld1:232105,
        companynr:37,
        fld3:"Nazis",
        fld4:"humidly",
        fld5:"joyfully",
        fld6:""
      },
      {
        auto:944,
        fld1:232106,
        companynr:37,
        fld3:"epistle",
        fld4:"masterpiece",
        fld5:"Microsoft",
        fld6:""
      },
      {
        auto:945,
        fld1:232107,
        companynr:37,
        fld3:"socializes",
        fld4:"however",
        fld5:"fibrosities",
        fld6:""
      },
      {
        auto:946,
        fld1:232108,
        companynr:37,
        fld3:"conceptions",
        fld4:"Mendelian",
        fld5:"Baltimorean",
        fld6:""
      },
      {
        auto:947,
        fld1:232601,
        companynr:37,
        fld3:"Kevin",
        fld4:"jarred",
        fld5:"equestrian",
        fld6:""
      },
      {
        auto:948,
        fld1:232602,
        companynr:37,
        fld3:"uncovering",
        fld4:"scolds",
        fld5:"Goodrich",
        fld6:""
      },
      {
        auto:949,
        fld1:232603,
        companynr:37,
        fld3:"chews",
        fld4:"infatuate",
        fld5:"apish",
        fld6:"A"
      },
      {
        auto:950,
        fld1:232605,
        companynr:37,
        fld3:"appendixes",
        fld4:"willed",
        fld5:"Adlerian",
        fld6:""
      },
      {
        auto:951,
        fld1:232606,
        companynr:37,
        fld3:"raining",
        fld4:"joyfully",
        fld5:"Tropez",
        fld6:""
      },
      {
        auto:952,
        fld1:232607,
        companynr:37,
        fld3:"infest",
        fld4:"Microsoft",
        fld5:"nouns",
        fld6:""
      },
      {
        auto:953,
        fld1:232608,
        companynr:37,
        fld3:"compartment",
        fld4:"fibrosities",
        fld5:"distracting",
        fld6:""
      },
      {
        auto:954,
        fld1:232609,
        companynr:37,
        fld3:"minting",
        fld4:"Baltimorean",
        fld5:"mutton",
        fld6:""
      },
      {
        auto:955,
        fld1:236104,
        companynr:37,
        fld3:"ducks",
        fld4:"equestrian",
        fld5:"bridgeable",
        fld6:"A"
      },
      {
        auto:956,
        fld1:236105,
        companynr:37,
        fld3:"roped",
        fld4:"Goodrich",
        fld5:"stickers",
        fld6:"A"
      },
      {
        auto:957,
        fld1:236106,
        companynr:37,
        fld3:"waltz",
        fld4:"apish",
        fld5:"transcontinental",
        fld6:"A"
      },
      {
        auto:958,
        fld1:236107,
        companynr:37,
        fld3:"Lillian",
        fld4:"Adlerian",
        fld5:"amateurish",
        fld6:""
      },
      {
        auto:959,
        fld1:236108,
        companynr:37,
        fld3:"repressions",
        fld4:"Tropez",
        fld5:"Gandhian",
        fld6:""
      },
      {
        auto:960,
        fld1:236109,
        companynr:37,
        fld3:"chillingly",
        fld4:"nouns",
        fld5:"stratified",
        fld6:""
      },
      {
        auto:961,
        fld1:236110,
        companynr:37,
        fld3:"noncritical",
        fld4:"distracting",
        fld5:"chamberlains",
        fld6:""
      },
      {
        auto:962,
        fld1:236111,
        companynr:37,
        fld3:"lithograph",
        fld4:"mutton",
        fld5:"creditably",
        fld6:""
      },
      {
        auto:963,
        fld1:236112,
        companynr:37,
        fld3:"spongers",
        fld4:"bridgeable",
        fld5:"philosophic",
        fld6:""
      },
      {
        auto:964,
        fld1:236113,
        companynr:37,
        fld3:"parenthood",
        fld4:"stickers",
        fld5:"ores",
        fld6:""
      },
      {
        auto:965,
        fld1:238005,
        companynr:37,
        fld3:"posed",
        fld4:"transcontinental",
        fld5:"Carleton",
        fld6:""
      },
      {
        auto:966,
        fld1:238006,
        companynr:37,
        fld3:"instruments",
        fld4:"amateurish",
        fld5:"tape",
        fld6:"A"
      },
      {
        auto:967,
        fld1:238007,
        companynr:37,
        fld3:"filial",
        fld4:"Gandhian",
        fld5:"afloat",
        fld6:"A"
      },
      {
        auto:968,
        fld1:238008,
        companynr:37,
        fld3:"fixedly",
        fld4:"stratified",
        fld5:"goodness",
        fld6:"A"
      },
      {
        auto:969,
        fld1:238009,
        companynr:37,
        fld3:"relives",
        fld4:"chamberlains",
        fld5:"welcoming",
        fld6:""
      },
      {
        auto:970,
        fld1:238010,
        companynr:37,
        fld3:"Pandora",
        fld4:"creditably",
        fld5:"Pinsky",
        fld6:"FAS"
      },
      {
        auto:971,
        fld1:238011,
        companynr:37,
        fld3:"watering",
        fld4:"philosophic",
        fld5:"halting",
        fld6:""
      },
      {
        auto:972,
        fld1:238012,
        companynr:37,
        fld3:"ungrateful",
        fld4:"ores",
        fld5:"bibliography",
        fld6:""
      },
      {
        auto:973,
        fld1:238013,
        companynr:37,
        fld3:"secures",
        fld4:"Carleton",
        fld5:"decoding",
        fld6:""
      },
      {
        auto:974,
        fld1:240401,
        companynr:41,
        fld3:"chastisers",
        fld4:"tape",
        fld5:"variance",
        fld6:"A"
      },
      {
        auto:975,
        fld1:240402,
        companynr:41,
        fld3:"icon",
        fld4:"afloat",
        fld5:"allowed",
        fld6:"A"
      },
      {
        auto:976,
        fld1:240901,
        companynr:41,
        fld3:"reuniting",
        fld4:"goodness",
        fld5:"dire",
        fld6:"A"
      },
      {
        auto:977,
        fld1:240902,
        companynr:41,
        fld3:"imagining",
        fld4:"welcoming",
        fld5:"dub",
        fld6:"A"
      },
      {
        auto:978,
        fld1:241801,
        companynr:41,
        fld3:"abiding",
        fld4:"Pinsky",
        fld5:"poisoning",
        fld6:""
      },
      {
        auto:979,
        fld1:242101,
        companynr:41,
        fld3:"omnisciently",
        fld4:"halting",
        fld5:"Iraqis",
        fld6:"A"
      },
      {
        auto:980,
        fld1:242102,
        companynr:41,
        fld3:"Britannic",
        fld4:"bibliography",
        fld5:"heaving",
        fld6:""
      },
      {
        auto:981,
        fld1:242201,
        companynr:41,
        fld3:"scholastics",
        fld4:"decoding",
        fld5:"population",
        fld6:"A"
      },
      {
        auto:982,
        fld1:242202,
        companynr:41,
        fld3:"mechanics",
        fld4:"variance",
        fld5:"bomb",
        fld6:"A"
      },
      {
        auto:983,
        fld1:242501,
        companynr:41,
        fld3:"humidly",
        fld4:"allowed",
        fld5:"Majorca",
        fld6:"A"
      },
      {
        auto:984,
        fld1:242502,
        companynr:41,
        fld3:"masterpiece",
        fld4:"dire",
        fld5:"Gershwins",
        fld6:""
      },
      {
        auto:985,
        fld1:246201,
        companynr:41,
        fld3:"however",
        fld4:"dub",
        fld5:"explorers",
        fld6:""
      },
      {
        auto:986,
        fld1:246202,
        companynr:41,
        fld3:"Mendelian",
        fld4:"poisoning",
        fld5:"libretto",
        fld6:"A"
      },
      {
        auto:987,
        fld1:246203,
        companynr:41,
        fld3:"jarred",
        fld4:"Iraqis",
        fld5:"occurred",
        fld6:""
      },
      {
        auto:988,
        fld1:246204,
        companynr:41,
        fld3:"scolds",
        fld4:"heaving",
        fld5:"Lagos",
        fld6:""
      },
      {
        auto:989,
        fld1:246205,
        companynr:41,
        fld3:"infatuate",
        fld4:"population",
        fld5:"rats",
        fld6:""
      },
      {
        auto:990,
        fld1:246301,
        companynr:41,
        fld3:"willed",
        fld4:"bomb",
        fld5:"bankruptcies",
        fld6:"A"
      },
      {
        auto:991,
        fld1:246302,
        companynr:41,
        fld3:"joyfully",
        fld4:"Majorca",
        fld5:"crying",
        fld6:""
      },
      {
        auto:992,
        fld1:248001,
        companynr:41,
        fld3:"Microsoft",
        fld4:"Gershwins",
        fld5:"unexpected",
        fld6:""
      },
      {
        auto:993,
        fld1:248002,
        companynr:41,
        fld3:"fibrosities",
        fld4:"explorers",
        fld5:"accessed",
        fld6:"A"
      },
      {
        auto:994,
        fld1:248003,
        companynr:41,
        fld3:"Baltimorean",
        fld4:"libretto",
        fld5:"colorful",
        fld6:"A"
      },
      {
        auto:995,
        fld1:248004,
        companynr:41,
        fld3:"equestrian",
        fld4:"occurred",
        fld5:"versatility",
        fld6:"A"
      },
      {
        auto:996,
        fld1:248005,
        companynr:41,
        fld3:"Goodrich",
        fld4:"Lagos",
        fld5:"cosy",
        fld6:""
      },
      {
        auto:997,
        fld1:248006,
        companynr:41,
        fld3:"apish",
        fld4:"rats",
        fld5:"Darius",
        fld6:"A"
      },
      {
        auto:998,
        fld1:248007,
        companynr:41,
        fld3:"Adlerian",
        fld4:"bankruptcies",
        fld5:"mastering",
        fld6:"A"
      },
      {
        auto:999,
        fld1:248008,
        companynr:41,
        fld3:"Tropez",
        fld4:"crying",
        fld5:"Asiaticizations",
        fld6:"A"
      },
      {
        auto:1000,
        fld1:248009,
        companynr:41,
        fld3:"nouns",
        fld4:"unexpected",
        fld5:"offerers",
        fld6:"A"
      },
      {
        auto:1001,
        fld1:248010,
        companynr:41,
        fld3:"distracting",
        fld4:"accessed",
        fld5:"uncles",
        fld6:"A"
      },
      {
        auto:1002,
        fld1:248011,
        companynr:41,
        fld3:"mutton",
        fld4:"colorful",
        fld5:"sleepwalk",
        fld6:""
      },
      {
        auto:1003,
        fld1:248012,
        companynr:41,
        fld3:"bridgeable",
        fld4:"versatility",
        fld5:"Ernestine",
        fld6:""
      },
      {
        auto:1004,
        fld1:248013,
        companynr:41,
        fld3:"stickers",
        fld4:"cosy",
        fld5:"checksumming",
        fld6:""
      },
      {
        auto:1005,
        fld1:248014,
        companynr:41,
        fld3:"transcontinental",
        fld4:"Darius",
        fld5:"stopped",
        fld6:""
      },
      {
        auto:1006,
        fld1:248015,
        companynr:41,
        fld3:"amateurish",
        fld4:"mastering",
        fld5:"sicker",
        fld6:""
      },
      {
        auto:1007,
        fld1:248016,
        companynr:41,
        fld3:"Gandhian",
        fld4:"Asiaticizations",
        fld5:"Italianization",
        fld6:""
      },
      {
        auto:1008,
        fld1:248017,
        companynr:41,
        fld3:"stratified",
        fld4:"offerers",
        fld5:"alphabetic",
        fld6:""
      },
      {
        auto:1009,
        fld1:248018,
        companynr:41,
        fld3:"chamberlains",
        fld4:"uncles",
        fld5:"pharmaceutic",
        fld6:""
      },
      {
        auto:1010,
        fld1:248019,
        companynr:41,
        fld3:"creditably",
        fld4:"sleepwalk",
        fld5:"creator",
        fld6:""
      },
      {
        auto:1011,
        fld1:248020,
        companynr:41,
        fld3:"philosophic",
        fld4:"Ernestine",
        fld5:"chess",
        fld6:""
      },
      {
        auto:1012,
        fld1:248021,
        companynr:41,
        fld3:"ores",
        fld4:"checksumming",
        fld5:"charcoal",
        fld6:""
      },
      {
        auto:1013,
        fld1:248101,
        companynr:41,
        fld3:"Carleton",
        fld4:"stopped",
        fld5:"Epiphany",
        fld6:"A"
      },
      {
        auto:1014,
        fld1:248102,
        companynr:41,
        fld3:"tape",
        fld4:"sicker",
        fld5:"bulldozes",
        fld6:"A"
      },
      {
        auto:1015,
        fld1:248201,
        companynr:41,
        fld3:"afloat",
        fld4:"Italianization",
        fld5:"Pygmalion",
        fld6:"A"
      },
      {
        auto:1016,
        fld1:248202,
        companynr:41,
        fld3:"goodness",
        fld4:"alphabetic",
        fld5:"caressing",
        fld6:"A"
      },
      {
        auto:1017,
        fld1:248203,
        companynr:41,
        fld3:"welcoming",
        fld4:"pharmaceutic",
        fld5:"Palestine",
        fld6:"A"
      },
      {
        auto:1018,
        fld1:248204,
        companynr:41,
        fld3:"Pinsky",
        fld4:"creator",
        fld5:"regimented",
        fld6:"A"
      },
      {
        auto:1019,
        fld1:248205,
        companynr:41,
        fld3:"halting",
        fld4:"chess",
        fld5:"scars",
        fld6:"A"
      },
      {
        auto:1020,
        fld1:248206,
        companynr:41,
        fld3:"bibliography",
        fld4:"charcoal",
        fld5:"realest",
        fld6:"A"
      },
      {
        auto:1021,
        fld1:248207,
        companynr:41,
        fld3:"decoding",
        fld4:"Epiphany",
        fld5:"diffusing",
        fld6:"A"
      },
      {
        auto:1022,
        fld1:248208,
        companynr:41,
        fld3:"variance",
        fld4:"bulldozes",
        fld5:"clubroom",
        fld6:"A"
      },
      {
        auto:1023,
        fld1:248209,
        companynr:41,
        fld3:"allowed",
        fld4:"Pygmalion",
        fld5:"Blythe",
        fld6:"A"
      },
      {
        auto:1024,
        fld1:248210,
        companynr:41,
        fld3:"dire",
        fld4:"caressing",
        fld5:"ahead",
        fld6:""
      },
      {
        auto:1025,
        fld1:248211,
        companynr:50,
        fld3:"dub",
        fld4:"Palestine",
        fld5:"reviver",
        fld6:""
      },
      {
        auto:1026,
        fld1:250501,
        companynr:34,
        fld3:"poisoning",
        fld4:"regimented",
        fld5:"retransmitting",
        fld6:"A"
      },
      {
        auto:1027,
        fld1:250502,
        companynr:34,
        fld3:"Iraqis",
        fld4:"scars",
        fld5:"landslide",
        fld6:""
      },
      {
        auto:1028,
        fld1:250503,
        companynr:34,
        fld3:"heaving",
        fld4:"realest",
        fld5:"Eiffel",
        fld6:""
      },
      {
        auto:1029,
        fld1:250504,
        companynr:34,
        fld3:"population",
        fld4:"diffusing",
        fld5:"absentee",
        fld6:""
      },
      {
        auto:1030,
        fld1:250505,
        companynr:34,
        fld3:"bomb",
        fld4:"clubroom",
        fld5:"aye",
        fld6:""
      },
      {
        auto:1031,
        fld1:250601,
        companynr:34,
        fld3:"Majorca",
        fld4:"Blythe",
        fld5:"forked",
        fld6:"A"
      },
      {
        auto:1032,
        fld1:250602,
        companynr:34,
        fld3:"Gershwins",
        fld4:"ahead",
        fld5:"Peruvianizes",
        fld6:""
      },
      {
        auto:1033,
        fld1:250603,
        companynr:34,
        fld3:"explorers",
        fld4:"reviver",
        fld5:"clerked",
        fld6:""
      },
      {
        auto:1034,
        fld1:250604,
        companynr:34,
        fld3:"libretto",
        fld4:"retransmitting",
        fld5:"tutor",
        fld6:""
      },
      {
        auto:1035,
        fld1:250605,
        companynr:34,
        fld3:"occurred",
        fld4:"landslide",
        fld5:"boulevard",
        fld6:""
      },
      {
        auto:1036,
        fld1:251001,
        companynr:34,
        fld3:"Lagos",
        fld4:"Eiffel",
        fld5:"shuttered",
        fld6:""
      },
      {
        auto:1037,
        fld1:251002,
        companynr:34,
        fld3:"rats",
        fld4:"absentee",
        fld5:"quotes",
        fld6:"A"
      },
      {
        auto:1038,
        fld1:251003,
        companynr:34,
        fld3:"bankruptcies",
        fld4:"aye",
        fld5:"Caltech",
        fld6:""
      },
      {
        auto:1039,
        fld1:251004,
        companynr:34,
        fld3:"crying",
        fld4:"forked",
        fld5:"Mossberg",
        fld6:""
      },
      {
        auto:1040,
        fld1:251005,
        companynr:34,
        fld3:"unexpected",
        fld4:"Peruvianizes",
        fld5:"kept",
        fld6:""
      },
      {
        auto:1041,
        fld1:251301,
        companynr:34,
        fld3:"accessed",
        fld4:"clerked",
        fld5:"roundly",
        fld6:""
      },
      {
        auto:1042,
        fld1:251302,
        companynr:34,
        fld3:"colorful",
        fld4:"tutor",
        fld5:"features",
        fld6:"A"
      },
      {
        auto:1043,
        fld1:251303,
        companynr:34,
        fld3:"versatility",
        fld4:"boulevard",
        fld5:"imaginable",
        fld6:"A"
      },
      {
        auto:1044,
        fld1:251304,
        companynr:34,
        fld3:"cosy",
        fld4:"shuttered",
        fld5:"controller",
        fld6:""
      },
      {
        auto:1045,
        fld1:251305,
        companynr:34,
        fld3:"Darius",
        fld4:"quotes",
        fld5:"racial",
        fld6:""
      },
      {
        auto:1046,
        fld1:251401,
        companynr:34,
        fld3:"mastering",
        fld4:"Caltech",
        fld5:"uprisings",
        fld6:"A"
      },
      {
        auto:1047,
        fld1:251402,
        companynr:34,
        fld3:"Asiaticizations",
        fld4:"Mossberg",
        fld5:"narrowed",
        fld6:"A"
      },
      {
        auto:1048,
        fld1:251403,
        companynr:34,
        fld3:"offerers",
        fld4:"kept",
        fld5:"cannot",
        fld6:"A"
      },
      {
        auto:1049,
        fld1:251404,
        companynr:34,
        fld3:"uncles",
        fld4:"roundly",
        fld5:"vest",
        fld6:""
      },
      {
        auto:1050,
        fld1:251405,
        companynr:34,
        fld3:"sleepwalk",
        fld4:"features",
        fld5:"famine",
        fld6:""
      },
      {
        auto:1051,
        fld1:251406,
        companynr:34,
        fld3:"Ernestine",
        fld4:"imaginable",
        fld5:"sugars",
        fld6:""
      },
      {
        auto:1052,
        fld1:251801,
        companynr:34,
        fld3:"checksumming",
        fld4:"controller",
        fld5:"exterminated",
        fld6:"A"
      },
      {
        auto:1053,
        fld1:251802,
        companynr:34,
        fld3:"stopped",
        fld4:"racial",
        fld5:"belays",
        fld6:""
      },
      {
        auto:1054,
        fld1:252101,
        companynr:34,
        fld3:"sicker",
        fld4:"uprisings",
        fld5:"Hodges",
        fld6:"A"
      },
      {
        auto:1055,
        fld1:252102,
        companynr:34,
        fld3:"Italianization",
        fld4:"narrowed",
        fld5:"translatable",
        fld6:""
      },
      {
        auto:1056,
        fld1:252301,
        companynr:34,
        fld3:"alphabetic",
        fld4:"cannot",
        fld5:"duality",
        fld6:"A"
      },
      {
        auto:1057,
        fld1:252302,
        companynr:34,
        fld3:"pharmaceutic",
        fld4:"vest",
        fld5:"recording",
        fld6:"A"
      },
      {
        auto:1058,
        fld1:252303,
        companynr:34,
        fld3:"creator",
        fld4:"famine",
        fld5:"rouses",
        fld6:"A"
      },
      {
        auto:1059,
        fld1:252304,
        companynr:34,
        fld3:"chess",
        fld4:"sugars",
        fld5:"poison",
        fld6:""
      },
      {
        auto:1060,
        fld1:252305,
        companynr:34,
        fld3:"charcoal",
        fld4:"exterminated",
        fld5:"attitude",
        fld6:""
      },
      {
        auto:1061,
        fld1:252306,
        companynr:34,
        fld3:"Epiphany",
        fld4:"belays",
        fld5:"dusted",
        fld6:""
      },
      {
        auto:1062,
        fld1:252307,
        companynr:34,
        fld3:"bulldozes",
        fld4:"Hodges",
        fld5:"encompasses",
        fld6:""
      },
      {
        auto:1063,
        fld1:252308,
        companynr:34,
        fld3:"Pygmalion",
        fld4:"translatable",
        fld5:"presentation",
        fld6:""
      },
      {
        auto:1064,
        fld1:252309,
        companynr:34,
        fld3:"caressing",
        fld4:"duality",
        fld5:"Kantian",
        fld6:""
      },
      {
        auto:1065,
        fld1:256001,
        companynr:34,
        fld3:"Palestine",
        fld4:"recording",
        fld5:"imprecision",
        fld6:"A"
      },
      {
        auto:1066,
        fld1:256002,
        companynr:34,
        fld3:"regimented",
        fld4:"rouses",
        fld5:"saving",
        fld6:""
      },
      {
        auto:1067,
        fld1:256003,
        companynr:34,
        fld3:"scars",
        fld4:"poison",
        fld5:"maternal",
        fld6:""
      },
      {
        auto:1068,
        fld1:256004,
        companynr:34,
        fld3:"realest",
        fld4:"attitude",
        fld5:"hewed",
        fld6:""
      },
      {
        auto:1069,
        fld1:256005,
        companynr:34,
        fld3:"diffusing",
        fld4:"dusted",
        fld5:"kerosene",
        fld6:""
      },
      {
        auto:1070,
        fld1:258001,
        companynr:34,
        fld3:"clubroom",
        fld4:"encompasses",
        fld5:"Cubans",
        fld6:""
      },
      {
        auto:1071,
        fld1:258002,
        companynr:34,
        fld3:"Blythe",
        fld4:"presentation",
        fld5:"photographers",
        fld6:""
      },
      {
        auto:1072,
        fld1:258003,
        companynr:34,
        fld3:"ahead",
        fld4:"Kantian",
        fld5:"nymph",
        fld6:"A"
      },
      {
        auto:1073,
        fld1:258004,
        companynr:34,
        fld3:"reviver",
        fld4:"imprecision",
        fld5:"bedlam",
        fld6:"A"
      },
      {
        auto:1074,
        fld1:258005,
        companynr:34,
        fld3:"retransmitting",
        fld4:"saving",
        fld5:"north",
        fld6:"A"
      },
      {
        auto:1075,
        fld1:258006,
        companynr:34,
        fld3:"landslide",
        fld4:"maternal",
        fld5:"Schoenberg",
        fld6:"A"
      },
      {
        auto:1076,
        fld1:258007,
        companynr:34,
        fld3:"Eiffel",
        fld4:"hewed",
        fld5:"botany",
        fld6:"A"
      },
      {
        auto:1077,
        fld1:258008,
        companynr:34,
        fld3:"absentee",
        fld4:"kerosene",
        fld5:"curs",
        fld6:""
      },
      {
        auto:1078,
        fld1:258009,
        companynr:34,
        fld3:"aye",
        fld4:"Cubans",
        fld5:"solidification",
        fld6:""
      },
      {
        auto:1079,
        fld1:258010,
        companynr:34,
        fld3:"forked",
        fld4:"photographers",
        fld5:"inheritresses",
        fld6:""
      },
      {
        auto:1080,
        fld1:258011,
        companynr:34,
        fld3:"Peruvianizes",
        fld4:"nymph",
        fld5:"stiller",
        fld6:""
      },
      {
        auto:1081,
        fld1:258101,
        companynr:68,
        fld3:"clerked",
        fld4:"bedlam",
        fld5:"t1",
        fld6:"A"
      },
      {
        auto:1082,
        fld1:258102,
        companynr:68,
        fld3:"tutor",
        fld4:"north",
        fld5:"suite",
        fld6:"A"
      },
      {
        auto:1083,
        fld1:258103,
        companynr:34,
        fld3:"boulevard",
        fld4:"Schoenberg",
        fld5:"ransomer",
        fld6:""
      },
      {
        auto:1084,
        fld1:258104,
        companynr:68,
        fld3:"shuttered",
        fld4:"botany",
        fld5:"Willy",
        fld6:""
      },
      {
        auto:1085,
        fld1:258105,
        companynr:68,
        fld3:"quotes",
        fld4:"curs",
        fld5:"Rena",
        fld6:"A"
      },
      {
        auto:1086,
        fld1:258106,
        companynr:68,
        fld3:"Caltech",
        fld4:"solidification",
        fld5:"Seattle",
        fld6:"A"
      },
      {
        auto:1087,
        fld1:258107,
        companynr:68,
        fld3:"Mossberg",
        fld4:"inheritresses",
        fld5:"relaxes",
        fld6:"A"
      },
      {
        auto:1088,
        fld1:258108,
        companynr:68,
        fld3:"kept",
        fld4:"stiller",
        fld5:"exclaim",
        fld6:""
      },
      {
        auto:1089,
        fld1:258109,
        companynr:68,
        fld3:"roundly",
        fld4:"t1",
        fld5:"implicated",
        fld6:"A"
      },
      {
        auto:1090,
        fld1:258110,
        companynr:68,
        fld3:"features",
        fld4:"suite",
        fld5:"distinguish",
        fld6:""
      },
      {
        auto:1091,
        fld1:258111,
        companynr:68,
        fld3:"imaginable",
        fld4:"ransomer",
        fld5:"assayed",
        fld6:""
      },
      {
        auto:1092,
        fld1:258112,
        companynr:68,
        fld3:"controller",
        fld4:"Willy",
        fld5:"homeowner",
        fld6:""
      },
      {
        auto:1093,
        fld1:258113,
        companynr:68,
        fld3:"racial",
        fld4:"Rena",
        fld5:"and",
        fld6:""
      },
      {
        auto:1094,
        fld1:258201,
        companynr:34,
        fld3:"uprisings",
        fld4:"Seattle",
        fld5:"stealth",
        fld6:""
      },
      {
        auto:1095,
        fld1:258202,
        companynr:34,
        fld3:"narrowed",
        fld4:"relaxes",
        fld5:"coinciding",
        fld6:"A"
      },
      {
        auto:1096,
        fld1:258203,
        companynr:34,
        fld3:"cannot",
        fld4:"exclaim",
        fld5:"founder",
        fld6:"A"
      },
      {
        auto:1097,
        fld1:258204,
        companynr:34,
        fld3:"vest",
        fld4:"implicated",
        fld5:"environing",
        fld6:""
      },
      {
        auto:1098,
        fld1:258205,
        companynr:34,
        fld3:"famine",
        fld4:"distinguish",
        fld5:"jewelry",
        fld6:""
      },
      {
        auto:1099,
        fld1:258301,
        companynr:34,
        fld3:"sugars",
        fld4:"assayed",
        fld5:"lemons",
        fld6:"A"
      },
      {
        auto:1100,
        fld1:258401,
        companynr:34,
        fld3:"exterminated",
        fld4:"homeowner",
        fld5:"brokenness",
        fld6:"A"
      },
      {
        auto:1101,
        fld1:258402,
        companynr:34,
        fld3:"belays",
        fld4:"and",
        fld5:"bedpost",
        fld6:"A"
      },
      {
        auto:1102,
        fld1:258403,
        companynr:34,
        fld3:"Hodges",
        fld4:"stealth",
        fld5:"assurers",
        fld6:"A"
      },
      {
        auto:1103,
        fld1:258404,
        companynr:34,
        fld3:"translatable",
        fld4:"coinciding",
        fld5:"annoyers",
        fld6:""
      },
      {
        auto:1104,
        fld1:258405,
        companynr:34,
        fld3:"duality",
        fld4:"founder",
        fld5:"affixed",
        fld6:""
      },
      {
        auto:1105,
        fld1:258406,
        companynr:34,
        fld3:"recording",
        fld4:"environing",
        fld5:"warbling",
        fld6:""
      },
      {
        auto:1106,
        fld1:258407,
        companynr:34,
        fld3:"rouses",
        fld4:"jewelry",
        fld5:"seriously",
        fld6:""
      },
      {
        auto:1107,
        fld1:228123,
        companynr:37,
        fld3:"poison",
        fld4:"lemons",
        fld5:"boasted",
        fld6:""
      },
      {
        auto:1108,
        fld1:250606,
        companynr:34,
        fld3:"attitude",
        fld4:"brokenness",
        fld5:"Chantilly",
        fld6:""
      },
      {
        auto:1109,
        fld1:208405,
        companynr:37,
        fld3:"dusted",
        fld4:"bedpost",
        fld5:"Iranizes",
        fld6:""
      },
      {
        auto:1110,
        fld1:212101,
        companynr:37,
        fld3:"encompasses",
        fld4:"assurers",
        fld5:"violinist",
        fld6:""
      },
      {
        auto:1111,
        fld1:218206,
        companynr:37,
        fld3:"presentation",
        fld4:"annoyers",
        fld5:"extramarital",
        fld6:""
      },
      {
        auto:1112,
        fld1:150401,
        companynr:37,
        fld3:"Kantian",
        fld4:"affixed",
        fld5:"spates",
        fld6:""
      },
      {
        auto:1113,
        fld1:248212,
        companynr:41,
        fld3:"imprecision",
        fld4:"warbling",
        fld5:"cloakroom",
        fld6:""
      },
      {
        auto:1114,
        fld1:128026,
        companynr:0,
        fld3:"saving",
        fld4:"seriously",
        fld5:"gazer",
        fld6:""
      },
      {
        auto:1115,
        fld1:128024,
        companynr:0,
        fld3:"maternal",
        fld4:"boasted",
        fld5:"hand",
        fld6:""
      },
      {
        auto:1116,
        fld1:128027,
        companynr:0,
        fld3:"hewed",
        fld4:"Chantilly",
        fld5:"tucked",
        fld6:""
      },
      {
        auto:1117,
        fld1:128025,
        companynr:0,
        fld3:"kerosene",
        fld4:"Iranizes",
        fld5:"gems",
        fld6:""
      },
      {
        auto:1118,
        fld1:128109,
        companynr:0,
        fld3:"Cubans",
        fld4:"violinist",
        fld5:"clinker",
        fld6:""
      },
      {
        auto:1119,
        fld1:128705,
        companynr:0,
        fld3:"photographers",
        fld4:"extramarital",
        fld5:"refiner",
        fld6:""
      },
      {
        auto:1120,
        fld1:126303,
        companynr:0,
        fld3:"nymph",
        fld4:"spates",
        fld5:"callus",
        fld6:""
      },
      {
        auto:1121,
        fld1:128308,
        companynr:0,
        fld3:"bedlam",
        fld4:"cloakroom",
        fld5:"leopards",
        fld6:""
      },
      {
        auto:1122,
        fld1:128204,
        companynr:0,
        fld3:"north",
        fld4:"gazer",
        fld5:"comfortingly",
        fld6:""
      },
      {
        auto:1123,
        fld1:128205,
        companynr:0,
        fld3:"Schoenberg",
        fld4:"hand",
        fld5:"generically",
        fld6:""
      },
      {
        auto:1124,
        fld1:128206,
        companynr:0,
        fld3:"botany",
        fld4:"tucked",
        fld5:"getters",
        fld6:""
      },
      {
        auto:1125,
        fld1:128207,
        companynr:0,
        fld3:"curs",
        fld4:"gems",
        fld5:"sexually",
        fld6:""
      },
      {
        auto:1126,
        fld1:118205,
        companynr:0,
        fld3:"solidification",
        fld4:"clinker",
        fld5:"spear",
        fld6:""
      },
      {
        auto:1127,
        fld1:116801,
        companynr:0,
        fld3:"inheritresses",
        fld4:"refiner",
        fld5:"serums",
        fld6:""
      },
      {
        auto:1128,
        fld1:116803,
        companynr:0,
        fld3:"stiller",
        fld4:"callus",
        fld5:"Italianization",
        fld6:""
      },
      {
        auto:1129,
        fld1:116804,
        companynr:0,
        fld3:"t1",
        fld4:"leopards",
        fld5:"attendants",
        fld6:""
      },
      {
        auto:1130,
        fld1:116802,
        companynr:0,
        fld3:"suite",
        fld4:"comfortingly",
        fld5:"spies",
        fld6:""
      },
      {
        auto:1131,
        fld1:128605,
        companynr:0,
        fld3:"ransomer",
        fld4:"generically",
        fld5:"Anthony",
        fld6:""
      },
      {
        auto:1132,
        fld1:118308,
        companynr:0,
        fld3:"Willy",
        fld4:"getters",
        fld5:"planar",
        fld6:""
      },
      {
        auto:1133,
        fld1:113702,
        companynr:0,
        fld3:"Rena",
        fld4:"sexually",
        fld5:"cupped",
        fld6:""
      },
      {
        auto:1134,
        fld1:113703,
        companynr:0,
        fld3:"Seattle",
        fld4:"spear",
        fld5:"cleanser",
        fld6:""
      },
      {
        auto:1135,
        fld1:112103,
        companynr:0,
        fld3:"relaxes",
        fld4:"serums",
        fld5:"commuters",
        fld6:""
      },
      {
        auto:1136,
        fld1:118009,
        companynr:0,
        fld3:"exclaim",
        fld4:"Italianization",
        fld5:"honeysuckle",
        fld6:""
      },
      {
        auto:1137,
        fld1:138011,
        companynr:0,
        fld3:"implicated",
        fld4:"attendants",
        fld5:"orphanage",
        fld6:""
      },
      {
        auto:1138,
        fld1:138010,
        companynr:0,
        fld3:"distinguish",
        fld4:"spies",
        fld5:"skies",
        fld6:""
      },
      {
        auto:1139,
        fld1:138012,
        companynr:0,
        fld3:"assayed",
        fld4:"Anthony",
        fld5:"crushers",
        fld6:""
      },
      {
        auto:1140,
        fld1:68304,
        companynr:0,
        fld3:"homeowner",
        fld4:"planar",
        fld5:"Puritan",
        fld6:""
      },
      {
        auto:1141,
        fld1:78009,
        companynr:0,
        fld3:"and",
        fld4:"cupped",
        fld5:"squeezer",
        fld6:""
      },
      {
        auto:1142,
        fld1:108013,
        companynr:0,
        fld3:"stealth",
        fld4:"cleanser",
        fld5:"bruises",
        fld6:""
      },
      {
        auto:1143,
        fld1:84004,
        companynr:0,
        fld3:"coinciding",
        fld4:"commuters",
        fld5:"bonfire",
        fld6:""
      },
      {
        auto:1144,
        fld1:83402,
        companynr:0,
        fld3:"founder",
        fld4:"honeysuckle",
        fld5:"Colombo",
        fld6:""
      },
      {
        auto:1145,
        fld1:84003,
        companynr:0,
        fld3:"environing",
        fld4:"orphanage",
        fld5:"nondecreasing",
        fld6:""
      },
      {
        auto:1146,
        fld1:88504,
        companynr:0,
        fld3:"jewelry",
        fld4:"skies",
        fld5:"innocents",
        fld6:""
      },
      {
        auto:1147,
        fld1:88005,
        companynr:0,
        fld3:"lemons",
        fld4:"crushers",
        fld5:"masked",
        fld6:""
      },
      {
        auto:1148,
        fld1:88007,
        companynr:0,
        fld3:"brokenness",
        fld4:"Puritan",
        fld5:"file",
        fld6:""
      },
      {
        auto:1149,
        fld1:88006,
        companynr:0,
        fld3:"bedpost",
        fld4:"squeezer",
        fld5:"brush",
        fld6:""
      },
      {
        auto:1150,
        fld1:148025,
        companynr:0,
        fld3:"assurers",
        fld4:"bruises",
        fld5:"mutilate",
        fld6:""
      },
      {
        auto:1151,
        fld1:148024,
        companynr:0,
        fld3:"annoyers",
        fld4:"bonfire",
        fld5:"mommy",
        fld6:""
      },
      {
        auto:1152,
        fld1:138305,
        companynr:0,
        fld3:"affixed",
        fld4:"Colombo",
        fld5:"bulkheads",
        fld6:""
      },
      {
        auto:1153,
        fld1:138306,
        companynr:0,
        fld3:"warbling",
        fld4:"nondecreasing",
        fld5:"undeclared",
        fld6:""
      },
      {
        auto:1154,
        fld1:152701,
        companynr:0,
        fld3:"seriously",
        fld4:"innocents",
        fld5:"displacements",
        fld6:""
      },
      {
        auto:1155,
        fld1:148505,
        companynr:0,
        fld3:"boasted",
        fld4:"masked",
        fld5:"nieces",
        fld6:""
      },
      {
        auto:1156,
        fld1:158003,
        companynr:0,
        fld3:"Chantilly",
        fld4:"file",
        fld5:"coeducation",
        fld6:""
      },
      {
        auto:1157,
        fld1:156201,
        companynr:0,
        fld3:"Iranizes",
        fld4:"brush",
        fld5:"brassy",
        fld6:""
      },
      {
        auto:1158,
        fld1:156202,
        companynr:0,
        fld3:"violinist",
        fld4:"mutilate",
        fld5:"authenticator",
        fld6:""
      },
      {
        auto:1159,
        fld1:158307,
        companynr:0,
        fld3:"extramarital",
        fld4:"mommy",
        fld5:"Washoe",
        fld6:""
      },
      {
        auto:1160,
        fld1:158402,
        companynr:0,
        fld3:"spates",
        fld4:"bulkheads",
        fld5:"penny",
        fld6:""
      },
      {
        auto:1161,
        fld1:158401,
        companynr:0,
        fld3:"cloakroom",
        fld4:"undeclared",
        fld5:"Flagler",
        fld6:""
      },
      {
        auto:1162,
        fld1:68013,
        companynr:0,
        fld3:"gazer",
        fld4:"displacements",
        fld5:"stoned",
        fld6:""
      },
      {
        auto:1163,
        fld1:68012,
        companynr:0,
        fld3:"hand",
        fld4:"nieces",
        fld5:"cranes",
        fld6:""
      },
      {
        auto:1164,
        fld1:68203,
        companynr:0,
        fld3:"tucked",
        fld4:"coeducation",
        fld5:"masterful",
        fld6:""
      },
      {
        auto:1165,
        fld1:88205,
        companynr:0,
        fld3:"gems",
        fld4:"brassy",
        fld5:"biracial",
        fld6:""
      },
      {
        auto:1166,
        fld1:68704,
        companynr:0,
        fld3:"clinker",
        fld4:"authenticator",
        fld5:"steamships",
        fld6:""
      },
      {
        auto:1167,
        fld1:68604,
        companynr:0,
        fld3:"refiner",
        fld4:"Washoe",
        fld5:"windmills",
        fld6:""
      },
      {
        auto:1168,
        fld1:158502,
        companynr:0,
        fld3:"callus",
        fld4:"penny",
        fld5:"exploit",
        fld6:""
      },
      {
        auto:1169,
        fld1:123103,
        companynr:0,
        fld3:"leopards",
        fld4:"Flagler",
        fld5:"riverfront",
        fld6:""
      },
      {
        auto:1170,
        fld1:148026,
        companynr:0,
        fld3:"comfortingly",
        fld4:"stoned",
        fld5:"sisterly",
        fld6:""
      },
      {
        auto:1171,
        fld1:123302,
        companynr:0,
        fld3:"generically",
        fld4:"cranes",
        fld5:"sharpshoot",
        fld6:""
      },
      {
        auto:1172,
        fld1:76503,
        companynr:0,
        fld3:"getters",
        fld4:"masterful",
        fld5:"mittens",
        fld6:""
      },
      {
        auto:1173,
        fld1:126304,
        companynr:0,
        fld3:"sexually",
        fld4:"biracial",
        fld5:"interdependency",
        fld6:""
      },
      {
        auto:1174,
        fld1:68306,
        companynr:0,
        fld3:"spear",
        fld4:"steamships",
        fld5:"policy",
        fld6:""
      },
      {
        auto:1175,
        fld1:143504,
        companynr:0,
        fld3:"serums",
        fld4:"windmills",
        fld5:"unleashing",
        fld6:""
      },
      {
        auto:1176,
        fld1:160201,
        companynr:0,
        fld3:"Italianization",
        fld4:"exploit",
        fld5:"pretenders",
        fld6:""
      },
      {
        auto:1177,
        fld1:148028,
        companynr:0,
        fld3:"attendants",
        fld4:"riverfront",
        fld5:"overstatements",
        fld6:""
      },
      {
        auto:1178,
        fld1:148027,
        companynr:0,
        fld3:"spies",
        fld4:"sisterly",
        fld5:"birthed",
        fld6:""
      },
      {
        auto:1179,
        fld1:143505,
        companynr:0,
        fld3:"Anthony",
        fld4:"sharpshoot",
        fld5:"opportunism",
        fld6:""
      },
      {
        auto:1180,
        fld1:108014,
        companynr:0,
        fld3:"planar",
        fld4:"mittens",
        fld5:"showroom",
        fld6:""
      },
      {
        auto:1181,
        fld1:76104,
        companynr:0,
        fld3:"cupped",
        fld4:"interdependency",
        fld5:"compromisingly",
        fld6:""
      },
      {
        auto:1182,
        fld1:78106,
        companynr:0,
        fld3:"cleanser",
        fld4:"policy",
        fld5:"Medicare",
        fld6:""
      },
      {
        auto:1183,
        fld1:126102,
        companynr:0,
        fld3:"commuters",
        fld4:"unleashing",
        fld5:"corresponds",
        fld6:""
      },
      {
        auto:1184,
        fld1:128029,
        companynr:0,
        fld3:"honeysuckle",
        fld4:"pretenders",
        fld5:"hardware",
        fld6:""
      },
      {
        auto:1185,
        fld1:128028,
        companynr:0,
        fld3:"orphanage",
        fld4:"overstatements",
        fld5:"implant",
        fld6:""
      },
      {
        auto:1186,
        fld1:18410,
        companynr:0,
        fld3:"skies",
        fld4:"birthed",
        fld5:"Alicia",
        fld6:""
      },
      {
        auto:1187,
        fld1:128110,
        companynr:0,
        fld3:"crushers",
        fld4:"opportunism",
        fld5:"requesting",
        fld6:""
      },
      {
        auto:1188,
        fld1:148506,
        companynr:0,
        fld3:"Puritan",
        fld4:"showroom",
        fld5:"produced",
        fld6:""
      },
      {
        auto:1189,
        fld1:123303,
        companynr:0,
        fld3:"squeezer",
        fld4:"compromisingly",
        fld5:"criticizes",
        fld6:""
      },
      {
        auto:1190,
        fld1:123304,
        companynr:0,
        fld3:"bruises",
        fld4:"Medicare",
        fld5:"backer",
        fld6:""
      },
      {
        auto:1191,
        fld1:68504,
        companynr:0,
        fld3:"bonfire",
        fld4:"corresponds",
        fld5:"positively",
        fld6:""
      },
      {
        auto:1192,
        fld1:68305,
        companynr:0,
        fld3:"Colombo",
        fld4:"hardware",
        fld5:"colicky",
        fld6:""
      },
      {
        auto:1193,
        fld1:0,
        companynr:0,
        fld3:"nondecreasing",
        fld4:"implant",
        fld5:"thrillingly",
        fld6:""
      },
      {
        auto:5136,
        fld1:1118009,
        companynr:0,
        fld3:"exclaim",
        fld4:"Italianization",
        fld5:"honeysuckle",
        fld6:""
      },
      {
        auto:5950,
        fld1:1232605,
        companynr:37,
        fld3:"appendixes",
        fld4:"willed",
        fld5:"Adlerian",
        fld6:""
      },
      {
        auto:5951,
        fld1:1232606,
        companynr:37,
        fld3:"appendixes",
        fld4:"willed",
        fld5:"Adlerian",
        fld6:""
      },
      {
        auto:5952,
        fld1:1232607,
        companynr:37,
        fld3:"appendixes",
        fld4:"willed",
        fld5:"Adlerian",
        fld6:""
      },
      {
        auto:5953,
        fld1:1232608,
        companynr:37,
        fld3:"appendixes",
        fld4:"willed",
        fld5:"Adlerian",
        fld6:""
      },
      {
        auto:5954,
        fld1:1232609,
        companynr:37,
        fld3:"appendixes",
        fld4:"willed",
        fld5:"Adlerian",
        fld6:""
      },
      {
        auto:5955,
        fld1:999999,
        companynr:99,
        fld3:"",
        fld4:"",
        fld5:"",
        fld6:""
      }
    ],
    t4:[
      {
        companynr:29,
        companyname:"company 1"
      },
      {
        companynr:34,
        companyname:"company 2"
      },
      {
        companynr:36,
        companyname:"company 3"
      },
      {
        companynr:37,
        companyname:"company 4"
      },
      {
        companynr:40,
        companyname:"company 5"
      },
      {
        companynr:41,
        companyname:"company 6"
      },
      {
        companynr:53,
        companyname:"company 7"
      },
      {
        companynr:58,
        companyname:"company 8"
      },
      {
        companynr:65,
        companyname:"company 9"
      },
      {
        companynr:68,
        companyname:"company 10"
      },
      {
        companynr:50,
        companyname:"company 11"
      },
      {
        companynr:0,
        companyname:"Unknown"
      }
    ]
  },
  {
    name:"MYSQL_SELECT_01",
    statement:"select t2.fld3 from t2 where companynr = 58 and fld3 like '%imaginable%'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          fld3:"imaginable"
        }
      ]
    }
  },
  {
    name:"MYSQL_SELECT_02",
    statement:"select fld3 from t2 where fld3 like '%cultivation'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          fld3:"cultivation"
        }
      ]
    }
  },
  {
    name:"MYSQL_SELECT_03",
    statement:"select t2.fld3,companynr from t2 where companynr = 57+1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          fld3:"straggled",
          companynr:58
        },
        {
          fld3:"druggists",
          companynr:58
        },
        {
          fld3:"thanking",
          companynr:58
        },
        {
          fld3:"ostrich",
          companynr:58
        },
        {
          fld3:"hopelessness",
          companynr:58
        },
        {
          fld3:"Eurydice",
          companynr:58
        },
        {
          fld3:"presumes",
          companynr:58
        },
        {
          fld3:"imaginable",
          companynr:58
        },
        {
          fld3:"concoct",
          companynr:58
        },
        {
          fld3:"peering",
          companynr:58
        },
        {
          fld3:"Phelps",
          companynr:58
        },
        {
          fld3:"ferociousness",
          companynr:58
        },
        {
          fld3:"sentences",
          companynr:58
        },
        {
          fld3:"unlocks",
          companynr:58
        },
        {
          fld3:"engrossing",
          companynr:58
        },
        {
          fld3:"Ruth",
          companynr:58
        },
        {
          fld3:"tying",
          companynr:58
        },
        {
          fld3:"exclaimers",
          companynr:58
        },
        {
          fld3:"synergy",
          companynr:58
        },
        {
          fld3:"Huey",
          companynr:58
        },
        {
          fld3:"merging",
          companynr:58
        },
        {
          fld3:"judges",
          companynr:58
        },
        {
          fld3:"Shylock",
          companynr:58
        }
      ]
    }
  },
  {
    name:"MYSQL_SELECT_04",
    statement:"select fld3,companynr from t2 where companynr = 58",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          fld3:"straggled",
          companynr:58
        },
        {
          fld3:"druggists",
          companynr:58
        },
        {
          fld3:"thanking",
          companynr:58
        },
        {
          fld3:"ostrich",
          companynr:58
        },
        {
          fld3:"hopelessness",
          companynr:58
        },
        {
          fld3:"Eurydice",
          companynr:58
        },
        {
          fld3:"presumes",
          companynr:58
        },
        {
          fld3:"imaginable",
          companynr:58
        },
        {
          fld3:"concoct",
          companynr:58
        },
        {
          fld3:"peering",
          companynr:58
        },
        {
          fld3:"Phelps",
          companynr:58
        },
        {
          fld3:"ferociousness",
          companynr:58
        },
        {
          fld3:"sentences",
          companynr:58
        },
        {
          fld3:"unlocks",
          companynr:58
        },
        {
          fld3:"engrossing",
          companynr:58
        },
        {
          fld3:"Ruth",
          companynr:58
        },
        {
          fld3:"tying",
          companynr:58
        },
        {
          fld3:"exclaimers",
          companynr:58
        },
        {
          fld3:"synergy",
          companynr:58
        },
        {
          fld3:"Huey",
          companynr:58
        },
        {
          fld3:"merging",
          companynr:58
        },
        {
          fld3:"judges",
          companynr:58
        },
        {
          fld3:"Shylock",
          companynr:58
        }
      ]
    }
  },
  {
    name:"MYSQL_SELECT_05",
    statement:"select t2.fld3 from t2 where fld3 = 'honeysuckle'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          fld3:"honeysuckle"
        }
      ]
    }
  },
  {
    name:"MYSQL_SELECT_06",
    statement:"select t2.fld3 from t2 where fld3 LIKE 'honeysuckl_'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          fld3:"honeysuckle"
        }
      ]
    }
  },
  {
    name:"MYSQL_SELECT_07",
    statement:"select t2.fld3 from t2 where fld3 LIKE 'hon_ysuckl_'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          fld3:"honeysuckle"
        }
      ]
    }
  },
  {
    name:"MYSQL_SELECT_08",
    statement:"select t2.fld3 from t2 where fld3 LIKE 'honeysuckle%'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          fld3:"honeysuckle"
        }
      ]
    }
  },
  {
    name:"MYSQL_SELECT_09",
    statement:"select t2.fld3 from t2 where fld3 LIKE 'h%le'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          fld3:"honeysuckle"
        }
      ]
    }
  },
  {
    name:"MYSQL_SELECT_10",
    statement:"select t2.fld3 from t2 where fld3 LIKE 'honeysuckle_'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"MYSQL_SELECT_11",
    statement:"select t2.fld3 from t2 where fld3 LIKE 'don_t_find_me_please%'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"MYSQL_SELECT_12",
    statement:"select t2.fld3 from t2 where fld3 >= 'honeysuckle' and fld3 <= 'honoring'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          fld3:"honoring"
        },
        {
          fld3:"honeysuckle"
        }
      ]
    }
  },
  {
    name:"MYSQL_SELECT_13",
    statement:"select fld1,fld3 from t2 where fld3='Colombo' or fld3 = 'nondecreasing'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          fld1:148504,
          fld3:"Colombo"
        },
        {
          fld1:68305,
          fld3:"Colombo"
        },
        {
          fld1:0,
          fld3:"nondecreasing"
        }
      ]
    }
  },
  {
    name:"MYSQL_SELECT_14",
    statement:"select fld1,fld3 from t2 where companynr = 37 and fld3 = 'appendixes'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          fld1:232605,
          fld3:"appendixes"
        },
        {
          fld1:1232605,
          fld3:"appendixes"
        },
        {
          fld1:1232606,
          fld3:"appendixes"
        },
        {
          fld1:1232607,
          fld3:"appendixes"
        },
        {
          fld1:1232608,
          fld3:"appendixes"
        },
        {
          fld1:1232609,
          fld3:"appendixes"
        }
      ]
    }
  },
  {
    name:"MYSQL_SELECT_15",
    statement:"select fld1 from t2 where fld1=250501 or fld1=250502 or fld1 >= 250505 and fld1 <= 250601 or fld1 between 250501 and 250502",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          fld1:250501
        },
        {
          fld1:250502
        },
        {
          fld1:250505
        },
        {
          fld1:250601
        }
      ]
    }
  },
  {
    name:"MYSQL_SELECT_16",
    statement:"select fld3 from t2 where fld3 like 'L%' and fld3 = 'ok'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"MYSQL_SELECT_17",
    statement:"select fld3 from t2 where (fld3 like 'C%' and fld3 = 'Chantilly')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          fld3:"Chantilly"
        }
      ]
    }
  },
  {
    name:"MYSQL_SELECT_18",
    statement:"select period from t1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          period:9410
        }
      ]
    }
  },
  {
    name:"MYSQL_SELECT_19",
    statement:"select period from t1 where period=1900",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"MYSQL_SELECT_20",
    statement:"select fld3,period from t1,t2 where fld1 = 011401",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          fld3:"breaking",
          period:9410
        }
      ]
    }
  },
  {
    name:"MYSQL_SELECT_21",
    statement:"select fld3,period from t2,t1 where companynr*10 = 37*10",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          fld3:"breaking",
          period:9410
        },
        {
          fld3:"Romans",
          period:9410
        },
        {
          fld3:"intercepted",
          period:9410
        },
        {
          fld3:"bewilderingly",
          period:9410
        },
        {
          fld3:"astound",
          period:9410
        },
        {
          fld3:"admonishing",
          period:9410
        },
        {
          fld3:"sumac",
          period:9410
        },
        {
          fld3:"flanking",
          period:9410
        },
        {
          fld3:"combed",
          period:9410
        },
        {
          fld3:"subjective",
          period:9410
        },
        {
          fld3:"scatterbrain",
          period:9410
        },
        {
          fld3:"Eulerian",
          period:9410
        },
        {
          fld3:"Kane",
          period:9410
        },
        {
          fld3:"overlay",
          period:9410
        },
        {
          fld3:"perturb",
          period:9410
        },
        {
          fld3:"goblins",
          period:9410
        },
        {
          fld3:"annihilates",
          period:9410
        },
        {
          fld3:"Wotan",
          period:9410
        },
        {
          fld3:"snatching",
          period:9410
        },
        {
          fld3:"concludes",
          period:9410
        },
        {
          fld3:"laterally",
          period:9410
        },
        {
          fld3:"yelped",
          period:9410
        },
        {
          fld3:"grazing",
          period:9410
        },
        {
          fld3:"Baird",
          period:9410
        },
        {
          fld3:"celery",
          period:9410
        },
        {
          fld3:"misunderstander",
          period:9410
        },
        {
          fld3:"handgun",
          period:9410
        },
        {
          fld3:"foldout",
          period:9410
        },
        {
          fld3:"mystic",
          period:9410
        },
        {
          fld3:"succumbed",
          period:9410
        },
        {
          fld3:"Nabisco",
          period:9410
        },
        {
          fld3:"fingerings",
          period:9410
        },
        {
          fld3:"aging",
          period:9410
        },
        {
          fld3:"afield",
          period:9410
        },
        {
          fld3:"ammonium",
          period:9410
        },
        {
          fld3:"boat",
          period:9410
        },
        {
          fld3:"intelligibility",
          period:9410
        },
        {
          fld3:"Augustine",
          period:9410
        },
        {
          fld3:"teethe",
          period:9410
        },
        {
          fld3:"dreaded",
          period:9410
        },
        {
          fld3:"scholastics",
          period:9410
        },
        {
          fld3:"audiology",
          period:9410
        },
        {
          fld3:"wallet",
          period:9410
        },
        {
          fld3:"parters",
          period:9410
        },
        {
          fld3:"eschew",
          period:9410
        },
        {
          fld3:"quitter",
          period:9410
        },
        {
          fld3:"neat",
          period:9410
        },
        {
          fld3:"Steinberg",
          period:9410
        },
        {
          fld3:"jarring",
          period:9410
        },
        {
          fld3:"tinily",
          period:9410
        },
        {
          fld3:"balled",
          period:9410
        },
        {
          fld3:"persist",
          period:9410
        },
        {
          fld3:"attainments",
          period:9410
        },
        {
          fld3:"fanatic",
          period:9410
        },
        {
          fld3:"measures",
          period:9410
        },
        {
          fld3:"rightfulness",
          period:9410
        },
        {
          fld3:"capably",
          period:9410
        },
        {
          fld3:"impulsive",
          period:9410
        },
        {
          fld3:"starlet",
          period:9410
        },
        {
          fld3:"terminators",
          period:9410
        },
        {
          fld3:"untying",
          period:9410
        },
        {
          fld3:"announces",
          period:9410
        },
        {
          fld3:"featherweight",
          period:9410
        },
        {
          fld3:"pessimist",
          period:9410
        },
        {
          fld3:"daughter",
          period:9410
        },
        {
          fld3:"decliner",
          period:9410
        },
        {
          fld3:"lawgiver",
          period:9410
        },
        {
          fld3:"stated",
          period:9410
        },
        {
          fld3:"readable",
          period:9410
        },
        {
          fld3:"attrition",
          period:9410
        },
        {
          fld3:"cascade",
          period:9410
        },
        {
          fld3:"motors",
          period:9410
        },
        {
          fld3:"interrogate",
          period:9410
        },
        {
          fld3:"pests",
          period:9410
        },
        {
          fld3:"stairway",
          period:9410
        },
        {
          fld3:"dopers",
          period:9410
        },
        {
          fld3:"testicle",
          period:9410
        },
        {
          fld3:"Parsifal",
          period:9410
        },
        {
          fld3:"leavings",
          period:9410
        },
        {
          fld3:"postulation",
          period:9410
        },
        {
          fld3:"squeaking",
          period:9410
        },
        {
          fld3:"contrasted",
          period:9410
        },
        {
          fld3:"leftover",
          period:9410
        },
        {
          fld3:"whiteners",
          period:9410
        },
        {
          fld3:"erases",
          period:9410
        },
        {
          fld3:"Punjab",
          period:9410
        },
        {
          fld3:"Merritt",
          period:9410
        },
        {
          fld3:"Quixotism",
          period:9410
        },
        {
          fld3:"sweetish",
          period:9410
        },
        {
          fld3:"dogging",
          period:9410
        },
        {
          fld3:"scornfully",
          period:9410
        },
        {
          fld3:"bellow",
          period:9410
        },
        {
          fld3:"bills",
          period:9410
        },
        {
          fld3:"cupboard",
          period:9410
        },
        {
          fld3:"sureties",
          period:9410
        },
        {
          fld3:"puddings",
          period:9410
        },
        {
          fld3:"fetters",
          period:9410
        },
        {
          fld3:"bivalves",
          period:9410
        },
        {
          fld3:"incurring",
          period:9410
        },
        {
          fld3:"Adolph",
          period:9410
        },
        {
          fld3:"pithed",
          period:9410
        },
        {
          fld3:"Miles",
          period:9410
        },
        {
          fld3:"trimmings",
          period:9410
        },
        {
          fld3:"tragedies",
          period:9410
        },
        {
          fld3:"skulking",
          period:9410
        },
        {
          fld3:"flint",
          period:9410
        },
        {
          fld3:"flopping",
          period:9410
        },
        {
          fld3:"relaxing",
          period:9410
        },
        {
          fld3:"offload",
          period:9410
        },
        {
          fld3:"suites",
          period:9410
        },
        {
          fld3:"lists",
          period:9410
        },
        {
          fld3:"animized",
          period:9410
        },
        {
          fld3:"multilayer",
          period:9410
        },
        {
          fld3:"standardizes",
          period:9410
        },
        {
          fld3:"Judas",
          period:9410
        },
        {
          fld3:"vacuuming",
          period:9410
        },
        {
          fld3:"dentally",
          period:9410
        },
        {
          fld3:"humanness",
          period:9410
        },
        {
          fld3:"inch",
          period:9410
        },
        {
          fld3:"Weissmuller",
          period:9410
        },
        {
          fld3:"irresponsibly",
          period:9410
        },
        {
          fld3:"luckily",
          period:9410
        },
        {
          fld3:"culled",
          period:9410
        },
        {
          fld3:"medical",
          period:9410
        },
        {
          fld3:"bloodbath",
          period:9410
        },
        {
          fld3:"subschema",
          period:9410
        },
        {
          fld3:"animals",
          period:9410
        },
        {
          fld3:"Micronesia",
          period:9410
        },
        {
          fld3:"repetitions",
          period:9410
        },
        {
          fld3:"Antares",
          period:9410
        },
        {
          fld3:"ventilate",
          period:9410
        },
        {
          fld3:"pityingly",
          period:9410
        },
        {
          fld3:"interdependent",
          period:9410
        },
        {
          fld3:"Graves",
          period:9410
        },
        {
          fld3:"neonatal",
          period:9410
        },
        {
          fld3:"chafe",
          period:9410
        },
        {
          fld3:"honoring",
          period:9410
        },
        {
          fld3:"realtor",
          period:9410
        },
        {
          fld3:"elite",
          period:9410
        },
        {
          fld3:"funereal",
          period:9410
        },
        {
          fld3:"abrogating",
          period:9410
        },
        {
          fld3:"sorters",
          period:9410
        },
        {
          fld3:"Conley",
          period:9410
        },
        {
          fld3:"lectured",
          period:9410
        },
        {
          fld3:"Abraham",
          period:9410
        },
        {
          fld3:"Hawaii",
          period:9410
        },
        {
          fld3:"cage",
          period:9410
        },
        {
          fld3:"hushes",
          period:9410
        },
        {
          fld3:"Simla",
          period:9410
        },
        {
          fld3:"reporters",
          period:9410
        },
        {
          fld3:"Dutchman",
          period:9410
        },
        {
          fld3:"descendants",
          period:9410
        },
        {
          fld3:"groupings",
          period:9410
        },
        {
          fld3:"dissociate",
          period:9410
        },
        {
          fld3:"coexist",
          period:9410
        },
        {
          fld3:"Beebe",
          period:9410
        },
        {
          fld3:"Taoism",
          period:9410
        },
        {
          fld3:"Connally",
          period:9410
        },
        {
          fld3:"fetched",
          period:9410
        },
        {
          fld3:"checkpoints",
          period:9410
        },
        {
          fld3:"rusting",
          period:9410
        },
        {
          fld3:"galling",
          period:9410
        },
        {
          fld3:"obliterates",
          period:9410
        },
        {
          fld3:"traitor",
          period:9410
        },
        {
          fld3:"resumes",
          period:9410
        },
        {
          fld3:"analyzable",
          period:9410
        },
        {
          fld3:"terminator",
          period:9410
        },
        {
          fld3:"gritty",
          period:9410
        },
        {
          fld3:"firearm",
          period:9410
        },
        {
          fld3:"minima",
          period:9410
        },
        {
          fld3:"Selfridge",
          period:9410
        },
        {
          fld3:"disable",
          period:9410
        },
        {
          fld3:"witchcraft",
          period:9410
        },
        {
          fld3:"betroth",
          period:9410
        },
        {
          fld3:"Manhattanize",
          period:9410
        },
        {
          fld3:"imprint",
          period:9410
        },
        {
          fld3:"peeked",
          period:9410
        },
        {
          fld3:"swelling",
          period:9410
        },
        {
          fld3:"interrelationships",
          period:9410
        },
        {
          fld3:"riser",
          period:9410
        },
        {
          fld3:"Gandhian",
          period:9410
        },
        {
          fld3:"peacock",
          period:9410
        },
        {
          fld3:"bee",
          period:9410
        },
        {
          fld3:"kanji",
          period:9410
        },
        {
          fld3:"dental",
          period:9410
        },
        {
          fld3:"scarf",
          period:9410
        },
        {
          fld3:"chasm",
          period:9410
        },
        {
          fld3:"insolence",
          period:9410
        },
        {
          fld3:"syndicate",
          period:9410
        },
        {
          fld3:"alike",
          period:9410
        },
        {
          fld3:"imperial",
          period:9410
        },
        {
          fld3:"convulsion",
          period:9410
        },
        {
          fld3:"railway",
          period:9410
        },
        {
          fld3:"validate",
          period:9410
        },
        {
          fld3:"normalizes",
          period:9410
        },
        {
          fld3:"comprehensive",
          period:9410
        },
        {
          fld3:"chewing",
          period:9410
        },
        {
          fld3:"denizen",
          period:9410
        },
        {
          fld3:"schemer",
          period:9410
        },
        {
          fld3:"chronicle",
          period:9410
        },
        {
          fld3:"Kline",
          period:9410
        },
        {
          fld3:"Anatole",
          period:9410
        },
        {
          fld3:"partridges",
          period:9410
        },
        {
          fld3:"brunch",
          period:9410
        },
        {
          fld3:"recruited",
          period:9410
        },
        {
          fld3:"dimensions",
          period:9410
        },
        {
          fld3:"Chicana",
          period:9410
        },
        {
          fld3:"announced",
          period:9410
        },
        {
          fld3:"praised",
          period:9410
        },
        {
          fld3:"employing",
          period:9410
        },
        {
          fld3:"linear",
          period:9410
        },
        {
          fld3:"quagmire",
          period:9410
        },
        {
          fld3:"western",
          period:9410
        },
        {
          fld3:"relishing",
          period:9410
        },
        {
          fld3:"serving",
          period:9410
        },
        {
          fld3:"scheduling",
          period:9410
        },
        {
          fld3:"lore",
          period:9410
        },
        {
          fld3:"eventful",
          period:9410
        },
        {
          fld3:"arteriole",
          period:9410
        },
        {
          fld3:"disentangle",
          period:9410
        },
        {
          fld3:"cured",
          period:9410
        },
        {
          fld3:"Fenton",
          period:9410
        },
        {
          fld3:"avoidable",
          period:9410
        },
        {
          fld3:"drains",
          period:9410
        },
        {
          fld3:"detectably",
          period:9410
        },
        {
          fld3:"husky",
          period:9410
        },
        {
          fld3:"impelling",
          period:9410
        },
        {
          fld3:"undoes",
          period:9410
        },
        {
          fld3:"evened",
          period:9410
        },
        {
          fld3:"squeezes",
          period:9410
        },
        {
          fld3:"destroyer",
          period:9410
        },
        {
          fld3:"rudeness",
          period:9410
        },
        {
          fld3:"beaner",
          period:9410
        },
        {
          fld3:"boorish",
          period:9410
        },
        {
          fld3:"Everhart",
          period:9410
        },
        {
          fld3:"encompass",
          period:9410
        },
        {
          fld3:"mushrooms",
          period:9410
        },
        {
          fld3:"Alison",
          period:9410
        },
        {
          fld3:"externally",
          period:9410
        },
        {
          fld3:"pellagra",
          period:9410
        },
        {
          fld3:"cult",
          period:9410
        },
        {
          fld3:"creek",
          period:9410
        },
        {
          fld3:"Huffman",
          period:9410
        },
        {
          fld3:"Majorca",
          period:9410
        },
        {
          fld3:"governing",
          period:9410
        },
        {
          fld3:"gadfly",
          period:9410
        },
        {
          fld3:"reassigned",
          period:9410
        },
        {
          fld3:"intentness",
          period:9410
        },
        {
          fld3:"craziness",
          period:9410
        },
        {
          fld3:"psychic",
          period:9410
        },
        {
          fld3:"squabbled",
          period:9410
        },
        {
          fld3:"burlesque",
          period:9410
        },
        {
          fld3:"capped",
          period:9410
        },
        {
          fld3:"extracted",
          period:9410
        },
        {
          fld3:"DiMaggio",
          period:9410
        },
        {
          fld3:"exclamation",
          period:9410
        },
        {
          fld3:"subdirectory",
          period:9410
        },
        {
          fld3:"Gothicism",
          period:9410
        },
        {
          fld3:"feminine",
          period:9410
        },
        {
          fld3:"metaphysically",
          period:9410
        },
        {
          fld3:"sanding",
          period:9410
        },
        {
          fld3:"Miltonism",
          period:9410
        },
        {
          fld3:"freakish",
          period:9410
        },
        {
          fld3:"index",
          period:9410
        },
        {
          fld3:"straight",
          period:9410
        },
        {
          fld3:"flurried",
          period:9410
        },
        {
          fld3:"denotative",
          period:9410
        },
        {
          fld3:"coming",
          period:9410
        },
        {
          fld3:"commencements",
          period:9410
        },
        {
          fld3:"gentleman",
          period:9410
        },
        {
          fld3:"gifted",
          period:9410
        },
        {
          fld3:"Shanghais",
          period:9410
        },
        {
          fld3:"sportswriting",
          period:9410
        },
        {
          fld3:"sloping",
          period:9410
        },
        {
          fld3:"navies",
          period:9410
        },
        {
          fld3:"leaflet",
          period:9410
        },
        {
          fld3:"shooter",
          period:9410
        },
        {
          fld3:"Joplin",
          period:9410
        },
        {
          fld3:"babies",
          period:9410
        },
        {
          fld3:"assails",
          period:9410
        },
        {
          fld3:"admiring",
          period:9410
        },
        {
          fld3:"swaying",
          period:9410
        },
        {
          fld3:"Goldstine",
          period:9410
        },
        {
          fld3:"fitting",
          period:9410
        },
        {
          fld3:"Norwalk",
          period:9410
        },
        {
          fld3:"analogy",
          period:9410
        },
        {
          fld3:"deludes",
          period:9410
        },
        {
          fld3:"cokes",
          period:9410
        },
        {
          fld3:"Clayton",
          period:9410
        },
        {
          fld3:"exhausts",
          period:9410
        },
        {
          fld3:"causality",
          period:9410
        },
        {
          fld3:"sating",
          period:9410
        },
        {
          fld3:"icon",
          period:9410
        },
        {
          fld3:"throttles",
          period:9410
        },
        {
          fld3:"communicants",
          period:9410
        },
        {
          fld3:"dehydrate",
          period:9410
        },
        {
          fld3:"priceless",
          period:9410
        },
        {
          fld3:"publicly",
          period:9410
        },
        {
          fld3:"incidentals",
          period:9410
        },
        {
          fld3:"commonplace",
          period:9410
        },
        {
          fld3:"mumbles",
          period:9410
        },
        {
          fld3:"furthermore",
          period:9410
        },
        {
          fld3:"cautioned",
          period:9410
        },
        {
          fld3:"parametrized",
          period:9410
        },
        {
          fld3:"registration",
          period:9410
        },
        {
          fld3:"sadly",
          period:9410
        },
        {
          fld3:"positioning",
          period:9410
        },
        {
          fld3:"babysitting",
          period:9410
        },
        {
          fld3:"eternal",
          period:9410
        },
        {
          fld3:"hoarder",
          period:9410
        },
        {
          fld3:"congregates",
          period:9410
        },
        {
          fld3:"rains",
          period:9410
        },
        {
          fld3:"workers",
          period:9410
        },
        {
          fld3:"sags",
          period:9410
        },
        {
          fld3:"unplug",
          period:9410
        },
        {
          fld3:"garage",
          period:9410
        },
        {
          fld3:"boulder",
          period:9410
        },
        {
          fld3:"specifics",
          period:9410
        },
        {
          fld3:"Teresa",
          period:9410
        },
        {
          fld3:"Winsett",
          period:9410
        },
        {
          fld3:"convenient",
          period:9410
        },
        {
          fld3:"buckboards",
          period:9410
        },
        {
          fld3:"amenities",
          period:9410
        },
        {
          fld3:"resplendent",
          period:9410
        },
        {
          fld3:"sews",
          period:9410
        },
        {
          fld3:"participated",
          period:9410
        },
        {
          fld3:"Simon",
          period:9410
        },
        {
          fld3:"certificates",
          period:9410
        },
        {
          fld3:"Fitzpatrick",
          period:9410
        },
        {
          fld3:"Evanston",
          period:9410
        },
        {
          fld3:"misted",
          period:9410
        },
        {
          fld3:"textures",
          period:9410
        },
        {
          fld3:"save",
          period:9410
        },
        {
          fld3:"count",
          period:9410
        },
        {
          fld3:"rightful",
          period:9410
        },
        {
          fld3:"chaperone",
          period:9410
        },
        {
          fld3:"Lizzy",
          period:9410
        },
        {
          fld3:"clenched",
          period:9410
        },
        {
          fld3:"effortlessly",
          period:9410
        },
        {
          fld3:"accessed",
          period:9410
        },
        {
          fld3:"beaters",
          period:9410
        },
        {
          fld3:"Hornblower",
          period:9410
        },
        {
          fld3:"vests",
          period:9410
        },
        {
          fld3:"indulgences",
          period:9410
        },
        {
          fld3:"infallibly",
          period:9410
        },
        {
          fld3:"unwilling",
          period:9410
        },
        {
          fld3:"excrete",
          period:9410
        },
        {
          fld3:"spools",
          period:9410
        },
        {
          fld3:"crunches",
          period:9410
        },
        {
          fld3:"overestimating",
          period:9410
        },
        {
          fld3:"ineffective",
          period:9410
        },
        {
          fld3:"humiliation",
          period:9410
        },
        {
          fld3:"sophomore",
          period:9410
        },
        {
          fld3:"star",
          period:9410
        },
        {
          fld3:"rifles",
          period:9410
        },
        {
          fld3:"dialysis",
          period:9410
        },
        {
          fld3:"arriving",
          period:9410
        },
        {
          fld3:"indulge",
          period:9410
        },
        {
          fld3:"clockers",
          period:9410
        },
        {
          fld3:"languages",
          period:9410
        },
        {
          fld3:"Antarctica",
          period:9410
        },
        {
          fld3:"percentage",
          period:9410
        },
        {
          fld3:"ceiling",
          period:9410
        },
        {
          fld3:"specification",
          period:9410
        },
        {
          fld3:"regimented",
          period:9410
        },
        {
          fld3:"ciphers",
          period:9410
        },
        {
          fld3:"pictures",
          period:9410
        },
        {
          fld3:"serpents",
          period:9410
        },
        {
          fld3:"allot",
          period:9410
        },
        {
          fld3:"realized",
          period:9410
        },
        {
          fld3:"mayoral",
          period:9410
        },
        {
          fld3:"opaquely",
          period:9410
        },
        {
          fld3:"hostess",
          period:9410
        },
        {
          fld3:"fiftieth",
          period:9410
        },
        {
          fld3:"incorrectly",
          period:9410
        },
        {
          fld3:"decomposition",
          period:9410
        },
        {
          fld3:"stranglings",
          period:9410
        },
        {
          fld3:"mixture",
          period:9410
        },
        {
          fld3:"electroencephalography",
          period:9410
        },
        {
          fld3:"similarities",
          period:9410
        },
        {
          fld3:"charges",
          period:9410
        },
        {
          fld3:"freest",
          period:9410
        },
        {
          fld3:"Greenberg",
          period:9410
        },
        {
          fld3:"tinting",
          period:9410
        },
        {
          fld3:"expelled",
          period:9410
        },
        {
          fld3:"warm",
          period:9410
        },
        {
          fld3:"smoothed",
          period:9410
        },
        {
          fld3:"deductions",
          period:9410
        },
        {
          fld3:"Romano",
          period:9410
        },
        {
          fld3:"bitterroot",
          period:9410
        },
        {
          fld3:"corset",
          period:9410
        },
        {
          fld3:"securing",
          period:9410
        },
        {
          fld3:"environing",
          period:9410
        },
        {
          fld3:"cute",
          period:9410
        },
        {
          fld3:"Crays",
          period:9410
        },
        {
          fld3:"heiress",
          period:9410
        },
        {
          fld3:"inform",
          period:9410
        },
        {
          fld3:"avenge",
          period:9410
        },
        {
          fld3:"universals",
          period:9410
        },
        {
          fld3:"Kinsey",
          period:9410
        },
        {
          fld3:"ravines",
          period:9410
        },
        {
          fld3:"bestseller",
          period:9410
        },
        {
          fld3:"equilibrium",
          period:9410
        },
        {
          fld3:"extents",
          period:9410
        },
        {
          fld3:"relatively",
          period:9410
        },
        {
          fld3:"pressure",
          period:9410
        },
        {
          fld3:"critiques",
          period:9410
        },
        {
          fld3:"befouled",
          period:9410
        },
        {
          fld3:"rightfully",
          period:9410
        },
        {
          fld3:"mechanizing",
          period:9410
        },
        {
          fld3:"Latinizes",
          period:9410
        },
        {
          fld3:"timesharing",
          period:9410
        },
        {
          fld3:"Aden",
          period:9410
        },
        {
          fld3:"embassies",
          period:9410
        },
        {
          fld3:"males",
          period:9410
        },
        {
          fld3:"shapelessly",
          period:9410
        },
        {
          fld3:"mastering",
          period:9410
        },
        {
          fld3:"Newtonian",
          period:9410
        },
        {
          fld3:"finishers",
          period:9410
        },
        {
          fld3:"abates",
          period:9410
        },
        {
          fld3:"teem",
          period:9410
        },
        {
          fld3:"kiting",
          period:9410
        },
        {
          fld3:"stodgy",
          period:9410
        },
        {
          fld3:"feed",
          period:9410
        },
        {
          fld3:"guitars",
          period:9410
        },
        {
          fld3:"airships",
          period:9410
        },
        {
          fld3:"store",
          period:9410
        },
        {
          fld3:"denounces",
          period:9410
        },
        {
          fld3:"Pyle",
          period:9410
        },
        {
          fld3:"Saxony",
          period:9410
        },
        {
          fld3:"serializations",
          period:9410
        },
        {
          fld3:"Peruvian",
          period:9410
        },
        {
          fld3:"taxonomically",
          period:9410
        },
        {
          fld3:"kingdom",
          period:9410
        },
        {
          fld3:"stint",
          period:9410
        },
        {
          fld3:"Sault",
          period:9410
        },
        {
          fld3:"faithful",
          period:9410
        },
        {
          fld3:"Ganymede",
          period:9410
        },
        {
          fld3:"tidiness",
          period:9410
        },
        {
          fld3:"gainful",
          period:9410
        },
        {
          fld3:"contrary",
          period:9410
        },
        {
          fld3:"Tipperary",
          period:9410
        },
        {
          fld3:"tropics",
          period:9410
        },
        {
          fld3:"theorizers",
          period:9410
        },
        {
          fld3:"renew",
          period:9410
        },
        {
          fld3:"already",
          period:9410
        },
        {
          fld3:"terminal",
          period:9410
        },
        {
          fld3:"Hegelian",
          period:9410
        },
        {
          fld3:"hypothesizer",
          period:9410
        },
        {
          fld3:"warningly",
          period:9410
        },
        {
          fld3:"journalizing",
          period:9410
        },
        {
          fld3:"nested",
          period:9410
        },
        {
          fld3:"Lars",
          period:9410
        },
        {
          fld3:"saplings",
          period:9410
        },
        {
          fld3:"foothill",
          period:9410
        },
        {
          fld3:"labeled",
          period:9410
        },
        {
          fld3:"imperiously",
          period:9410
        },
        {
          fld3:"reporters",
          period:9410
        },
        {
          fld3:"furnishings",
          period:9410
        },
        {
          fld3:"precipitable",
          period:9410
        },
        {
          fld3:"discounts",
          period:9410
        },
        {
          fld3:"excises",
          period:9410
        },
        {
          fld3:"Stalin",
          period:9410
        },
        {
          fld3:"despot",
          period:9410
        },
        {
          fld3:"ripeness",
          period:9410
        },
        {
          fld3:"Arabia",
          period:9410
        },
        {
          fld3:"unruly",
          period:9410
        },
        {
          fld3:"mournfulness",
          period:9410
        },
        {
          fld3:"boom",
          period:9410
        },
        {
          fld3:"slaughter",
          period:9410
        },
        {
          fld3:"Sabine",
          period:9410
        },
        {
          fld3:"handy",
          period:9410
        },
        {
          fld3:"rural",
          period:9410
        },
        {
          fld3:"organizer",
          period:9410
        },
        {
          fld3:"shipyard",
          period:9410
        },
        {
          fld3:"civics",
          period:9410
        },
        {
          fld3:"inaccuracy",
          period:9410
        },
        {
          fld3:"rules",
          period:9410
        },
        {
          fld3:"juveniles",
          period:9410
        },
        {
          fld3:"comprised",
          period:9410
        },
        {
          fld3:"investigations",
          period:9410
        },
        {
          fld3:"stabilizes",
          period:9410
        },
        {
          fld3:"seminaries",
          period:9410
        },
        {
          fld3:"Hunter",
          period:9410
        },
        {
          fld3:"sporty",
          period:9410
        },
        {
          fld3:"test",
          period:9410
        },
        {
          fld3:"weasels",
          period:9410
        },
        {
          fld3:"CERN",
          period:9410
        },
        {
          fld3:"tempering",
          period:9410
        },
        {
          fld3:"afore",
          period:9410
        },
        {
          fld3:"Galatean",
          period:9410
        },
        {
          fld3:"techniques",
          period:9410
        },
        {
          fld3:"error",
          period:9410
        },
        {
          fld3:"veranda",
          period:9410
        },
        {
          fld3:"severely",
          period:9410
        },
        {
          fld3:"Cassites",
          period:9410
        },
        {
          fld3:"forthcoming",
          period:9410
        },
        {
          fld3:"guides",
          period:9410
        },
        {
          fld3:"vanish",
          period:9410
        },
        {
          fld3:"lied",
          period:9410
        },
        {
          fld3:"sawtooth",
          period:9410
        },
        {
          fld3:"fated",
          period:9410
        },
        {
          fld3:"gradually",
          period:9410
        },
        {
          fld3:"widens",
          period:9410
        },
        {
          fld3:"preclude",
          period:9410
        },
        {
          fld3:"evenhandedly",
          period:9410
        },
        {
          fld3:"percentage",
          period:9410
        },
        {
          fld3:"disobedience",
          period:9410
        },
        {
          fld3:"humility",
          period:9410
        },
        {
          fld3:"gleaning",
          period:9410
        },
        {
          fld3:"petted",
          period:9410
        },
        {
          fld3:"bloater",
          period:9410
        },
        {
          fld3:"minion",
          period:9410
        },
        {
          fld3:"marginal",
          period:9410
        },
        {
          fld3:"apiary",
          period:9410
        },
        {
          fld3:"measures",
          period:9410
        },
        {
          fld3:"precaution",
          period:9410
        },
        {
          fld3:"repelled",
          period:9410
        },
        {
          fld3:"primary",
          period:9410
        },
        {
          fld3:"coverings",
          period:9410
        },
        {
          fld3:"Artemia",
          period:9410
        },
        {
          fld3:"navigate",
          period:9410
        },
        {
          fld3:"spatial",
          period:9410
        },
        {
          fld3:"Gurkha",
          period:9410
        },
        {
          fld3:"meanwhile",
          period:9410
        },
        {
          fld3:"Melinda",
          period:9410
        },
        {
          fld3:"Butterfield",
          period:9410
        },
        {
          fld3:"Aldrich",
          period:9410
        },
        {
          fld3:"previewing",
          period:9410
        },
        {
          fld3:"glut",
          period:9410
        },
        {
          fld3:"unaffected",
          period:9410
        },
        {
          fld3:"inmate",
          period:9410
        },
        {
          fld3:"mineral",
          period:9410
        },
        {
          fld3:"impending",
          period:9410
        },
        {
          fld3:"meditation",
          period:9410
        },
        {
          fld3:"ideas",
          period:9410
        },
        {
          fld3:"miniaturizes",
          period:9410
        },
        {
          fld3:"lewdly",
          period:9410
        },
        {
          fld3:"title",
          period:9410
        },
        {
          fld3:"youthfulness",
          period:9410
        },
        {
          fld3:"creak",
          period:9410
        },
        {
          fld3:"Chippewa",
          period:9410
        },
        {
          fld3:"clamored",
          period:9410
        },
        {
          fld3:"freezes",
          period:9410
        },
        {
          fld3:"forgivably",
          period:9410
        },
        {
          fld3:"reduce",
          period:9410
        },
        {
          fld3:"McGovern",
          period:9410
        },
        {
          fld3:"Nazis",
          period:9410
        },
        {
          fld3:"epistle",
          period:9410
        },
        {
          fld3:"socializes",
          period:9410
        },
        {
          fld3:"conceptions",
          period:9410
        },
        {
          fld3:"Kevin",
          period:9410
        },
        {
          fld3:"uncovering",
          period:9410
        },
        {
          fld3:"chews",
          period:9410
        },
        {
          fld3:"appendixes",
          period:9410
        },
        {
          fld3:"raining",
          period:9410
        },
        {
          fld3:"infest",
          period:9410
        },
        {
          fld3:"compartment",
          period:9410
        },
        {
          fld3:"minting",
          period:9410
        },
        {
          fld3:"ducks",
          period:9410
        },
        {
          fld3:"roped",
          period:9410
        },
        {
          fld3:"waltz",
          period:9410
        },
        {
          fld3:"Lillian",
          period:9410
        },
        {
          fld3:"repressions",
          period:9410
        },
        {
          fld3:"chillingly",
          period:9410
        },
        {
          fld3:"noncritical",
          period:9410
        },
        {
          fld3:"lithograph",
          period:9410
        },
        {
          fld3:"spongers",
          period:9410
        },
        {
          fld3:"parenthood",
          period:9410
        },
        {
          fld3:"posed",
          period:9410
        },
        {
          fld3:"instruments",
          period:9410
        },
        {
          fld3:"filial",
          period:9410
        },
        {
          fld3:"fixedly",
          period:9410
        },
        {
          fld3:"relives",
          period:9410
        },
        {
          fld3:"Pandora",
          period:9410
        },
        {
          fld3:"watering",
          period:9410
        },
        {
          fld3:"ungrateful",
          period:9410
        },
        {
          fld3:"secures",
          period:9410
        },
        {
          fld3:"poison",
          period:9410
        },
        {
          fld3:"dusted",
          period:9410
        },
        {
          fld3:"encompasses",
          period:9410
        },
        {
          fld3:"presentation",
          period:9410
        },
        {
          fld3:"Kantian",
          period:9410
        },
        {
          fld3:"appendixes",
          period:9410
        },
        {
          fld3:"appendixes",
          period:9410
        },
        {
          fld3:"appendixes",
          period:9410
        },
        {
          fld3:"appendixes",
          period:9410
        },
        {
          fld3:"appendixes",
          period:9410
        }
      ]
    }
  },
  {
    name:"MYSQL_SELECT_22",
    statement:"select * from t1,t1 t12",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          period:9410,
          varor_period:9412,
          period:9410,
          varor_period:9412
        }
      ]
    }
  },
  {
    name:"MYSQL_SELECT_23",
    statement:"select t2.fld1,t22.fld1 from t2,t2 t22 where t2.fld1 >= 250501 and t2.fld1 <= 250505 and t22.fld1 >= 250501 and t22.fld1 <= 250505",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          fld1:250501,
          fld1:250501
        },
        {
          fld1:250501,
          fld1:250502
        },
        {
          fld1:250501,
          fld1:250503
        },
        {
          fld1:250501,
          fld1:250504
        },
        {
          fld1:250501,
          fld1:250505
        },
        {
          fld1:250502,
          fld1:250501
        },
        {
          fld1:250502,
          fld1:250502
        },
        {
          fld1:250502,
          fld1:250503
        },
        {
          fld1:250502,
          fld1:250504
        },
        {
          fld1:250502,
          fld1:250505
        },
        {
          fld1:250503,
          fld1:250501
        },
        {
          fld1:250503,
          fld1:250502
        },
        {
          fld1:250503,
          fld1:250503
        },
        {
          fld1:250503,
          fld1:250504
        },
        {
          fld1:250503,
          fld1:250505
        },
        {
          fld1:250504,
          fld1:250501
        },
        {
          fld1:250504,
          fld1:250502
        },
        {
          fld1:250504,
          fld1:250503
        },
        {
          fld1:250504,
          fld1:250504
        },
        {
          fld1:250504,
          fld1:250505
        },
        {
          fld1:250505,
          fld1:250501
        },
        {
          fld1:250505,
          fld1:250502
        },
        {
          fld1:250505,
          fld1:250503
        },
        {
          fld1:250505,
          fld1:250504
        },
        {
          fld1:250505,
          fld1:250505
        }
      ]
    }
  },
  {
    name:"MYSQL_SELECT_24",
    statement:"select count(*) as countresult from t2 left join t4 on t2.companynr = t4.companynr where t4.companynr is not null",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          countresult:1199
        }
      ]
    }
  },
  {
    name:"MYSQL_SELECT_25",
    statement:"select t2.companynr, t4.companyname from t2 left join t4 on t2.companynr = t4.companynr where t2.companynr is null",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"MYSQL_SELECT_26",
    statement:"select count(*) as countresult from t2 left join t4 on t2.companynr = t4.companynr where t2.companynr is not null",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          countresult:1200
        }
      ]
    }
  },
  {
    name:"MYSQL_SELECT_27",
    statement:"select period from t1 where (((period > 0) or period < 10000 or (period = 1900)) and (period=1900 and period <= 1901) or (period=1903 and (period=1903)) and period>=1902) or ((period=1904 or period=1905) or (period=1906 or period>1907)) or (period=1908 and period = 1909)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          period:9410
        }
      ]
    }
  },
  {
    name:"MYSQL_SELECT_28",
    statement:"select period from t1 where ((period > 0 and period < 1) or (((period > 0 and period < 100) and (period > 10)) or (period > 10)) or (period > 0 and (period > 5 or period > 6)))",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          period:9410
        }
      ]
    }
  },
  {
    name:"MYSQL_SELECT_29",
    statement:"select a.fld1 from t2 as a,t2 b where ((a.fld1 = 250501 and a.fld1=b.fld1) or a.fld1=250502 or a.fld1=250503 or (a.fld1=250505 and a.fld1<=b.fld1 and b.fld1>=a.fld1)) and a.fld1=b.fld1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          fld1:250501
        },
        {
          fld1:250502
        },
        {
          fld1:250503
        },
        {
          fld1:250505
        }
      ]
    }
  },
  {
    name:"MYSQL_SELECT_30",
    statement:"select fld1 from t2 where fld1 in (250502,98005,98006,250503,250605,250606) and fld1 >=250502 and fld1 not in (250605,250606)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          fld1:250502
        },
        {
          fld1:250503
        }
      ]
    }
  },
  {
    name:"MYSQL_SELECT_31",
    statement:"select fld1 from t2 where fld1 between 250502 and 250504",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          fld1:250502
        },
        {
          fld1:250503
        },
        {
          fld1:250504
        }
      ]
    }
  },
  {
    name:"MYSQL_SELECT_32",
    statement:"select t1.period from t1 as t1 limit 1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          period:9410
        }
      ]
    }
  },
  {
    name:"MYSQL_SELECT_33",
    statement:"select t1.period as \"Nuvarande period\" from t1 as t1 limit 1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          'Nuvarande period':9410
        }
      ]
    }
  },
  {
    name:"MYSQL_SELECT_34",
    statement:"select period as ok_period from t1 limit 1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          ok_period:9410
        }
      ]
    }
  }
]
'naughty-strings'::[
  {
    name:"big list of naughty strings{str:\"\"}",
    statement:"{ `literal`: '', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:""
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"",
        variable:"",
        concatenated:""
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"undefined\"}",
    statement:"{ `literal`: 'undefined', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"undefined"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"undefined",
        variable:"undefined",
        concatenated:"undefinedundefined"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"undef\"}",
    statement:"{ `literal`: 'undef', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"undef"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"undef",
        variable:"undef",
        concatenated:"undefundef"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"null\"}",
    statement:"{ `literal`: 'null', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"null"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"null",
        variable:"null",
        concatenated:"nullnull"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"NULL\"}",
    statement:"{ `literal`: 'NULL', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"NULL"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"NULL",
        variable:"NULL",
        concatenated:"NULLNULL"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"(null)\"}",
    statement:"{ `literal`: '(null)', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"(null)"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"(null)",
        variable:"(null)",
        concatenated:"(null)(null)"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"nil\"}",
    statement:"{ `literal`: 'nil', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"nil"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"nil",
        variable:"nil",
        concatenated:"nilnil"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"NIL\"}",
    statement:"{ `literal`: 'NIL', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"NIL"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"NIL",
        variable:"NIL",
        concatenated:"NILNIL"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"true\"}",
    statement:"{ `literal`: 'true', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"true"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"true",
        variable:"true",
        concatenated:"truetrue"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"false\"}",
    statement:"{ `literal`: 'false', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"false"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"false",
        variable:"false",
        concatenated:"falsefalse"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"True\"}",
    statement:"{ `literal`: 'True', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"True"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"True",
        variable:"True",
        concatenated:"TrueTrue"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"False\"}",
    statement:"{ `literal`: 'False', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"False"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"False",
        variable:"False",
        concatenated:"FalseFalse"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"TRUE\"}",
    statement:"{ `literal`: 'TRUE', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"TRUE"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"TRUE",
        variable:"TRUE",
        concatenated:"TRUETRUE"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"FALSE\"}",
    statement:"{ `literal`: 'FALSE', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"FALSE"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"FALSE",
        variable:"FALSE",
        concatenated:"FALSEFALSE"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"None\"}",
    statement:"{ `literal`: 'None', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"None"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"None",
        variable:"None",
        concatenated:"NoneNone"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"hasOwnProperty\"}",
    statement:"{ `literal`: 'hasOwnProperty', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"hasOwnProperty"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"hasOwnProperty",
        variable:"hasOwnProperty",
        concatenated:"hasOwnPropertyhasOwnProperty"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\\\\"}",
    statement:"{ `literal`: '\\', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"\\"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"\\",
        variable:"\\",
        concatenated:"\\\\"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\\\\\\\\"}",
    statement:"{ `literal`: '\\\\', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"\\\\"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"\\\\",
        variable:"\\\\",
        concatenated:"\\\\\\\\"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"0\"}",
    statement:"{ `literal`: '0', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"0"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"0",
        variable:"0",
        concatenated:"00"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"1\"}",
    statement:"{ `literal`: '1', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"1"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"1",
        variable:"1",
        concatenated:"11"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"1.00\"}",
    statement:"{ `literal`: '1.00', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"1.00"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"1.00",
        variable:"1.00",
        concatenated:"1.001.00"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"1.00\"}",
    statement:"{ `literal`: '$1.00', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"$1.00"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"$1.00",
        variable:"$1.00",
        concatenated:"$1.00$1.00"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"1/2\"}",
    statement:"{ `literal`: '1/2', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"1/2"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"1/2",
        variable:"1/2",
        concatenated:"1/21/2"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"1E2\"}",
    statement:"{ `literal`: '1E2', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"1E2"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"1E2",
        variable:"1E2",
        concatenated:"1E21E2"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"1E02\"}",
    statement:"{ `literal`: '1E02', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"1E02"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"1E02",
        variable:"1E02",
        concatenated:"1E021E02"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"1E+02\"}",
    statement:"{ `literal`: '1E+02', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"1E+02"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"1E+02",
        variable:"1E+02",
        concatenated:"1E+021E+02"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"-1\"}",
    statement:"{ `literal`: '-1', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"-1"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"-1",
        variable:"-1",
        concatenated:"-1-1"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"-1.00\"}",
    statement:"{ `literal`: '-1.00', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"-1.00"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"-1.00",
        variable:"-1.00",
        concatenated:"-1.00-1.00"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"-1.00\"}",
    statement:"{ `literal`: '-$1.00', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"-$1.00"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"-$1.00",
        variable:"-$1.00",
        concatenated:"-$1.00-$1.00"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"-1/2\"}",
    statement:"{ `literal`: '-1/2', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"-1/2"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"-1/2",
        variable:"-1/2",
        concatenated:"-1/2-1/2"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"-1E2\"}",
    statement:"{ `literal`: '-1E2', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"-1E2"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"-1E2",
        variable:"-1E2",
        concatenated:"-1E2-1E2"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"-1E02\"}",
    statement:"{ `literal`: '-1E02', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"-1E02"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"-1E02",
        variable:"-1E02",
        concatenated:"-1E02-1E02"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"-1E+02\"}",
    statement:"{ `literal`: '-1E+02', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"-1E+02"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"-1E+02",
        variable:"-1E+02",
        concatenated:"-1E+02-1E+02"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"1/0\"}",
    statement:"{ `literal`: '1/0', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"1/0"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"1/0",
        variable:"1/0",
        concatenated:"1/01/0"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"0/0\"}",
    statement:"{ `literal`: '0/0', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"0/0"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"0/0",
        variable:"0/0",
        concatenated:"0/00/0"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"-2147483648/-1\"}",
    statement:"{ `literal`: '-2147483648/-1', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"-2147483648/-1"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"-2147483648/-1",
        variable:"-2147483648/-1",
        concatenated:"-2147483648/-1-2147483648/-1"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"-9223372036854775808/-1\"}",
    statement:"{ `literal`: '-9223372036854775808/-1', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"-9223372036854775808/-1"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"-9223372036854775808/-1",
        variable:"-9223372036854775808/-1",
        concatenated:"-9223372036854775808/-1-9223372036854775808/-1"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"-0\"}",
    statement:"{ `literal`: '-0', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"-0"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"-0",
        variable:"-0",
        concatenated:"-0-0"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"-0.0\"}",
    statement:"{ `literal`: '-0.0', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"-0.0"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"-0.0",
        variable:"-0.0",
        concatenated:"-0.0-0.0"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"+0\"}",
    statement:"{ `literal`: '+0', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"+0"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"+0",
        variable:"+0",
        concatenated:"+0+0"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"+0.0\"}",
    statement:"{ `literal`: '+0.0', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"+0.0"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"+0.0",
        variable:"+0.0",
        concatenated:"+0.0+0.0"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"0.00\"}",
    statement:"{ `literal`: '0.00', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"0.00"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"0.00",
        variable:"0.00",
        concatenated:"0.000.00"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"0..0\"}",
    statement:"{ `literal`: '0..0', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"0..0"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"0..0",
        variable:"0..0",
        concatenated:"0..00..0"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\".\"}",
    statement:"{ `literal`: '.', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"."
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:".",
        variable:".",
        concatenated:".."
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"0.0.0\"}",
    statement:"{ `literal`: '0.0.0', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"0.0.0"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"0.0.0",
        variable:"0.0.0",
        concatenated:"0.0.00.0.0"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"0,00\"}",
    statement:"{ `literal`: '0,00', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"0,00"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"0,00",
        variable:"0,00",
        concatenated:"0,000,00"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"0,,0\"}",
    statement:"{ `literal`: '0,,0', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"0,,0"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"0,,0",
        variable:"0,,0",
        concatenated:"0,,00,,0"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\",\"}",
    statement:"{ `literal`: ',', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:","
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:",",
        variable:",",
        concatenated:",,"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"0,0,0\"}",
    statement:"{ `literal`: '0,0,0', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"0,0,0"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"0,0,0",
        variable:"0,0,0",
        concatenated:"0,0,00,0,0"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"0.0/0\"}",
    statement:"{ `literal`: '0.0/0', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"0.0/0"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"0.0/0",
        variable:"0.0/0",
        concatenated:"0.0/00.0/0"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"1.0/0.0\"}",
    statement:"{ `literal`: '1.0/0.0', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"1.0/0.0"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"1.0/0.0",
        variable:"1.0/0.0",
        concatenated:"1.0/0.01.0/0.0"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"0.0/0.0\"}",
    statement:"{ `literal`: '0.0/0.0', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"0.0/0.0"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"0.0/0.0",
        variable:"0.0/0.0",
        concatenated:"0.0/0.00.0/0.0"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"1,0/0,0\"}",
    statement:"{ `literal`: '1,0/0,0', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"1,0/0,0"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"1,0/0,0",
        variable:"1,0/0,0",
        concatenated:"1,0/0,01,0/0,0"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"0,0/0,0\"}",
    statement:"{ `literal`: '0,0/0,0', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"0,0/0,0"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"0,0/0,0",
        variable:"0,0/0,0",
        concatenated:"0,0/0,00,0/0,0"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"--1\"}",
    statement:"{ `literal`: '--1', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"--1"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"--1",
        variable:"--1",
        concatenated:"--1--1"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"-.\"}",
    statement:"{ `literal`: '-.', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"-."
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"-.",
        variable:"-.",
        concatenated:"-.-."
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"-,\"}",
    statement:"{ `literal`: '-,', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"-,"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"-,",
        variable:"-,",
        concatenated:"-,-,"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\"}",
    statement:"{ `literal`: '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
        variable:"999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
        concatenated:"999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"NaN\"}",
    statement:"{ `literal`: 'NaN', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"NaN"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"NaN",
        variable:"NaN",
        concatenated:"NaNNaN"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"Infinity\"}",
    statement:"{ `literal`: 'Infinity', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"Infinity"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"Infinity",
        variable:"Infinity",
        concatenated:"InfinityInfinity"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"-Infinity\"}",
    statement:"{ `literal`: '-Infinity', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"-Infinity"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"-Infinity",
        variable:"-Infinity",
        concatenated:"-Infinity-Infinity"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"INF\"}",
    statement:"{ `literal`: 'INF', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"INF"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"INF",
        variable:"INF",
        concatenated:"INFINF"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"1#INF\"}",
    statement:"{ `literal`: '1#INF', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"1#INF"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"1#INF",
        variable:"1#INF",
        concatenated:"1#INF1#INF"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"-1#IND\"}",
    statement:"{ `literal`: '-1#IND', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"-1#IND"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"-1#IND",
        variable:"-1#IND",
        concatenated:"-1#IND-1#IND"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"1#QNAN\"}",
    statement:"{ `literal`: '1#QNAN', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"1#QNAN"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"1#QNAN",
        variable:"1#QNAN",
        concatenated:"1#QNAN1#QNAN"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"1#SNAN\"}",
    statement:"{ `literal`: '1#SNAN', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"1#SNAN"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"1#SNAN",
        variable:"1#SNAN",
        concatenated:"1#SNAN1#SNAN"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"1#IND\"}",
    statement:"{ `literal`: '1#IND', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"1#IND"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"1#IND",
        variable:"1#IND",
        concatenated:"1#IND1#IND"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"0x0\"}",
    statement:"{ `literal`: '0x0', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"0x0"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"0x0",
        variable:"0x0",
        concatenated:"0x00x0"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"0xffffffff\"}",
    statement:"{ `literal`: '0xffffffff', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"0xffffffff"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"0xffffffff",
        variable:"0xffffffff",
        concatenated:"0xffffffff0xffffffff"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"0xffffffffffffffff\"}",
    statement:"{ `literal`: '0xffffffffffffffff', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"0xffffffffffffffff"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"0xffffffffffffffff",
        variable:"0xffffffffffffffff",
        concatenated:"0xffffffffffffffff0xffffffffffffffff"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"0xabad1dea\"}",
    statement:"{ `literal`: '0xabad1dea', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"0xabad1dea"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"0xabad1dea",
        variable:"0xabad1dea",
        concatenated:"0xabad1dea0xabad1dea"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"123456789012345678901234567890123456789\"}",
    statement:"{ `literal`: '123456789012345678901234567890123456789', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"123456789012345678901234567890123456789"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"123456789012345678901234567890123456789",
        variable:"123456789012345678901234567890123456789",
        concatenated:"123456789012345678901234567890123456789123456789012345678901234567890123456789"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"1,000.00\"}",
    statement:"{ `literal`: '1,000.00', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"1,000.00"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"1,000.00",
        variable:"1,000.00",
        concatenated:"1,000.001,000.00"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"1 000.00\"}",
    statement:"{ `literal`: '1 000.00', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"1 000.00"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"1 000.00",
        variable:"1 000.00",
        concatenated:"1 000.001 000.00"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"1,000,000.00\"}",
    statement:"{ `literal`: '1,000,000.00', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"1,000,000.00"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"1,000,000.00",
        variable:"1,000,000.00",
        concatenated:"1,000,000.001,000,000.00"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"1 000 000.00\"}",
    statement:"{ `literal`: '1 000 000.00', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"1 000 000.00"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"1 000 000.00",
        variable:"1 000 000.00",
        concatenated:"1 000 000.001 000 000.00"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"1.000,00\"}",
    statement:"{ `literal`: '1.000,00', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"1.000,00"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"1.000,00",
        variable:"1.000,00",
        concatenated:"1.000,001.000,00"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"1 000,00\"}",
    statement:"{ `literal`: '1 000,00', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"1 000,00"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"1 000,00",
        variable:"1 000,00",
        concatenated:"1 000,001 000,00"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"1.000.000,00\"}",
    statement:"{ `literal`: '1.000.000,00', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"1.000.000,00"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"1.000.000,00",
        variable:"1.000.000,00",
        concatenated:"1.000.000,001.000.000,00"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"1 000 000,00\"}",
    statement:"{ `literal`: '1 000 000,00', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"1 000 000,00"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"1 000 000,00",
        variable:"1 000 000,00",
        concatenated:"1 000 000,001 000 000,00"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"01000\"}",
    statement:"{ `literal`: '01000', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"01000"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"01000",
        variable:"01000",
        concatenated:"0100001000"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"08\"}",
    statement:"{ `literal`: '08', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"08"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"08",
        variable:"08",
        concatenated:"0808"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"09\"}",
    statement:"{ `literal`: '09', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"09"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"09",
        variable:"09",
        concatenated:"0909"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"2.2250738585072011e-308\"}",
    statement:"{ `literal`: '2.2250738585072011e-308', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"2.2250738585072011e-308"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"2.2250738585072011e-308",
        variable:"2.2250738585072011e-308",
        concatenated:"2.2250738585072011e-3082.2250738585072011e-308"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<>?:\\\"{}|_+\"}",
    statement:"{ `literal`: '<>?:\"{}|_+', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<>?:\"{}|_+"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<>?:\"{}|_+",
        variable:"<>?:\"{}|_+",
        concatenated:"<>?:\"{}|_+<>?:\"{}|_+"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"!@#%^&*()`~\"}",
    statement:"{ `literal`: '!@#$%^&*()`~', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"!@#$%^&*()`~"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"!@#$%^&*()`~",
        variable:"!@#$%^&*()`~",
        concatenated:"!@#$%^&*()`~!@#$%^&*()`~"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\x01\\x02\\x03\\x04\\x05\\x06\\a\\b\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x7f\"}",
    statement:"{ `literal`: '\x01\x02\x03\x04\x05\x06\a\b\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x7f', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"\x01\x02\x03\x04\x05\x06\a\b\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x7f"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"\x01\x02\x03\x04\x05\x06\a\b\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x7f",
        variable:"\x01\x02\x03\x04\x05\x06\a\b\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x7f",
        concatenated:"\x01\x02\x03\x04\x05\x06\a\b\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x7f\x01\x02\x03\x04\x05\x06\a\b\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x7f"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\x80\\x81\\x82\\x83\\x84\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\"}",
    statement:"{ `literal`: '\x80\x81\x82\x83\x84\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"\x80\x81\x82\x83\x84\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"\x80\x81\x82\x83\x84\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f",
        variable:"\x80\x81\x82\x83\x84\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f",
        concatenated:"\x80\x81\x82\x83\x84\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\x80\x81\x82\x83\x84\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\t\\v\\f \\x85 \\u1680\\u2002\\u2003\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u200b\\u2028\\u2029\\u202f\\u205f\\u3000\"}",
    statement:"{ `literal`: ' \x85 ·öÄ‚ÄÇ‚ÄÉ‚ÄÇ‚ÄÉ‚ÄÑ‚ÄÖ‚ÄÜ‚Äá‚Äà‚Äâ‚Ää‚Äã‚Ä®‚Ä©‚ÄØ‚Åü„ÄÄ', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"\t\v\f \x85 ·öÄ‚ÄÇ‚ÄÉ‚ÄÇ‚ÄÉ‚ÄÑ‚ÄÖ‚ÄÜ‚Äá‚Äà‚Äâ‚Ää‚Äã‚Ä®‚Ä©‚ÄØ‚Åü„ÄÄ"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"\t\v\f \x85 ·öÄ‚ÄÇ‚ÄÉ‚ÄÇ‚ÄÉ‚ÄÑ‚ÄÖ‚ÄÜ‚Äá‚Äà‚Äâ‚Ää‚Äã‚Ä®‚Ä©‚ÄØ‚Åü„ÄÄ",
        variable:"\t\v\f \x85 ·öÄ‚ÄÇ‚ÄÉ‚ÄÇ‚ÄÉ‚ÄÑ‚ÄÖ‚ÄÜ‚Äá‚Äà‚Äâ‚Ää‚Äã‚Ä®‚Ä©‚ÄØ‚Åü„ÄÄ",
        concatenated:"\t\v\f \x85 ·öÄ‚ÄÇ‚ÄÉ‚ÄÇ‚ÄÉ‚ÄÑ‚ÄÖ‚ÄÜ‚Äá‚Äà‚Äâ‚Ää‚Äã‚Ä®‚Ä©‚ÄØ‚Åü„ÄÄ\t\v\f \x85 ·öÄ‚ÄÇ‚ÄÉ‚ÄÇ‚ÄÉ‚ÄÑ‚ÄÖ‚ÄÜ‚Äá‚Äà‚Äâ‚Ää‚Äã‚Ä®‚Ä©‚ÄØ‚Åü„ÄÄ"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\xad\\u0600\\u0601\\u0602\\u0603\\u0604\\u0605\\u061c\\u06dd\\u070f\\u180e\\u200b\\u200c\\u200d\\u200e\\u200f\\u202a\\u202b\\u202c\\u202d\\u202e\\u2060\\u2061\\u2062\\u2063\\u2064\\u2066\\u2067\\u2068\\u2069\\u206a\\u206b\\u206c\\u206d\\u206e\\u206f\\ufeff\\ufff9\\ufffa\\ufffb\\U000110bd\\U0001bca0\\U0001bca1\\U0001bca2\\U0001bca3\\U0001d173\\U0001d174\\U0001d175\\U0001d176\\U0001d177\\U0001d178\\U0001d179\\U0001d17a\\U000e0001\\U000e0020\\U000e0021\\U000e0022\\U000e0023\\U000e0024\\U000e0025\\U000e0026\\U000e0027\\U000e0028\\U000e0029\\U000e002a\\U000e002b\\U000e002c\\U000e002d\\U000e002e\\U000e002f\\U000e0030\\U000e0031\\U000e0032\\U000e0033\\U000e0034\\U000e0035\\U000e0036\\U000e0037\\U000e0038\\U000e0039\\U000e003a\\U000e003b\\U000e003c\\U000e003d\\U000e003e\\U000e003f\\U000e0040\\U000e0041\\U000e0042\\U000e0043\\U000e0044\\U000e0045\\U000e0046\\U000e0047\\U000e0048\\U000e0049\\U000e004a\\U000e004b\\U000e004c\\U000e004d\\U000e004e\\U000e004f\\U000e0050\\U000e0051\\U000e0052\\U000e0053\\U000e0054\\U000e0055\\U000e0056\\U000e0057\\U000e0058\\U000e0059\\U000e005a\\U000e005b\\U000e005c\\U000e005d\\U000e005e\\U000e005f\\U000e0060\\U000e0061\\U000e0062\\U000e0063\\U000e0064\\U000e0065\\U000e0066\\U000e0067\\U000e0068\\U000e0069\\U000e006a\\U000e006b\\U000e006c\\U000e006d\\U000e006e\\U000e006f\\U000e0070\\U000e0071\\U000e0072\\U000e0073\\U000e0074\\U000e0075\\U000e0076\\U000e0077\\U000e0078\\U000e0079\\U000e007a\\U000e007b\\U000e007c\\U000e007d\\U000e007e\\U000e007f\"}",
    statement:"{ `literal`: '¬≠ÿÄÿÅÿÇÿÉÿÑÿÖÿú€ù‹è·†é‚Äã‚Äå‚Äç‚Äé‚Äè‚Ä™‚Ä´‚Ä¨‚Ä≠‚ÄÆ‚Å†‚Å°‚Å¢‚Å£‚Å§‚Å¶‚Åß‚Å®‚Å©‚Å™‚Å´‚Å¨‚Å≠‚ÅÆ‚ÅØÔªøÔøπÔø∫ÔøªëÇΩõ≤†õ≤°õ≤¢õ≤£ùÖ≥ùÖ¥ùÖµùÖ∂ùÖ∑ùÖ∏ùÖπùÖ∫Û†ÄÅÛ†Ä†Û†Ä°Û†Ä¢Û†Ä£Û†Ä§Û†Ä•Û†Ä¶Û†ÄßÛ†Ä®Û†Ä©Û†Ä™Û†Ä´Û†Ä¨Û†Ä≠Û†ÄÆÛ†ÄØÛ†Ä∞Û†Ä±Û†Ä≤Û†Ä≥Û†Ä¥Û†ÄµÛ†Ä∂Û†Ä∑Û†Ä∏Û†ÄπÛ†Ä∫Û†ÄªÛ†ÄºÛ†ÄΩÛ†ÄæÛ†ÄøÛ†ÅÄÛ†ÅÅÛ†ÅÇÛ†ÅÉÛ†ÅÑÛ†ÅÖÛ†ÅÜÛ†ÅáÛ†ÅàÛ†ÅâÛ†ÅäÛ†ÅãÛ†ÅåÛ†ÅçÛ†ÅéÛ†ÅèÛ†ÅêÛ†ÅëÛ†ÅíÛ†ÅìÛ†ÅîÛ†ÅïÛ†ÅñÛ†ÅóÛ†ÅòÛ†ÅôÛ†ÅöÛ†ÅõÛ†ÅúÛ†ÅùÛ†ÅûÛ†ÅüÛ†Å†Û†Å°Û†Å¢Û†Å£Û†Å§Û†Å•Û†Å¶Û†ÅßÛ†Å®Û†Å©Û†Å™Û†Å´Û†Å¨Û†Å≠Û†ÅÆÛ†ÅØÛ†Å∞Û†Å±Û†Å≤Û†Å≥Û†Å¥Û†ÅµÛ†Å∂Û†Å∑Û†Å∏Û†ÅπÛ†Å∫Û†ÅªÛ†ÅºÛ†ÅΩÛ†ÅæÛ†Åø', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"¬≠ÿÄÿÅÿÇÿÉÿÑÿÖÿú€ù‹è·†é‚Äã‚Äå‚Äç‚Äé‚Äè‚Ä™‚Ä´‚Ä¨‚Ä≠‚ÄÆ‚Å†‚Å°‚Å¢‚Å£‚Å§‚Å¶‚Åß‚Å®‚Å©‚Å™‚Å´‚Å¨‚Å≠‚ÅÆ‚ÅØÔªøÔøπÔø∫ÔøªëÇΩõ≤†õ≤°õ≤¢õ≤£ùÖ≥ùÖ¥ùÖµùÖ∂ùÖ∑ùÖ∏ùÖπùÖ∫Û†ÄÅÛ†Ä†Û†Ä°Û†Ä¢Û†Ä£Û†Ä§Û†Ä•Û†Ä¶Û†ÄßÛ†Ä®Û†Ä©Û†Ä™Û†Ä´Û†Ä¨Û†Ä≠Û†ÄÆÛ†ÄØÛ†Ä∞Û†Ä±Û†Ä≤Û†Ä≥Û†Ä¥Û†ÄµÛ†Ä∂Û†Ä∑Û†Ä∏Û†ÄπÛ†Ä∫Û†ÄªÛ†ÄºÛ†ÄΩÛ†ÄæÛ†ÄøÛ†ÅÄÛ†ÅÅÛ†ÅÇÛ†ÅÉÛ†ÅÑÛ†ÅÖÛ†ÅÜÛ†ÅáÛ†ÅàÛ†ÅâÛ†ÅäÛ†ÅãÛ†ÅåÛ†ÅçÛ†ÅéÛ†ÅèÛ†ÅêÛ†ÅëÛ†ÅíÛ†ÅìÛ†ÅîÛ†ÅïÛ†ÅñÛ†ÅóÛ†ÅòÛ†ÅôÛ†ÅöÛ†ÅõÛ†ÅúÛ†ÅùÛ†ÅûÛ†ÅüÛ†Å†Û†Å°Û†Å¢Û†Å£Û†Å§Û†Å•Û†Å¶Û†ÅßÛ†Å®Û†Å©Û†Å™Û†Å´Û†Å¨Û†Å≠Û†ÅÆÛ†ÅØÛ†Å∞Û†Å±Û†Å≤Û†Å≥Û†Å¥Û†ÅµÛ†Å∂Û†Å∑Û†Å∏Û†ÅπÛ†Å∫Û†ÅªÛ†ÅºÛ†ÅΩÛ†ÅæÛ†Åø"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"¬≠ÿÄÿÅÿÇÿÉÿÑÿÖÿú€ù‹è·†é‚Äã‚Äå‚Äç‚Äé‚Äè‚Ä™‚Ä´‚Ä¨‚Ä≠‚ÄÆ‚Å†‚Å°‚Å¢‚Å£‚Å§‚Å¶‚Åß‚Å®‚Å©‚Å™‚Å´‚Å¨‚Å≠‚ÅÆ‚ÅØÔªøÔøπÔø∫ÔøªëÇΩõ≤†õ≤°õ≤¢õ≤£ùÖ≥ùÖ¥ùÖµùÖ∂ùÖ∑ùÖ∏ùÖπùÖ∫Û†ÄÅÛ†Ä†Û†Ä°Û†Ä¢Û†Ä£Û†Ä§Û†Ä•Û†Ä¶Û†ÄßÛ†Ä®Û†Ä©Û†Ä™Û†Ä´Û†Ä¨Û†Ä≠Û†ÄÆÛ†ÄØÛ†Ä∞Û†Ä±Û†Ä≤Û†Ä≥Û†Ä¥Û†ÄµÛ†Ä∂Û†Ä∑Û†Ä∏Û†ÄπÛ†Ä∫Û†ÄªÛ†ÄºÛ†ÄΩÛ†ÄæÛ†ÄøÛ†ÅÄÛ†ÅÅÛ†ÅÇÛ†ÅÉÛ†ÅÑÛ†ÅÖÛ†ÅÜÛ†ÅáÛ†ÅàÛ†ÅâÛ†ÅäÛ†ÅãÛ†ÅåÛ†ÅçÛ†ÅéÛ†ÅèÛ†ÅêÛ†ÅëÛ†ÅíÛ†ÅìÛ†ÅîÛ†ÅïÛ†ÅñÛ†ÅóÛ†ÅòÛ†ÅôÛ†ÅöÛ†ÅõÛ†ÅúÛ†ÅùÛ†ÅûÛ†ÅüÛ†Å†Û†Å°Û†Å¢Û†Å£Û†Å§Û†Å•Û†Å¶Û†ÅßÛ†Å®Û†Å©Û†Å™Û†Å´Û†Å¨Û†Å≠Û†ÅÆÛ†ÅØÛ†Å∞Û†Å±Û†Å≤Û†Å≥Û†Å¥Û†ÅµÛ†Å∂Û†Å∑Û†Å∏Û†ÅπÛ†Å∫Û†ÅªÛ†ÅºÛ†ÅΩÛ†ÅæÛ†Åø",
        variable:"¬≠ÿÄÿÅÿÇÿÉÿÑÿÖÿú€ù‹è·†é‚Äã‚Äå‚Äç‚Äé‚Äè‚Ä™‚Ä´‚Ä¨‚Ä≠‚ÄÆ‚Å†‚Å°‚Å¢‚Å£‚Å§‚Å¶‚Åß‚Å®‚Å©‚Å™‚Å´‚Å¨‚Å≠‚ÅÆ‚ÅØÔªøÔøπÔø∫ÔøªëÇΩõ≤†õ≤°õ≤¢õ≤£ùÖ≥ùÖ¥ùÖµùÖ∂ùÖ∑ùÖ∏ùÖπùÖ∫Û†ÄÅÛ†Ä†Û†Ä°Û†Ä¢Û†Ä£Û†Ä§Û†Ä•Û†Ä¶Û†ÄßÛ†Ä®Û†Ä©Û†Ä™Û†Ä´Û†Ä¨Û†Ä≠Û†ÄÆÛ†ÄØÛ†Ä∞Û†Ä±Û†Ä≤Û†Ä≥Û†Ä¥Û†ÄµÛ†Ä∂Û†Ä∑Û†Ä∏Û†ÄπÛ†Ä∫Û†ÄªÛ†ÄºÛ†ÄΩÛ†ÄæÛ†ÄøÛ†ÅÄÛ†ÅÅÛ†ÅÇÛ†ÅÉÛ†ÅÑÛ†ÅÖÛ†ÅÜÛ†ÅáÛ†ÅàÛ†ÅâÛ†ÅäÛ†ÅãÛ†ÅåÛ†ÅçÛ†ÅéÛ†ÅèÛ†ÅêÛ†ÅëÛ†ÅíÛ†ÅìÛ†ÅîÛ†ÅïÛ†ÅñÛ†ÅóÛ†ÅòÛ†ÅôÛ†ÅöÛ†ÅõÛ†ÅúÛ†ÅùÛ†ÅûÛ†ÅüÛ†Å†Û†Å°Û†Å¢Û†Å£Û†Å§Û†Å•Û†Å¶Û†ÅßÛ†Å®Û†Å©Û†Å™Û†Å´Û†Å¨Û†Å≠Û†ÅÆÛ†ÅØÛ†Å∞Û†Å±Û†Å≤Û†Å≥Û†Å¥Û†ÅµÛ†Å∂Û†Å∑Û†Å∏Û†ÅπÛ†Å∫Û†ÅªÛ†ÅºÛ†ÅΩÛ†ÅæÛ†Åø",
        concatenated:"¬≠ÿÄÿÅÿÇÿÉÿÑÿÖÿú€ù‹è·†é‚Äã‚Äå‚Äç‚Äé‚Äè‚Ä™‚Ä´‚Ä¨‚Ä≠‚ÄÆ‚Å†‚Å°‚Å¢‚Å£‚Å§‚Å¶‚Åß‚Å®‚Å©‚Å™‚Å´‚Å¨‚Å≠‚ÅÆ‚ÅØÔªøÔøπÔø∫ÔøªëÇΩõ≤†õ≤°õ≤¢õ≤£ùÖ≥ùÖ¥ùÖµùÖ∂ùÖ∑ùÖ∏ùÖπùÖ∫Û†ÄÅÛ†Ä†Û†Ä°Û†Ä¢Û†Ä£Û†Ä§Û†Ä•Û†Ä¶Û†ÄßÛ†Ä®Û†Ä©Û†Ä™Û†Ä´Û†Ä¨Û†Ä≠Û†ÄÆÛ†ÄØÛ†Ä∞Û†Ä±Û†Ä≤Û†Ä≥Û†Ä¥Û†ÄµÛ†Ä∂Û†Ä∑Û†Ä∏Û†ÄπÛ†Ä∫Û†ÄªÛ†ÄºÛ†ÄΩÛ†ÄæÛ†ÄøÛ†ÅÄÛ†ÅÅÛ†ÅÇÛ†ÅÉÛ†ÅÑÛ†ÅÖÛ†ÅÜÛ†ÅáÛ†ÅàÛ†ÅâÛ†ÅäÛ†ÅãÛ†ÅåÛ†ÅçÛ†ÅéÛ†ÅèÛ†ÅêÛ†ÅëÛ†ÅíÛ†ÅìÛ†ÅîÛ†ÅïÛ†ÅñÛ†ÅóÛ†ÅòÛ†ÅôÛ†ÅöÛ†ÅõÛ†ÅúÛ†ÅùÛ†ÅûÛ†ÅüÛ†Å†Û†Å°Û†Å¢Û†Å£Û†Å§Û†Å•Û†Å¶Û†ÅßÛ†Å®Û†Å©Û†Å™Û†Å´Û†Å¨Û†Å≠Û†ÅÆÛ†ÅØÛ†Å∞Û†Å±Û†Å≤Û†Å≥Û†Å¥Û†ÅµÛ†Å∂Û†Å∑Û†Å∏Û†ÅπÛ†Å∫Û†ÅªÛ†ÅºÛ†ÅΩÛ†ÅæÛ†Åø¬≠ÿÄÿÅÿÇÿÉÿÑÿÖÿú€ù‹è·†é‚Äã‚Äå‚Äç‚Äé‚Äè‚Ä™‚Ä´‚Ä¨‚Ä≠‚ÄÆ‚Å†‚Å°‚Å¢‚Å£‚Å§‚Å¶‚Åß‚Å®‚Å©‚Å™‚Å´‚Å¨‚Å≠‚ÅÆ‚ÅØÔªøÔøπÔø∫ÔøªëÇΩõ≤†õ≤°õ≤¢õ≤£ùÖ≥ùÖ¥ùÖµùÖ∂ùÖ∑ùÖ∏ùÖπùÖ∫Û†ÄÅÛ†Ä†Û†Ä°Û†Ä¢Û†Ä£Û†Ä§Û†Ä•Û†Ä¶Û†ÄßÛ†Ä®Û†Ä©Û†Ä™Û†Ä´Û†Ä¨Û†Ä≠Û†ÄÆÛ†ÄØÛ†Ä∞Û†Ä±Û†Ä≤Û†Ä≥Û†Ä¥Û†ÄµÛ†Ä∂Û†Ä∑Û†Ä∏Û†ÄπÛ†Ä∫Û†ÄªÛ†ÄºÛ†ÄΩÛ†ÄæÛ†ÄøÛ†ÅÄÛ†ÅÅÛ†ÅÇÛ†ÅÉÛ†ÅÑÛ†ÅÖÛ†ÅÜÛ†ÅáÛ†ÅàÛ†ÅâÛ†ÅäÛ†ÅãÛ†ÅåÛ†ÅçÛ†ÅéÛ†ÅèÛ†ÅêÛ†ÅëÛ†ÅíÛ†ÅìÛ†ÅîÛ†ÅïÛ†ÅñÛ†ÅóÛ†ÅòÛ†ÅôÛ†ÅöÛ†ÅõÛ†ÅúÛ†ÅùÛ†ÅûÛ†ÅüÛ†Å†Û†Å°Û†Å¢Û†Å£Û†Å§Û†Å•Û†Å¶Û†ÅßÛ†Å®Û†Å©Û†Å™Û†Å´Û†Å¨Û†Å≠Û†ÅÆÛ†ÅØÛ†Å∞Û†Å±Û†Å≤Û†Å≥Û†Å¥Û†ÅµÛ†Å∂Û†Å∑Û†Å∏Û†ÅπÛ†Å∫Û†ÅªÛ†ÅºÛ†ÅΩÛ†ÅæÛ†Åø"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\ufffe\"}",
    statement:"{ `literal`: 'Ôøæ', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"Ôøæ"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"Ôøæ",
        variable:"Ôøæ",
        concatenated:"ÔøæÔøæ"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u03a9\\u2248\\xe7\\u221a\\u222b\\u02dc\\xb5\\u2264\\u2265\\xf7\"}",
    statement:"{ `literal`: 'Œ©‚âà√ß‚àö‚à´Àú¬µ‚â§‚â•√∑', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"Œ©‚âà√ß‚àö‚à´Àú¬µ‚â§‚â•√∑"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"Œ©‚âà√ß‚àö‚à´Àú¬µ‚â§‚â•√∑",
        variable:"Œ©‚âà√ß‚àö‚à´Àú¬µ‚â§‚â•√∑",
        concatenated:"Œ©‚âà√ß‚àö‚à´Àú¬µ‚â§‚â•√∑Œ©‚âà√ß‚àö‚à´Àú¬µ‚â§‚â•√∑"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\xe5\\xdf\\u2202\\u0192\\xa9\\u02d9\\u2206\\u02da\\xac\\u2026\\xe6\"}",
    statement:"{ `literal`: '√•√ü‚àÇ∆í¬©Àô‚àÜÀö¬¨‚Ä¶√¶', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"√•√ü‚àÇ∆í¬©Àô‚àÜÀö¬¨‚Ä¶√¶"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"√•√ü‚àÇ∆í¬©Àô‚àÜÀö¬¨‚Ä¶√¶",
        variable:"√•√ü‚àÇ∆í¬©Àô‚àÜÀö¬¨‚Ä¶√¶",
        concatenated:"√•√ü‚àÇ∆í¬©Àô‚àÜÀö¬¨‚Ä¶√¶√•√ü‚àÇ∆í¬©Àô‚àÜÀö¬¨‚Ä¶√¶"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u0153\\u2211\\xb4\\xae\\u2020\\xa5\\xa8\\u02c6\\xf8\\u03c0\\u201c\\u2018\"}",
    statement:"{ `literal`: '≈ì‚àë¬¥¬Æ‚Ä†¬•¬®ÀÜ√∏œÄ‚Äú‚Äò', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"≈ì‚àë¬¥¬Æ‚Ä†¬•¬®ÀÜ√∏œÄ‚Äú‚Äò"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"≈ì‚àë¬¥¬Æ‚Ä†¬•¬®ÀÜ√∏œÄ‚Äú‚Äò",
        variable:"≈ì‚àë¬¥¬Æ‚Ä†¬•¬®ÀÜ√∏œÄ‚Äú‚Äò",
        concatenated:"≈ì‚àë¬¥¬Æ‚Ä†¬•¬®ÀÜ√∏œÄ‚Äú‚Äò≈ì‚àë¬¥¬Æ‚Ä†¬•¬®ÀÜ√∏œÄ‚Äú‚Äò"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\xa1\\u2122\\xa3\\xa2\\u221e\\xa7\\xb6\\u2022\\xaa\\xba\\u2013\\u2260\"}",
    statement:"{ `literal`: '¬°‚Ñ¢¬£¬¢‚àû¬ß¬∂‚Ä¢¬™¬∫‚Äì‚â†', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"¬°‚Ñ¢¬£¬¢‚àû¬ß¬∂‚Ä¢¬™¬∫‚Äì‚â†"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"¬°‚Ñ¢¬£¬¢‚àû¬ß¬∂‚Ä¢¬™¬∫‚Äì‚â†",
        variable:"¬°‚Ñ¢¬£¬¢‚àû¬ß¬∂‚Ä¢¬™¬∫‚Äì‚â†",
        concatenated:"¬°‚Ñ¢¬£¬¢‚àû¬ß¬∂‚Ä¢¬™¬∫‚Äì‚â†¬°‚Ñ¢¬£¬¢‚àû¬ß¬∂‚Ä¢¬™¬∫‚Äì‚â†"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\xb8\\u02db\\xc7\\u25ca\\u0131\\u02dc\\xc2\\xaf\\u02d8\\xbf\"}",
    statement:"{ `literal`: '¬∏Àõ√á‚óäƒ±Àú√Ç¬ØÀò¬ø', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"¬∏Àõ√á‚óäƒ±Àú√Ç¬ØÀò¬ø"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"¬∏Àõ√á‚óäƒ±Àú√Ç¬ØÀò¬ø",
        variable:"¬∏Àõ√á‚óäƒ±Àú√Ç¬ØÀò¬ø",
        concatenated:"¬∏Àõ√á‚óäƒ±Àú√Ç¬ØÀò¬ø¬∏Àõ√á‚óäƒ±Àú√Ç¬ØÀò¬ø"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\xc5\\xcd\\xce\\xcf\\u02dd\\xd3\\xd4\\uf8ff\\xd2\\xda\\xc6\\u2603\"}",
    statement:"{ `literal`: '√Ö√ç√é√èÀù√ì√îÔ£ø√í√ö√Ü‚òÉ', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"√Ö√ç√é√èÀù√ì√îÔ£ø√í√ö√Ü‚òÉ"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"√Ö√ç√é√èÀù√ì√îÔ£ø√í√ö√Ü‚òÉ",
        variable:"√Ö√ç√é√èÀù√ì√îÔ£ø√í√ö√Ü‚òÉ",
        concatenated:"√Ö√ç√é√èÀù√ì√îÔ£ø√í√ö√Ü‚òÉ√Ö√ç√é√èÀù√ì√îÔ£ø√í√ö√Ü‚òÉ"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u0152\\u201e\\xb4\\u2030\\u02c7\\xc1\\xa8\\u02c6\\xd8\\u220f\\u201d\\u2019\"}",
    statement:"{ `literal`: '≈í‚Äû¬¥‚Ä∞Àá√Å¬®ÀÜ√ò‚àè‚Äù‚Äô', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"≈í‚Äû¬¥‚Ä∞Àá√Å¬®ÀÜ√ò‚àè‚Äù‚Äô"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"≈í‚Äû¬¥‚Ä∞Àá√Å¬®ÀÜ√ò‚àè‚Äù‚Äô",
        variable:"≈í‚Äû¬¥‚Ä∞Àá√Å¬®ÀÜ√ò‚àè‚Äù‚Äô",
        concatenated:"≈í‚Äû¬¥‚Ä∞Àá√Å¬®ÀÜ√ò‚àè‚Äù‚Äô≈í‚Äû¬¥‚Ä∞Àá√Å¬®ÀÜ√ò‚àè‚Äù‚Äô"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"`\\u2044\\u20ac\\u2039\\u203a\\ufb01\\ufb02\\u2021\\xb0\\xb7\\u201a\\u2014\\xb1\"}",
    statement:"{ `literal`: '`‚ÅÑ‚Ç¨‚Äπ‚Ä∫Ô¨ÅÔ¨Ç‚Ä°¬∞¬∑‚Äö‚Äî¬±', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"`‚ÅÑ‚Ç¨‚Äπ‚Ä∫Ô¨ÅÔ¨Ç‚Ä°¬∞¬∑‚Äö‚Äî¬±"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"`‚ÅÑ‚Ç¨‚Äπ‚Ä∫Ô¨ÅÔ¨Ç‚Ä°¬∞¬∑‚Äö‚Äî¬±",
        variable:"`‚ÅÑ‚Ç¨‚Äπ‚Ä∫Ô¨ÅÔ¨Ç‚Ä°¬∞¬∑‚Äö‚Äî¬±",
        concatenated:"`‚ÅÑ‚Ç¨‚Äπ‚Ä∫Ô¨ÅÔ¨Ç‚Ä°¬∞¬∑‚Äö‚Äî¬±`‚ÅÑ‚Ç¨‚Äπ‚Ä∫Ô¨ÅÔ¨Ç‚Ä°¬∞¬∑‚Äö‚Äî¬±"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u215b\\u215c\\u215d\\u215e\"}",
    statement:"{ `literal`: '‚Öõ‚Öú‚Öù‚Öû', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"‚Öõ‚Öú‚Öù‚Öû"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"‚Öõ‚Öú‚Öù‚Öû",
        variable:"‚Öõ‚Öú‚Öù‚Öû",
        concatenated:"‚Öõ‚Öú‚Öù‚Öû‚Öõ‚Öú‚Öù‚Öû"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u0401\\u0402\\u0403\\u0404\\u0405\\u0406\\u0407\\u0408\\u0409\\u040a\\u040b\\u040c\\u040d\\u040e\\u040f\\u0410\\u0411\\u0412\\u0413\\u0414\\u0415\\u0416\\u0417\\u0418\\u0419\\u041a\\u041b\\u041c\\u041d\\u041e\\u041f\\u0420\\u0421\\u0422\\u0423\\u0424\\u0425\\u0426\\u0427\\u0428\\u0429\\u042a\\u042b\\u042c\\u042d\\u042e\\u042f\\u0430\\u0431\\u0432\\u0433\\u0434\\u0435\\u0436\\u0437\\u0438\\u0439\\u043a\\u043b\\u043c\\u043d\\u043e\\u043f\\u0440\\u0441\\u0442\\u0443\\u0444\\u0445\\u0446\\u0447\\u0448\\u0449\\u044a\\u044b\\u044c\\u044d\\u044e\\u044f\"}",
    statement:"{ `literal`: '–Å–Ç–É–Ñ–Ö–Ü–á–à–â–ä–ã–å–ç–é–è–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"–Å–Ç–É–Ñ–Ö–Ü–á–à–â–ä–ã–å–ç–é–è–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"–Å–Ç–É–Ñ–Ö–Ü–á–à–â–ä–ã–å–ç–é–è–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è",
        variable:"–Å–Ç–É–Ñ–Ö–Ü–á–à–â–ä–ã–å–ç–é–è–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è",
        concatenated:"–Å–Ç–É–Ñ–Ö–Ü–á–à–â–ä–ã–å–ç–é–è–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è–Å–Ç–É–Ñ–Ö–Ü–á–à–â–ä–ã–å–ç–é–è–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u0660\\u0661\\u0662\\u0663\\u0664\\u0665\\u0666\\u0667\\u0668\\u0669\"}",
    statement:"{ `literal`: 'Ÿ†Ÿ°Ÿ¢Ÿ£Ÿ§Ÿ•Ÿ¶ŸßŸ®Ÿ©', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"Ÿ†Ÿ°Ÿ¢Ÿ£Ÿ§Ÿ•Ÿ¶ŸßŸ®Ÿ©"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"Ÿ†Ÿ°Ÿ¢Ÿ£Ÿ§Ÿ•Ÿ¶ŸßŸ®Ÿ©",
        variable:"Ÿ†Ÿ°Ÿ¢Ÿ£Ÿ§Ÿ•Ÿ¶ŸßŸ®Ÿ©",
        concatenated:"Ÿ†Ÿ°Ÿ¢Ÿ£Ÿ§Ÿ•Ÿ¶ŸßŸ®Ÿ©Ÿ†Ÿ°Ÿ¢Ÿ£Ÿ§Ÿ•Ÿ¶ŸßŸ®Ÿ©"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u2070\\u2074\\u2075\"}",
    statement:"{ `literal`: '‚Å∞‚Å¥‚Åµ', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"‚Å∞‚Å¥‚Åµ"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"‚Å∞‚Å¥‚Åµ",
        variable:"‚Å∞‚Å¥‚Åµ",
        concatenated:"‚Å∞‚Å¥‚Åµ‚Å∞‚Å¥‚Åµ"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u2080\\u2081\\u2082\"}",
    statement:"{ `literal`: '‚ÇÄ‚ÇÅ‚ÇÇ', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"‚ÇÄ‚ÇÅ‚ÇÇ"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"‚ÇÄ‚ÇÅ‚ÇÇ",
        variable:"‚ÇÄ‚ÇÅ‚ÇÇ",
        concatenated:"‚ÇÄ‚ÇÅ‚ÇÇ‚ÇÄ‚ÇÅ‚ÇÇ"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u2070\\u2074\\u2075\\u2080\\u2081\\u2082\"}",
    statement:"{ `literal`: '‚Å∞‚Å¥‚Åµ‚ÇÄ‚ÇÅ‚ÇÇ', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"‚Å∞‚Å¥‚Åµ‚ÇÄ‚ÇÅ‚ÇÇ"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"‚Å∞‚Å¥‚Åµ‚ÇÄ‚ÇÅ‚ÇÇ",
        variable:"‚Å∞‚Å¥‚Åµ‚ÇÄ‚ÇÅ‚ÇÇ",
        concatenated:"‚Å∞‚Å¥‚Åµ‚ÇÄ‚ÇÅ‚ÇÇ‚Å∞‚Å¥‚Åµ‚ÇÄ‚ÇÅ‚ÇÇ"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u0e14\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e47\\u0e47\\u0e47\\u0e47\\u0e47\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e47\\u0e47\\u0e47\\u0e47\\u0e47\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e47\\u0e47\\u0e47\\u0e47\\u0e47\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e47\\u0e47\\u0e47\\u0e47\\u0e47\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e47\\u0e47\\u0e47\\u0e47\\u0e47\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e47\\u0e47\\u0e47\\u0e47\\u0e47\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e47\\u0e47\\u0e47\\u0e47\\u0e47\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e47\\u0e47\\u0e47\\u0e47 \\u0e14\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e47\\u0e47\\u0e47\\u0e47\\u0e47\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e47\\u0e47\\u0e47\\u0e47\\u0e47\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e47\\u0e47\\u0e47\\u0e47\\u0e47\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e47\\u0e47\\u0e47\\u0e47\\u0e47\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e47\\u0e47\\u0e47\\u0e47\\u0e47\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e47\\u0e47\\u0e47\\u0e47\\u0e47\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e47\\u0e47\\u0e47\\u0e47\\u0e47\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e47\\u0e47\\u0e47\\u0e47 \\u0e14\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e47\\u0e47\\u0e47\\u0e47\\u0e47\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e47\\u0e47\\u0e47\\u0e47\\u0e47\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e47\\u0e47\\u0e47\\u0e47\\u0e47\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e47\\u0e47\\u0e47\\u0e47\\u0e47\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e47\\u0e47\\u0e47\\u0e47\\u0e47\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e47\\u0e47\\u0e47\\u0e47\\u0e47\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e47\\u0e47\\u0e47\\u0e47\\u0e47\\u0e49\\u0e49\\u0e49\\u0e49\\u0e49\\u0e47\\u0e47\\u0e47\\u0e47\"}",
    statement:"{ `literal`: '‡∏î‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá ‡∏î‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá ‡∏î‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"‡∏î‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá ‡∏î‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá ‡∏î‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"‡∏î‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá ‡∏î‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá ‡∏î‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá",
        variable:"‡∏î‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá ‡∏î‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá ‡∏î‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá",
        concatenated:"‡∏î‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá ‡∏î‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá ‡∏î‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡∏î‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá ‡∏î‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá ‡∏î‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá‡πá‡πâ‡πâ‡πâ‡πâ‡πâ‡πá‡πá‡πá‡πá"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\\"\"}",
    statement:"{ `literal`: '\"', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"\""
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"\"",
        variable:"\"",
        concatenated:"\"\""
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\\"\\\"\"}",
    statement:"{ `literal`: '\"\"', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"\"\""
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"\"\"",
        variable:"\"\"",
        concatenated:"\"\"\"\""
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<foo val=\\u201cbar\\u201d />\"}",
    statement:"{ `literal`: '<foo val=‚Äúbar‚Äù />', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<foo val=‚Äúbar‚Äù />"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<foo val=‚Äúbar‚Äù />",
        variable:"<foo val=‚Äúbar‚Äù />",
        concatenated:"<foo val=‚Äúbar‚Äù /><foo val=‚Äúbar‚Äù />"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<foo val=\\u201dbar\\u201c />\"}",
    statement:"{ `literal`: '<foo val=‚Äùbar‚Äú />', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<foo val=‚Äùbar‚Äú />"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<foo val=‚Äùbar‚Äú />",
        variable:"<foo val=‚Äùbar‚Äú />",
        concatenated:"<foo val=‚Äùbar‚Äú /><foo val=‚Äùbar‚Äú />"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u7530\\u4e2d\\u3055\\u3093\\u306b\\u3042\\u3052\\u3066\\u4e0b\\u3055\\u3044\"}",
    statement:"{ `literal`: 'Áî∞‰∏≠„Åï„Çì„Å´„ÅÇ„Åí„Å¶‰∏ã„Åï„ÅÑ', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"Áî∞‰∏≠„Åï„Çì„Å´„ÅÇ„Åí„Å¶‰∏ã„Åï„ÅÑ"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"Áî∞‰∏≠„Åï„Çì„Å´„ÅÇ„Åí„Å¶‰∏ã„Åï„ÅÑ",
        variable:"Áî∞‰∏≠„Åï„Çì„Å´„ÅÇ„Åí„Å¶‰∏ã„Åï„ÅÑ",
        concatenated:"Áî∞‰∏≠„Åï„Çì„Å´„ÅÇ„Åí„Å¶‰∏ã„Åï„ÅÑÁî∞‰∏≠„Åï„Çì„Å´„ÅÇ„Åí„Å¶‰∏ã„Åï„ÅÑ"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u30d1\\u30fc\\u30c6\\u30a3\\u30fc\\u3078\\u884c\\u304b\\u306a\\u3044\\u304b\"}",
    statement:"{ `literal`: '„Éë„Éº„ÉÜ„Ç£„Éº„Å∏Ë°å„Åã„Å™„ÅÑ„Åã', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"„Éë„Éº„ÉÜ„Ç£„Éº„Å∏Ë°å„Åã„Å™„ÅÑ„Åã"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"„Éë„Éº„ÉÜ„Ç£„Éº„Å∏Ë°å„Åã„Å™„ÅÑ„Åã",
        variable:"„Éë„Éº„ÉÜ„Ç£„Éº„Å∏Ë°å„Åã„Å™„ÅÑ„Åã",
        concatenated:"„Éë„Éº„ÉÜ„Ç£„Éº„Å∏Ë°å„Åã„Å™„ÅÑ„Åã„Éë„Éº„ÉÜ„Ç£„Éº„Å∏Ë°å„Åã„Å™„ÅÑ„Åã"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u548c\\u88fd\\u6f22\\u8a9e\"}",
    statement:"{ `literal`: 'ÂíåË£ΩÊº¢Ë™û', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ÂíåË£ΩÊº¢Ë™û"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ÂíåË£ΩÊº¢Ë™û",
        variable:"ÂíåË£ΩÊº¢Ë™û",
        concatenated:"ÂíåË£ΩÊº¢Ë™ûÂíåË£ΩÊº¢Ë™û"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u90e8\\u843d\\u683c\"}",
    statement:"{ `literal`: 'ÈÉ®ËêΩÊ†º', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ÈÉ®ËêΩÊ†º"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ÈÉ®ËêΩÊ†º",
        variable:"ÈÉ®ËêΩÊ†º",
        concatenated:"ÈÉ®ËêΩÊ†ºÈÉ®ËêΩÊ†º"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\uc0ac\\ud68c\\uacfc\\ud559\\uc6d0 \\uc5b4\\ud559\\uc5f0\\uad6c\\uc18c\"}",
    statement:"{ `literal`: 'ÏÇ¨ÌöåÍ≥ºÌïôÏõê Ïñ¥ÌïôÏó∞Íµ¨ÏÜå', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ÏÇ¨ÌöåÍ≥ºÌïôÏõê Ïñ¥ÌïôÏó∞Íµ¨ÏÜå"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ÏÇ¨ÌöåÍ≥ºÌïôÏõê Ïñ¥ÌïôÏó∞Íµ¨ÏÜå",
        variable:"ÏÇ¨ÌöåÍ≥ºÌïôÏõê Ïñ¥ÌïôÏó∞Íµ¨ÏÜå",
        concatenated:"ÏÇ¨ÌöåÍ≥ºÌïôÏõê Ïñ¥ÌïôÏó∞Íµ¨ÏÜåÏÇ¨ÌöåÍ≥ºÌïôÏõê Ïñ¥ÌïôÏó∞Íµ¨ÏÜå"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\ucc26\\ucc28\\ub97c \\ud0c0\\uace0 \\uc628 \\ud3b2\\uc2dc\\ub9e8\\uacfc \\uc45b\\ub2e4\\ub9ac \\ub620\\ubc29\\uac01\\ud558\"}",
    statement:"{ `literal`: 'Ï∞¶Ï∞®Î•º ÌÉÄÍ≥† Ïò® Ìé≤ÏãúÎß®Í≥º ÏëõÎã§Î¶¨ Îò†Î∞©Í∞ÅÌïò', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"Ï∞¶Ï∞®Î•º ÌÉÄÍ≥† Ïò® Ìé≤ÏãúÎß®Í≥º ÏëõÎã§Î¶¨ Îò†Î∞©Í∞ÅÌïò"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"Ï∞¶Ï∞®Î•º ÌÉÄÍ≥† Ïò® Ìé≤ÏãúÎß®Í≥º ÏëõÎã§Î¶¨ Îò†Î∞©Í∞ÅÌïò",
        variable:"Ï∞¶Ï∞®Î•º ÌÉÄÍ≥† Ïò® Ìé≤ÏãúÎß®Í≥º ÏëõÎã§Î¶¨ Îò†Î∞©Í∞ÅÌïò",
        concatenated:"Ï∞¶Ï∞®Î•º ÌÉÄÍ≥† Ïò® Ìé≤ÏãúÎß®Í≥º ÏëõÎã§Î¶¨ Îò†Î∞©Í∞ÅÌïòÏ∞¶Ï∞®Î•º ÌÉÄÍ≥† Ïò® Ìé≤ÏãúÎß®Í≥º ÏëõÎã§Î¶¨ Îò†Î∞©Í∞ÅÌïò"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u793e\\u6703\\u79d1\\u5b78\\u9662\\u8a9e\\u5b78\\u7814\\u7a76\\u6240\"}",
    statement:"{ `literal`: 'Á§æÊúÉÁßëÂ≠∏Èô¢Ë™ûÂ≠∏Á†îÁ©∂ÊâÄ', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"Á§æÊúÉÁßëÂ≠∏Èô¢Ë™ûÂ≠∏Á†îÁ©∂ÊâÄ"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"Á§æÊúÉÁßëÂ≠∏Èô¢Ë™ûÂ≠∏Á†îÁ©∂ÊâÄ",
        variable:"Á§æÊúÉÁßëÂ≠∏Èô¢Ë™ûÂ≠∏Á†îÁ©∂ÊâÄ",
        concatenated:"Á§æÊúÉÁßëÂ≠∏Èô¢Ë™ûÂ≠∏Á†îÁ©∂ÊâÄÁ§æÊúÉÁßëÂ≠∏Èô¢Ë™ûÂ≠∏Á†îÁ©∂ÊâÄ"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\uc6b8\\ub780\\ubc14\\ud1a0\\ub974\"}",
    statement:"{ `literal`: 'Ïö∏ÎûÄÎ∞îÌÜ†Î•¥', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"Ïö∏ÎûÄÎ∞îÌÜ†Î•¥"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"Ïö∏ÎûÄÎ∞îÌÜ†Î•¥",
        variable:"Ïö∏ÎûÄÎ∞îÌÜ†Î•¥",
        concatenated:"Ïö∏ÎûÄÎ∞îÌÜ†Î•¥Ïö∏ÎûÄÎ∞îÌÜ†Î•¥"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\U0002070e\\U00020731\\U00020779\\U00020c53\\U00020c78\\U00020c96\\U00020ccf\"}",
    statement:"{ `literal`: '†úé†ú±†ùπ†±ì†±∏†≤ñ†≥è', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"†úé†ú±†ùπ†±ì†±∏†≤ñ†≥è"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"†úé†ú±†ùπ†±ì†±∏†≤ñ†≥è",
        variable:"†úé†ú±†ùπ†±ì†±∏†≤ñ†≥è",
        concatenated:"†úé†ú±†ùπ†±ì†±∏†≤ñ†≥è†úé†ú±†ùπ†±ì†±∏†≤ñ†≥è"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u023a\"}",
    statement:"{ `literal`: '»∫', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"»∫"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"»∫",
        variable:"»∫",
        concatenated:"»∫»∫"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u023e\"}",
    statement:"{ `literal`: '»æ', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"»æ"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"»æ",
        variable:"»æ",
        concatenated:"»æ»æ"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u30fd\\u0f3c\\u0e88\\u0644\\u035c\\u0e88\\u0f3d\\uff89 \\u30fd\\u0f3c\\u0e88\\u0644\\u035c\\u0e88\\u0f3d\\uff89 \"}",
    statement:"{ `literal`: '„ÉΩ‡ºº‡∫àŸÑÕú‡∫à‡ºΩÔæâ „ÉΩ‡ºº‡∫àŸÑÕú‡∫à‡ºΩÔæâ ', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"„ÉΩ‡ºº‡∫àŸÑÕú‡∫à‡ºΩÔæâ „ÉΩ‡ºº‡∫àŸÑÕú‡∫à‡ºΩÔæâ "
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"„ÉΩ‡ºº‡∫àŸÑÕú‡∫à‡ºΩÔæâ „ÉΩ‡ºº‡∫àŸÑÕú‡∫à‡ºΩÔæâ ",
        variable:"„ÉΩ‡ºº‡∫àŸÑÕú‡∫à‡ºΩÔæâ „ÉΩ‡ºº‡∫àŸÑÕú‡∫à‡ºΩÔæâ ",
        concatenated:"„ÉΩ‡ºº‡∫àŸÑÕú‡∫à‡ºΩÔæâ „ÉΩ‡ºº‡∫àŸÑÕú‡∫à‡ºΩÔæâ „ÉΩ‡ºº‡∫àŸÑÕú‡∫à‡ºΩÔæâ „ÉΩ‡ºº‡∫àŸÑÕú‡∫à‡ºΩÔæâ "
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"(\\uff61\\u25d5 \\u2200 \\u25d5\\uff61)\"}",
    statement:"{ `literal`: '(ÔΩ°‚óï ‚àÄ ‚óïÔΩ°)', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"(ÔΩ°‚óï ‚àÄ ‚óïÔΩ°)"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"(ÔΩ°‚óï ‚àÄ ‚óïÔΩ°)",
        variable:"(ÔΩ°‚óï ‚àÄ ‚óïÔΩ°)",
        concatenated:"(ÔΩ°‚óï ‚àÄ ‚óïÔΩ°)(ÔΩ°‚óï ‚àÄ ‚óïÔΩ°)"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\uff40\\uff68(\\xb4\\u2200\\uff40\\u2229\"}",
    statement:"{ `literal`: 'ÔΩÄÔΩ®(¬¥‚àÄÔΩÄ‚à©', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ÔΩÄÔΩ®(¬¥‚àÄÔΩÄ‚à©"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ÔΩÄÔΩ®(¬¥‚àÄÔΩÄ‚à©",
        variable:"ÔΩÄÔΩ®(¬¥‚àÄÔΩÄ‚à©",
        concatenated:"ÔΩÄÔΩ®(¬¥‚àÄÔΩÄ‚à©ÔΩÄÔΩ®(¬¥‚àÄÔΩÄ‚à©"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"__\\uff9b(,_,*)\"}",
    statement:"{ `literal`: '__Ôæõ(,_,*)', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"__Ôæõ(,_,*)"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"__Ôæõ(,_,*)",
        variable:"__Ôæõ(,_,*)",
        concatenated:"__Ôæõ(,_,*)__Ôæõ(,_,*)"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u30fb(\\uffe3\\u2200\\uffe3)\\u30fb:*:\"}",
    statement:"{ `literal`: '„Éª(Ôø£‚àÄÔø£)„Éª:*:', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"„Éª(Ôø£‚àÄÔø£)„Éª:*:"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"„Éª(Ôø£‚àÄÔø£)„Éª:*:",
        variable:"„Éª(Ôø£‚àÄÔø£)„Éª:*:",
        concatenated:"„Éª(Ôø£‚àÄÔø£)„Éª:*:„Éª(Ôø£‚àÄÔø£)„Éª:*:"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\uff9f\\uff65\\u273f\\u30fe\\u2572(\\uff61\\u25d5\\u203f\\u25d5\\uff61)\\u2571\\u273f\\uff65\\uff9f\"}",
    statement:"{ `literal`: 'ÔæüÔΩ•‚úø„Éæ‚ï≤(ÔΩ°‚óï‚Äø‚óïÔΩ°)‚ï±‚úøÔΩ•Ôæü', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ÔæüÔΩ•‚úø„Éæ‚ï≤(ÔΩ°‚óï‚Äø‚óïÔΩ°)‚ï±‚úøÔΩ•Ôæü"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ÔæüÔΩ•‚úø„Éæ‚ï≤(ÔΩ°‚óï‚Äø‚óïÔΩ°)‚ï±‚úøÔΩ•Ôæü",
        variable:"ÔæüÔΩ•‚úø„Éæ‚ï≤(ÔΩ°‚óï‚Äø‚óïÔΩ°)‚ï±‚úøÔΩ•Ôæü",
        concatenated:"ÔæüÔΩ•‚úø„Éæ‚ï≤(ÔΩ°‚óï‚Äø‚óïÔΩ°)‚ï±‚úøÔΩ•ÔæüÔæüÔΩ•‚úø„Éæ‚ï≤(ÔΩ°‚óï‚Äø‚óïÔΩ°)‚ï±‚úøÔΩ•Ôæü"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\",\\u3002\\u30fb:*:\\u30fb\\u309c\\u2019( \\u263b \\u03c9 \\u263b )\\u3002\\u30fb:*:\\u30fb\\u309c\\u2019\"}",
    statement:"{ `literal`: ',„ÄÇ„Éª:*:„Éª„Çú‚Äô( ‚òª œâ ‚òª )„ÄÇ„Éª:*:„Éª„Çú‚Äô', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:",„ÄÇ„Éª:*:„Éª„Çú‚Äô( ‚òª œâ ‚òª )„ÄÇ„Éª:*:„Éª„Çú‚Äô"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:",„ÄÇ„Éª:*:„Éª„Çú‚Äô( ‚òª œâ ‚òª )„ÄÇ„Éª:*:„Éª„Çú‚Äô",
        variable:",„ÄÇ„Éª:*:„Éª„Çú‚Äô( ‚òª œâ ‚òª )„ÄÇ„Éª:*:„Éª„Çú‚Äô",
        concatenated:",„ÄÇ„Éª:*:„Éª„Çú‚Äô( ‚òª œâ ‚òª )„ÄÇ„Éª:*:„Éª„Çú‚Äô,„ÄÇ„Éª:*:„Éª„Çú‚Äô( ‚òª œâ ‚òª )„ÄÇ„Éª:*:„Éª„Çú‚Äô"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"(\\u256f\\xb0\\u25a1\\xb0\\uff09\\u256f\\ufe35 \\u253b\\u2501\\u253b)\"}",
    statement:"{ `literal`: '(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª)', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª)"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª)",
        variable:"(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª)",
        concatenated:"(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª)(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª)"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"(\\uff89\\u0ca5\\u76ca\\u0ca5\\uff09\\uff89\\ufeff \\u253b\\u2501\\u253b\"}",
    statement:"{ `literal`: '(Ôæâ‡≤•Áõä‡≤•ÔºâÔæâÔªø ‚îª‚îÅ‚îª', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"(Ôæâ‡≤•Áõä‡≤•ÔºâÔæâÔªø ‚îª‚îÅ‚îª"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"(Ôæâ‡≤•Áõä‡≤•ÔºâÔæâÔªø ‚îª‚îÅ‚îª",
        variable:"(Ôæâ‡≤•Áõä‡≤•ÔºâÔæâÔªø ‚îª‚îÅ‚îª",
        concatenated:"(Ôæâ‡≤•Áõä‡≤•ÔºâÔæâÔªø ‚îª‚îÅ‚îª(Ôæâ‡≤•Áõä‡≤•ÔºâÔæâÔªø ‚îª‚îÅ‚îª"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u252c\\u2500\\u252c\\u30ce( \\xba _ \\xba\\u30ce)\"}",
    statement:"{ `literal`: '‚î¨‚îÄ‚î¨„Éé( ¬∫ _ ¬∫„Éé)', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"‚î¨‚îÄ‚î¨„Éé( ¬∫ _ ¬∫„Éé)"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"‚î¨‚îÄ‚î¨„Éé( ¬∫ _ ¬∫„Éé)",
        variable:"‚î¨‚îÄ‚î¨„Éé( ¬∫ _ ¬∫„Éé)",
        concatenated:"‚î¨‚îÄ‚î¨„Éé( ¬∫ _ ¬∫„Éé)‚î¨‚îÄ‚î¨„Éé( ¬∫ _ ¬∫„Éé)"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"( \\u0361\\xb0 \\u035c\\u0296 \\u0361\\xb0)\"}",
    statement:"{ `literal`: '( Õ°¬∞ Õú ñ Õ°¬∞)', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"( Õ°¬∞ Õú ñ Õ°¬∞)"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"( Õ°¬∞ Õú ñ Õ°¬∞)",
        variable:"( Õ°¬∞ Õú ñ Õ°¬∞)",
        concatenated:"( Õ°¬∞ Õú ñ Õ°¬∞)( Õ°¬∞ Õú ñ Õ°¬∞)"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\U0001f60d\"}",
    statement:"{ `literal`: 'üòç', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"üòç"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"üòç",
        variable:"üòç",
        concatenated:"üòçüòç"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\U0001f469\\U0001f3fd\"}",
    statement:"{ `literal`: 'üë©üèΩ', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"üë©üèΩ"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"üë©üèΩ",
        variable:"üë©üèΩ",
        concatenated:"üë©üèΩüë©üèΩ"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\U0001f47e \\U0001f647 \\U0001f481 \\U0001f645 \\U0001f646 \\U0001f64b \\U0001f64e \\U0001f64d\"}",
    statement:"{ `literal`: 'üëæ üôá üíÅ üôÖ üôÜ üôã üôé üôç', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"üëæ üôá üíÅ üôÖ üôÜ üôã üôé üôç"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"üëæ üôá üíÅ üôÖ üôÜ üôã üôé üôç",
        variable:"üëæ üôá üíÅ üôÖ üôÜ üôã üôé üôç",
        concatenated:"üëæ üôá üíÅ üôÖ üôÜ üôã üôé üôçüëæ üôá üíÅ üôÖ üôÜ üôã üôé üôç"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\U0001f435 \\U0001f648 \\U0001f649 \\U0001f64a\"}",
    statement:"{ `literal`: 'üêµ üôà üôâ üôä', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"üêµ üôà üôâ üôä"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"üêµ üôà üôâ üôä",
        variable:"üêµ üôà üôâ üôä",
        concatenated:"üêµ üôà üôâ üôäüêµ üôà üôâ üôä"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u2764\\ufe0f \\U0001f494 \\U0001f48c \\U0001f495 \\U0001f49e \\U0001f493 \\U0001f497 \\U0001f496 \\U0001f498 \\U0001f49d \\U0001f49f \\U0001f49c \\U0001f49b \\U0001f49a \\U0001f499\"}",
    statement:"{ `literal`: '‚ù§Ô∏è üíî üíå üíï üíû üíì üíó üíñ üíò üíù üíü üíú üíõ üíö üíô', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"‚ù§Ô∏è üíî üíå üíï üíû üíì üíó üíñ üíò üíù üíü üíú üíõ üíö üíô"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"‚ù§Ô∏è üíî üíå üíï üíû üíì üíó üíñ üíò üíù üíü üíú üíõ üíö üíô",
        variable:"‚ù§Ô∏è üíî üíå üíï üíû üíì üíó üíñ üíò üíù üíü üíú üíõ üíö üíô",
        concatenated:"‚ù§Ô∏è üíî üíå üíï üíû üíì üíó üíñ üíò üíù üíü üíú üíõ üíö üíô‚ù§Ô∏è üíî üíå üíï üíû üíì üíó üíñ üíò üíù üíü üíú üíõ üíö üíô"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u270b\\U0001f3ff \\U0001f4aa\\U0001f3ff \\U0001f450\\U0001f3ff \\U0001f64c\\U0001f3ff \\U0001f44f\\U0001f3ff \\U0001f64f\\U0001f3ff\"}",
    statement:"{ `literal`: '‚úãüèø üí™üèø üëêüèø üôåüèø üëèüèø üôèüèø', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"‚úãüèø üí™üèø üëêüèø üôåüèø üëèüèø üôèüèø"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"‚úãüèø üí™üèø üëêüèø üôåüèø üëèüèø üôèüèø",
        variable:"‚úãüèø üí™üèø üëêüèø üôåüèø üëèüèø üôèüèø",
        concatenated:"‚úãüèø üí™üèø üëêüèø üôåüèø üëèüèø üôèüèø‚úãüèø üí™üèø üëêüèø üôåüèø üëèüèø üôèüèø"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\U0001f6be \\U0001f192 \\U0001f193 \\U0001f195 \\U0001f196 \\U0001f197 \\U0001f199 \\U0001f3e7\"}",
    statement:"{ `literal`: 'üöæ üÜí üÜì üÜï üÜñ üÜó üÜô üèß', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"üöæ üÜí üÜì üÜï üÜñ üÜó üÜô üèß"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"üöæ üÜí üÜì üÜï üÜñ üÜó üÜô üèß",
        variable:"üöæ üÜí üÜì üÜï üÜñ üÜó üÜô üèß",
        concatenated:"üöæ üÜí üÜì üÜï üÜñ üÜó üÜô üèßüöæ üÜí üÜì üÜï üÜñ üÜó üÜô üèß"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"0\\ufe0f\\u20e3 1\\ufe0f\\u20e3 2\\ufe0f\\u20e3 3\\ufe0f\\u20e3 4\\ufe0f\\u20e3 5\\ufe0f\\u20e3 6\\ufe0f\\u20e3 7\\ufe0f\\u20e3 8\\ufe0f\\u20e3 9\\ufe0f\\u20e3 \\U0001f51f\"}",
    statement:"{ `literal`: '0Ô∏è‚É£ 1Ô∏è‚É£ 2Ô∏è‚É£ 3Ô∏è‚É£ 4Ô∏è‚É£ 5Ô∏è‚É£ 6Ô∏è‚É£ 7Ô∏è‚É£ 8Ô∏è‚É£ 9Ô∏è‚É£ üîü', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"0Ô∏è‚É£ 1Ô∏è‚É£ 2Ô∏è‚É£ 3Ô∏è‚É£ 4Ô∏è‚É£ 5Ô∏è‚É£ 6Ô∏è‚É£ 7Ô∏è‚É£ 8Ô∏è‚É£ 9Ô∏è‚É£ üîü"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"0Ô∏è‚É£ 1Ô∏è‚É£ 2Ô∏è‚É£ 3Ô∏è‚É£ 4Ô∏è‚É£ 5Ô∏è‚É£ 6Ô∏è‚É£ 7Ô∏è‚É£ 8Ô∏è‚É£ 9Ô∏è‚É£ üîü",
        variable:"0Ô∏è‚É£ 1Ô∏è‚É£ 2Ô∏è‚É£ 3Ô∏è‚É£ 4Ô∏è‚É£ 5Ô∏è‚É£ 6Ô∏è‚É£ 7Ô∏è‚É£ 8Ô∏è‚É£ 9Ô∏è‚É£ üîü",
        concatenated:"0Ô∏è‚É£ 1Ô∏è‚É£ 2Ô∏è‚É£ 3Ô∏è‚É£ 4Ô∏è‚É£ 5Ô∏è‚É£ 6Ô∏è‚É£ 7Ô∏è‚É£ 8Ô∏è‚É£ 9Ô∏è‚É£ üîü0Ô∏è‚É£ 1Ô∏è‚É£ 2Ô∏è‚É£ 3Ô∏è‚É£ 4Ô∏è‚É£ 5Ô∏è‚É£ 6Ô∏è‚É£ 7Ô∏è‚É£ 8Ô∏è‚É£ 9Ô∏è‚É£ üîü"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\U0001f1fa\\U0001f1f8\\U0001f1f7\\U0001f1fa\\U0001f1f8 \\U0001f1e6\\U0001f1eb\\U0001f1e6\\U0001f1f2\\U0001f1f8\"}",
    statement:"{ `literal`: 'üá∫üá∏üá∑üá∫üá∏ üá¶üá´üá¶üá≤üá∏', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"üá∫üá∏üá∑üá∫üá∏ üá¶üá´üá¶üá≤üá∏"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"üá∫üá∏üá∑üá∫üá∏ üá¶üá´üá¶üá≤üá∏",
        variable:"üá∫üá∏üá∑üá∫üá∏ üá¶üá´üá¶üá≤üá∏",
        concatenated:"üá∫üá∏üá∑üá∫üá∏ üá¶üá´üá¶üá≤üá∏üá∫üá∏üá∑üá∫üá∏ üá¶üá´üá¶üá≤üá∏"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\U0001f1fa\\U0001f1f8\\U0001f1f7\\U0001f1fa\\U0001f1f8\\U0001f1e6\\U0001f1eb\\U0001f1e6\\U0001f1f2\"}",
    statement:"{ `literal`: 'üá∫üá∏üá∑üá∫üá∏üá¶üá´üá¶üá≤', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"üá∫üá∏üá∑üá∫üá∏üá¶üá´üá¶üá≤"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"üá∫üá∏üá∑üá∫üá∏üá¶üá´üá¶üá≤",
        variable:"üá∫üá∏üá∑üá∫üá∏üá¶üá´üá¶üá≤",
        concatenated:"üá∫üá∏üá∑üá∫üá∏üá¶üá´üá¶üá≤üá∫üá∏üá∑üá∫üá∏üá¶üá´üá¶üá≤"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\U0001f1fa\\U0001f1f8\\U0001f1f7\\U0001f1fa\\U0001f1f8\\U0001f1e6\"}",
    statement:"{ `literal`: 'üá∫üá∏üá∑üá∫üá∏üá¶', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"üá∫üá∏üá∑üá∫üá∏üá¶"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"üá∫üá∏üá∑üá∫üá∏üá¶",
        variable:"üá∫üá∏üá∑üá∫üá∏üá¶",
        concatenated:"üá∫üá∏üá∑üá∫üá∏üá¶üá∫üá∏üá∑üá∫üá∏üá¶"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\uff11\\uff12\\uff13\"}",
    statement:"{ `literal`: 'ÔºëÔºíÔºì', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ÔºëÔºíÔºì"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ÔºëÔºíÔºì",
        variable:"ÔºëÔºíÔºì",
        concatenated:"ÔºëÔºíÔºìÔºëÔºíÔºì"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u0661\\u0662\\u0663\"}",
    statement:"{ `literal`: 'Ÿ°Ÿ¢Ÿ£', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"Ÿ°Ÿ¢Ÿ£"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"Ÿ°Ÿ¢Ÿ£",
        variable:"Ÿ°Ÿ¢Ÿ£",
        concatenated:"Ÿ°Ÿ¢Ÿ£Ÿ°Ÿ¢Ÿ£"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u062b\\u0645 \\u0646\\u0641\\u0633 \\u0633\\u0642\\u0637\\u062a \\u0648\\u0628\\u0627\\u0644\\u062a\\u062d\\u062f\\u064a\\u062f\\u060c, \\u062c\\u0632\\u064a\\u0631\\u062a\\u064a \\u0628\\u0627\\u0633\\u062a\\u062e\\u062f\\u0627\\u0645 \\u0623\\u0646 \\u062f\\u0646\\u0648. \\u0625\\u0630 \\u0647\\u0646\\u0627\\u061f \\u0627\\u0644\\u0633\\u062a\\u0627\\u0631 \\u0648\\u062a\\u0646\\u0635\\u064a\\u0628 \\u0643\\u0627\\u0646. \\u0623\\u0647\\u0651\\u0644 \\u0627\\u064a\\u0637\\u0627\\u0644\\u064a\\u0627\\u060c \\u0628\\u0631\\u064a\\u0637\\u0627\\u0646\\u064a\\u0627-\\u0641\\u0631\\u0646\\u0633\\u0627 \\u0642\\u062f \\u0623\\u062e\\u0630. \\u0633\\u0644\\u064a\\u0645\\u0627\\u0646\\u060c \\u0625\\u062a\\u0641\\u0627\\u0642\\u064a\\u0629 \\u0628\\u064a\\u0646 \\u0645\\u0627, \\u064a\\u0630\\u0643\\u0631 \\u0627\\u0644\\u062d\\u062f\\u0648\\u062f \\u0623\\u064a \\u0628\\u0639\\u062f, \\u0645\\u0639\\u0627\\u0645\\u0644\\u0629 \\u0628\\u0648\\u0644\\u0646\\u062f\\u0627\\u060c \\u0627\\u0644\\u0625\\u0637\\u0644\\u0627\\u0642 \\u0639\\u0644 \\u0625\\u064a\\u0648.\"}",
    statement:"{ `literal`: 'ÿ´ŸÖ ŸÜŸÅÿ≥ ÿ≥ŸÇÿ∑ÿ™ Ÿàÿ®ÿßŸÑÿ™ÿ≠ÿØŸäÿØÿå, ÿ¨ÿ≤Ÿäÿ±ÿ™Ÿä ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿ£ŸÜ ÿØŸÜŸà. ÿ•ÿ∞ ŸáŸÜÿßÿü ÿßŸÑÿ≥ÿ™ÿßÿ± Ÿàÿ™ŸÜÿµŸäÿ® ŸÉÿßŸÜ. ÿ£ŸáŸëŸÑ ÿßŸäÿ∑ÿßŸÑŸäÿßÿå ÿ®ÿ±Ÿäÿ∑ÿßŸÜŸäÿß-ŸÅÿ±ŸÜÿ≥ÿß ŸÇÿØ ÿ£ÿÆÿ∞. ÿ≥ŸÑŸäŸÖÿßŸÜÿå ÿ•ÿ™ŸÅÿßŸÇŸäÿ© ÿ®ŸäŸÜ ŸÖÿß, Ÿäÿ∞ŸÉÿ± ÿßŸÑÿ≠ÿØŸàÿØ ÿ£Ÿä ÿ®ÿπÿØ, ŸÖÿπÿßŸÖŸÑÿ© ÿ®ŸàŸÑŸÜÿØÿßÿå ÿßŸÑÿ•ÿ∑ŸÑÿßŸÇ ÿπŸÑ ÿ•ŸäŸà.', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ÿ´ŸÖ ŸÜŸÅÿ≥ ÿ≥ŸÇÿ∑ÿ™ Ÿàÿ®ÿßŸÑÿ™ÿ≠ÿØŸäÿØÿå, ÿ¨ÿ≤Ÿäÿ±ÿ™Ÿä ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿ£ŸÜ ÿØŸÜŸà. ÿ•ÿ∞ ŸáŸÜÿßÿü ÿßŸÑÿ≥ÿ™ÿßÿ± Ÿàÿ™ŸÜÿµŸäÿ® ŸÉÿßŸÜ. ÿ£ŸáŸëŸÑ ÿßŸäÿ∑ÿßŸÑŸäÿßÿå ÿ®ÿ±Ÿäÿ∑ÿßŸÜŸäÿß-ŸÅÿ±ŸÜÿ≥ÿß ŸÇÿØ ÿ£ÿÆÿ∞. ÿ≥ŸÑŸäŸÖÿßŸÜÿå ÿ•ÿ™ŸÅÿßŸÇŸäÿ© ÿ®ŸäŸÜ ŸÖÿß, Ÿäÿ∞ŸÉÿ± ÿßŸÑÿ≠ÿØŸàÿØ ÿ£Ÿä ÿ®ÿπÿØ, ŸÖÿπÿßŸÖŸÑÿ© ÿ®ŸàŸÑŸÜÿØÿßÿå ÿßŸÑÿ•ÿ∑ŸÑÿßŸÇ ÿπŸÑ ÿ•ŸäŸà."
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ÿ´ŸÖ ŸÜŸÅÿ≥ ÿ≥ŸÇÿ∑ÿ™ Ÿàÿ®ÿßŸÑÿ™ÿ≠ÿØŸäÿØÿå, ÿ¨ÿ≤Ÿäÿ±ÿ™Ÿä ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿ£ŸÜ ÿØŸÜŸà. ÿ•ÿ∞ ŸáŸÜÿßÿü ÿßŸÑÿ≥ÿ™ÿßÿ± Ÿàÿ™ŸÜÿµŸäÿ® ŸÉÿßŸÜ. ÿ£ŸáŸëŸÑ ÿßŸäÿ∑ÿßŸÑŸäÿßÿå ÿ®ÿ±Ÿäÿ∑ÿßŸÜŸäÿß-ŸÅÿ±ŸÜÿ≥ÿß ŸÇÿØ ÿ£ÿÆÿ∞. ÿ≥ŸÑŸäŸÖÿßŸÜÿå ÿ•ÿ™ŸÅÿßŸÇŸäÿ© ÿ®ŸäŸÜ ŸÖÿß, Ÿäÿ∞ŸÉÿ± ÿßŸÑÿ≠ÿØŸàÿØ ÿ£Ÿä ÿ®ÿπÿØ, ŸÖÿπÿßŸÖŸÑÿ© ÿ®ŸàŸÑŸÜÿØÿßÿå ÿßŸÑÿ•ÿ∑ŸÑÿßŸÇ ÿπŸÑ ÿ•ŸäŸà.",
        variable:"ÿ´ŸÖ ŸÜŸÅÿ≥ ÿ≥ŸÇÿ∑ÿ™ Ÿàÿ®ÿßŸÑÿ™ÿ≠ÿØŸäÿØÿå, ÿ¨ÿ≤Ÿäÿ±ÿ™Ÿä ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿ£ŸÜ ÿØŸÜŸà. ÿ•ÿ∞ ŸáŸÜÿßÿü ÿßŸÑÿ≥ÿ™ÿßÿ± Ÿàÿ™ŸÜÿµŸäÿ® ŸÉÿßŸÜ. ÿ£ŸáŸëŸÑ ÿßŸäÿ∑ÿßŸÑŸäÿßÿå ÿ®ÿ±Ÿäÿ∑ÿßŸÜŸäÿß-ŸÅÿ±ŸÜÿ≥ÿß ŸÇÿØ ÿ£ÿÆÿ∞. ÿ≥ŸÑŸäŸÖÿßŸÜÿå ÿ•ÿ™ŸÅÿßŸÇŸäÿ© ÿ®ŸäŸÜ ŸÖÿß, Ÿäÿ∞ŸÉÿ± ÿßŸÑÿ≠ÿØŸàÿØ ÿ£Ÿä ÿ®ÿπÿØ, ŸÖÿπÿßŸÖŸÑÿ© ÿ®ŸàŸÑŸÜÿØÿßÿå ÿßŸÑÿ•ÿ∑ŸÑÿßŸÇ ÿπŸÑ ÿ•ŸäŸà.",
        concatenated:"ÿ´ŸÖ ŸÜŸÅÿ≥ ÿ≥ŸÇÿ∑ÿ™ Ÿàÿ®ÿßŸÑÿ™ÿ≠ÿØŸäÿØÿå, ÿ¨ÿ≤Ÿäÿ±ÿ™Ÿä ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿ£ŸÜ ÿØŸÜŸà. ÿ•ÿ∞ ŸáŸÜÿßÿü ÿßŸÑÿ≥ÿ™ÿßÿ± Ÿàÿ™ŸÜÿµŸäÿ® ŸÉÿßŸÜ. ÿ£ŸáŸëŸÑ ÿßŸäÿ∑ÿßŸÑŸäÿßÿå ÿ®ÿ±Ÿäÿ∑ÿßŸÜŸäÿß-ŸÅÿ±ŸÜÿ≥ÿß ŸÇÿØ ÿ£ÿÆÿ∞. ÿ≥ŸÑŸäŸÖÿßŸÜÿå ÿ•ÿ™ŸÅÿßŸÇŸäÿ© ÿ®ŸäŸÜ ŸÖÿß, Ÿäÿ∞ŸÉÿ± ÿßŸÑÿ≠ÿØŸàÿØ ÿ£Ÿä ÿ®ÿπÿØ, ŸÖÿπÿßŸÖŸÑÿ© ÿ®ŸàŸÑŸÜÿØÿßÿå ÿßŸÑÿ•ÿ∑ŸÑÿßŸÇ ÿπŸÑ ÿ•ŸäŸà.ÿ´ŸÖ ŸÜŸÅÿ≥ ÿ≥ŸÇÿ∑ÿ™ Ÿàÿ®ÿßŸÑÿ™ÿ≠ÿØŸäÿØÿå, ÿ¨ÿ≤Ÿäÿ±ÿ™Ÿä ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿ£ŸÜ ÿØŸÜŸà. ÿ•ÿ∞ ŸáŸÜÿßÿü ÿßŸÑÿ≥ÿ™ÿßÿ± Ÿàÿ™ŸÜÿµŸäÿ® ŸÉÿßŸÜ. ÿ£ŸáŸëŸÑ ÿßŸäÿ∑ÿßŸÑŸäÿßÿå ÿ®ÿ±Ÿäÿ∑ÿßŸÜŸäÿß-ŸÅÿ±ŸÜÿ≥ÿß ŸÇÿØ ÿ£ÿÆÿ∞. ÿ≥ŸÑŸäŸÖÿßŸÜÿå ÿ•ÿ™ŸÅÿßŸÇŸäÿ© ÿ®ŸäŸÜ ŸÖÿß, Ÿäÿ∞ŸÉÿ± ÿßŸÑÿ≠ÿØŸàÿØ ÿ£Ÿä ÿ®ÿπÿØ, ŸÖÿπÿßŸÖŸÑÿ© ÿ®ŸàŸÑŸÜÿØÿßÿå ÿßŸÑÿ•ÿ∑ŸÑÿßŸÇ ÿπŸÑ ÿ•ŸäŸà."
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u05d1\\u05b0\\u05bc\\u05e8\\u05b5\\u05d0\\u05e9\\u05b4\\u05c1\\u05d9\\u05ea, \\u05d1\\u05b8\\u05bc\\u05e8\\u05b8\\u05d0 \\u05d0\\u05b1\\u05dc\\u05b9\\u05d4\\u05b4\\u05d9\\u05dd, \\u05d0\\u05b5\\u05ea \\u05d4\\u05b7\\u05e9\\u05b8\\u05bc\\u05c1\\u05de\\u05b7\\u05d9\\u05b4\\u05dd, \\u05d5\\u05b0\\u05d0\\u05b5\\u05ea \\u05d4\\u05b8\\u05d0\\u05b8\\u05e8\\u05b6\\u05e5\"}",
    statement:"{ `literal`: '◊ë÷∞÷º◊®÷µ◊ê◊©÷¥◊Å◊ô◊™, ◊ë÷∏÷º◊®÷∏◊ê ◊ê÷±◊ú÷π◊î÷¥◊ô◊ù, ◊ê÷µ◊™ ◊î÷∑◊©÷∏÷º◊Å◊û÷∑◊ô÷¥◊ù, ◊ï÷∞◊ê÷µ◊™ ◊î÷∏◊ê÷∏◊®÷∂◊•', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"◊ë÷∞÷º◊®÷µ◊ê◊©÷¥◊Å◊ô◊™, ◊ë÷∏÷º◊®÷∏◊ê ◊ê÷±◊ú÷π◊î÷¥◊ô◊ù, ◊ê÷µ◊™ ◊î÷∑◊©÷∏÷º◊Å◊û÷∑◊ô÷¥◊ù, ◊ï÷∞◊ê÷µ◊™ ◊î÷∏◊ê÷∏◊®÷∂◊•"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"◊ë÷∞÷º◊®÷µ◊ê◊©÷¥◊Å◊ô◊™, ◊ë÷∏÷º◊®÷∏◊ê ◊ê÷±◊ú÷π◊î÷¥◊ô◊ù, ◊ê÷µ◊™ ◊î÷∑◊©÷∏÷º◊Å◊û÷∑◊ô÷¥◊ù, ◊ï÷∞◊ê÷µ◊™ ◊î÷∏◊ê÷∏◊®÷∂◊•",
        variable:"◊ë÷∞÷º◊®÷µ◊ê◊©÷¥◊Å◊ô◊™, ◊ë÷∏÷º◊®÷∏◊ê ◊ê÷±◊ú÷π◊î÷¥◊ô◊ù, ◊ê÷µ◊™ ◊î÷∑◊©÷∏÷º◊Å◊û÷∑◊ô÷¥◊ù, ◊ï÷∞◊ê÷µ◊™ ◊î÷∏◊ê÷∏◊®÷∂◊•",
        concatenated:"◊ë÷∞÷º◊®÷µ◊ê◊©÷¥◊Å◊ô◊™, ◊ë÷∏÷º◊®÷∏◊ê ◊ê÷±◊ú÷π◊î÷¥◊ô◊ù, ◊ê÷µ◊™ ◊î÷∑◊©÷∏÷º◊Å◊û÷∑◊ô÷¥◊ù, ◊ï÷∞◊ê÷µ◊™ ◊î÷∏◊ê÷∏◊®÷∂◊•◊ë÷∞÷º◊®÷µ◊ê◊©÷¥◊Å◊ô◊™, ◊ë÷∏÷º◊®÷∏◊ê ◊ê÷±◊ú÷π◊î÷¥◊ô◊ù, ◊ê÷µ◊™ ◊î÷∑◊©÷∏÷º◊Å◊û÷∑◊ô÷¥◊ù, ◊ï÷∞◊ê÷µ◊™ ◊î÷∏◊ê÷∏◊®÷∂◊•"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u05d4\\u05b8\\u05d9\\u05b0\\u05ea\\u05b8\\u05d4test\\u0627\\u0644\\u0635\\u0641\\u062d\\u0627\\u062a \\u0627\\u0644\\u062a\\u0651\\u062d\\u0648\\u0644\"}",
    statement:"{ `literal`: '◊î÷∏◊ô÷∞◊™÷∏◊îtestÿßŸÑÿµŸÅÿ≠ÿßÿ™ ÿßŸÑÿ™Ÿëÿ≠ŸàŸÑ', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"◊î÷∏◊ô÷∞◊™÷∏◊îtestÿßŸÑÿµŸÅÿ≠ÿßÿ™ ÿßŸÑÿ™Ÿëÿ≠ŸàŸÑ"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"◊î÷∏◊ô÷∞◊™÷∏◊îtestÿßŸÑÿµŸÅÿ≠ÿßÿ™ ÿßŸÑÿ™Ÿëÿ≠ŸàŸÑ",
        variable:"◊î÷∏◊ô÷∞◊™÷∏◊îtestÿßŸÑÿµŸÅÿ≠ÿßÿ™ ÿßŸÑÿ™Ÿëÿ≠ŸàŸÑ",
        concatenated:"◊î÷∏◊ô÷∞◊™÷∏◊îtestÿßŸÑÿµŸÅÿ≠ÿßÿ™ ÿßŸÑÿ™Ÿëÿ≠ŸàŸÑ◊î÷∏◊ô÷∞◊™÷∏◊îtestÿßŸÑÿµŸÅÿ≠ÿßÿ™ ÿßŸÑÿ™Ÿëÿ≠ŸàŸÑ"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\ufdfd\"}",
    statement:"{ `literal`: 'Ô∑Ω', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"Ô∑Ω"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"Ô∑Ω",
        variable:"Ô∑Ω",
        concatenated:"Ô∑ΩÔ∑Ω"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\ufdfa\"}",
    statement:"{ `literal`: 'Ô∑∫', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"Ô∑∫"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"Ô∑∫",
        variable:"Ô∑∫",
        concatenated:"Ô∑∫Ô∑∫"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u0645\\u064f\\u0646\\u064e\\u0627\\u0642\\u064e\\u0634\\u064e\\u0629\\u064f \\u0633\\u064f\\u0628\\u064f\\u0644\\u0650 \\u0627\\u0650\\u0633\\u0652\\u062a\\u0650\\u062e\\u0652\\u062f\\u064e\\u0627\\u0645\\u0650 \\u0627\\u0644\\u0644\\u064f\\u0651\\u063a\\u064e\\u0629\\u0650 \\u0641\\u0650\\u064a \\u0627\\u0644\\u0646\\u064f\\u0651\\u0638\\u064f\\u0645\\u0650 \\u0627\\u0644\\u0652\\u0642\\u064e\\u0627\\u0626\\u0650\\u0645\\u064e\\u0629\\u0650 \\u0648\\u064e\\u0641\\u0650\\u064a\\u0645 \\u064a\\u064e\\u062e\\u064f\\u0635\\u064e\\u0651 \\u0627\\u0644\\u062a\\u064e\\u0651\\u0637\\u0652\\u0628\\u0650\\u064a\\u0642\\u064e\\u0627\\u062a\\u064f \\u0627\\u0644\\u0652\\u062d\\u0627\\u0633\\u064f\\u0648\\u0628\\u0650\\u064a\\u064e\\u0651\\u0629\\u064f\\u060c \"}",
    statement:"{ `literal`: 'ŸÖŸèŸÜŸéÿßŸÇŸéÿ¥Ÿéÿ©Ÿè ÿ≥Ÿèÿ®ŸèŸÑŸê ÿßŸêÿ≥Ÿíÿ™ŸêÿÆŸíÿØŸéÿßŸÖŸê ÿßŸÑŸÑŸèŸëÿ∫Ÿéÿ©Ÿê ŸÅŸêŸä ÿßŸÑŸÜŸèŸëÿ∏ŸèŸÖŸê ÿßŸÑŸíŸÇŸéÿßÿ¶ŸêŸÖŸéÿ©Ÿê ŸàŸéŸÅŸêŸäŸÖ ŸäŸéÿÆŸèÿµŸéŸë ÿßŸÑÿ™ŸéŸëÿ∑Ÿíÿ®ŸêŸäŸÇŸéÿßÿ™Ÿè ÿßŸÑŸíÿ≠ÿßÿ≥ŸèŸàÿ®ŸêŸäŸéŸëÿ©Ÿèÿå ', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ŸÖŸèŸÜŸéÿßŸÇŸéÿ¥Ÿéÿ©Ÿè ÿ≥Ÿèÿ®ŸèŸÑŸê ÿßŸêÿ≥Ÿíÿ™ŸêÿÆŸíÿØŸéÿßŸÖŸê ÿßŸÑŸÑŸèŸëÿ∫Ÿéÿ©Ÿê ŸÅŸêŸä ÿßŸÑŸÜŸèŸëÿ∏ŸèŸÖŸê ÿßŸÑŸíŸÇŸéÿßÿ¶ŸêŸÖŸéÿ©Ÿê ŸàŸéŸÅŸêŸäŸÖ ŸäŸéÿÆŸèÿµŸéŸë ÿßŸÑÿ™ŸéŸëÿ∑Ÿíÿ®ŸêŸäŸÇŸéÿßÿ™Ÿè ÿßŸÑŸíÿ≠ÿßÿ≥ŸèŸàÿ®ŸêŸäŸéŸëÿ©Ÿèÿå "
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ŸÖŸèŸÜŸéÿßŸÇŸéÿ¥Ÿéÿ©Ÿè ÿ≥Ÿèÿ®ŸèŸÑŸê ÿßŸêÿ≥Ÿíÿ™ŸêÿÆŸíÿØŸéÿßŸÖŸê ÿßŸÑŸÑŸèŸëÿ∫Ÿéÿ©Ÿê ŸÅŸêŸä ÿßŸÑŸÜŸèŸëÿ∏ŸèŸÖŸê ÿßŸÑŸíŸÇŸéÿßÿ¶ŸêŸÖŸéÿ©Ÿê ŸàŸéŸÅŸêŸäŸÖ ŸäŸéÿÆŸèÿµŸéŸë ÿßŸÑÿ™ŸéŸëÿ∑Ÿíÿ®ŸêŸäŸÇŸéÿßÿ™Ÿè ÿßŸÑŸíÿ≠ÿßÿ≥ŸèŸàÿ®ŸêŸäŸéŸëÿ©Ÿèÿå ",
        variable:"ŸÖŸèŸÜŸéÿßŸÇŸéÿ¥Ÿéÿ©Ÿè ÿ≥Ÿèÿ®ŸèŸÑŸê ÿßŸêÿ≥Ÿíÿ™ŸêÿÆŸíÿØŸéÿßŸÖŸê ÿßŸÑŸÑŸèŸëÿ∫Ÿéÿ©Ÿê ŸÅŸêŸä ÿßŸÑŸÜŸèŸëÿ∏ŸèŸÖŸê ÿßŸÑŸíŸÇŸéÿßÿ¶ŸêŸÖŸéÿ©Ÿê ŸàŸéŸÅŸêŸäŸÖ ŸäŸéÿÆŸèÿµŸéŸë ÿßŸÑÿ™ŸéŸëÿ∑Ÿíÿ®ŸêŸäŸÇŸéÿßÿ™Ÿè ÿßŸÑŸíÿ≠ÿßÿ≥ŸèŸàÿ®ŸêŸäŸéŸëÿ©Ÿèÿå ",
        concatenated:"ŸÖŸèŸÜŸéÿßŸÇŸéÿ¥Ÿéÿ©Ÿè ÿ≥Ÿèÿ®ŸèŸÑŸê ÿßŸêÿ≥Ÿíÿ™ŸêÿÆŸíÿØŸéÿßŸÖŸê ÿßŸÑŸÑŸèŸëÿ∫Ÿéÿ©Ÿê ŸÅŸêŸä ÿßŸÑŸÜŸèŸëÿ∏ŸèŸÖŸê ÿßŸÑŸíŸÇŸéÿßÿ¶ŸêŸÖŸéÿ©Ÿê ŸàŸéŸÅŸêŸäŸÖ ŸäŸéÿÆŸèÿµŸéŸë ÿßŸÑÿ™ŸéŸëÿ∑Ÿíÿ®ŸêŸäŸÇŸéÿßÿ™Ÿè ÿßŸÑŸíÿ≠ÿßÿ≥ŸèŸàÿ®ŸêŸäŸéŸëÿ©Ÿèÿå ŸÖŸèŸÜŸéÿßŸÇŸéÿ¥Ÿéÿ©Ÿè ÿ≥Ÿèÿ®ŸèŸÑŸê ÿßŸêÿ≥Ÿíÿ™ŸêÿÆŸíÿØŸéÿßŸÖŸê ÿßŸÑŸÑŸèŸëÿ∫Ÿéÿ©Ÿê ŸÅŸêŸä ÿßŸÑŸÜŸèŸëÿ∏ŸèŸÖŸê ÿßŸÑŸíŸÇŸéÿßÿ¶ŸêŸÖŸéÿ©Ÿê ŸàŸéŸÅŸêŸäŸÖ ŸäŸéÿÆŸèÿµŸéŸë ÿßŸÑÿ™ŸéŸëÿ∑Ÿíÿ®ŸêŸäŸÇŸéÿßÿ™Ÿè ÿßŸÑŸíÿ≠ÿßÿ≥ŸèŸàÿ®ŸêŸäŸéŸëÿ©Ÿèÿå "
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u200b\"}",
    statement:"{ `literal`: '‚Äã', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"‚Äã"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"‚Äã",
        variable:"‚Äã",
        concatenated:"‚Äã‚Äã"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u1680\"}",
    statement:"{ `literal`: '·öÄ', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"·öÄ"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"·öÄ",
        variable:"·öÄ",
        concatenated:"·öÄ·öÄ"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u180e\"}",
    statement:"{ `literal`: '·†é', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"·†é"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"·†é",
        variable:"·†é",
        concatenated:"·†é·†é"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u3000\"}",
    statement:"{ `literal`: '„ÄÄ', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"„ÄÄ"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"„ÄÄ",
        variable:"„ÄÄ",
        concatenated:"„ÄÄ„ÄÄ"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\ufeff\"}",
    statement:"{ `literal`: 'Ôªø', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"Ôªø"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"Ôªø",
        variable:"Ôªø",
        concatenated:"ÔªøÔªø"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u2423\"}",
    statement:"{ `literal`: '‚ê£', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"‚ê£"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"‚ê£",
        variable:"‚ê£",
        concatenated:"‚ê£‚ê£"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u2422\"}",
    statement:"{ `literal`: '‚ê¢', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"‚ê¢"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"‚ê¢",
        variable:"‚ê¢",
        concatenated:"‚ê¢‚ê¢"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u2421\"}",
    statement:"{ `literal`: '‚ê°', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"‚ê°"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"‚ê°",
        variable:"‚ê°",
        concatenated:"‚ê°‚ê°"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u202a\\u202atest\\u202a\"}",
    statement:"{ `literal`: '‚Ä™‚Ä™test‚Ä™', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"‚Ä™‚Ä™test‚Ä™"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"‚Ä™‚Ä™test‚Ä™",
        variable:"‚Ä™‚Ä™test‚Ä™",
        concatenated:"‚Ä™‚Ä™test‚Ä™‚Ä™‚Ä™test‚Ä™"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u202btest\\u202b\"}",
    statement:"{ `literal`: '‚Ä´test‚Ä´', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"‚Ä´test‚Ä´"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"‚Ä´test‚Ä´",
        variable:"‚Ä´test‚Ä´",
        concatenated:"‚Ä´test‚Ä´‚Ä´test‚Ä´"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u2029test\\u2029\"}",
    statement:"{ `literal`: '‚Ä©test‚Ä©', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"‚Ä©test‚Ä©"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"‚Ä©test‚Ä©",
        variable:"‚Ä©test‚Ä©",
        concatenated:"‚Ä©test‚Ä©‚Ä©test‚Ä©"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"test\\u2060test\\u202b\"}",
    statement:"{ `literal`: 'test‚Å†test‚Ä´', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"test‚Å†test‚Ä´"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"test‚Å†test‚Ä´",
        variable:"test‚Å†test‚Ä´",
        concatenated:"test‚Å†test‚Ä´test‚Å†test‚Ä´"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u2066test\\u2067\"}",
    statement:"{ `literal`: '‚Å¶test‚Åß', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"‚Å¶test‚Åß"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"‚Å¶test‚Åß",
        variable:"‚Å¶test‚Åß",
        concatenated:"‚Å¶test‚Åß‚Å¶test‚Åß"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u1e70\\u033a\\u033a\\u0315o\\u035e \\u0337i\\u0332\\u032c\\u0347\\u032a\\u0359n\\u031d\\u0317\\u0355v\\u031f\\u031c\\u0318\\u0326\\u035fo\\u0336\\u0319\\u0330\\u0320k\\xe8\\u035a\\u032e\\u033a\\u032a\\u0339\\u0331\\u0324 \\u0316t\\u031d\\u0355\\u0333\\u0323\\u033b\\u032a\\u035eh\\u033c\\u0353\\u0332\\u0326\\u0333\\u0318\\u0332e\\u0347\\u0323\\u0330\\u0326\\u032c\\u034e \\u0322\\u033c\\u033b\\u0331\\u0318h\\u035a\\u034e\\u0359\\u031c\\u0323\\u0332\\u0345i\\u0326\\u0332\\u0323\\u0330\\u0324v\\u033b\\u034de\\u033a\\u032d\\u0333\\u032a\\u0330-m\\u0322i\\u0345n\\u0316\\u033a\\u031e\\u0332\\u032f\\u0330d\\u0335\\u033c\\u031f\\u0359\\u0329\\u033c\\u0318\\u0333 \\u031e\\u0325\\u0331\\u0333\\u032dr\\u031b\\u0317\\u0318e\\u0359p\\u0360r\\u033c\\u031e\\u033b\\u032d\\u0317e\\u033a\\u0320\\u0323\\u035fs\\u0318\\u0347\\u0333\\u034d\\u031d\\u0349e\\u0349\\u0325\\u032f\\u031e\\u0332\\u035a\\u032c\\u035c\\u01f9\\u032c\\u034e\\u034e\\u031f\\u0316\\u0347\\u0324t\\u034d\\u032c\\u0324\\u0353\\u033c\\u032d\\u0358\\u0345i\\u032a\\u0331n\\u0360g\\u0334\\u0349 \\u034f\\u0349\\u0345c\\u032c\\u031fh\\u0361a\\u032b\\u033b\\u032f\\u0358o\\u032b\\u031f\\u0316\\u034d\\u0319\\u031d\\u0349s\\u0317\\u0326\\u0332.\\u0328\\u0339\\u0348\\u0323\"}",
    statement:"{ `literal`: '·π∞Ã∫Ã∫ÃïoÕû Ã∑iÃ≤Ã¨ÕáÃ™ÕônÃùÃóÕïvÃüÃúÃòÃ¶ÕüoÃ∂ÃôÃ∞Ã†k√®ÕöÃÆÃ∫Ã™ÃπÃ±Ã§ ÃñtÃùÕïÃ≥Ã£ÃªÃ™ÕûhÃºÕìÃ≤Ã¶Ã≥ÃòÃ≤eÕáÃ£Ã∞Ã¶Ã¨Õé Ã¢ÃºÃªÃ±ÃòhÕöÕéÕôÃúÃ£Ã≤ÕÖiÃ¶Ã≤Ã£Ã∞Ã§vÃªÕçeÃ∫Ã≠Ã≥Ã™Ã∞-mÃ¢iÕÖnÃñÃ∫ÃûÃ≤ÃØÃ∞dÃµÃºÃüÕôÃ©ÃºÃòÃ≥ ÃûÃ•Ã±Ã≥Ã≠rÃõÃóÃòeÕôpÕ†rÃºÃûÃªÃ≠ÃóeÃ∫Ã†Ã£ÕüsÃòÕáÃ≥ÕçÃùÕâeÕâÃ•ÃØÃûÃ≤ÕöÃ¨Õú«πÃ¨ÕéÕéÃüÃñÕáÃ§tÕçÃ¨Ã§ÕìÃºÃ≠ÕòÕÖiÃ™Ã±nÕ†gÃ¥Õâ ÕèÕâÕÖcÃ¨ÃühÕ°aÃ´ÃªÃØÕòoÃ´ÃüÃñÕçÃôÃùÕâsÃóÃ¶Ã≤.Ã®ÃπÕàÃ£', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"·π∞Ã∫Ã∫ÃïoÕû Ã∑iÃ≤Ã¨ÕáÃ™ÕônÃùÃóÕïvÃüÃúÃòÃ¶ÕüoÃ∂ÃôÃ∞Ã†k√®ÕöÃÆÃ∫Ã™ÃπÃ±Ã§ ÃñtÃùÕïÃ≥Ã£ÃªÃ™ÕûhÃºÕìÃ≤Ã¶Ã≥ÃòÃ≤eÕáÃ£Ã∞Ã¶Ã¨Õé Ã¢ÃºÃªÃ±ÃòhÕöÕéÕôÃúÃ£Ã≤ÕÖiÃ¶Ã≤Ã£Ã∞Ã§vÃªÕçeÃ∫Ã≠Ã≥Ã™Ã∞-mÃ¢iÕÖnÃñÃ∫ÃûÃ≤ÃØÃ∞dÃµÃºÃüÕôÃ©ÃºÃòÃ≥ ÃûÃ•Ã±Ã≥Ã≠rÃõÃóÃòeÕôpÕ†rÃºÃûÃªÃ≠ÃóeÃ∫Ã†Ã£ÕüsÃòÕáÃ≥ÕçÃùÕâeÕâÃ•ÃØÃûÃ≤ÕöÃ¨Õú«πÃ¨ÕéÕéÃüÃñÕáÃ§tÕçÃ¨Ã§ÕìÃºÃ≠ÕòÕÖiÃ™Ã±nÕ†gÃ¥Õâ ÕèÕâÕÖcÃ¨ÃühÕ°aÃ´ÃªÃØÕòoÃ´ÃüÃñÕçÃôÃùÕâsÃóÃ¶Ã≤.Ã®ÃπÕàÃ£"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"·π∞Ã∫Ã∫ÃïoÕû Ã∑iÃ≤Ã¨ÕáÃ™ÕônÃùÃóÕïvÃüÃúÃòÃ¶ÕüoÃ∂ÃôÃ∞Ã†k√®ÕöÃÆÃ∫Ã™ÃπÃ±Ã§ ÃñtÃùÕïÃ≥Ã£ÃªÃ™ÕûhÃºÕìÃ≤Ã¶Ã≥ÃòÃ≤eÕáÃ£Ã∞Ã¶Ã¨Õé Ã¢ÃºÃªÃ±ÃòhÕöÕéÕôÃúÃ£Ã≤ÕÖiÃ¶Ã≤Ã£Ã∞Ã§vÃªÕçeÃ∫Ã≠Ã≥Ã™Ã∞-mÃ¢iÕÖnÃñÃ∫ÃûÃ≤ÃØÃ∞dÃµÃºÃüÕôÃ©ÃºÃòÃ≥ ÃûÃ•Ã±Ã≥Ã≠rÃõÃóÃòeÕôpÕ†rÃºÃûÃªÃ≠ÃóeÃ∫Ã†Ã£ÕüsÃòÕáÃ≥ÕçÃùÕâeÕâÃ•ÃØÃûÃ≤ÕöÃ¨Õú«πÃ¨ÕéÕéÃüÃñÕáÃ§tÕçÃ¨Ã§ÕìÃºÃ≠ÕòÕÖiÃ™Ã±nÕ†gÃ¥Õâ ÕèÕâÕÖcÃ¨ÃühÕ°aÃ´ÃªÃØÕòoÃ´ÃüÃñÕçÃôÃùÕâsÃóÃ¶Ã≤.Ã®ÃπÕàÃ£",
        variable:"·π∞Ã∫Ã∫ÃïoÕû Ã∑iÃ≤Ã¨ÕáÃ™ÕônÃùÃóÕïvÃüÃúÃòÃ¶ÕüoÃ∂ÃôÃ∞Ã†k√®ÕöÃÆÃ∫Ã™ÃπÃ±Ã§ ÃñtÃùÕïÃ≥Ã£ÃªÃ™ÕûhÃºÕìÃ≤Ã¶Ã≥ÃòÃ≤eÕáÃ£Ã∞Ã¶Ã¨Õé Ã¢ÃºÃªÃ±ÃòhÕöÕéÕôÃúÃ£Ã≤ÕÖiÃ¶Ã≤Ã£Ã∞Ã§vÃªÕçeÃ∫Ã≠Ã≥Ã™Ã∞-mÃ¢iÕÖnÃñÃ∫ÃûÃ≤ÃØÃ∞dÃµÃºÃüÕôÃ©ÃºÃòÃ≥ ÃûÃ•Ã±Ã≥Ã≠rÃõÃóÃòeÕôpÕ†rÃºÃûÃªÃ≠ÃóeÃ∫Ã†Ã£ÕüsÃòÕáÃ≥ÕçÃùÕâeÕâÃ•ÃØÃûÃ≤ÕöÃ¨Õú«πÃ¨ÕéÕéÃüÃñÕáÃ§tÕçÃ¨Ã§ÕìÃºÃ≠ÕòÕÖiÃ™Ã±nÕ†gÃ¥Õâ ÕèÕâÕÖcÃ¨ÃühÕ°aÃ´ÃªÃØÕòoÃ´ÃüÃñÕçÃôÃùÕâsÃóÃ¶Ã≤.Ã®ÃπÕàÃ£",
        concatenated:"·π∞Ã∫Ã∫ÃïoÕû Ã∑iÃ≤Ã¨ÕáÃ™ÕônÃùÃóÕïvÃüÃúÃòÃ¶ÕüoÃ∂ÃôÃ∞Ã†k√®ÕöÃÆÃ∫Ã™ÃπÃ±Ã§ ÃñtÃùÕïÃ≥Ã£ÃªÃ™ÕûhÃºÕìÃ≤Ã¶Ã≥ÃòÃ≤eÕáÃ£Ã∞Ã¶Ã¨Õé Ã¢ÃºÃªÃ±ÃòhÕöÕéÕôÃúÃ£Ã≤ÕÖiÃ¶Ã≤Ã£Ã∞Ã§vÃªÕçeÃ∫Ã≠Ã≥Ã™Ã∞-mÃ¢iÕÖnÃñÃ∫ÃûÃ≤ÃØÃ∞dÃµÃºÃüÕôÃ©ÃºÃòÃ≥ ÃûÃ•Ã±Ã≥Ã≠rÃõÃóÃòeÕôpÕ†rÃºÃûÃªÃ≠ÃóeÃ∫Ã†Ã£ÕüsÃòÕáÃ≥ÕçÃùÕâeÕâÃ•ÃØÃûÃ≤ÕöÃ¨Õú«πÃ¨ÕéÕéÃüÃñÕáÃ§tÕçÃ¨Ã§ÕìÃºÃ≠ÕòÕÖiÃ™Ã±nÕ†gÃ¥Õâ ÕèÕâÕÖcÃ¨ÃühÕ°aÃ´ÃªÃØÕòoÃ´ÃüÃñÕçÃôÃùÕâsÃóÃ¶Ã≤.Ã®ÃπÕàÃ£·π∞Ã∫Ã∫ÃïoÕû Ã∑iÃ≤Ã¨ÕáÃ™ÕônÃùÃóÕïvÃüÃúÃòÃ¶ÕüoÃ∂ÃôÃ∞Ã†k√®ÕöÃÆÃ∫Ã™ÃπÃ±Ã§ ÃñtÃùÕïÃ≥Ã£ÃªÃ™ÕûhÃºÕìÃ≤Ã¶Ã≥ÃòÃ≤eÕáÃ£Ã∞Ã¶Ã¨Õé Ã¢ÃºÃªÃ±ÃòhÕöÕéÕôÃúÃ£Ã≤ÕÖiÃ¶Ã≤Ã£Ã∞Ã§vÃªÕçeÃ∫Ã≠Ã≥Ã™Ã∞-mÃ¢iÕÖnÃñÃ∫ÃûÃ≤ÃØÃ∞dÃµÃºÃüÕôÃ©ÃºÃòÃ≥ ÃûÃ•Ã±Ã≥Ã≠rÃõÃóÃòeÕôpÕ†rÃºÃûÃªÃ≠ÃóeÃ∫Ã†Ã£ÕüsÃòÕáÃ≥ÕçÃùÕâeÕâÃ•ÃØÃûÃ≤ÕöÃ¨Õú«πÃ¨ÕéÕéÃüÃñÕáÃ§tÕçÃ¨Ã§ÕìÃºÃ≠ÕòÕÖiÃ™Ã±nÕ†gÃ¥Õâ ÕèÕâÕÖcÃ¨ÃühÕ°aÃ´ÃªÃØÕòoÃ´ÃüÃñÕçÃôÃùÕâsÃóÃ¶Ã≤.Ã®ÃπÕàÃ£"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u0321\\u0353\\u031e\\u0345I\\u0317\\u0318\\u0326\\u035dn\\u0347\\u0347\\u0359v\\u032e\\u032bok\\u0332\\u032b\\u0319\\u0348i\\u0316\\u0359\\u032d\\u0339\\u0320\\u031en\\u0321\\u033b\\u032e\\u0323\\u033ag\\u0332\\u0348\\u0359\\u032d\\u0359\\u032c\\u034e \\u0330t\\u0354\\u0326h\\u031e\\u0332e\\u0322\\u0324 \\u034d\\u032c\\u0332\\u0356f\\u0334\\u0318\\u0355\\u0323\\xe8\\u0356\\u1eb9\\u0325\\u0329l\\u0356\\u0354\\u035ai\\u0353\\u035a\\u0326\\u0360n\\u0356\\u034d\\u0317\\u0353\\u0333\\u032eg\\u034d \\u0328o\\u035a\\u032a\\u0361f\\u0318\\u0323\\u032c \\u0316\\u0318\\u0356\\u031f\\u0359\\u032ec\\u0489\\u0354\\u032b\\u0356\\u0353\\u0347\\u0356\\u0345h\\u0335\\u0324\\u0323\\u035a\\u0354\\xe1\\u0317\\u033c\\u0355\\u0345o\\u033c\\u0323\\u0325s\\u0331\\u0348\\u033a\\u0316\\u0326\\u033b\\u0362.\\u031b\\u0316\\u031e\\u0320\\u032b\\u0330\"}",
    statement:"{ `literal`: 'Ã°ÕìÃûÕÖIÃóÃòÃ¶ÕùnÕáÕáÕôvÃÆÃ´okÃ≤Ã´ÃôÕàiÃñÕôÃ≠ÃπÃ†ÃûnÃ°ÃªÃÆÃ£Ã∫gÃ≤ÕàÕôÃ≠ÕôÃ¨Õé Ã∞tÕîÃ¶hÃûÃ≤eÃ¢Ã§ ÕçÃ¨Ã≤ÕñfÃ¥ÃòÕïÃ£√®Õñ·∫πÃ•Ã©lÕñÕîÕöiÕìÕöÃ¶Õ†nÕñÕçÃóÕìÃ≥ÃÆgÕç Ã®oÕöÃ™Õ°fÃòÃ£Ã¨ ÃñÃòÕñÃüÕôÃÆc“âÕîÃ´ÕñÕìÕáÕñÕÖhÃµÃ§Ã£ÕöÕî√°ÃóÃºÕïÕÖoÃºÃ£Ã•sÃ±ÕàÃ∫ÃñÃ¶ÃªÕ¢.ÃõÃñÃûÃ†Ã´Ã∞', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"Ã°ÕìÃûÕÖIÃóÃòÃ¶ÕùnÕáÕáÕôvÃÆÃ´okÃ≤Ã´ÃôÕàiÃñÕôÃ≠ÃπÃ†ÃûnÃ°ÃªÃÆÃ£Ã∫gÃ≤ÕàÕôÃ≠ÕôÃ¨Õé Ã∞tÕîÃ¶hÃûÃ≤eÃ¢Ã§ ÕçÃ¨Ã≤ÕñfÃ¥ÃòÕïÃ£√®Õñ·∫πÃ•Ã©lÕñÕîÕöiÕìÕöÃ¶Õ†nÕñÕçÃóÕìÃ≥ÃÆgÕç Ã®oÕöÃ™Õ°fÃòÃ£Ã¨ ÃñÃòÕñÃüÕôÃÆc“âÕîÃ´ÕñÕìÕáÕñÕÖhÃµÃ§Ã£ÕöÕî√°ÃóÃºÕïÕÖoÃºÃ£Ã•sÃ±ÕàÃ∫ÃñÃ¶ÃªÕ¢.ÃõÃñÃûÃ†Ã´Ã∞"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"Ã°ÕìÃûÕÖIÃóÃòÃ¶ÕùnÕáÕáÕôvÃÆÃ´okÃ≤Ã´ÃôÕàiÃñÕôÃ≠ÃπÃ†ÃûnÃ°ÃªÃÆÃ£Ã∫gÃ≤ÕàÕôÃ≠ÕôÃ¨Õé Ã∞tÕîÃ¶hÃûÃ≤eÃ¢Ã§ ÕçÃ¨Ã≤ÕñfÃ¥ÃòÕïÃ£√®Õñ·∫πÃ•Ã©lÕñÕîÕöiÕìÕöÃ¶Õ†nÕñÕçÃóÕìÃ≥ÃÆgÕç Ã®oÕöÃ™Õ°fÃòÃ£Ã¨ ÃñÃòÕñÃüÕôÃÆc“âÕîÃ´ÕñÕìÕáÕñÕÖhÃµÃ§Ã£ÕöÕî√°ÃóÃºÕïÕÖoÃºÃ£Ã•sÃ±ÕàÃ∫ÃñÃ¶ÃªÕ¢.ÃõÃñÃûÃ†Ã´Ã∞",
        variable:"Ã°ÕìÃûÕÖIÃóÃòÃ¶ÕùnÕáÕáÕôvÃÆÃ´okÃ≤Ã´ÃôÕàiÃñÕôÃ≠ÃπÃ†ÃûnÃ°ÃªÃÆÃ£Ã∫gÃ≤ÕàÕôÃ≠ÕôÃ¨Õé Ã∞tÕîÃ¶hÃûÃ≤eÃ¢Ã§ ÕçÃ¨Ã≤ÕñfÃ¥ÃòÕïÃ£√®Õñ·∫πÃ•Ã©lÕñÕîÕöiÕìÕöÃ¶Õ†nÕñÕçÃóÕìÃ≥ÃÆgÕç Ã®oÕöÃ™Õ°fÃòÃ£Ã¨ ÃñÃòÕñÃüÕôÃÆc“âÕîÃ´ÕñÕìÕáÕñÕÖhÃµÃ§Ã£ÕöÕî√°ÃóÃºÕïÕÖoÃºÃ£Ã•sÃ±ÕàÃ∫ÃñÃ¶ÃªÕ¢.ÃõÃñÃûÃ†Ã´Ã∞",
        concatenated:"Ã°ÕìÃûÕÖIÃóÃòÃ¶ÕùnÕáÕáÕôvÃÆÃ´okÃ≤Ã´ÃôÕàiÃñÕôÃ≠ÃπÃ†ÃûnÃ°ÃªÃÆÃ£Ã∫gÃ≤ÕàÕôÃ≠ÕôÃ¨Õé Ã∞tÕîÃ¶hÃûÃ≤eÃ¢Ã§ ÕçÃ¨Ã≤ÕñfÃ¥ÃòÕïÃ£√®Õñ·∫πÃ•Ã©lÕñÕîÕöiÕìÕöÃ¶Õ†nÕñÕçÃóÕìÃ≥ÃÆgÕç Ã®oÕöÃ™Õ°fÃòÃ£Ã¨ ÃñÃòÕñÃüÕôÃÆc“âÕîÃ´ÕñÕìÕáÕñÕÖhÃµÃ§Ã£ÕöÕî√°ÃóÃºÕïÕÖoÃºÃ£Ã•sÃ±ÕàÃ∫ÃñÃ¶ÃªÕ¢.ÃõÃñÃûÃ†Ã´Ã∞Ã°ÕìÃûÕÖIÃóÃòÃ¶ÕùnÕáÕáÕôvÃÆÃ´okÃ≤Ã´ÃôÕàiÃñÕôÃ≠ÃπÃ†ÃûnÃ°ÃªÃÆÃ£Ã∫gÃ≤ÕàÕôÃ≠ÕôÃ¨Õé Ã∞tÕîÃ¶hÃûÃ≤eÃ¢Ã§ ÕçÃ¨Ã≤ÕñfÃ¥ÃòÕïÃ£√®Õñ·∫πÃ•Ã©lÕñÕîÕöiÕìÕöÃ¶Õ†nÕñÕçÃóÕìÃ≥ÃÆgÕç Ã®oÕöÃ™Õ°fÃòÃ£Ã¨ ÃñÃòÕñÃüÕôÃÆc“âÕîÃ´ÕñÕìÕáÕñÕÖhÃµÃ§Ã£ÕöÕî√°ÃóÃºÕïÕÖoÃºÃ£Ã•sÃ±ÕàÃ∫ÃñÃ¶ÃªÕ¢.ÃõÃñÃûÃ†Ã´Ã∞"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u0317\\u033a\\u0356\\u0339\\u032f\\u0353\\u1e6e\\u0324\\u034d\\u0325\\u0347\\u0348h\\u0332\\u0301e\\u034f\\u0353\\u033c\\u0317\\u0319\\u033c\\u0323\\u0354 \\u0347\\u031c\\u0331\\u0320\\u0353\\u034d\\u0345N\\u0355\\u0360e\\u0317\\u0331z\\u0318\\u031d\\u031c\\u033a\\u0359p\\u0324\\u033a\\u0339\\u034d\\u032f\\u035ae\\u0320\\u033b\\u0320\\u035cr\\u0328\\u0324\\u034d\\u033a\\u0316\\u0354\\u0316\\u0316d\\u0320\\u031f\\u032d\\u032c\\u031d\\u035fi\\u0326\\u0356\\u0329\\u0353\\u0354\\u0324a\\u0320\\u0317\\u032c\\u0349\\u0319n\\u035a\\u035c \\u033b\\u031e\\u0330\\u035a\\u0345h\\u0335\\u0349i\\u0333\\u031ev\\u0322\\u0347\\u1e19\\u034e\\u035f-\\u0489\\u032d\\u0329\\u033c\\u0354m\\u0324\\u032d\\u032bi\\u0355\\u0347\\u031d\\u0326n\\u0317\\u0359\\u1e0d\\u031f \\u032f\\u0332\\u0355\\u035e\\u01eb\\u031f\\u032f\\u0330\\u0332\\u0359\\u033b\\u031df \\u032a\\u0330\\u0330\\u0317\\u0316\\u032d\\u0318\\u0358c\\u0326\\u034d\\u0332\\u031e\\u034d\\u0329\\u0319\\u1e25\\u035aa\\u032e\\u034e\\u031f\\u0319\\u035c\\u01a1\\u0329\\u0339\\u034es\\u0324.\\u031d\\u031d \\u0489Z\\u0321\\u0316\\u031c\\u0356\\u0330\\u0323\\u0349\\u031ca\\u0356\\u0330\\u0359\\u032c\\u0361l\\u0332\\u032b\\u0333\\u034d\\u0329g\\u0321\\u031f\\u033c\\u0331\\u035a\\u031e\\u032c\\u0345o\\u0317\\u035c.\\u031f\"}",
    statement:"{ `literal`: 'ÃóÃ∫ÕñÃπÃØÕì·πÆÃ§ÕçÃ•ÕáÕàhÃ≤ÃÅeÕèÕìÃºÃóÃôÃºÃ£Õî ÕáÃúÃ±Ã†ÕìÕçÕÖNÕïÕ†eÃóÃ±zÃòÃùÃúÃ∫ÕôpÃ§Ã∫ÃπÕçÃØÕöeÃ†ÃªÃ†ÕúrÃ®Ã§ÕçÃ∫ÃñÕîÃñÃñdÃ†ÃüÃ≠Ã¨ÃùÕüiÃ¶ÕñÃ©ÕìÕîÃ§aÃ†ÃóÃ¨ÕâÃônÕöÕú ÃªÃûÃ∞ÕöÕÖhÃµÕâiÃ≥ÃûvÃ¢Õá·∏ôÕéÕü-“âÃ≠Ã©ÃºÕîmÃ§Ã≠Ã´iÕïÕáÃùÃ¶nÃóÕô·∏çÃü ÃØÃ≤ÕïÕû«´ÃüÃØÃ∞Ã≤ÕôÃªÃùf Ã™Ã∞Ã∞ÃóÃñÃ≠ÃòÕòcÃ¶ÕçÃ≤ÃûÕçÃ©Ãô·∏•ÕöaÃÆÕéÃüÃôÕú∆°Ã©ÃπÕésÃ§.ÃùÃù “âZÃ°ÃñÃúÕñÃ∞Ã£ÕâÃúaÕñÃ∞ÕôÃ¨Õ°lÃ≤Ã´Ã≥ÕçÃ©gÃ°ÃüÃºÃ±ÕöÃûÃ¨ÕÖoÃóÕú.Ãü', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ÃóÃ∫ÕñÃπÃØÕì·πÆÃ§ÕçÃ•ÕáÕàhÃ≤ÃÅeÕèÕìÃºÃóÃôÃºÃ£Õî ÕáÃúÃ±Ã†ÕìÕçÕÖNÕïÕ†eÃóÃ±zÃòÃùÃúÃ∫ÕôpÃ§Ã∫ÃπÕçÃØÕöeÃ†ÃªÃ†ÕúrÃ®Ã§ÕçÃ∫ÃñÕîÃñÃñdÃ†ÃüÃ≠Ã¨ÃùÕüiÃ¶ÕñÃ©ÕìÕîÃ§aÃ†ÃóÃ¨ÕâÃônÕöÕú ÃªÃûÃ∞ÕöÕÖhÃµÕâiÃ≥ÃûvÃ¢Õá·∏ôÕéÕü-“âÃ≠Ã©ÃºÕîmÃ§Ã≠Ã´iÕïÕáÃùÃ¶nÃóÕô·∏çÃü ÃØÃ≤ÕïÕû«´ÃüÃØÃ∞Ã≤ÕôÃªÃùf Ã™Ã∞Ã∞ÃóÃñÃ≠ÃòÕòcÃ¶ÕçÃ≤ÃûÕçÃ©Ãô·∏•ÕöaÃÆÕéÃüÃôÕú∆°Ã©ÃπÕésÃ§.ÃùÃù “âZÃ°ÃñÃúÕñÃ∞Ã£ÕâÃúaÕñÃ∞ÕôÃ¨Õ°lÃ≤Ã´Ã≥ÕçÃ©gÃ°ÃüÃºÃ±ÕöÃûÃ¨ÕÖoÃóÕú.Ãü"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ÃóÃ∫ÕñÃπÃØÕì·πÆÃ§ÕçÃ•ÕáÕàhÃ≤ÃÅeÕèÕìÃºÃóÃôÃºÃ£Õî ÕáÃúÃ±Ã†ÕìÕçÕÖNÕïÕ†eÃóÃ±zÃòÃùÃúÃ∫ÕôpÃ§Ã∫ÃπÕçÃØÕöeÃ†ÃªÃ†ÕúrÃ®Ã§ÕçÃ∫ÃñÕîÃñÃñdÃ†ÃüÃ≠Ã¨ÃùÕüiÃ¶ÕñÃ©ÕìÕîÃ§aÃ†ÃóÃ¨ÕâÃônÕöÕú ÃªÃûÃ∞ÕöÕÖhÃµÕâiÃ≥ÃûvÃ¢Õá·∏ôÕéÕü-“âÃ≠Ã©ÃºÕîmÃ§Ã≠Ã´iÕïÕáÃùÃ¶nÃóÕô·∏çÃü ÃØÃ≤ÕïÕû«´ÃüÃØÃ∞Ã≤ÕôÃªÃùf Ã™Ã∞Ã∞ÃóÃñÃ≠ÃòÕòcÃ¶ÕçÃ≤ÃûÕçÃ©Ãô·∏•ÕöaÃÆÕéÃüÃôÕú∆°Ã©ÃπÕésÃ§.ÃùÃù “âZÃ°ÃñÃúÕñÃ∞Ã£ÕâÃúaÕñÃ∞ÕôÃ¨Õ°lÃ≤Ã´Ã≥ÕçÃ©gÃ°ÃüÃºÃ±ÕöÃûÃ¨ÕÖoÃóÕú.Ãü",
        variable:"ÃóÃ∫ÕñÃπÃØÕì·πÆÃ§ÕçÃ•ÕáÕàhÃ≤ÃÅeÕèÕìÃºÃóÃôÃºÃ£Õî ÕáÃúÃ±Ã†ÕìÕçÕÖNÕïÕ†eÃóÃ±zÃòÃùÃúÃ∫ÕôpÃ§Ã∫ÃπÕçÃØÕöeÃ†ÃªÃ†ÕúrÃ®Ã§ÕçÃ∫ÃñÕîÃñÃñdÃ†ÃüÃ≠Ã¨ÃùÕüiÃ¶ÕñÃ©ÕìÕîÃ§aÃ†ÃóÃ¨ÕâÃônÕöÕú ÃªÃûÃ∞ÕöÕÖhÃµÕâiÃ≥ÃûvÃ¢Õá·∏ôÕéÕü-“âÃ≠Ã©ÃºÕîmÃ§Ã≠Ã´iÕïÕáÃùÃ¶nÃóÕô·∏çÃü ÃØÃ≤ÕïÕû«´ÃüÃØÃ∞Ã≤ÕôÃªÃùf Ã™Ã∞Ã∞ÃóÃñÃ≠ÃòÕòcÃ¶ÕçÃ≤ÃûÕçÃ©Ãô·∏•ÕöaÃÆÕéÃüÃôÕú∆°Ã©ÃπÕésÃ§.ÃùÃù “âZÃ°ÃñÃúÕñÃ∞Ã£ÕâÃúaÕñÃ∞ÕôÃ¨Õ°lÃ≤Ã´Ã≥ÕçÃ©gÃ°ÃüÃºÃ±ÕöÃûÃ¨ÕÖoÃóÕú.Ãü",
        concatenated:"ÃóÃ∫ÕñÃπÃØÕì·πÆÃ§ÕçÃ•ÕáÕàhÃ≤ÃÅeÕèÕìÃºÃóÃôÃºÃ£Õî ÕáÃúÃ±Ã†ÕìÕçÕÖNÕïÕ†eÃóÃ±zÃòÃùÃúÃ∫ÕôpÃ§Ã∫ÃπÕçÃØÕöeÃ†ÃªÃ†ÕúrÃ®Ã§ÕçÃ∫ÃñÕîÃñÃñdÃ†ÃüÃ≠Ã¨ÃùÕüiÃ¶ÕñÃ©ÕìÕîÃ§aÃ†ÃóÃ¨ÕâÃônÕöÕú ÃªÃûÃ∞ÕöÕÖhÃµÕâiÃ≥ÃûvÃ¢Õá·∏ôÕéÕü-“âÃ≠Ã©ÃºÕîmÃ§Ã≠Ã´iÕïÕáÃùÃ¶nÃóÕô·∏çÃü ÃØÃ≤ÕïÕû«´ÃüÃØÃ∞Ã≤ÕôÃªÃùf Ã™Ã∞Ã∞ÃóÃñÃ≠ÃòÕòcÃ¶ÕçÃ≤ÃûÕçÃ©Ãô·∏•ÕöaÃÆÕéÃüÃôÕú∆°Ã©ÃπÕésÃ§.ÃùÃù “âZÃ°ÃñÃúÕñÃ∞Ã£ÕâÃúaÕñÃ∞ÕôÃ¨Õ°lÃ≤Ã´Ã≥ÕçÃ©gÃ°ÃüÃºÃ±ÕöÃûÃ¨ÕÖoÃóÕú.ÃüÃóÃ∫ÕñÃπÃØÕì·πÆÃ§ÕçÃ•ÕáÕàhÃ≤ÃÅeÕèÕìÃºÃóÃôÃºÃ£Õî ÕáÃúÃ±Ã†ÕìÕçÕÖNÕïÕ†eÃóÃ±zÃòÃùÃúÃ∫ÕôpÃ§Ã∫ÃπÕçÃØÕöeÃ†ÃªÃ†ÕúrÃ®Ã§ÕçÃ∫ÃñÕîÃñÃñdÃ†ÃüÃ≠Ã¨ÃùÕüiÃ¶ÕñÃ©ÕìÕîÃ§aÃ†ÃóÃ¨ÕâÃônÕöÕú ÃªÃûÃ∞ÕöÕÖhÃµÕâiÃ≥ÃûvÃ¢Õá·∏ôÕéÕü-“âÃ≠Ã©ÃºÕîmÃ§Ã≠Ã´iÕïÕáÃùÃ¶nÃóÕô·∏çÃü ÃØÃ≤ÕïÕû«´ÃüÃØÃ∞Ã≤ÕôÃªÃùf Ã™Ã∞Ã∞ÃóÃñÃ≠ÃòÕòcÃ¶ÕçÃ≤ÃûÕçÃ©Ãô·∏•ÕöaÃÆÕéÃüÃôÕú∆°Ã©ÃπÕésÃ§.ÃùÃù “âZÃ°ÃñÃúÕñÃ∞Ã£ÕâÃúaÕñÃ∞ÕôÃ¨Õ°lÃ≤Ã´Ã≥ÕçÃ©gÃ°ÃüÃºÃ±ÕöÃûÃ¨ÕÖoÃóÕú.Ãü"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u0326H\\u032c\\u0324\\u0317\\u0324\\u035de\\u035c \\u031c\\u0325\\u031d\\u033b\\u034d\\u031f\\u0301w\\u0315h\\u0316\\u032f\\u0353o\\u031d\\u0359\\u0316\\u034e\\u0331\\u032e \\u0489\\u033a\\u0319\\u031e\\u031f\\u0348W\\u0337\\u033c\\u032da\\u033a\\u032a\\u034d\\u012f\\u0348\\u0355\\u032d\\u0359\\u032f\\u031ct\\u0336\\u033c\\u032es\\u0318\\u0359\\u0356\\u0315 \\u0320\\u032b\\u0320B\\u033b\\u034d\\u0359\\u0349\\u0333\\u0345e\\u0335h\\u0335\\u032c\\u0347\\u032b\\u0359i\\u0339\\u0353\\u0333\\u0333\\u032e\\u034e\\u032b\\u0315n\\u035fd\\u0334\\u032a\\u031c\\u0316 \\u0330\\u0349\\u0329\\u0347\\u0359\\u0332\\u035e\\u0345T\\u0356\\u033c\\u0353\\u032a\\u0362h\\u034f\\u0353\\u032e\\u033be\\u032c\\u031d\\u031f\\u0345 \\u0324\\u0339\\u031dW\\u0359\\u031e\\u031d\\u0354\\u0347\\u035d\\u0345a\\u034f\\u0353\\u0354\\u0339\\u033c\\u0323l\\u0334\\u0354\\u0330\\u0324\\u031f\\u0354\\u1e3d\\u032b.\\u0355\"}",
    statement:"{ `literal`: 'Ã¶HÃ¨Ã§ÃóÃ§ÕùeÕú ÃúÃ•ÃùÃªÕçÃüÃÅwÃïhÃñÃØÕìoÃùÕôÃñÕéÃ±ÃÆ “âÃ∫ÃôÃûÃüÕàWÃ∑ÃºÃ≠aÃ∫Ã™ÕçƒØÕàÕïÃ≠ÕôÃØÃútÃ∂ÃºÃÆsÃòÕôÕñÃï Ã†Ã´Ã†BÃªÕçÕôÕâÃ≥ÕÖeÃµhÃµÃ¨ÕáÃ´ÕôiÃπÕìÃ≥Ã≥ÃÆÕéÃ´ÃïnÕüdÃ¥Ã™ÃúÃñ Ã∞ÕâÃ©ÕáÕôÃ≤ÕûÕÖTÕñÃºÕìÃ™Õ¢hÕèÕìÃÆÃªeÃ¨ÃùÃüÕÖ Ã§ÃπÃùWÕôÃûÃùÕîÕáÕùÕÖaÕèÕìÕîÃπÃºÃ£lÃ¥ÕîÃ∞Ã§ÃüÕî·∏ΩÃ´.Õï', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"Ã¶HÃ¨Ã§ÃóÃ§ÕùeÕú ÃúÃ•ÃùÃªÕçÃüÃÅwÃïhÃñÃØÕìoÃùÕôÃñÕéÃ±ÃÆ “âÃ∫ÃôÃûÃüÕàWÃ∑ÃºÃ≠aÃ∫Ã™ÕçƒØÕàÕïÃ≠ÕôÃØÃútÃ∂ÃºÃÆsÃòÕôÕñÃï Ã†Ã´Ã†BÃªÕçÕôÕâÃ≥ÕÖeÃµhÃµÃ¨ÕáÃ´ÕôiÃπÕìÃ≥Ã≥ÃÆÕéÃ´ÃïnÕüdÃ¥Ã™ÃúÃñ Ã∞ÕâÃ©ÕáÕôÃ≤ÕûÕÖTÕñÃºÕìÃ™Õ¢hÕèÕìÃÆÃªeÃ¨ÃùÃüÕÖ Ã§ÃπÃùWÕôÃûÃùÕîÕáÕùÕÖaÕèÕìÕîÃπÃºÃ£lÃ¥ÕîÃ∞Ã§ÃüÕî·∏ΩÃ´.Õï"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"Ã¶HÃ¨Ã§ÃóÃ§ÕùeÕú ÃúÃ•ÃùÃªÕçÃüÃÅwÃïhÃñÃØÕìoÃùÕôÃñÕéÃ±ÃÆ “âÃ∫ÃôÃûÃüÕàWÃ∑ÃºÃ≠aÃ∫Ã™ÕçƒØÕàÕïÃ≠ÕôÃØÃútÃ∂ÃºÃÆsÃòÕôÕñÃï Ã†Ã´Ã†BÃªÕçÕôÕâÃ≥ÕÖeÃµhÃµÃ¨ÕáÃ´ÕôiÃπÕìÃ≥Ã≥ÃÆÕéÃ´ÃïnÕüdÃ¥Ã™ÃúÃñ Ã∞ÕâÃ©ÕáÕôÃ≤ÕûÕÖTÕñÃºÕìÃ™Õ¢hÕèÕìÃÆÃªeÃ¨ÃùÃüÕÖ Ã§ÃπÃùWÕôÃûÃùÕîÕáÕùÕÖaÕèÕìÕîÃπÃºÃ£lÃ¥ÕîÃ∞Ã§ÃüÕî·∏ΩÃ´.Õï",
        variable:"Ã¶HÃ¨Ã§ÃóÃ§ÕùeÕú ÃúÃ•ÃùÃªÕçÃüÃÅwÃïhÃñÃØÕìoÃùÕôÃñÕéÃ±ÃÆ “âÃ∫ÃôÃûÃüÕàWÃ∑ÃºÃ≠aÃ∫Ã™ÕçƒØÕàÕïÃ≠ÕôÃØÃútÃ∂ÃºÃÆsÃòÕôÕñÃï Ã†Ã´Ã†BÃªÕçÕôÕâÃ≥ÕÖeÃµhÃµÃ¨ÕáÃ´ÕôiÃπÕìÃ≥Ã≥ÃÆÕéÃ´ÃïnÕüdÃ¥Ã™ÃúÃñ Ã∞ÕâÃ©ÕáÕôÃ≤ÕûÕÖTÕñÃºÕìÃ™Õ¢hÕèÕìÃÆÃªeÃ¨ÃùÃüÕÖ Ã§ÃπÃùWÕôÃûÃùÕîÕáÕùÕÖaÕèÕìÕîÃπÃºÃ£lÃ¥ÕîÃ∞Ã§ÃüÕî·∏ΩÃ´.Õï",
        concatenated:"Ã¶HÃ¨Ã§ÃóÃ§ÕùeÕú ÃúÃ•ÃùÃªÕçÃüÃÅwÃïhÃñÃØÕìoÃùÕôÃñÕéÃ±ÃÆ “âÃ∫ÃôÃûÃüÕàWÃ∑ÃºÃ≠aÃ∫Ã™ÕçƒØÕàÕïÃ≠ÕôÃØÃútÃ∂ÃºÃÆsÃòÕôÕñÃï Ã†Ã´Ã†BÃªÕçÕôÕâÃ≥ÕÖeÃµhÃµÃ¨ÕáÃ´ÕôiÃπÕìÃ≥Ã≥ÃÆÕéÃ´ÃïnÕüdÃ¥Ã™ÃúÃñ Ã∞ÕâÃ©ÕáÕôÃ≤ÕûÕÖTÕñÃºÕìÃ™Õ¢hÕèÕìÃÆÃªeÃ¨ÃùÃüÕÖ Ã§ÃπÃùWÕôÃûÃùÕîÕáÕùÕÖaÕèÕìÕîÃπÃºÃ£lÃ¥ÕîÃ∞Ã§ÃüÕî·∏ΩÃ´.ÕïÃ¶HÃ¨Ã§ÃóÃ§ÕùeÕú ÃúÃ•ÃùÃªÕçÃüÃÅwÃïhÃñÃØÕìoÃùÕôÃñÕéÃ±ÃÆ “âÃ∫ÃôÃûÃüÕàWÃ∑ÃºÃ≠aÃ∫Ã™ÕçƒØÕàÕïÃ≠ÕôÃØÃútÃ∂ÃºÃÆsÃòÕôÕñÃï Ã†Ã´Ã†BÃªÕçÕôÕâÃ≥ÕÖeÃµhÃµÃ¨ÕáÃ´ÕôiÃπÕìÃ≥Ã≥ÃÆÕéÃ´ÃïnÕüdÃ¥Ã™ÃúÃñ Ã∞ÕâÃ©ÕáÕôÃ≤ÕûÕÖTÕñÃºÕìÃ™Õ¢hÕèÕìÃÆÃªeÃ¨ÃùÃüÕÖ Ã§ÃπÃùWÕôÃûÃùÕîÕáÕùÕÖaÕèÕìÕîÃπÃºÃ£lÃ¥ÕîÃ∞Ã§ÃüÕî·∏ΩÃ´.Õï"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"Z\\u032e\\u031e\\u0320\\u0359\\u0354\\u0345\\u1e00\\u0317\\u031e\\u0348\\u033b\\u0317\\u1e36\\u0359\\u034e\\u032f\\u0339\\u031e\\u0353G\\u033bO\\u032d\\u0317\\u032e\"}",
    statement:"{ `literal`: 'ZÃÆÃûÃ†ÕôÕîÕÖ·∏ÄÃóÃûÕàÃªÃó·∏∂ÕôÕéÃØÃπÃûÕìGÃªOÃ≠ÃóÃÆ', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ZÃÆÃûÃ†ÕôÕîÕÖ·∏ÄÃóÃûÕàÃªÃó·∏∂ÕôÕéÃØÃπÃûÕìGÃªOÃ≠ÃóÃÆ"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ZÃÆÃûÃ†ÕôÕîÕÖ·∏ÄÃóÃûÕàÃªÃó·∏∂ÕôÕéÃØÃπÃûÕìGÃªOÃ≠ÃóÃÆ",
        variable:"ZÃÆÃûÃ†ÕôÕîÕÖ·∏ÄÃóÃûÕàÃªÃó·∏∂ÕôÕéÃØÃπÃûÕìGÃªOÃ≠ÃóÃÆ",
        concatenated:"ZÃÆÃûÃ†ÕôÕîÕÖ·∏ÄÃóÃûÕàÃªÃó·∏∂ÕôÕéÃØÃπÃûÕìGÃªOÃ≠ÃóÃÆZÃÆÃûÃ†ÕôÕîÕÖ·∏ÄÃóÃûÕàÃªÃó·∏∂ÕôÕéÃØÃπÃûÕìGÃªOÃ≠ÃóÃÆ"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"00\\u02d9\\u0196-\"}",
    statement:"{ `literal`: '00Àô∆ñ$-', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"00Àô∆ñ$-"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"00Àô∆ñ$-",
        variable:"00Àô∆ñ$-",
        concatenated:"00Àô∆ñ$-00Àô∆ñ$-"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\uff34\\uff48\\uff45 \\uff51\\uff55\\uff49\\uff43\\uff4b \\uff42\\uff52\\uff4f\\uff57\\uff4e \\uff46\\uff4f\\uff58 \\uff4a\\uff55\\uff4d\\uff50\\uff53 \\uff4f\\uff56\\uff45\\uff52 \\uff54\\uff48\\uff45 \\uff4c\\uff41\\uff5a\\uff59 \\uff44\\uff4f\\uff47\"}",
    statement:"{ `literal`: 'Ôº¥ÔΩàÔΩÖ ÔΩëÔΩïÔΩâÔΩÉÔΩã ÔΩÇÔΩíÔΩèÔΩóÔΩé ÔΩÜÔΩèÔΩò ÔΩäÔΩïÔΩçÔΩêÔΩì ÔΩèÔΩñÔΩÖÔΩí ÔΩîÔΩàÔΩÖ ÔΩåÔΩÅÔΩöÔΩô ÔΩÑÔΩèÔΩá', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"Ôº¥ÔΩàÔΩÖ ÔΩëÔΩïÔΩâÔΩÉÔΩã ÔΩÇÔΩíÔΩèÔΩóÔΩé ÔΩÜÔΩèÔΩò ÔΩäÔΩïÔΩçÔΩêÔΩì ÔΩèÔΩñÔΩÖÔΩí ÔΩîÔΩàÔΩÖ ÔΩåÔΩÅÔΩöÔΩô ÔΩÑÔΩèÔΩá"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"Ôº¥ÔΩàÔΩÖ ÔΩëÔΩïÔΩâÔΩÉÔΩã ÔΩÇÔΩíÔΩèÔΩóÔΩé ÔΩÜÔΩèÔΩò ÔΩäÔΩïÔΩçÔΩêÔΩì ÔΩèÔΩñÔΩÖÔΩí ÔΩîÔΩàÔΩÖ ÔΩåÔΩÅÔΩöÔΩô ÔΩÑÔΩèÔΩá",
        variable:"Ôº¥ÔΩàÔΩÖ ÔΩëÔΩïÔΩâÔΩÉÔΩã ÔΩÇÔΩíÔΩèÔΩóÔΩé ÔΩÜÔΩèÔΩò ÔΩäÔΩïÔΩçÔΩêÔΩì ÔΩèÔΩñÔΩÖÔΩí ÔΩîÔΩàÔΩÖ ÔΩåÔΩÅÔΩöÔΩô ÔΩÑÔΩèÔΩá",
        concatenated:"Ôº¥ÔΩàÔΩÖ ÔΩëÔΩïÔΩâÔΩÉÔΩã ÔΩÇÔΩíÔΩèÔΩóÔΩé ÔΩÜÔΩèÔΩò ÔΩäÔΩïÔΩçÔΩêÔΩì ÔΩèÔΩñÔΩÖÔΩí ÔΩîÔΩàÔΩÖ ÔΩåÔΩÅÔΩöÔΩô ÔΩÑÔΩèÔΩáÔº¥ÔΩàÔΩÖ ÔΩëÔΩïÔΩâÔΩÉÔΩã ÔΩÇÔΩíÔΩèÔΩóÔΩé ÔΩÜÔΩèÔΩò ÔΩäÔΩïÔΩçÔΩêÔΩì ÔΩèÔΩñÔΩÖÔΩí ÔΩîÔΩàÔΩÖ ÔΩåÔΩÅÔΩöÔΩô ÔΩÑÔΩèÔΩá"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\U0001d413\\U0001d421\\U0001d41e \\U0001d42a\\U0001d42e\\U0001d422\\U0001d41c\\U0001d424 \\U0001d41b\\U0001d42b\\U0001d428\\U0001d430\\U0001d427 \\U0001d41f\\U0001d428\\U0001d431 \\U0001d423\\U0001d42e\\U0001d426\\U0001d429\\U0001d42c \\U0001d428\\U0001d42f\\U0001d41e\\U0001d42b \\U0001d42d\\U0001d421\\U0001d41e \\U0001d425\\U0001d41a\\U0001d433\\U0001d432 \\U0001d41d\\U0001d428\\U0001d420\"}",
    statement:"{ `literal`: 'ùêìùê°ùêû ùê™ùêÆùê¢ùêúùê§ ùêõùê´ùê®ùê∞ùêß ùêüùê®ùê± ùê£ùêÆùê¶ùê©ùê¨ ùê®ùêØùêûùê´ ùê≠ùê°ùêû ùê•ùêöùê≥ùê≤ ùêùùê®ùê†', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ùêìùê°ùêû ùê™ùêÆùê¢ùêúùê§ ùêõùê´ùê®ùê∞ùêß ùêüùê®ùê± ùê£ùêÆùê¶ùê©ùê¨ ùê®ùêØùêûùê´ ùê≠ùê°ùêû ùê•ùêöùê≥ùê≤ ùêùùê®ùê†"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ùêìùê°ùêû ùê™ùêÆùê¢ùêúùê§ ùêõùê´ùê®ùê∞ùêß ùêüùê®ùê± ùê£ùêÆùê¶ùê©ùê¨ ùê®ùêØùêûùê´ ùê≠ùê°ùêû ùê•ùêöùê≥ùê≤ ùêùùê®ùê†",
        variable:"ùêìùê°ùêû ùê™ùêÆùê¢ùêúùê§ ùêõùê´ùê®ùê∞ùêß ùêüùê®ùê± ùê£ùêÆùê¶ùê©ùê¨ ùê®ùêØùêûùê´ ùê≠ùê°ùêû ùê•ùêöùê≥ùê≤ ùêùùê®ùê†",
        concatenated:"ùêìùê°ùêû ùê™ùêÆùê¢ùêúùê§ ùêõùê´ùê®ùê∞ùêß ùêüùê®ùê± ùê£ùêÆùê¶ùê©ùê¨ ùê®ùêØùêûùê´ ùê≠ùê°ùêû ùê•ùêöùê≥ùê≤ ùêùùê®ùê†ùêìùê°ùêû ùê™ùêÆùê¢ùêúùê§ ùêõùê´ùê®ùê∞ùêß ùêüùê®ùê± ùê£ùêÆùê¶ùê©ùê¨ ùê®ùêØùêûùê´ ùê≠ùê°ùêû ùê•ùêöùê≥ùê≤ ùêùùê®ùê†"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\U0001d57f\\U0001d58d\\U0001d58a \\U0001d596\\U0001d59a\\U0001d58e\\U0001d588\\U0001d590 \\U0001d587\\U0001d597\\U0001d594\\U0001d59c\\U0001d593 \\U0001d58b\\U0001d594\\U0001d59d \\U0001d58f\\U0001d59a\\U0001d592\\U0001d595\\U0001d598 \\U0001d594\\U0001d59b\\U0001d58a\\U0001d597 \\U0001d599\\U0001d58d\\U0001d58a \\U0001d591\\U0001d586\\U0001d59f\\U0001d59e \\U0001d589\\U0001d594\\U0001d58c\"}",
    statement:"{ `literal`: 'ùïøùñçùñä ùññùñöùñéùñàùñê ùñáùñóùñîùñúùñì ùñãùñîùñù ùñèùñöùñíùñïùñò ùñîùñõùñäùñó ùñôùñçùñä ùñëùñÜùñüùñû ùñâùñîùñå', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ùïøùñçùñä ùññùñöùñéùñàùñê ùñáùñóùñîùñúùñì ùñãùñîùñù ùñèùñöùñíùñïùñò ùñîùñõùñäùñó ùñôùñçùñä ùñëùñÜùñüùñû ùñâùñîùñå"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ùïøùñçùñä ùññùñöùñéùñàùñê ùñáùñóùñîùñúùñì ùñãùñîùñù ùñèùñöùñíùñïùñò ùñîùñõùñäùñó ùñôùñçùñä ùñëùñÜùñüùñû ùñâùñîùñå",
        variable:"ùïøùñçùñä ùññùñöùñéùñàùñê ùñáùñóùñîùñúùñì ùñãùñîùñù ùñèùñöùñíùñïùñò ùñîùñõùñäùñó ùñôùñçùñä ùñëùñÜùñüùñû ùñâùñîùñå",
        concatenated:"ùïøùñçùñä ùññùñöùñéùñàùñê ùñáùñóùñîùñúùñì ùñãùñîùñù ùñèùñöùñíùñïùñò ùñîùñõùñäùñó ùñôùñçùñä ùñëùñÜùñüùñû ùñâùñîùñåùïøùñçùñä ùññùñöùñéùñàùñê ùñáùñóùñîùñúùñì ùñãùñîùñù ùñèùñöùñíùñïùñò ùñîùñõùñäùñó ùñôùñçùñä ùñëùñÜùñüùñû ùñâùñîùñå"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\U0001d47b\\U0001d489\\U0001d486 \\U0001d492\\U0001d496\\U0001d48a\\U0001d484\\U0001d48c \\U0001d483\\U0001d493\\U0001d490\\U0001d498\\U0001d48f \\U0001d487\\U0001d490\\U0001d499 \\U0001d48b\\U0001d496\\U0001d48e\\U0001d491\\U0001d494 \\U0001d490\\U0001d497\\U0001d486\\U0001d493 \\U0001d495\\U0001d489\\U0001d486 \\U0001d48d\\U0001d482\\U0001d49b\\U0001d49a \\U0001d485\\U0001d490\\U0001d488\"}",
    statement:"{ `literal`: 'ùëªùíâùíÜ ùííùíñùíäùíÑùíå ùíÉùíìùíêùíòùíè ùíáùíêùíô ùíãùíñùíéùíëùíî ùíêùíóùíÜùíì ùíïùíâùíÜ ùíçùíÇùíõùíö ùíÖùíêùíà', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ùëªùíâùíÜ ùííùíñùíäùíÑùíå ùíÉùíìùíêùíòùíè ùíáùíêùíô ùíãùíñùíéùíëùíî ùíêùíóùíÜùíì ùíïùíâùíÜ ùíçùíÇùíõùíö ùíÖùíêùíà"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ùëªùíâùíÜ ùííùíñùíäùíÑùíå ùíÉùíìùíêùíòùíè ùíáùíêùíô ùíãùíñùíéùíëùíî ùíêùíóùíÜùíì ùíïùíâùíÜ ùíçùíÇùíõùíö ùíÖùíêùíà",
        variable:"ùëªùíâùíÜ ùííùíñùíäùíÑùíå ùíÉùíìùíêùíòùíè ùíáùíêùíô ùíãùíñùíéùíëùíî ùíêùíóùíÜùíì ùíïùíâùíÜ ùíçùíÇùíõùíö ùíÖùíêùíà",
        concatenated:"ùëªùíâùíÜ ùííùíñùíäùíÑùíå ùíÉùíìùíêùíòùíè ùíáùíêùíô ùíãùíñùíéùíëùíî ùíêùíóùíÜùíì ùíïùíâùíÜ ùíçùíÇùíõùíö ùíÖùíêùíàùëªùíâùíÜ ùííùíñùíäùíÑùíå ùíÉùíìùíêùíòùíè ùíáùíêùíô ùíãùíñùíéùíëùíî ùíêùíóùíÜùíì ùíïùíâùíÜ ùíçùíÇùíõùíö ùíÖùíêùíà"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\U0001d4e3\\U0001d4f1\\U0001d4ee \\U0001d4fa\\U0001d4fe\\U0001d4f2\\U0001d4ec\\U0001d4f4 \\U0001d4eb\\U0001d4fb\\U0001d4f8\\U0001d500\\U0001d4f7 \\U0001d4ef\\U0001d4f8\\U0001d501 \\U0001d4f3\\U0001d4fe\\U0001d4f6\\U0001d4f9\\U0001d4fc \\U0001d4f8\\U0001d4ff\\U0001d4ee\\U0001d4fb \\U0001d4fd\\U0001d4f1\\U0001d4ee \\U0001d4f5\\U0001d4ea\\U0001d503\\U0001d502 \\U0001d4ed\\U0001d4f8\\U0001d4f0\"}",
    statement:"{ `literal`: 'ùì£ùì±ùìÆ ùì∫ùìæùì≤ùì¨ùì¥ ùì´ùìªùì∏ùîÄùì∑ ùìØùì∏ùîÅ ùì≥ùìæùì∂ùìπùìº ùì∏ùìøùìÆùìª ùìΩùì±ùìÆ ùìµùì™ùîÉùîÇ ùì≠ùì∏ùì∞', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ùì£ùì±ùìÆ ùì∫ùìæùì≤ùì¨ùì¥ ùì´ùìªùì∏ùîÄùì∑ ùìØùì∏ùîÅ ùì≥ùìæùì∂ùìπùìº ùì∏ùìøùìÆùìª ùìΩùì±ùìÆ ùìµùì™ùîÉùîÇ ùì≠ùì∏ùì∞"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ùì£ùì±ùìÆ ùì∫ùìæùì≤ùì¨ùì¥ ùì´ùìªùì∏ùîÄùì∑ ùìØùì∏ùîÅ ùì≥ùìæùì∂ùìπùìº ùì∏ùìøùìÆùìª ùìΩùì±ùìÆ ùìµùì™ùîÉùîÇ ùì≠ùì∏ùì∞",
        variable:"ùì£ùì±ùìÆ ùì∫ùìæùì≤ùì¨ùì¥ ùì´ùìªùì∏ùîÄùì∑ ùìØùì∏ùîÅ ùì≥ùìæùì∂ùìπùìº ùì∏ùìøùìÆùìª ùìΩùì±ùìÆ ùìµùì™ùîÉùîÇ ùì≠ùì∏ùì∞",
        concatenated:"ùì£ùì±ùìÆ ùì∫ùìæùì≤ùì¨ùì¥ ùì´ùìªùì∏ùîÄùì∑ ùìØùì∏ùîÅ ùì≥ùìæùì∂ùìπùìº ùì∏ùìøùìÆùìª ùìΩùì±ùìÆ ùìµùì™ùîÉùîÇ ùì≠ùì∏ùì∞ùì£ùì±ùìÆ ùì∫ùìæùì≤ùì¨ùì¥ ùì´ùìªùì∏ùîÄùì∑ ùìØùì∏ùîÅ ùì≥ùìæùì∂ùìπùìº ùì∏ùìøùìÆùìª ùìΩùì±ùìÆ ùìµùì™ùîÉùîÇ ùì≠ùì∏ùì∞"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\U0001d54b\\U0001d559\\U0001d556 \\U0001d562\\U0001d566\\U0001d55a\\U0001d554\\U0001d55c \\U0001d553\\U0001d563\\U0001d560\\U0001d568\\U0001d55f \\U0001d557\\U0001d560\\U0001d569 \\U0001d55b\\U0001d566\\U0001d55e\\U0001d561\\U0001d564 \\U0001d560\\U0001d567\\U0001d556\\U0001d563 \\U0001d565\\U0001d559\\U0001d556 \\U0001d55d\\U0001d552\\U0001d56b\\U0001d56a \\U0001d555\\U0001d560\\U0001d558\"}",
    statement:"{ `literal`: 'ùïãùïôùïñ ùï¢ùï¶ùïöùïîùïú ùïìùï£ùï†ùï®ùïü ùïóùï†ùï© ùïõùï¶ùïûùï°ùï§ ùï†ùïßùïñùï£ ùï•ùïôùïñ ùïùùïíùï´ùï™ ùïïùï†ùïò', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ùïãùïôùïñ ùï¢ùï¶ùïöùïîùïú ùïìùï£ùï†ùï®ùïü ùïóùï†ùï© ùïõùï¶ùïûùï°ùï§ ùï†ùïßùïñùï£ ùï•ùïôùïñ ùïùùïíùï´ùï™ ùïïùï†ùïò"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ùïãùïôùïñ ùï¢ùï¶ùïöùïîùïú ùïìùï£ùï†ùï®ùïü ùïóùï†ùï© ùïõùï¶ùïûùï°ùï§ ùï†ùïßùïñùï£ ùï•ùïôùïñ ùïùùïíùï´ùï™ ùïïùï†ùïò",
        variable:"ùïãùïôùïñ ùï¢ùï¶ùïöùïîùïú ùïìùï£ùï†ùï®ùïü ùïóùï†ùï© ùïõùï¶ùïûùï°ùï§ ùï†ùïßùïñùï£ ùï•ùïôùïñ ùïùùïíùï´ùï™ ùïïùï†ùïò",
        concatenated:"ùïãùïôùïñ ùï¢ùï¶ùïöùïîùïú ùïìùï£ùï†ùï®ùïü ùïóùï†ùï© ùïõùï¶ùïûùï°ùï§ ùï†ùïßùïñùï£ ùï•ùïôùïñ ùïùùïíùï´ùï™ ùïïùï†ùïòùïãùïôùïñ ùï¢ùï¶ùïöùïîùïú ùïìùï£ùï†ùï®ùïü ùïóùï†ùï© ùïõùï¶ùïûùï°ùï§ ùï†ùïßùïñùï£ ùï•ùïôùïñ ùïùùïíùï´ùï™ ùïïùï†ùïò"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\U0001d683\\U0001d691\\U0001d68e \\U0001d69a\\U0001d69e\\U0001d692\\U0001d68c\\U0001d694 \\U0001d68b\\U0001d69b\\U0001d698\\U0001d6a0\\U0001d697 \\U0001d68f\\U0001d698\\U0001d6a1 \\U0001d693\\U0001d69e\\U0001d696\\U0001d699\\U0001d69c \\U0001d698\\U0001d69f\\U0001d68e\\U0001d69b \\U0001d69d\\U0001d691\\U0001d68e \\U0001d695\\U0001d68a\\U0001d6a3\\U0001d6a2 \\U0001d68d\\U0001d698\\U0001d690\"}",
    statement:"{ `literal`: 'ùöÉùöëùöé ùööùöûùöíùöåùöî ùöãùöõùöòùö†ùöó ùöèùöòùö° ùöìùöûùöñùöôùöú ùöòùöüùöéùöõ ùöùùöëùöé ùöïùöäùö£ùö¢ ùöçùöòùöê', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ùöÉùöëùöé ùööùöûùöíùöåùöî ùöãùöõùöòùö†ùöó ùöèùöòùö° ùöìùöûùöñùöôùöú ùöòùöüùöéùöõ ùöùùöëùöé ùöïùöäùö£ùö¢ ùöçùöòùöê"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ùöÉùöëùöé ùööùöûùöíùöåùöî ùöãùöõùöòùö†ùöó ùöèùöòùö° ùöìùöûùöñùöôùöú ùöòùöüùöéùöõ ùöùùöëùöé ùöïùöäùö£ùö¢ ùöçùöòùöê",
        variable:"ùöÉùöëùöé ùööùöûùöíùöåùöî ùöãùöõùöòùö†ùöó ùöèùöòùö° ùöìùöûùöñùöôùöú ùöòùöüùöéùöõ ùöùùöëùöé ùöïùöäùö£ùö¢ ùöçùöòùöê",
        concatenated:"ùöÉùöëùöé ùööùöûùöíùöåùöî ùöãùöõùöòùö†ùöó ùöèùöòùö° ùöìùöûùöñùöôùöú ùöòùöüùöéùöõ ùöùùöëùöé ùöïùöäùö£ùö¢ ùöçùöòùöêùöÉùöëùöé ùööùöûùöíùöåùöî ùöãùöõùöòùö†ùöó ùöèùöòùö° ùöìùöûùöñùöôùöú ùöòùöüùöéùöõ ùöùùöëùöé ùöïùöäùö£ùö¢ ùöçùöòùöê"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\u24af\\u24a3\\u24a0 \\u24ac\\u24b0\\u24a4\\u249e\\u24a6 \\u249d\\u24ad\\u24aa\\u24b2\\u24a9 \\u24a1\\u24aa\\u24b3 \\u24a5\\u24b0\\u24a8\\u24ab\\u24ae \\u24aa\\u24b1\\u24a0\\u24ad \\u24af\\u24a3\\u24a0 \\u24a7\\u249c\\u24b5\\u24b4 \\u249f\\u24aa\\u24a2\"}",
    statement:"{ `literal`: '‚íØ‚í£‚í† ‚í¨‚í∞‚í§‚íû‚í¶ ‚íù‚í≠‚í™‚í≤‚í© ‚í°‚í™‚í≥ ‚í•‚í∞‚í®‚í´‚íÆ ‚í™‚í±‚í†‚í≠ ‚íØ‚í£‚í† ‚íß‚íú‚íµ‚í¥ ‚íü‚í™‚í¢', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"‚íØ‚í£‚í† ‚í¨‚í∞‚í§‚íû‚í¶ ‚íù‚í≠‚í™‚í≤‚í© ‚í°‚í™‚í≥ ‚í•‚í∞‚í®‚í´‚íÆ ‚í™‚í±‚í†‚í≠ ‚íØ‚í£‚í† ‚íß‚íú‚íµ‚í¥ ‚íü‚í™‚í¢"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"‚íØ‚í£‚í† ‚í¨‚í∞‚í§‚íû‚í¶ ‚íù‚í≠‚í™‚í≤‚í© ‚í°‚í™‚í≥ ‚í•‚í∞‚í®‚í´‚íÆ ‚í™‚í±‚í†‚í≠ ‚íØ‚í£‚í† ‚íß‚íú‚íµ‚í¥ ‚íü‚í™‚í¢",
        variable:"‚íØ‚í£‚í† ‚í¨‚í∞‚í§‚íû‚í¶ ‚íù‚í≠‚í™‚í≤‚í© ‚í°‚í™‚í≥ ‚í•‚í∞‚í®‚í´‚íÆ ‚í™‚í±‚í†‚í≠ ‚íØ‚í£‚í† ‚íß‚íú‚íµ‚í¥ ‚íü‚í™‚í¢",
        concatenated:"‚íØ‚í£‚í† ‚í¨‚í∞‚í§‚íû‚í¶ ‚íù‚í≠‚í™‚í≤‚í© ‚í°‚í™‚í≥ ‚í•‚í∞‚í®‚í´‚íÆ ‚í™‚í±‚í†‚í≠ ‚íØ‚í£‚í† ‚íß‚íú‚íµ‚í¥ ‚íü‚í™‚í¢‚íØ‚í£‚í† ‚í¨‚í∞‚í§‚íû‚í¶ ‚íù‚í≠‚í™‚í≤‚í© ‚í°‚í™‚í≥ ‚í•‚í∞‚í®‚í´‚íÆ ‚í™‚í±‚í†‚í≠ ‚íØ‚í£‚í† ‚íß‚íú‚íµ‚í¥ ‚íü‚í™‚í¢"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<script>alert(123)</script>\"}",
    statement:"{ `literal`: '<script>alert(123)</script>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<script>alert(123)</script>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<script>alert(123)</script>",
        variable:"<script>alert(123)</script>",
        concatenated:"<script>alert(123)</script><script>alert(123)</script>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"&lt;script&gt;alert(&#39;123&#39;);&lt;/script&gt;\"}",
    statement:"{ `literal`: '&lt;script&gt;alert(&#39;123&#39;);&lt;/script&gt;', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"&lt;script&gt;alert(&#39;123&#39;);&lt;/script&gt;"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"&lt;script&gt;alert(&#39;123&#39;);&lt;/script&gt;",
        variable:"&lt;script&gt;alert(&#39;123&#39;);&lt;/script&gt;",
        concatenated:"&lt;script&gt;alert(&#39;123&#39;);&lt;/script&gt;&lt;script&gt;alert(&#39;123&#39;);&lt;/script&gt;"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<img src=x onerror=alert(123) />\"}",
    statement:"{ `literal`: '<img src=x onerror=alert(123) />', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<img src=x onerror=alert(123) />"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<img src=x onerror=alert(123) />",
        variable:"<img src=x onerror=alert(123) />",
        concatenated:"<img src=x onerror=alert(123) /><img src=x onerror=alert(123) />"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<svg><script>123<1>alert(123)</script>\"}",
    statement:"{ `literal`: '<svg><script>123<1>alert(123)</script>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<svg><script>123<1>alert(123)</script>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<svg><script>123<1>alert(123)</script>",
        variable:"<svg><script>123<1>alert(123)</script>",
        concatenated:"<svg><script>123<1>alert(123)</script><svg><script>123<1>alert(123)</script>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\\"><script>alert(123)</script>\"}",
    statement:"{ `literal`: '\"><script>alert(123)</script>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"\"><script>alert(123)</script>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"\"><script>alert(123)</script>",
        variable:"\"><script>alert(123)</script>",
        concatenated:"\"><script>alert(123)</script>\"><script>alert(123)</script>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"><script>alert(123)</script>\"}",
    statement:"{ `literal`: '><script>alert(123)</script>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"><script>alert(123)</script>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"><script>alert(123)</script>",
        variable:"><script>alert(123)</script>",
        concatenated:"><script>alert(123)</script>><script>alert(123)</script>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"</script><script>alert(123)</script>\"}",
    statement:"{ `literal`: '</script><script>alert(123)</script>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"</script><script>alert(123)</script>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"</script><script>alert(123)</script>",
        variable:"</script><script>alert(123)</script>",
        concatenated:"</script><script>alert(123)</script></script><script>alert(123)</script>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"< / script >< script >alert(123)< / script >\"}",
    statement:"{ `literal`: '< / script >< script >alert(123)< / script >', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"< / script >< script >alert(123)< / script >"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"< / script >< script >alert(123)< / script >",
        variable:"< / script >< script >alert(123)< / script >",
        concatenated:"< / script >< script >alert(123)< / script >< / script >< script >alert(123)< / script >"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\" onfocus=JaVaSCript:alert(123) autofocus\"}",
    statement:"{ `literal`: ' onfocus=JaVaSCript:alert(123) autofocus', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:" onfocus=JaVaSCript:alert(123) autofocus"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:" onfocus=JaVaSCript:alert(123) autofocus",
        variable:" onfocus=JaVaSCript:alert(123) autofocus",
        concatenated:" onfocus=JaVaSCript:alert(123) autofocus onfocus=JaVaSCript:alert(123) autofocus"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\\" onfocus=JaVaSCript:alert(123) autofocus\"}",
    statement:"{ `literal`: '\" onfocus=JaVaSCript:alert(123) autofocus', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"\" onfocus=JaVaSCript:alert(123) autofocus"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"\" onfocus=JaVaSCript:alert(123) autofocus",
        variable:"\" onfocus=JaVaSCript:alert(123) autofocus",
        concatenated:"\" onfocus=JaVaSCript:alert(123) autofocus\" onfocus=JaVaSCript:alert(123) autofocus"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\uff1cscript\\uff1ealert(123)\\uff1c/script\\uff1e\"}",
    statement:"{ `literal`: 'ÔºúscriptÔºûalert(123)Ôºú/scriptÔºû', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ÔºúscriptÔºûalert(123)Ôºú/scriptÔºû"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ÔºúscriptÔºûalert(123)Ôºú/scriptÔºû",
        variable:"ÔºúscriptÔºûalert(123)Ôºú/scriptÔºû",
        concatenated:"ÔºúscriptÔºûalert(123)Ôºú/scriptÔºûÔºúscriptÔºûalert(123)Ôºú/scriptÔºû"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<sc<script>ript>alert(123)</sc</script>ript>\"}",
    statement:"{ `literal`: '<sc<script>ript>alert(123)</sc</script>ript>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<sc<script>ript>alert(123)</sc</script>ript>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<sc<script>ript>alert(123)</sc</script>ript>",
        variable:"<sc<script>ript>alert(123)</sc</script>ript>",
        concatenated:"<sc<script>ript>alert(123)</sc</script>ript><sc<script>ript>alert(123)</sc</script>ript>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"--><script>alert(123)</script>\"}",
    statement:"{ `literal`: '--><script>alert(123)</script>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"--><script>alert(123)</script>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"--><script>alert(123)</script>",
        variable:"--><script>alert(123)</script>",
        concatenated:"--><script>alert(123)</script>--><script>alert(123)</script>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\\";alert(123);t=\\\"\"}",
    statement:"{ `literal`: '\";alert(123);t=\"', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"\";alert(123);t=\""
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"\";alert(123);t=\"",
        variable:"\";alert(123);t=\"",
        concatenated:"\";alert(123);t=\"\";alert(123);t=\""
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"JavaSCript:alert(123)\"}",
    statement:"{ `literal`: 'JavaSCript:alert(123)', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"JavaSCript:alert(123)"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"JavaSCript:alert(123)",
        variable:"JavaSCript:alert(123)",
        concatenated:"JavaSCript:alert(123)JavaSCript:alert(123)"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\";alert(123);\"}",
    statement:"{ `literal`: ';alert(123);', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:";alert(123);"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:";alert(123);",
        variable:";alert(123);",
        concatenated:";alert(123);;alert(123);"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"src=JaVaSCript:prompt(132)\"}",
    statement:"{ `literal`: 'src=JaVaSCript:prompt(132)', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"src=JaVaSCript:prompt(132)"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"src=JaVaSCript:prompt(132)",
        variable:"src=JaVaSCript:prompt(132)",
        concatenated:"src=JaVaSCript:prompt(132)src=JaVaSCript:prompt(132)"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\\"><script>alert(123);</script x=\\\"\"}",
    statement:"{ `literal`: '\"><script>alert(123);</script x=\"', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"\"><script>alert(123);</script x=\""
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"\"><script>alert(123);</script x=\"",
        variable:"\"><script>alert(123);</script x=\"",
        concatenated:"\"><script>alert(123);</script x=\"\"><script>alert(123);</script x=\""
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"><script>alert(123);</script x=\"}",
    statement:"{ `literal`: '><script>alert(123);</script x=', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"><script>alert(123);</script x="
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"><script>alert(123);</script x=",
        variable:"><script>alert(123);</script x=",
        concatenated:"><script>alert(123);</script x=><script>alert(123);</script x="
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"\\\" autofocus onkeyup=\\\"javascript:alert(123)\"}",
    statement:"{ `literal`: '\" autofocus onkeyup=\"javascript:alert(123)', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"\" autofocus onkeyup=\"javascript:alert(123)"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"\" autofocus onkeyup=\"javascript:alert(123)",
        variable:"\" autofocus onkeyup=\"javascript:alert(123)",
        concatenated:"\" autofocus onkeyup=\"javascript:alert(123)\" autofocus onkeyup=\"javascript:alert(123)"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<script\\\\x20type=\\\"text/javascript\\\">javascript:alert(1);</script>\"}",
    statement:"{ `literal`: '<script\\x20type=\"text/javascript\">javascript:alert(1);</script>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<script\\x20type=\"text/javascript\">javascript:alert(1);</script>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<script\\x20type=\"text/javascript\">javascript:alert(1);</script>",
        variable:"<script\\x20type=\"text/javascript\">javascript:alert(1);</script>",
        concatenated:"<script\\x20type=\"text/javascript\">javascript:alert(1);</script><script\\x20type=\"text/javascript\">javascript:alert(1);</script>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<script\\\\x3Etype=\\\"text/javascript\\\">javascript:alert(1);</script>\"}",
    statement:"{ `literal`: '<script\\x3Etype=\"text/javascript\">javascript:alert(1);</script>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<script\\x3Etype=\"text/javascript\">javascript:alert(1);</script>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<script\\x3Etype=\"text/javascript\">javascript:alert(1);</script>",
        variable:"<script\\x3Etype=\"text/javascript\">javascript:alert(1);</script>",
        concatenated:"<script\\x3Etype=\"text/javascript\">javascript:alert(1);</script><script\\x3Etype=\"text/javascript\">javascript:alert(1);</script>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<script\\\\x0Dtype=\\\"text/javascript\\\">javascript:alert(1);</script>\"}",
    statement:"{ `literal`: '<script\\x0Dtype=\"text/javascript\">javascript:alert(1);</script>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<script\\x0Dtype=\"text/javascript\">javascript:alert(1);</script>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<script\\x0Dtype=\"text/javascript\">javascript:alert(1);</script>",
        variable:"<script\\x0Dtype=\"text/javascript\">javascript:alert(1);</script>",
        concatenated:"<script\\x0Dtype=\"text/javascript\">javascript:alert(1);</script><script\\x0Dtype=\"text/javascript\">javascript:alert(1);</script>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<script\\\\x09type=\\\"text/javascript\\\">javascript:alert(1);</script>\"}",
    statement:"{ `literal`: '<script\\x09type=\"text/javascript\">javascript:alert(1);</script>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<script\\x09type=\"text/javascript\">javascript:alert(1);</script>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<script\\x09type=\"text/javascript\">javascript:alert(1);</script>",
        variable:"<script\\x09type=\"text/javascript\">javascript:alert(1);</script>",
        concatenated:"<script\\x09type=\"text/javascript\">javascript:alert(1);</script><script\\x09type=\"text/javascript\">javascript:alert(1);</script>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<script\\\\x0Ctype=\\\"text/javascript\\\">javascript:alert(1);</script>\"}",
    statement:"{ `literal`: '<script\\x0Ctype=\"text/javascript\">javascript:alert(1);</script>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<script\\x0Ctype=\"text/javascript\">javascript:alert(1);</script>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<script\\x0Ctype=\"text/javascript\">javascript:alert(1);</script>",
        variable:"<script\\x0Ctype=\"text/javascript\">javascript:alert(1);</script>",
        concatenated:"<script\\x0Ctype=\"text/javascript\">javascript:alert(1);</script><script\\x0Ctype=\"text/javascript\">javascript:alert(1);</script>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<script\\\\x2Ftype=\\\"text/javascript\\\">javascript:alert(1);</script>\"}",
    statement:"{ `literal`: '<script\\x2Ftype=\"text/javascript\">javascript:alert(1);</script>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<script\\x2Ftype=\"text/javascript\">javascript:alert(1);</script>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<script\\x2Ftype=\"text/javascript\">javascript:alert(1);</script>",
        variable:"<script\\x2Ftype=\"text/javascript\">javascript:alert(1);</script>",
        concatenated:"<script\\x2Ftype=\"text/javascript\">javascript:alert(1);</script><script\\x2Ftype=\"text/javascript\">javascript:alert(1);</script>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<script\\\\x0Atype=\\\"text/javascript\\\">javascript:alert(1);</script>\"}",
    statement:"{ `literal`: '<script\\x0Atype=\"text/javascript\">javascript:alert(1);</script>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<script\\x0Atype=\"text/javascript\">javascript:alert(1);</script>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<script\\x0Atype=\"text/javascript\">javascript:alert(1);</script>",
        variable:"<script\\x0Atype=\"text/javascript\">javascript:alert(1);</script>",
        concatenated:"<script\\x0Atype=\"text/javascript\">javascript:alert(1);</script><script\\x0Atype=\"text/javascript\">javascript:alert(1);</script>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"ABC<div style=\\\"x\\\\x3Aexpression(javascript:alert(1)\\\">DEF\"}",
    statement:"{ `literal`: 'ABC<div style=\"x\\x3Aexpression(javascript:alert(1)\">DEF', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ABC<div style=\"x\\x3Aexpression(javascript:alert(1)\">DEF"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ABC<div style=\"x\\x3Aexpression(javascript:alert(1)\">DEF",
        variable:"ABC<div style=\"x\\x3Aexpression(javascript:alert(1)\">DEF",
        concatenated:"ABC<div style=\"x\\x3Aexpression(javascript:alert(1)\">DEFABC<div style=\"x\\x3Aexpression(javascript:alert(1)\">DEF"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"ABC<div style=\\\"x:expression\\\\x5C(javascript:alert(1)\\\">DEF\"}",
    statement:"{ `literal`: 'ABC<div style=\"x:expression\\x5C(javascript:alert(1)\">DEF', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ABC<div style=\"x:expression\\x5C(javascript:alert(1)\">DEF"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ABC<div style=\"x:expression\\x5C(javascript:alert(1)\">DEF",
        variable:"ABC<div style=\"x:expression\\x5C(javascript:alert(1)\">DEF",
        concatenated:"ABC<div style=\"x:expression\\x5C(javascript:alert(1)\">DEFABC<div style=\"x:expression\\x5C(javascript:alert(1)\">DEF"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"ABC<div style=\\\"x:expression\\\\x00(javascript:alert(1)\\\">DEF\"}",
    statement:"{ `literal`: 'ABC<div style=\"x:expression\\x00(javascript:alert(1)\">DEF', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ABC<div style=\"x:expression\\x00(javascript:alert(1)\">DEF"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ABC<div style=\"x:expression\\x00(javascript:alert(1)\">DEF",
        variable:"ABC<div style=\"x:expression\\x00(javascript:alert(1)\">DEF",
        concatenated:"ABC<div style=\"x:expression\\x00(javascript:alert(1)\">DEFABC<div style=\"x:expression\\x00(javascript:alert(1)\">DEF"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"ABC<div style=\\\"x:exp\\\\x00ression(javascript:alert(1)\\\">DEF\"}",
    statement:"{ `literal`: 'ABC<div style=\"x:exp\\x00ression(javascript:alert(1)\">DEF', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ABC<div style=\"x:exp\\x00ression(javascript:alert(1)\">DEF"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ABC<div style=\"x:exp\\x00ression(javascript:alert(1)\">DEF",
        variable:"ABC<div style=\"x:exp\\x00ression(javascript:alert(1)\">DEF",
        concatenated:"ABC<div style=\"x:exp\\x00ression(javascript:alert(1)\">DEFABC<div style=\"x:exp\\x00ression(javascript:alert(1)\">DEF"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"ABC<div style=\\\"x:exp\\\\x5Cression(javascript:alert(1)\\\">DEF\"}",
    statement:"{ `literal`: 'ABC<div style=\"x:exp\\x5Cression(javascript:alert(1)\">DEF', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ABC<div style=\"x:exp\\x5Cression(javascript:alert(1)\">DEF"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ABC<div style=\"x:exp\\x5Cression(javascript:alert(1)\">DEF",
        variable:"ABC<div style=\"x:exp\\x5Cression(javascript:alert(1)\">DEF",
        concatenated:"ABC<div style=\"x:exp\\x5Cression(javascript:alert(1)\">DEFABC<div style=\"x:exp\\x5Cression(javascript:alert(1)\">DEF"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"ABC<div style=\\\"x:\\\\x0Aexpression(javascript:alert(1)\\\">DEF\"}",
    statement:"{ `literal`: 'ABC<div style=\"x:\\x0Aexpression(javascript:alert(1)\">DEF', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ABC<div style=\"x:\\x0Aexpression(javascript:alert(1)\">DEF"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ABC<div style=\"x:\\x0Aexpression(javascript:alert(1)\">DEF",
        variable:"ABC<div style=\"x:\\x0Aexpression(javascript:alert(1)\">DEF",
        concatenated:"ABC<div style=\"x:\\x0Aexpression(javascript:alert(1)\">DEFABC<div style=\"x:\\x0Aexpression(javascript:alert(1)\">DEF"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"ABC<div style=\\\"x:\\\\x09expression(javascript:alert(1)\\\">DEF\"}",
    statement:"{ `literal`: 'ABC<div style=\"x:\\x09expression(javascript:alert(1)\">DEF', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ABC<div style=\"x:\\x09expression(javascript:alert(1)\">DEF"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ABC<div style=\"x:\\x09expression(javascript:alert(1)\">DEF",
        variable:"ABC<div style=\"x:\\x09expression(javascript:alert(1)\">DEF",
        concatenated:"ABC<div style=\"x:\\x09expression(javascript:alert(1)\">DEFABC<div style=\"x:\\x09expression(javascript:alert(1)\">DEF"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"ABC<div style=\\\"x:\\\\xE3\\\\x80\\\\x80expression(javascript:alert(1)\\\">DEF\"}",
    statement:"{ `literal`: 'ABC<div style=\"x:\\xE3\\x80\\x80expression(javascript:alert(1)\">DEF', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ABC<div style=\"x:\\xE3\\x80\\x80expression(javascript:alert(1)\">DEF"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ABC<div style=\"x:\\xE3\\x80\\x80expression(javascript:alert(1)\">DEF",
        variable:"ABC<div style=\"x:\\xE3\\x80\\x80expression(javascript:alert(1)\">DEF",
        concatenated:"ABC<div style=\"x:\\xE3\\x80\\x80expression(javascript:alert(1)\">DEFABC<div style=\"x:\\xE3\\x80\\x80expression(javascript:alert(1)\">DEF"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"ABC<div style=\\\"x:\\\\xE2\\\\x80\\\\x84expression(javascript:alert(1)\\\">DEF\"}",
    statement:"{ `literal`: 'ABC<div style=\"x:\\xE2\\x80\\x84expression(javascript:alert(1)\">DEF', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ABC<div style=\"x:\\xE2\\x80\\x84expression(javascript:alert(1)\">DEF"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ABC<div style=\"x:\\xE2\\x80\\x84expression(javascript:alert(1)\">DEF",
        variable:"ABC<div style=\"x:\\xE2\\x80\\x84expression(javascript:alert(1)\">DEF",
        concatenated:"ABC<div style=\"x:\\xE2\\x80\\x84expression(javascript:alert(1)\">DEFABC<div style=\"x:\\xE2\\x80\\x84expression(javascript:alert(1)\">DEF"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"ABC<div style=\\\"x:\\\\xC2\\\\xA0expression(javascript:alert(1)\\\">DEF\"}",
    statement:"{ `literal`: 'ABC<div style=\"x:\\xC2\\xA0expression(javascript:alert(1)\">DEF', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ABC<div style=\"x:\\xC2\\xA0expression(javascript:alert(1)\">DEF"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ABC<div style=\"x:\\xC2\\xA0expression(javascript:alert(1)\">DEF",
        variable:"ABC<div style=\"x:\\xC2\\xA0expression(javascript:alert(1)\">DEF",
        concatenated:"ABC<div style=\"x:\\xC2\\xA0expression(javascript:alert(1)\">DEFABC<div style=\"x:\\xC2\\xA0expression(javascript:alert(1)\">DEF"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"ABC<div style=\\\"x:\\\\xE2\\\\x80\\\\x80expression(javascript:alert(1)\\\">DEF\"}",
    statement:"{ `literal`: 'ABC<div style=\"x:\\xE2\\x80\\x80expression(javascript:alert(1)\">DEF', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ABC<div style=\"x:\\xE2\\x80\\x80expression(javascript:alert(1)\">DEF"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ABC<div style=\"x:\\xE2\\x80\\x80expression(javascript:alert(1)\">DEF",
        variable:"ABC<div style=\"x:\\xE2\\x80\\x80expression(javascript:alert(1)\">DEF",
        concatenated:"ABC<div style=\"x:\\xE2\\x80\\x80expression(javascript:alert(1)\">DEFABC<div style=\"x:\\xE2\\x80\\x80expression(javascript:alert(1)\">DEF"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"ABC<div style=\\\"x:\\\\xE2\\\\x80\\\\x8Aexpression(javascript:alert(1)\\\">DEF\"}",
    statement:"{ `literal`: 'ABC<div style=\"x:\\xE2\\x80\\x8Aexpression(javascript:alert(1)\">DEF', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ABC<div style=\"x:\\xE2\\x80\\x8Aexpression(javascript:alert(1)\">DEF"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ABC<div style=\"x:\\xE2\\x80\\x8Aexpression(javascript:alert(1)\">DEF",
        variable:"ABC<div style=\"x:\\xE2\\x80\\x8Aexpression(javascript:alert(1)\">DEF",
        concatenated:"ABC<div style=\"x:\\xE2\\x80\\x8Aexpression(javascript:alert(1)\">DEFABC<div style=\"x:\\xE2\\x80\\x8Aexpression(javascript:alert(1)\">DEF"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"ABC<div style=\\\"x:\\\\x0Dexpression(javascript:alert(1)\\\">DEF\"}",
    statement:"{ `literal`: 'ABC<div style=\"x:\\x0Dexpression(javascript:alert(1)\">DEF', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ABC<div style=\"x:\\x0Dexpression(javascript:alert(1)\">DEF"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ABC<div style=\"x:\\x0Dexpression(javascript:alert(1)\">DEF",
        variable:"ABC<div style=\"x:\\x0Dexpression(javascript:alert(1)\">DEF",
        concatenated:"ABC<div style=\"x:\\x0Dexpression(javascript:alert(1)\">DEFABC<div style=\"x:\\x0Dexpression(javascript:alert(1)\">DEF"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"ABC<div style=\\\"x:\\\\x0Cexpression(javascript:alert(1)\\\">DEF\"}",
    statement:"{ `literal`: 'ABC<div style=\"x:\\x0Cexpression(javascript:alert(1)\">DEF', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ABC<div style=\"x:\\x0Cexpression(javascript:alert(1)\">DEF"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ABC<div style=\"x:\\x0Cexpression(javascript:alert(1)\">DEF",
        variable:"ABC<div style=\"x:\\x0Cexpression(javascript:alert(1)\">DEF",
        concatenated:"ABC<div style=\"x:\\x0Cexpression(javascript:alert(1)\">DEFABC<div style=\"x:\\x0Cexpression(javascript:alert(1)\">DEF"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"ABC<div style=\\\"x:\\\\xE2\\\\x80\\\\x87expression(javascript:alert(1)\\\">DEF\"}",
    statement:"{ `literal`: 'ABC<div style=\"x:\\xE2\\x80\\x87expression(javascript:alert(1)\">DEF', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ABC<div style=\"x:\\xE2\\x80\\x87expression(javascript:alert(1)\">DEF"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ABC<div style=\"x:\\xE2\\x80\\x87expression(javascript:alert(1)\">DEF",
        variable:"ABC<div style=\"x:\\xE2\\x80\\x87expression(javascript:alert(1)\">DEF",
        concatenated:"ABC<div style=\"x:\\xE2\\x80\\x87expression(javascript:alert(1)\">DEFABC<div style=\"x:\\xE2\\x80\\x87expression(javascript:alert(1)\">DEF"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"ABC<div style=\\\"x:\\\\xEF\\\\xBB\\\\xBFexpression(javascript:alert(1)\\\">DEF\"}",
    statement:"{ `literal`: 'ABC<div style=\"x:\\xEF\\xBB\\xBFexpression(javascript:alert(1)\">DEF', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ABC<div style=\"x:\\xEF\\xBB\\xBFexpression(javascript:alert(1)\">DEF"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ABC<div style=\"x:\\xEF\\xBB\\xBFexpression(javascript:alert(1)\">DEF",
        variable:"ABC<div style=\"x:\\xEF\\xBB\\xBFexpression(javascript:alert(1)\">DEF",
        concatenated:"ABC<div style=\"x:\\xEF\\xBB\\xBFexpression(javascript:alert(1)\">DEFABC<div style=\"x:\\xEF\\xBB\\xBFexpression(javascript:alert(1)\">DEF"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"ABC<div style=\\\"x:\\\\x20expression(javascript:alert(1)\\\">DEF\"}",
    statement:"{ `literal`: 'ABC<div style=\"x:\\x20expression(javascript:alert(1)\">DEF', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ABC<div style=\"x:\\x20expression(javascript:alert(1)\">DEF"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ABC<div style=\"x:\\x20expression(javascript:alert(1)\">DEF",
        variable:"ABC<div style=\"x:\\x20expression(javascript:alert(1)\">DEF",
        concatenated:"ABC<div style=\"x:\\x20expression(javascript:alert(1)\">DEFABC<div style=\"x:\\x20expression(javascript:alert(1)\">DEF"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"ABC<div style=\\\"x:\\\\xE2\\\\x80\\\\x88expression(javascript:alert(1)\\\">DEF\"}",
    statement:"{ `literal`: 'ABC<div style=\"x:\\xE2\\x80\\x88expression(javascript:alert(1)\">DEF', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ABC<div style=\"x:\\xE2\\x80\\x88expression(javascript:alert(1)\">DEF"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ABC<div style=\"x:\\xE2\\x80\\x88expression(javascript:alert(1)\">DEF",
        variable:"ABC<div style=\"x:\\xE2\\x80\\x88expression(javascript:alert(1)\">DEF",
        concatenated:"ABC<div style=\"x:\\xE2\\x80\\x88expression(javascript:alert(1)\">DEFABC<div style=\"x:\\xE2\\x80\\x88expression(javascript:alert(1)\">DEF"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"ABC<div style=\\\"x:\\\\x00expression(javascript:alert(1)\\\">DEF\"}",
    statement:"{ `literal`: 'ABC<div style=\"x:\\x00expression(javascript:alert(1)\">DEF', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ABC<div style=\"x:\\x00expression(javascript:alert(1)\">DEF"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ABC<div style=\"x:\\x00expression(javascript:alert(1)\">DEF",
        variable:"ABC<div style=\"x:\\x00expression(javascript:alert(1)\">DEF",
        concatenated:"ABC<div style=\"x:\\x00expression(javascript:alert(1)\">DEFABC<div style=\"x:\\x00expression(javascript:alert(1)\">DEF"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"ABC<div style=\\\"x:\\\\xE2\\\\x80\\\\x8Bexpression(javascript:alert(1)\\\">DEF\"}",
    statement:"{ `literal`: 'ABC<div style=\"x:\\xE2\\x80\\x8Bexpression(javascript:alert(1)\">DEF', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ABC<div style=\"x:\\xE2\\x80\\x8Bexpression(javascript:alert(1)\">DEF"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ABC<div style=\"x:\\xE2\\x80\\x8Bexpression(javascript:alert(1)\">DEF",
        variable:"ABC<div style=\"x:\\xE2\\x80\\x8Bexpression(javascript:alert(1)\">DEF",
        concatenated:"ABC<div style=\"x:\\xE2\\x80\\x8Bexpression(javascript:alert(1)\">DEFABC<div style=\"x:\\xE2\\x80\\x8Bexpression(javascript:alert(1)\">DEF"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"ABC<div style=\\\"x:\\\\xE2\\\\x80\\\\x86expression(javascript:alert(1)\\\">DEF\"}",
    statement:"{ `literal`: 'ABC<div style=\"x:\\xE2\\x80\\x86expression(javascript:alert(1)\">DEF', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ABC<div style=\"x:\\xE2\\x80\\x86expression(javascript:alert(1)\">DEF"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ABC<div style=\"x:\\xE2\\x80\\x86expression(javascript:alert(1)\">DEF",
        variable:"ABC<div style=\"x:\\xE2\\x80\\x86expression(javascript:alert(1)\">DEF",
        concatenated:"ABC<div style=\"x:\\xE2\\x80\\x86expression(javascript:alert(1)\">DEFABC<div style=\"x:\\xE2\\x80\\x86expression(javascript:alert(1)\">DEF"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"ABC<div style=\\\"x:\\\\xE2\\\\x80\\\\x85expression(javascript:alert(1)\\\">DEF\"}",
    statement:"{ `literal`: 'ABC<div style=\"x:\\xE2\\x80\\x85expression(javascript:alert(1)\">DEF', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ABC<div style=\"x:\\xE2\\x80\\x85expression(javascript:alert(1)\">DEF"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ABC<div style=\"x:\\xE2\\x80\\x85expression(javascript:alert(1)\">DEF",
        variable:"ABC<div style=\"x:\\xE2\\x80\\x85expression(javascript:alert(1)\">DEF",
        concatenated:"ABC<div style=\"x:\\xE2\\x80\\x85expression(javascript:alert(1)\">DEFABC<div style=\"x:\\xE2\\x80\\x85expression(javascript:alert(1)\">DEF"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"ABC<div style=\\\"x:\\\\xE2\\\\x80\\\\x82expression(javascript:alert(1)\\\">DEF\"}",
    statement:"{ `literal`: 'ABC<div style=\"x:\\xE2\\x80\\x82expression(javascript:alert(1)\">DEF', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ABC<div style=\"x:\\xE2\\x80\\x82expression(javascript:alert(1)\">DEF"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ABC<div style=\"x:\\xE2\\x80\\x82expression(javascript:alert(1)\">DEF",
        variable:"ABC<div style=\"x:\\xE2\\x80\\x82expression(javascript:alert(1)\">DEF",
        concatenated:"ABC<div style=\"x:\\xE2\\x80\\x82expression(javascript:alert(1)\">DEFABC<div style=\"x:\\xE2\\x80\\x82expression(javascript:alert(1)\">DEF"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"ABC<div style=\\\"x:\\\\x0Bexpression(javascript:alert(1)\\\">DEF\"}",
    statement:"{ `literal`: 'ABC<div style=\"x:\\x0Bexpression(javascript:alert(1)\">DEF', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ABC<div style=\"x:\\x0Bexpression(javascript:alert(1)\">DEF"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ABC<div style=\"x:\\x0Bexpression(javascript:alert(1)\">DEF",
        variable:"ABC<div style=\"x:\\x0Bexpression(javascript:alert(1)\">DEF",
        concatenated:"ABC<div style=\"x:\\x0Bexpression(javascript:alert(1)\">DEFABC<div style=\"x:\\x0Bexpression(javascript:alert(1)\">DEF"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"ABC<div style=\\\"x:\\\\xE2\\\\x80\\\\x81expression(javascript:alert(1)\\\">DEF\"}",
    statement:"{ `literal`: 'ABC<div style=\"x:\\xE2\\x80\\x81expression(javascript:alert(1)\">DEF', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ABC<div style=\"x:\\xE2\\x80\\x81expression(javascript:alert(1)\">DEF"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ABC<div style=\"x:\\xE2\\x80\\x81expression(javascript:alert(1)\">DEF",
        variable:"ABC<div style=\"x:\\xE2\\x80\\x81expression(javascript:alert(1)\">DEF",
        concatenated:"ABC<div style=\"x:\\xE2\\x80\\x81expression(javascript:alert(1)\">DEFABC<div style=\"x:\\xE2\\x80\\x81expression(javascript:alert(1)\">DEF"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"ABC<div style=\\\"x:\\\\xE2\\\\x80\\\\x83expression(javascript:alert(1)\\\">DEF\"}",
    statement:"{ `literal`: 'ABC<div style=\"x:\\xE2\\x80\\x83expression(javascript:alert(1)\">DEF', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ABC<div style=\"x:\\xE2\\x80\\x83expression(javascript:alert(1)\">DEF"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ABC<div style=\"x:\\xE2\\x80\\x83expression(javascript:alert(1)\">DEF",
        variable:"ABC<div style=\"x:\\xE2\\x80\\x83expression(javascript:alert(1)\">DEF",
        concatenated:"ABC<div style=\"x:\\xE2\\x80\\x83expression(javascript:alert(1)\">DEFABC<div style=\"x:\\xE2\\x80\\x83expression(javascript:alert(1)\">DEF"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"ABC<div style=\\\"x:\\\\xE2\\\\x80\\\\x89expression(javascript:alert(1)\\\">DEF\"}",
    statement:"{ `literal`: 'ABC<div style=\"x:\\xE2\\x80\\x89expression(javascript:alert(1)\">DEF', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ABC<div style=\"x:\\xE2\\x80\\x89expression(javascript:alert(1)\">DEF"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ABC<div style=\"x:\\xE2\\x80\\x89expression(javascript:alert(1)\">DEF",
        variable:"ABC<div style=\"x:\\xE2\\x80\\x89expression(javascript:alert(1)\">DEF",
        concatenated:"ABC<div style=\"x:\\xE2\\x80\\x89expression(javascript:alert(1)\">DEFABC<div style=\"x:\\xE2\\x80\\x89expression(javascript:alert(1)\">DEF"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\x0Bjavascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\x0Bjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\x0Bjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\x0Bjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\x0Bjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\x0Bjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\x0Bjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\x0Fjavascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\x0Fjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\x0Fjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\x0Fjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\x0Fjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\x0Fjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\x0Fjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\xC2\\\\xA0javascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\xC2\\xA0javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\xC2\\xA0javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\xC2\\xA0javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\xC2\\xA0javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\xC2\\xA0javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\xC2\\xA0javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\x05javascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\x05javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\x05javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\x05javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\x05javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\x05javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\x05javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\xE1\\\\xA0\\\\x8Ejavascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\xE1\\xA0\\x8Ejavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\xE1\\xA0\\x8Ejavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\xE1\\xA0\\x8Ejavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\xE1\\xA0\\x8Ejavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\xE1\\xA0\\x8Ejavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\xE1\\xA0\\x8Ejavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\x18javascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\x18javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\x18javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\x18javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\x18javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\x18javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\x18javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\x11javascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\x11javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\x11javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\x11javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\x11javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\x11javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\x11javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\xE2\\\\x80\\\\x88javascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\xE2\\x80\\x88javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\xE2\\x80\\x88javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\xE2\\x80\\x88javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\xE2\\x80\\x88javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\xE2\\x80\\x88javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\xE2\\x80\\x88javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\xE2\\\\x80\\\\x89javascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\xE2\\x80\\x89javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\xE2\\x80\\x89javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\xE2\\x80\\x89javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\xE2\\x80\\x89javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\xE2\\x80\\x89javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\xE2\\x80\\x89javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\xE2\\\\x80\\\\x80javascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\xE2\\x80\\x80javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\xE2\\x80\\x80javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\xE2\\x80\\x80javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\xE2\\x80\\x80javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\xE2\\x80\\x80javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\xE2\\x80\\x80javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\x17javascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\x17javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\x17javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\x17javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\x17javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\x17javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\x17javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\x03javascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\x03javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\x03javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\x03javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\x03javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\x03javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\x03javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\x0Ejavascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\x0Ejavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\x0Ejavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\x0Ejavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\x0Ejavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\x0Ejavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\x0Ejavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\x1Ajavascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\x1Ajavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\x1Ajavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\x1Ajavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\x1Ajavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\x1Ajavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\x1Ajavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\x00javascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\x00javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\x00javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\x00javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\x00javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\x00javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\x00javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\x10javascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\x10javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\x10javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\x10javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\x10javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\x10javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\x10javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\xE2\\\\x80\\\\x82javascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\xE2\\x80\\x82javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\xE2\\x80\\x82javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\xE2\\x80\\x82javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\xE2\\x80\\x82javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\xE2\\x80\\x82javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\xE2\\x80\\x82javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\x20javascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\x20javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\x20javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\x20javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\x20javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\x20javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\x20javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\x13javascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\x13javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\x13javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\x13javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\x13javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\x13javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\x13javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\x09javascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\x09javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\x09javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\x09javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\x09javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\x09javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\x09javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\xE2\\\\x80\\\\x8Ajavascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\xE2\\x80\\x8Ajavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\xE2\\x80\\x8Ajavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\xE2\\x80\\x8Ajavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\xE2\\x80\\x8Ajavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\xE2\\x80\\x8Ajavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\xE2\\x80\\x8Ajavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\x14javascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\x14javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\x14javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\x14javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\x14javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\x14javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\x14javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\x19javascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\x19javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\x19javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\x19javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\x19javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\x19javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\x19javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\xE2\\\\x80\\\\xAFjavascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\xE2\\x80\\xAFjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\xE2\\x80\\xAFjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\xE2\\x80\\xAFjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\xE2\\x80\\xAFjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\xE2\\x80\\xAFjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\xE2\\x80\\xAFjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\x1Fjavascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\x1Fjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\x1Fjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\x1Fjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\x1Fjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\x1Fjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\x1Fjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\xE2\\\\x80\\\\x81javascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\xE2\\x80\\x81javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\xE2\\x80\\x81javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\xE2\\x80\\x81javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\xE2\\x80\\x81javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\xE2\\x80\\x81javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\xE2\\x80\\x81javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\x1Djavascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\x1Djavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\x1Djavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\x1Djavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\x1Djavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\x1Djavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\x1Djavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\xE2\\\\x80\\\\x87javascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\xE2\\x80\\x87javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\xE2\\x80\\x87javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\xE2\\x80\\x87javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\xE2\\x80\\x87javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\xE2\\x80\\x87javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\xE2\\x80\\x87javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\x07javascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\x07javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\x07javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\x07javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\x07javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\x07javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\x07javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\xE1\\\\x9A\\\\x80javascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\xE1\\x9A\\x80javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\xE1\\x9A\\x80javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\xE1\\x9A\\x80javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\xE1\\x9A\\x80javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\xE1\\x9A\\x80javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\xE1\\x9A\\x80javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\xE2\\\\x80\\\\x83javascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\xE2\\x80\\x83javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\xE2\\x80\\x83javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\xE2\\x80\\x83javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\xE2\\x80\\x83javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\xE2\\x80\\x83javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\xE2\\x80\\x83javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\x04javascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\x04javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\x04javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\x04javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\x04javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\x04javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\x04javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\x01javascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\x01javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\x01javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\x01javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\x01javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\x01javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\x01javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\x08javascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\x08javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\x08javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\x08javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\x08javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\x08javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\x08javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\xE2\\\\x80\\\\x84javascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\xE2\\x80\\x84javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\xE2\\x80\\x84javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\xE2\\x80\\x84javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\xE2\\x80\\x84javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\xE2\\x80\\x84javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\xE2\\x80\\x84javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\xE2\\\\x80\\\\x86javascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\xE2\\x80\\x86javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\xE2\\x80\\x86javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\xE2\\x80\\x86javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\xE2\\x80\\x86javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\xE2\\x80\\x86javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\xE2\\x80\\x86javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\xE3\\\\x80\\\\x80javascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\xE3\\x80\\x80javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\xE3\\x80\\x80javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\xE3\\x80\\x80javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\xE3\\x80\\x80javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\xE3\\x80\\x80javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\xE3\\x80\\x80javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\x12javascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\x12javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\x12javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\x12javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\x12javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\x12javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\x12javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\x0Djavascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\x0Djavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\x0Djavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\x0Djavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\x0Djavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\x0Djavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\x0Djavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\x0Ajavascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\x0Ajavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\x0Ajavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\x0Ajavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\x0Ajavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\x0Ajavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\x0Ajavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\x0Cjavascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\x0Cjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\x0Cjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\x0Cjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\x0Cjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\x0Cjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\x0Cjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\x15javascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\x15javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\x15javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\x15javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\x15javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\x15javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\x15javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\xE2\\\\x80\\\\xA8javascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\xE2\\x80\\xA8javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\xE2\\x80\\xA8javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\xE2\\x80\\xA8javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\xE2\\x80\\xA8javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\xE2\\x80\\xA8javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\xE2\\x80\\xA8javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\x16javascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\x16javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\x16javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\x16javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\x16javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\x16javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\x16javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\x02javascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\x02javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\x02javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\x02javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\x02javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\x02javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\x02javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\x1Bjavascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\x1Bjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\x1Bjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\x1Bjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\x1Bjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\x1Bjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\x1Bjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\x06javascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\x06javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\x06javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\x06javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\x06javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\x06javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\x06javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\xE2\\\\x80\\\\xA9javascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\xE2\\x80\\xA9javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\xE2\\x80\\xA9javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\xE2\\x80\\xA9javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\xE2\\x80\\xA9javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\xE2\\x80\\xA9javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\xE2\\x80\\xA9javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\xE2\\\\x80\\\\x85javascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\xE2\\x80\\x85javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\xE2\\x80\\x85javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\xE2\\x80\\x85javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\xE2\\x80\\x85javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\xE2\\x80\\x85javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\xE2\\x80\\x85javascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\x1Ejavascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\x1Ejavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\x1Ejavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\x1Ejavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\x1Ejavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\x1Ejavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\x1Ejavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\xE2\\\\x81\\\\x9Fjavascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\xE2\\x81\\x9Fjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\xE2\\x81\\x9Fjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\xE2\\x81\\x9Fjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\xE2\\x81\\x9Fjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\xE2\\x81\\x9Fjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\xE2\\x81\\x9Fjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"\\\\x1Cjavascript:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"\\x1Cjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"\\x1Cjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"\\x1Cjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"\\x1Cjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"\\x1Cjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"\\x1Cjavascript:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"javascript\\\\x00:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"javascript\\x00:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"javascript\\x00:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"javascript\\x00:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"javascript\\x00:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"javascript\\x00:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"javascript\\x00:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"javascript\\\\x3A:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"javascript\\x3A:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"javascript\\x3A:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"javascript\\x3A:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"javascript\\x3A:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"javascript\\x3A:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"javascript\\x3A:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"javascript\\\\x09:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"javascript\\x09:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"javascript\\x09:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"javascript\\x09:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"javascript\\x09:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"javascript\\x09:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"javascript\\x09:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"javascript\\\\x0D:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"javascript\\x0D:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"javascript\\x0D:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"javascript\\x0D:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"javascript\\x0D:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"javascript\\x0D:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"javascript\\x0D:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=\\\"javascript\\\\x0A:javascript:alert(1)\\\" id=\\\"fuzzelement1\\\">test</a>\"}",
    statement:"{ `literal`: '<a href=\"javascript\\x0A:javascript:alert(1)\" id=\"fuzzelement1\">test</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=\"javascript\\x0A:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=\"javascript\\x0A:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        variable:"<a href=\"javascript\\x0A:javascript:alert(1)\" id=\"fuzzelement1\">test</a>",
        concatenated:"<a href=\"javascript\\x0A:javascript:alert(1)\" id=\"fuzzelement1\">test</a><a href=\"javascript\\x0A:javascript:alert(1)\" id=\"fuzzelement1\">test</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<img \\\\x47src=x onerror=\\\"javascript:alert(1)\\\">\"}",
    statement:"{ `literal`: '<img \\x47src=x onerror=\"javascript:alert(1)\">', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<img \\x47src=x onerror=\"javascript:alert(1)\">"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<img \\x47src=x onerror=\"javascript:alert(1)\">",
        variable:"<img \\x47src=x onerror=\"javascript:alert(1)\">",
        concatenated:"<img \\x47src=x onerror=\"javascript:alert(1)\"><img \\x47src=x onerror=\"javascript:alert(1)\">"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<img \\\\x11src=x onerror=\\\"javascript:alert(1)\\\">\"}",
    statement:"{ `literal`: '<img \\x11src=x onerror=\"javascript:alert(1)\">', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<img \\x11src=x onerror=\"javascript:alert(1)\">"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<img \\x11src=x onerror=\"javascript:alert(1)\">",
        variable:"<img \\x11src=x onerror=\"javascript:alert(1)\">",
        concatenated:"<img \\x11src=x onerror=\"javascript:alert(1)\"><img \\x11src=x onerror=\"javascript:alert(1)\">"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<img \\\\x12src=x onerror=\\\"javascript:alert(1)\\\">\"}",
    statement:"{ `literal`: '<img \\x12src=x onerror=\"javascript:alert(1)\">', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<img \\x12src=x onerror=\"javascript:alert(1)\">"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<img \\x12src=x onerror=\"javascript:alert(1)\">",
        variable:"<img \\x12src=x onerror=\"javascript:alert(1)\">",
        concatenated:"<img \\x12src=x onerror=\"javascript:alert(1)\"><img \\x12src=x onerror=\"javascript:alert(1)\">"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<img\\\\x47src=x onerror=\\\"javascript:alert(1)\\\">\"}",
    statement:"{ `literal`: '<img\\x47src=x onerror=\"javascript:alert(1)\">', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<img\\x47src=x onerror=\"javascript:alert(1)\">"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<img\\x47src=x onerror=\"javascript:alert(1)\">",
        variable:"<img\\x47src=x onerror=\"javascript:alert(1)\">",
        concatenated:"<img\\x47src=x onerror=\"javascript:alert(1)\"><img\\x47src=x onerror=\"javascript:alert(1)\">"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<img\\\\x10src=x onerror=\\\"javascript:alert(1)\\\">\"}",
    statement:"{ `literal`: '<img\\x10src=x onerror=\"javascript:alert(1)\">', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<img\\x10src=x onerror=\"javascript:alert(1)\">"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<img\\x10src=x onerror=\"javascript:alert(1)\">",
        variable:"<img\\x10src=x onerror=\"javascript:alert(1)\">",
        concatenated:"<img\\x10src=x onerror=\"javascript:alert(1)\"><img\\x10src=x onerror=\"javascript:alert(1)\">"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<img\\\\x13src=x onerror=\\\"javascript:alert(1)\\\">\"}",
    statement:"{ `literal`: '<img\\x13src=x onerror=\"javascript:alert(1)\">', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<img\\x13src=x onerror=\"javascript:alert(1)\">"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<img\\x13src=x onerror=\"javascript:alert(1)\">",
        variable:"<img\\x13src=x onerror=\"javascript:alert(1)\">",
        concatenated:"<img\\x13src=x onerror=\"javascript:alert(1)\"><img\\x13src=x onerror=\"javascript:alert(1)\">"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<img\\\\x32src=x onerror=\\\"javascript:alert(1)\\\">\"}",
    statement:"{ `literal`: '<img\\x32src=x onerror=\"javascript:alert(1)\">', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<img\\x32src=x onerror=\"javascript:alert(1)\">"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<img\\x32src=x onerror=\"javascript:alert(1)\">",
        variable:"<img\\x32src=x onerror=\"javascript:alert(1)\">",
        concatenated:"<img\\x32src=x onerror=\"javascript:alert(1)\"><img\\x32src=x onerror=\"javascript:alert(1)\">"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<img\\\\x11src=x onerror=\\\"javascript:alert(1)\\\">\"}",
    statement:"{ `literal`: '<img\\x11src=x onerror=\"javascript:alert(1)\">', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<img\\x11src=x onerror=\"javascript:alert(1)\">"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<img\\x11src=x onerror=\"javascript:alert(1)\">",
        variable:"<img\\x11src=x onerror=\"javascript:alert(1)\">",
        concatenated:"<img\\x11src=x onerror=\"javascript:alert(1)\"><img\\x11src=x onerror=\"javascript:alert(1)\">"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<img \\\\x34src=x onerror=\\\"javascript:alert(1)\\\">\"}",
    statement:"{ `literal`: '<img \\x34src=x onerror=\"javascript:alert(1)\">', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<img \\x34src=x onerror=\"javascript:alert(1)\">"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<img \\x34src=x onerror=\"javascript:alert(1)\">",
        variable:"<img \\x34src=x onerror=\"javascript:alert(1)\">",
        concatenated:"<img \\x34src=x onerror=\"javascript:alert(1)\"><img \\x34src=x onerror=\"javascript:alert(1)\">"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<img \\\\x39src=x onerror=\\\"javascript:alert(1)\\\">\"}",
    statement:"{ `literal`: '<img \\x39src=x onerror=\"javascript:alert(1)\">', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<img \\x39src=x onerror=\"javascript:alert(1)\">"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<img \\x39src=x onerror=\"javascript:alert(1)\">",
        variable:"<img \\x39src=x onerror=\"javascript:alert(1)\">",
        concatenated:"<img \\x39src=x onerror=\"javascript:alert(1)\"><img \\x39src=x onerror=\"javascript:alert(1)\">"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<img \\\\x00src=x onerror=\\\"javascript:alert(1)\\\">\"}",
    statement:"{ `literal`: '<img \\x00src=x onerror=\"javascript:alert(1)\">', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<img \\x00src=x onerror=\"javascript:alert(1)\">"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<img \\x00src=x onerror=\"javascript:alert(1)\">",
        variable:"<img \\x00src=x onerror=\"javascript:alert(1)\">",
        concatenated:"<img \\x00src=x onerror=\"javascript:alert(1)\"><img \\x00src=x onerror=\"javascript:alert(1)\">"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<img src\\\\x09=x onerror=\\\"javascript:alert(1)\\\">\"}",
    statement:"{ `literal`: '<img src\\x09=x onerror=\"javascript:alert(1)\">', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<img src\\x09=x onerror=\"javascript:alert(1)\">"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<img src\\x09=x onerror=\"javascript:alert(1)\">",
        variable:"<img src\\x09=x onerror=\"javascript:alert(1)\">",
        concatenated:"<img src\\x09=x onerror=\"javascript:alert(1)\"><img src\\x09=x onerror=\"javascript:alert(1)\">"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<img src\\\\x10=x onerror=\\\"javascript:alert(1)\\\">\"}",
    statement:"{ `literal`: '<img src\\x10=x onerror=\"javascript:alert(1)\">', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<img src\\x10=x onerror=\"javascript:alert(1)\">"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<img src\\x10=x onerror=\"javascript:alert(1)\">",
        variable:"<img src\\x10=x onerror=\"javascript:alert(1)\">",
        concatenated:"<img src\\x10=x onerror=\"javascript:alert(1)\"><img src\\x10=x onerror=\"javascript:alert(1)\">"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<img src\\\\x13=x onerror=\\\"javascript:alert(1)\\\">\"}",
    statement:"{ `literal`: '<img src\\x13=x onerror=\"javascript:alert(1)\">', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<img src\\x13=x onerror=\"javascript:alert(1)\">"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<img src\\x13=x onerror=\"javascript:alert(1)\">",
        variable:"<img src\\x13=x onerror=\"javascript:alert(1)\">",
        concatenated:"<img src\\x13=x onerror=\"javascript:alert(1)\"><img src\\x13=x onerror=\"javascript:alert(1)\">"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<img src\\\\x32=x onerror=\\\"javascript:alert(1)\\\">\"}",
    statement:"{ `literal`: '<img src\\x32=x onerror=\"javascript:alert(1)\">', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<img src\\x32=x onerror=\"javascript:alert(1)\">"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<img src\\x32=x onerror=\"javascript:alert(1)\">",
        variable:"<img src\\x32=x onerror=\"javascript:alert(1)\">",
        concatenated:"<img src\\x32=x onerror=\"javascript:alert(1)\"><img src\\x32=x onerror=\"javascript:alert(1)\">"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<img src\\\\x12=x onerror=\\\"javascript:alert(1)\\\">\"}",
    statement:"{ `literal`: '<img src\\x12=x onerror=\"javascript:alert(1)\">', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<img src\\x12=x onerror=\"javascript:alert(1)\">"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<img src\\x12=x onerror=\"javascript:alert(1)\">",
        variable:"<img src\\x12=x onerror=\"javascript:alert(1)\">",
        concatenated:"<img src\\x12=x onerror=\"javascript:alert(1)\"><img src\\x12=x onerror=\"javascript:alert(1)\">"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<img src\\\\x11=x onerror=\\\"javascript:alert(1)\\\">\"}",
    statement:"{ `literal`: '<img src\\x11=x onerror=\"javascript:alert(1)\">', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<img src\\x11=x onerror=\"javascript:alert(1)\">"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<img src\\x11=x onerror=\"javascript:alert(1)\">",
        variable:"<img src\\x11=x onerror=\"javascript:alert(1)\">",
        concatenated:"<img src\\x11=x onerror=\"javascript:alert(1)\"><img src\\x11=x onerror=\"javascript:alert(1)\">"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<img src\\\\x00=x onerror=\\\"javascript:alert(1)\\\">\"}",
    statement:"{ `literal`: '<img src\\x00=x onerror=\"javascript:alert(1)\">', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<img src\\x00=x onerror=\"javascript:alert(1)\">"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<img src\\x00=x onerror=\"javascript:alert(1)\">",
        variable:"<img src\\x00=x onerror=\"javascript:alert(1)\">",
        concatenated:"<img src\\x00=x onerror=\"javascript:alert(1)\"><img src\\x00=x onerror=\"javascript:alert(1)\">"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<img src\\\\x47=x onerror=\\\"javascript:alert(1)\\\">\"}",
    statement:"{ `literal`: '<img src\\x47=x onerror=\"javascript:alert(1)\">', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<img src\\x47=x onerror=\"javascript:alert(1)\">"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<img src\\x47=x onerror=\"javascript:alert(1)\">",
        variable:"<img src\\x47=x onerror=\"javascript:alert(1)\">",
        concatenated:"<img src\\x47=x onerror=\"javascript:alert(1)\"><img src\\x47=x onerror=\"javascript:alert(1)\">"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<img src=x\\\\x09onerror=\\\"javascript:alert(1)\\\">\"}",
    statement:"{ `literal`: '<img src=x\\x09onerror=\"javascript:alert(1)\">', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<img src=x\\x09onerror=\"javascript:alert(1)\">"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<img src=x\\x09onerror=\"javascript:alert(1)\">",
        variable:"<img src=x\\x09onerror=\"javascript:alert(1)\">",
        concatenated:"<img src=x\\x09onerror=\"javascript:alert(1)\"><img src=x\\x09onerror=\"javascript:alert(1)\">"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<img src=x\\\\x10onerror=\\\"javascript:alert(1)\\\">\"}",
    statement:"{ `literal`: '<img src=x\\x10onerror=\"javascript:alert(1)\">', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<img src=x\\x10onerror=\"javascript:alert(1)\">"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<img src=x\\x10onerror=\"javascript:alert(1)\">",
        variable:"<img src=x\\x10onerror=\"javascript:alert(1)\">",
        concatenated:"<img src=x\\x10onerror=\"javascript:alert(1)\"><img src=x\\x10onerror=\"javascript:alert(1)\">"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<img src=x\\\\x11onerror=\\\"javascript:alert(1)\\\">\"}",
    statement:"{ `literal`: '<img src=x\\x11onerror=\"javascript:alert(1)\">', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<img src=x\\x11onerror=\"javascript:alert(1)\">"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<img src=x\\x11onerror=\"javascript:alert(1)\">",
        variable:"<img src=x\\x11onerror=\"javascript:alert(1)\">",
        concatenated:"<img src=x\\x11onerror=\"javascript:alert(1)\"><img src=x\\x11onerror=\"javascript:alert(1)\">"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<img src=x\\\\x12onerror=\\\"javascript:alert(1)\\\">\"}",
    statement:"{ `literal`: '<img src=x\\x12onerror=\"javascript:alert(1)\">', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<img src=x\\x12onerror=\"javascript:alert(1)\">"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<img src=x\\x12onerror=\"javascript:alert(1)\">",
        variable:"<img src=x\\x12onerror=\"javascript:alert(1)\">",
        concatenated:"<img src=x\\x12onerror=\"javascript:alert(1)\"><img src=x\\x12onerror=\"javascript:alert(1)\">"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<img src=x\\\\x13onerror=\\\"javascript:alert(1)\\\">\"}",
    statement:"{ `literal`: '<img src=x\\x13onerror=\"javascript:alert(1)\">', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<img src=x\\x13onerror=\"javascript:alert(1)\">"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<img src=x\\x13onerror=\"javascript:alert(1)\">",
        variable:"<img src=x\\x13onerror=\"javascript:alert(1)\">",
        concatenated:"<img src=x\\x13onerror=\"javascript:alert(1)\"><img src=x\\x13onerror=\"javascript:alert(1)\">"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<img[a][b][c]src[d]=x[e]onerror=[f]\\\"alert(1)\\\">\"}",
    statement:"{ `literal`: '<img[a][b][c]src[d]=x[e]onerror=[f]\"alert(1)\">', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<img[a][b][c]src[d]=x[e]onerror=[f]\"alert(1)\">"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<img[a][b][c]src[d]=x[e]onerror=[f]\"alert(1)\">",
        variable:"<img[a][b][c]src[d]=x[e]onerror=[f]\"alert(1)\">",
        concatenated:"<img[a][b][c]src[d]=x[e]onerror=[f]\"alert(1)\"><img[a][b][c]src[d]=x[e]onerror=[f]\"alert(1)\">"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<img src=x onerror=\\\\x09\\\"javascript:alert(1)\\\">\"}",
    statement:"{ `literal`: '<img src=x onerror=\\x09\"javascript:alert(1)\">', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<img src=x onerror=\\x09\"javascript:alert(1)\">"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<img src=x onerror=\\x09\"javascript:alert(1)\">",
        variable:"<img src=x onerror=\\x09\"javascript:alert(1)\">",
        concatenated:"<img src=x onerror=\\x09\"javascript:alert(1)\"><img src=x onerror=\\x09\"javascript:alert(1)\">"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<img src=x onerror=\\\\x10\\\"javascript:alert(1)\\\">\"}",
    statement:"{ `literal`: '<img src=x onerror=\\x10\"javascript:alert(1)\">', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<img src=x onerror=\\x10\"javascript:alert(1)\">"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<img src=x onerror=\\x10\"javascript:alert(1)\">",
        variable:"<img src=x onerror=\\x10\"javascript:alert(1)\">",
        concatenated:"<img src=x onerror=\\x10\"javascript:alert(1)\"><img src=x onerror=\\x10\"javascript:alert(1)\">"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<img src=x onerror=\\\\x11\\\"javascript:alert(1)\\\">\"}",
    statement:"{ `literal`: '<img src=x onerror=\\x11\"javascript:alert(1)\">', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<img src=x onerror=\\x11\"javascript:alert(1)\">"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<img src=x onerror=\\x11\"javascript:alert(1)\">",
        variable:"<img src=x onerror=\\x11\"javascript:alert(1)\">",
        concatenated:"<img src=x onerror=\\x11\"javascript:alert(1)\"><img src=x onerror=\\x11\"javascript:alert(1)\">"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<img src=x onerror=\\\\x12\\\"javascript:alert(1)\\\">\"}",
    statement:"{ `literal`: '<img src=x onerror=\\x12\"javascript:alert(1)\">', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<img src=x onerror=\\x12\"javascript:alert(1)\">"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<img src=x onerror=\\x12\"javascript:alert(1)\">",
        variable:"<img src=x onerror=\\x12\"javascript:alert(1)\">",
        concatenated:"<img src=x onerror=\\x12\"javascript:alert(1)\"><img src=x onerror=\\x12\"javascript:alert(1)\">"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<img src=x onerror=\\\\x32\\\"javascript:alert(1)\\\">\"}",
    statement:"{ `literal`: '<img src=x onerror=\\x32\"javascript:alert(1)\">', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<img src=x onerror=\\x32\"javascript:alert(1)\">"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<img src=x onerror=\\x32\"javascript:alert(1)\">",
        variable:"<img src=x onerror=\\x32\"javascript:alert(1)\">",
        concatenated:"<img src=x onerror=\\x32\"javascript:alert(1)\"><img src=x onerror=\\x32\"javascript:alert(1)\">"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<img src=x onerror=\\\\x00\\\"javascript:alert(1)\\\">\"}",
    statement:"{ `literal`: '<img src=x onerror=\\x00\"javascript:alert(1)\">', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<img src=x onerror=\\x00\"javascript:alert(1)\">"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<img src=x onerror=\\x00\"javascript:alert(1)\">",
        variable:"<img src=x onerror=\\x00\"javascript:alert(1)\">",
        concatenated:"<img src=x onerror=\\x00\"javascript:alert(1)\"><img src=x onerror=\\x00\"javascript:alert(1)\">"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=java&#1&#2&#3&#4&#5&#6&#7&#8&#11&#12script:javascript:alert(1)>XXX</a>\"}",
    statement:"{ `literal`: '<a href=java&#1&#2&#3&#4&#5&#6&#7&#8&#11&#12script:javascript:alert(1)>XXX</a>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=java&#1&#2&#3&#4&#5&#6&#7&#8&#11&#12script:javascript:alert(1)>XXX</a>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=java&#1&#2&#3&#4&#5&#6&#7&#8&#11&#12script:javascript:alert(1)>XXX</a>",
        variable:"<a href=java&#1&#2&#3&#4&#5&#6&#7&#8&#11&#12script:javascript:alert(1)>XXX</a>",
        concatenated:"<a href=java&#1&#2&#3&#4&#5&#6&#7&#8&#11&#12script:javascript:alert(1)>XXX</a><a href=java&#1&#2&#3&#4&#5&#6&#7&#8&#11&#12script:javascript:alert(1)>XXX</a>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<img src=\\\"x` `<script>javascript:alert(1)</script>\\\"` `>\"}",
    statement:"{ `literal`: '<img src=\"x` `<script>javascript:alert(1)</script>\"` `>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<img src=\"x` `<script>javascript:alert(1)</script>\"` `>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<img src=\"x` `<script>javascript:alert(1)</script>\"` `>",
        variable:"<img src=\"x` `<script>javascript:alert(1)</script>\"` `>",
        concatenated:"<img src=\"x` `<script>javascript:alert(1)</script>\"` `><img src=\"x` `<script>javascript:alert(1)</script>\"` `>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<title onpropertychange=javascript:alert(1)></title><title title=>\"}",
    statement:"{ `literal`: '<title onpropertychange=javascript:alert(1)></title><title title=>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<title onpropertychange=javascript:alert(1)></title><title title=>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<title onpropertychange=javascript:alert(1)></title><title title=>",
        variable:"<title onpropertychange=javascript:alert(1)></title><title title=>",
        concatenated:"<title onpropertychange=javascript:alert(1)></title><title title=><title onpropertychange=javascript:alert(1)></title><title title=>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<a href=http://foo.bar/#x=`y></a><img alt=\\\"`><img src=x:x onerror=javascript:alert(1)></a>\\\">\"}",
    statement:"{ `literal`: '<a href=http://foo.bar/#x=`y></a><img alt=\"`><img src=x:x onerror=javascript:alert(1)></a>\">', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<a href=http://foo.bar/#x=`y></a><img alt=\"`><img src=x:x onerror=javascript:alert(1)></a>\">"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<a href=http://foo.bar/#x=`y></a><img alt=\"`><img src=x:x onerror=javascript:alert(1)></a>\">",
        variable:"<a href=http://foo.bar/#x=`y></a><img alt=\"`><img src=x:x onerror=javascript:alert(1)></a>\">",
        concatenated:"<a href=http://foo.bar/#x=`y></a><img alt=\"`><img src=x:x onerror=javascript:alert(1)></a>\"><a href=http://foo.bar/#x=`y></a><img alt=\"`><img src=x:x onerror=javascript:alert(1)></a>\">"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<!--[if]><script>javascript:alert(1)</script -->\"}",
    statement:"{ `literal`: '<!--[if]><script>javascript:alert(1)</script -->', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<!--[if]><script>javascript:alert(1)</script -->"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<!--[if]><script>javascript:alert(1)</script -->",
        variable:"<!--[if]><script>javascript:alert(1)</script -->",
        concatenated:"<!--[if]><script>javascript:alert(1)</script --><!--[if]><script>javascript:alert(1)</script -->"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<!--[if<img src=x onerror=javascript:alert(1)//]> -->\"}",
    statement:"{ `literal`: '<!--[if<img src=x onerror=javascript:alert(1)//]> -->', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<!--[if<img src=x onerror=javascript:alert(1)//]> -->"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<!--[if<img src=x onerror=javascript:alert(1)//]> -->",
        variable:"<!--[if<img src=x onerror=javascript:alert(1)//]> -->",
        concatenated:"<!--[if<img src=x onerror=javascript:alert(1)//]> --><!--[if<img src=x onerror=javascript:alert(1)//]> -->"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<script src=\\\"/\\\\%(jscript)s\\\"></script>\"}",
    statement:"{ `literal`: '<script src=\"/\\%(jscript)s\"></script>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<script src=\"/\\%(jscript)s\"></script>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<script src=\"/\\%(jscript)s\"></script>",
        variable:"<script src=\"/\\%(jscript)s\"></script>",
        concatenated:"<script src=\"/\\%(jscript)s\"></script><script src=\"/\\%(jscript)s\"></script>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<script src=\\\"\\\\\\\\%(jscript)s\\\"></script>\"}",
    statement:"{ `literal`: '<script src=\"\\\\%(jscript)s\"></script>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<script src=\"\\\\%(jscript)s\"></script>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<script src=\"\\\\%(jscript)s\"></script>",
        variable:"<script src=\"\\\\%(jscript)s\"></script>",
        concatenated:"<script src=\"\\\\%(jscript)s\"></script><script src=\"\\\\%(jscript)s\"></script>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<IMG \\\"\\\"\\\"><SCRIPT>alert(\\\"XSS\\\")</SCRIPT>\\\">\"}",
    statement:"{ `literal`: '<IMG \"\"\"><SCRIPT>alert(\"XSS\")</SCRIPT>\">', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<IMG \"\"\"><SCRIPT>alert(\"XSS\")</SCRIPT>\">"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<IMG \"\"\"><SCRIPT>alert(\"XSS\")</SCRIPT>\">",
        variable:"<IMG \"\"\"><SCRIPT>alert(\"XSS\")</SCRIPT>\">",
        concatenated:"<IMG \"\"\"><SCRIPT>alert(\"XSS\")</SCRIPT>\"><IMG \"\"\"><SCRIPT>alert(\"XSS\")</SCRIPT>\">"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<IMG SRC=javascript:alert(String.fromCharCode(88,83,83))>\"}",
    statement:"{ `literal`: '<IMG SRC=javascript:alert(String.fromCharCode(88,83,83))>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<IMG SRC=javascript:alert(String.fromCharCode(88,83,83))>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<IMG SRC=javascript:alert(String.fromCharCode(88,83,83))>",
        variable:"<IMG SRC=javascript:alert(String.fromCharCode(88,83,83))>",
        concatenated:"<IMG SRC=javascript:alert(String.fromCharCode(88,83,83))><IMG SRC=javascript:alert(String.fromCharCode(88,83,83))>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<IMG SRC=&#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112;&#116;&#58;&#97;&#108;&#101;&#114;&#116;&#40;&#39;&#88;&#83;&#83;&#39;&#41;>\"}",
    statement:"{ `literal`: '<IMG SRC=&#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112;&#116;&#58;&#97;&#108;&#101;&#114;&#116;&#40;&#39;&#88;&#83;&#83;&#39;&#41;>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<IMG SRC=&#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112;&#116;&#58;&#97;&#108;&#101;&#114;&#116;&#40;&#39;&#88;&#83;&#83;&#39;&#41;>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<IMG SRC=&#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112;&#116;&#58;&#97;&#108;&#101;&#114;&#116;&#40;&#39;&#88;&#83;&#83;&#39;&#41;>",
        variable:"<IMG SRC=&#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112;&#116;&#58;&#97;&#108;&#101;&#114;&#116;&#40;&#39;&#88;&#83;&#83;&#39;&#41;>",
        concatenated:"<IMG SRC=&#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112;&#116;&#58;&#97;&#108;&#101;&#114;&#116;&#40;&#39;&#88;&#83;&#83;&#39;&#41;><IMG SRC=&#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112;&#116;&#58;&#97;&#108;&#101;&#114;&#116;&#40;&#39;&#88;&#83;&#83;&#39;&#41;>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<IMG SRC=&#0000106&#0000097&#0000118&#0000097&#0000115&#0000099&#0000114&#0000105&#0000112&#0000116&#0000058&#0000097&#0000108&#0000101&#0000114&#0000116&#0000040&#0000039&#0000088&#0000083&#0000083&#0000039&#0000041>\"}",
    statement:"{ `literal`: '<IMG SRC=&#0000106&#0000097&#0000118&#0000097&#0000115&#0000099&#0000114&#0000105&#0000112&#0000116&#0000058&#0000097&#0000108&#0000101&#0000114&#0000116&#0000040&#0000039&#0000088&#0000083&#0000083&#0000039&#0000041>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<IMG SRC=&#0000106&#0000097&#0000118&#0000097&#0000115&#0000099&#0000114&#0000105&#0000112&#0000116&#0000058&#0000097&#0000108&#0000101&#0000114&#0000116&#0000040&#0000039&#0000088&#0000083&#0000083&#0000039&#0000041>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<IMG SRC=&#0000106&#0000097&#0000118&#0000097&#0000115&#0000099&#0000114&#0000105&#0000112&#0000116&#0000058&#0000097&#0000108&#0000101&#0000114&#0000116&#0000040&#0000039&#0000088&#0000083&#0000083&#0000039&#0000041>",
        variable:"<IMG SRC=&#0000106&#0000097&#0000118&#0000097&#0000115&#0000099&#0000114&#0000105&#0000112&#0000116&#0000058&#0000097&#0000108&#0000101&#0000114&#0000116&#0000040&#0000039&#0000088&#0000083&#0000083&#0000039&#0000041>",
        concatenated:"<IMG SRC=&#0000106&#0000097&#0000118&#0000097&#0000115&#0000099&#0000114&#0000105&#0000112&#0000116&#0000058&#0000097&#0000108&#0000101&#0000114&#0000116&#0000040&#0000039&#0000088&#0000083&#0000083&#0000039&#0000041><IMG SRC=&#0000106&#0000097&#0000118&#0000097&#0000115&#0000099&#0000114&#0000105&#0000112&#0000116&#0000058&#0000097&#0000108&#0000101&#0000114&#0000116&#0000040&#0000039&#0000088&#0000083&#0000083&#0000039&#0000041>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<IMG SRC=&#x6A&#x61&#x76&#x61&#x73&#x63&#x72&#x69&#x70&#x74&#x3A&#x61&#x6C&#x65&#x72&#x74&#x28&#x27&#x58&#x53&#x53&#x27&#x29>\"}",
    statement:"{ `literal`: '<IMG SRC=&#x6A&#x61&#x76&#x61&#x73&#x63&#x72&#x69&#x70&#x74&#x3A&#x61&#x6C&#x65&#x72&#x74&#x28&#x27&#x58&#x53&#x53&#x27&#x29>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<IMG SRC=&#x6A&#x61&#x76&#x61&#x73&#x63&#x72&#x69&#x70&#x74&#x3A&#x61&#x6C&#x65&#x72&#x74&#x28&#x27&#x58&#x53&#x53&#x27&#x29>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<IMG SRC=&#x6A&#x61&#x76&#x61&#x73&#x63&#x72&#x69&#x70&#x74&#x3A&#x61&#x6C&#x65&#x72&#x74&#x28&#x27&#x58&#x53&#x53&#x27&#x29>",
        variable:"<IMG SRC=&#x6A&#x61&#x76&#x61&#x73&#x63&#x72&#x69&#x70&#x74&#x3A&#x61&#x6C&#x65&#x72&#x74&#x28&#x27&#x58&#x53&#x53&#x27&#x29>",
        concatenated:"<IMG SRC=&#x6A&#x61&#x76&#x61&#x73&#x63&#x72&#x69&#x70&#x74&#x3A&#x61&#x6C&#x65&#x72&#x74&#x28&#x27&#x58&#x53&#x53&#x27&#x29><IMG SRC=&#x6A&#x61&#x76&#x61&#x73&#x63&#x72&#x69&#x70&#x74&#x3A&#x61&#x6C&#x65&#x72&#x74&#x28&#x27&#x58&#x53&#x53&#x27&#x29>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<SCRIPT/XSS SRC=\\\"http://ha.ckers.org/xss.js\\\"></SCRIPT>\"}",
    statement:"{ `literal`: '<SCRIPT/XSS SRC=\"http://ha.ckers.org/xss.js\"></SCRIPT>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<SCRIPT/XSS SRC=\"http://ha.ckers.org/xss.js\"></SCRIPT>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<SCRIPT/XSS SRC=\"http://ha.ckers.org/xss.js\"></SCRIPT>",
        variable:"<SCRIPT/XSS SRC=\"http://ha.ckers.org/xss.js\"></SCRIPT>",
        concatenated:"<SCRIPT/XSS SRC=\"http://ha.ckers.org/xss.js\"></SCRIPT><SCRIPT/XSS SRC=\"http://ha.ckers.org/xss.js\"></SCRIPT>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<BODY onload!#%&()*~+-_.,:;?@[/|\\\\]^`=alert(\\\"XSS\\\")>\"}",
    statement:"{ `literal`: '<BODY onload!#$%&()*~+-_.,:;?@[/|\\]^`=alert(\"XSS\")>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<BODY onload!#$%&()*~+-_.,:;?@[/|\\]^`=alert(\"XSS\")>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<BODY onload!#$%&()*~+-_.,:;?@[/|\\]^`=alert(\"XSS\")>",
        variable:"<BODY onload!#$%&()*~+-_.,:;?@[/|\\]^`=alert(\"XSS\")>",
        concatenated:"<BODY onload!#$%&()*~+-_.,:;?@[/|\\]^`=alert(\"XSS\")><BODY onload!#$%&()*~+-_.,:;?@[/|\\]^`=alert(\"XSS\")>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<SCRIPT/SRC=\\\"http://ha.ckers.org/xss.js\\\"></SCRIPT>\"}",
    statement:"{ `literal`: '<SCRIPT/SRC=\"http://ha.ckers.org/xss.js\"></SCRIPT>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<SCRIPT/SRC=\"http://ha.ckers.org/xss.js\"></SCRIPT>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<SCRIPT/SRC=\"http://ha.ckers.org/xss.js\"></SCRIPT>",
        variable:"<SCRIPT/SRC=\"http://ha.ckers.org/xss.js\"></SCRIPT>",
        concatenated:"<SCRIPT/SRC=\"http://ha.ckers.org/xss.js\"></SCRIPT><SCRIPT/SRC=\"http://ha.ckers.org/xss.js\"></SCRIPT>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<<SCRIPT>alert(\\\"XSS\\\");//<</SCRIPT>\"}",
    statement:"{ `literal`: '<<SCRIPT>alert(\"XSS\");//<</SCRIPT>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<<SCRIPT>alert(\"XSS\");//<</SCRIPT>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<<SCRIPT>alert(\"XSS\");//<</SCRIPT>",
        variable:"<<SCRIPT>alert(\"XSS\");//<</SCRIPT>",
        concatenated:"<<SCRIPT>alert(\"XSS\");//<</SCRIPT><<SCRIPT>alert(\"XSS\");//<</SCRIPT>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<SCRIPT SRC=http://ha.ckers.org/xss.js?< B >\"}",
    statement:"{ `literal`: '<SCRIPT SRC=http://ha.ckers.org/xss.js?< B >', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<SCRIPT SRC=http://ha.ckers.org/xss.js?< B >"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<SCRIPT SRC=http://ha.ckers.org/xss.js?< B >",
        variable:"<SCRIPT SRC=http://ha.ckers.org/xss.js?< B >",
        concatenated:"<SCRIPT SRC=http://ha.ckers.org/xss.js?< B ><SCRIPT SRC=http://ha.ckers.org/xss.js?< B >"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<SCRIPT SRC=//ha.ckers.org/.j>\"}",
    statement:"{ `literal`: '<SCRIPT SRC=//ha.ckers.org/.j>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<SCRIPT SRC=//ha.ckers.org/.j>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<SCRIPT SRC=//ha.ckers.org/.j>",
        variable:"<SCRIPT SRC=//ha.ckers.org/.j>",
        concatenated:"<SCRIPT SRC=//ha.ckers.org/.j><SCRIPT SRC=//ha.ckers.org/.j>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<iframe src=http://ha.ckers.org/scriptlet.html <\"}",
    statement:"{ `literal`: '<iframe src=http://ha.ckers.org/scriptlet.html <', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<iframe src=http://ha.ckers.org/scriptlet.html <"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<iframe src=http://ha.ckers.org/scriptlet.html <",
        variable:"<iframe src=http://ha.ckers.org/scriptlet.html <",
        concatenated:"<iframe src=http://ha.ckers.org/scriptlet.html <<iframe src=http://ha.ckers.org/scriptlet.html <"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<u oncopy=alert()> Copy me</u>\"}",
    statement:"{ `literal`: '<u oncopy=alert()> Copy me</u>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<u oncopy=alert()> Copy me</u>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<u oncopy=alert()> Copy me</u>",
        variable:"<u oncopy=alert()> Copy me</u>",
        concatenated:"<u oncopy=alert()> Copy me</u><u oncopy=alert()> Copy me</u>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<i onwheel=alert(1)> Scroll over me </i>\"}",
    statement:"{ `literal`: '<i onwheel=alert(1)> Scroll over me </i>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<i onwheel=alert(1)> Scroll over me </i>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<i onwheel=alert(1)> Scroll over me </i>",
        variable:"<i onwheel=alert(1)> Scroll over me </i>",
        concatenated:"<i onwheel=alert(1)> Scroll over me </i><i onwheel=alert(1)> Scroll over me </i>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<plaintext>\"}",
    statement:"{ `literal`: '<plaintext>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<plaintext>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<plaintext>",
        variable:"<plaintext>",
        concatenated:"<plaintext><plaintext>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"http://a/%%30%30\"}",
    statement:"{ `literal`: 'http://a/%%30%30', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"http://a/%%30%30"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"http://a/%%30%30",
        variable:"http://a/%%30%30",
        concatenated:"http://a/%%30%30http://a/%%30%30"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"</textarea><script>alert(123)</script>\"}",
    statement:"{ `literal`: '</textarea><script>alert(123)</script>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"</textarea><script>alert(123)</script>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"</textarea><script>alert(123)</script>",
        variable:"</textarea><script>alert(123)</script>",
        concatenated:"</textarea><script>alert(123)</script></textarea><script>alert(123)</script>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"1;DROP TABLE users\"}",
    statement:"{ `literal`: '1;DROP TABLE users', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"1;DROP TABLE users"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"1;DROP TABLE users",
        variable:"1;DROP TABLE users",
        concatenated:"1;DROP TABLE users1;DROP TABLE users"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\" \"}",
    statement:"{ `literal`: ' ', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:" "
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:" ",
        variable:" ",
        concatenated:"  "
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"%\"}",
    statement:"{ `literal`: '%', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"%"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"%",
        variable:"%",
        concatenated:"%%"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"_\"}",
    statement:"{ `literal`: '_', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"_"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"_",
        variable:"_",
        concatenated:"__"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"-\"}",
    statement:"{ `literal`: '-', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"-"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"-",
        variable:"-",
        concatenated:"--"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"--\"}",
    statement:"{ `literal`: '--', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"--"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"--",
        variable:"--",
        concatenated:"----"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"--version\"}",
    statement:"{ `literal`: '--version', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"--version"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"--version",
        variable:"--version",
        concatenated:"--version--version"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"--help\"}",
    statement:"{ `literal`: '--help', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"--help"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"--help",
        variable:"--help",
        concatenated:"--help--help"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"USER\"}",
    statement:"{ `literal`: '$USER', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"$USER"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"$USER",
        variable:"$USER",
        concatenated:"$USER$USER"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"/dev/null; touch /tmp/blns.fail ; echo\"}",
    statement:"{ `literal`: '/dev/null; touch /tmp/blns.fail ; echo', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"/dev/null; touch /tmp/blns.fail ; echo"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"/dev/null; touch /tmp/blns.fail ; echo",
        variable:"/dev/null; touch /tmp/blns.fail ; echo",
        concatenated:"/dev/null; touch /tmp/blns.fail ; echo/dev/null; touch /tmp/blns.fail ; echo"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"`touch /tmp/blns.fail`\"}",
    statement:"{ `literal`: '`touch /tmp/blns.fail`', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"`touch /tmp/blns.fail`"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"`touch /tmp/blns.fail`",
        variable:"`touch /tmp/blns.fail`",
        concatenated:"`touch /tmp/blns.fail``touch /tmp/blns.fail`"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"(touch /tmp/blns.fail)\"}",
    statement:"{ `literal`: '$(touch /tmp/blns.fail)', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"$(touch /tmp/blns.fail)"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"$(touch /tmp/blns.fail)",
        variable:"$(touch /tmp/blns.fail)",
        concatenated:"$(touch /tmp/blns.fail)$(touch /tmp/blns.fail)"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"@{[system \\\"touch /tmp/blns.fail\\\"]}\"}",
    statement:"{ `literal`: '@{[system \"touch /tmp/blns.fail\"]}', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"@{[system \"touch /tmp/blns.fail\"]}"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"@{[system \"touch /tmp/blns.fail\"]}",
        variable:"@{[system \"touch /tmp/blns.fail\"]}",
        concatenated:"@{[system \"touch /tmp/blns.fail\"]}@{[system \"touch /tmp/blns.fail\"]}"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"System(\\\"ls -al /\\\")\"}",
    statement:"{ `literal`: 'System(\"ls -al /\")', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"System(\"ls -al /\")"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"System(\"ls -al /\")",
        variable:"System(\"ls -al /\")",
        concatenated:"System(\"ls -al /\")System(\"ls -al /\")"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"`ls -al /`\"}",
    statement:"{ `literal`: '`ls -al /`', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"`ls -al /`"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"`ls -al /`",
        variable:"`ls -al /`",
        concatenated:"`ls -al /``ls -al /`"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"Kernel.exec(\\\"ls -al /\\\")\"}",
    statement:"{ `literal`: 'Kernel.exec(\"ls -al /\")', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"Kernel.exec(\"ls -al /\")"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"Kernel.exec(\"ls -al /\")",
        variable:"Kernel.exec(\"ls -al /\")",
        concatenated:"Kernel.exec(\"ls -al /\")Kernel.exec(\"ls -al /\")"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"Kernel.exit(1)\"}",
    statement:"{ `literal`: 'Kernel.exit(1)', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"Kernel.exit(1)"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"Kernel.exit(1)",
        variable:"Kernel.exit(1)",
        concatenated:"Kernel.exit(1)Kernel.exit(1)"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?><!DOCTYPE foo [ <!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \\\"file:///etc/passwd\\\" >]><foo>&xxe;</foo>\"}",
    statement:"{ `literal`: '<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><!DOCTYPE foo [ <!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]><foo>&xxe;</foo>', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><!DOCTYPE foo [ <!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]><foo>&xxe;</foo>"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><!DOCTYPE foo [ <!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]><foo>&xxe;</foo>",
        variable:"<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><!DOCTYPE foo [ <!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]><foo>&xxe;</foo>",
        concatenated:"<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><!DOCTYPE foo [ <!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]><foo>&xxe;</foo><?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><!DOCTYPE foo [ <!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]><foo>&xxe;</foo>"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"HOME\"}",
    statement:"{ `literal`: '$HOME', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"$HOME"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"$HOME",
        variable:"$HOME",
        concatenated:"$HOME$HOME"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"%d\"}",
    statement:"{ `literal`: '%d', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"%d"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"%d",
        variable:"%d",
        concatenated:"%d%d"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"%s\"}",
    statement:"{ `literal`: '%s', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"%s"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"%s",
        variable:"%s",
        concatenated:"%s%s"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"{0}\"}",
    statement:"{ `literal`: '{0}', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"{0}"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"{0}",
        variable:"{0}",
        concatenated:"{0}{0}"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"%*.*s\"}",
    statement:"{ `literal`: '%*.*s', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"%*.*s"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"%*.*s",
        variable:"%*.*s",
        concatenated:"%*.*s%*.*s"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"File:///\"}",
    statement:"{ `literal`: 'File:///', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"File:///"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"File:///",
        variable:"File:///",
        concatenated:"File:///File:///"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"../../../../../../../../../../../etc/passwd%00\"}",
    statement:"{ `literal`: '../../../../../../../../../../../etc/passwd%00', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"../../../../../../../../../../../etc/passwd%00"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"../../../../../../../../../../../etc/passwd%00",
        variable:"../../../../../../../../../../../etc/passwd%00",
        concatenated:"../../../../../../../../../../../etc/passwd%00../../../../../../../../../../../etc/passwd%00"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"../../../../../../../../../../../etc/hosts\"}",
    statement:"{ `literal`: '../../../../../../../../../../../etc/hosts', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"../../../../../../../../../../../etc/hosts"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"../../../../../../../../../../../etc/hosts",
        variable:"../../../../../../../../../../../etc/hosts",
        concatenated:"../../../../../../../../../../../etc/hosts../../../../../../../../../../../etc/hosts"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"() { 0; }; touch /tmp/blns.shellshock1.fail;\"}",
    statement:"{ `literal`: '() { 0; }; touch /tmp/blns.shellshock1.fail;', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"() { 0; }; touch /tmp/blns.shellshock1.fail;"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"() { 0; }; touch /tmp/blns.shellshock1.fail;",
        variable:"() { 0; }; touch /tmp/blns.shellshock1.fail;",
        concatenated:"() { 0; }; touch /tmp/blns.shellshock1.fail;() { 0; }; touch /tmp/blns.shellshock1.fail;"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"() { _; } >_[(())] { touch /tmp/blns.shellshock2.fail; }\"}",
    statement:"{ `literal`: '() { _; } >_[$($())] { touch /tmp/blns.shellshock2.fail; }', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"() { _; } >_[$($())] { touch /tmp/blns.shellshock2.fail; }"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"() { _; } >_[$($())] { touch /tmp/blns.shellshock2.fail; }",
        variable:"() { _; } >_[$($())] { touch /tmp/blns.shellshock2.fail; }",
        concatenated:"() { _; } >_[$($())] { touch /tmp/blns.shellshock2.fail; }() { _; } >_[$($())] { touch /tmp/blns.shellshock2.fail; }"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"+++ATH0\"}",
    statement:"{ `literal`: '+++ATH0', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"+++ATH0"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"+++ATH0",
        variable:"+++ATH0",
        concatenated:"+++ATH0+++ATH0"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"CON\"}",
    statement:"{ `literal`: 'CON', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"CON"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"CON",
        variable:"CON",
        concatenated:"CONCON"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"PRN\"}",
    statement:"{ `literal`: 'PRN', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"PRN"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"PRN",
        variable:"PRN",
        concatenated:"PRNPRN"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"AUX\"}",
    statement:"{ `literal`: 'AUX', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"AUX"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"AUX",
        variable:"AUX",
        concatenated:"AUXAUX"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"CLOCK\"}",
    statement:"{ `literal`: 'CLOCK$', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"CLOCK$"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"CLOCK$",
        variable:"CLOCK$",
        concatenated:"CLOCK$CLOCK$"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"NUL\"}",
    statement:"{ `literal`: 'NUL', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"NUL"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"NUL",
        variable:"NUL",
        concatenated:"NULNUL"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"A:\"}",
    statement:"{ `literal`: 'A:', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"A:"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"A:",
        variable:"A:",
        concatenated:"A:A:"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"ZZ:\"}",
    statement:"{ `literal`: 'ZZ:', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"ZZ:"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"ZZ:",
        variable:"ZZ:",
        concatenated:"ZZ:ZZ:"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"COM1\"}",
    statement:"{ `literal`: 'COM1', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"COM1"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"COM1",
        variable:"COM1",
        concatenated:"COM1COM1"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"LPT1\"}",
    statement:"{ `literal`: 'LPT1', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"LPT1"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"LPT1",
        variable:"LPT1",
        concatenated:"LPT1LPT1"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"LPT2\"}",
    statement:"{ `literal`: 'LPT2', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"LPT2"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"LPT2",
        variable:"LPT2",
        concatenated:"LPT2LPT2"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"LPT3\"}",
    statement:"{ `literal`: 'LPT3', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"LPT3"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"LPT3",
        variable:"LPT3",
        concatenated:"LPT3LPT3"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"COM2\"}",
    statement:"{ `literal`: 'COM2', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"COM2"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"COM2",
        variable:"COM2",
        concatenated:"COM2COM2"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"COM3\"}",
    statement:"{ `literal`: 'COM3', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"COM3"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"COM3",
        variable:"COM3",
        concatenated:"COM3COM3"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"COM4\"}",
    statement:"{ `literal`: 'COM4', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"COM4"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"COM4",
        variable:"COM4",
        concatenated:"COM4COM4"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"DCC SEND STARTKEYLOGGER 0 0 0\"}",
    statement:"{ `literal`: 'DCC SEND STARTKEYLOGGER 0 0 0', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"DCC SEND STARTKEYLOGGER 0 0 0"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"DCC SEND STARTKEYLOGGER 0 0 0",
        variable:"DCC SEND STARTKEYLOGGER 0 0 0",
        concatenated:"DCC SEND STARTKEYLOGGER 0 0 0DCC SEND STARTKEYLOGGER 0 0 0"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"Scunthorpe General Hospital\"}",
    statement:"{ `literal`: 'Scunthorpe General Hospital', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"Scunthorpe General Hospital"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"Scunthorpe General Hospital",
        variable:"Scunthorpe General Hospital",
        concatenated:"Scunthorpe General HospitalScunthorpe General Hospital"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"Penistone Community Church\"}",
    statement:"{ `literal`: 'Penistone Community Church', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"Penistone Community Church"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"Penistone Community Church",
        variable:"Penistone Community Church",
        concatenated:"Penistone Community ChurchPenistone Community Church"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"Lightwater Country Park\"}",
    statement:"{ `literal`: 'Lightwater Country Park', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"Lightwater Country Park"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"Lightwater Country Park",
        variable:"Lightwater Country Park",
        concatenated:"Lightwater Country ParkLightwater Country Park"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"Jimmy Clitheroe\"}",
    statement:"{ `literal`: 'Jimmy Clitheroe', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"Jimmy Clitheroe"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"Jimmy Clitheroe",
        variable:"Jimmy Clitheroe",
        concatenated:"Jimmy ClitheroeJimmy Clitheroe"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"Horniman Museum\"}",
    statement:"{ `literal`: 'Horniman Museum', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"Horniman Museum"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"Horniman Museum",
        variable:"Horniman Museum",
        concatenated:"Horniman MuseumHorniman Museum"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"shitake mushrooms\"}",
    statement:"{ `literal`: 'shitake mushrooms', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"shitake mushrooms"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"shitake mushrooms",
        variable:"shitake mushrooms",
        concatenated:"shitake mushroomsshitake mushrooms"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"RomansInSussex.co.uk\"}",
    statement:"{ `literal`: 'RomansInSussex.co.uk', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"RomansInSussex.co.uk"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"RomansInSussex.co.uk",
        variable:"RomansInSussex.co.uk",
        concatenated:"RomansInSussex.co.ukRomansInSussex.co.uk"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"http://www.cum.qc.ca/\"}",
    statement:"{ `literal`: 'http://www.cum.qc.ca/', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"http://www.cum.qc.ca/"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"http://www.cum.qc.ca/",
        variable:"http://www.cum.qc.ca/",
        concatenated:"http://www.cum.qc.ca/http://www.cum.qc.ca/"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"Craig Cockburn, Software Specialist\"}",
    statement:"{ `literal`: 'Craig Cockburn, Software Specialist', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"Craig Cockburn, Software Specialist"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"Craig Cockburn, Software Specialist",
        variable:"Craig Cockburn, Software Specialist",
        concatenated:"Craig Cockburn, Software SpecialistCraig Cockburn, Software Specialist"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"Linda Callahan\"}",
    statement:"{ `literal`: 'Linda Callahan', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"Linda Callahan"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"Linda Callahan",
        variable:"Linda Callahan",
        concatenated:"Linda CallahanLinda Callahan"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"Dr. Herman I. Libshitz\"}",
    statement:"{ `literal`: 'Dr. Herman I. Libshitz', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"Dr. Herman I. Libshitz"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"Dr. Herman I. Libshitz",
        variable:"Dr. Herman I. Libshitz",
        concatenated:"Dr. Herman I. LibshitzDr. Herman I. Libshitz"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"magna cum laude\"}",
    statement:"{ `literal`: 'magna cum laude', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"magna cum laude"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"magna cum laude",
        variable:"magna cum laude",
        concatenated:"magna cum laudemagna cum laude"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"Super Bowl XXX\"}",
    statement:"{ `literal`: 'Super Bowl XXX', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"Super Bowl XXX"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"Super Bowl XXX",
        variable:"Super Bowl XXX",
        concatenated:"Super Bowl XXXSuper Bowl XXX"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"medieval erection of parapets\"}",
    statement:"{ `literal`: 'medieval erection of parapets', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"medieval erection of parapets"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"medieval erection of parapets",
        variable:"medieval erection of parapets",
        concatenated:"medieval erection of parapetsmedieval erection of parapets"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"evaluate\"}",
    statement:"{ `literal`: 'evaluate', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"evaluate"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"evaluate",
        variable:"evaluate",
        concatenated:"evaluateevaluate"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"mocha\"}",
    statement:"{ `literal`: 'mocha', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"mocha"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"mocha",
        variable:"mocha",
        concatenated:"mochamocha"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"expression\"}",
    statement:"{ `literal`: 'expression', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"expression"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"expression",
        variable:"expression",
        concatenated:"expressionexpression"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"Arsenal canal\"}",
    statement:"{ `literal`: 'Arsenal canal', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"Arsenal canal"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"Arsenal canal",
        variable:"Arsenal canal",
        concatenated:"Arsenal canalArsenal canal"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"classic\"}",
    statement:"{ `literal`: 'classic', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"classic"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"classic",
        variable:"classic",
        concatenated:"classicclassic"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"Tyson Gay\"}",
    statement:"{ `literal`: 'Tyson Gay', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"Tyson Gay"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"Tyson Gay",
        variable:"Tyson Gay",
        concatenated:"Tyson GayTyson Gay"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"Dick Van Dyke\"}",
    statement:"{ `literal`: 'Dick Van Dyke', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"Dick Van Dyke"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"Dick Van Dyke",
        variable:"Dick Van Dyke",
        concatenated:"Dick Van DykeDick Van Dyke"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"basement\"}",
    statement:"{ `literal`: 'basement', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"basement"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"basement",
        variable:"basement",
        concatenated:"basementbasement"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"Roses are \\x1b[0;31mred\\x1b[0m, violets are \\x1b[0;34mblue. Hope you enjoy terminal hue\"}",
    statement:"{ `literal`: 'Roses are \x1b[0;31mred\x1b[0m, violets are \x1b[0;34mblue. Hope you enjoy terminal hue', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"Roses are \x1b[0;31mred\x1b[0m, violets are \x1b[0;34mblue. Hope you enjoy terminal hue"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"Roses are \x1b[0;31mred\x1b[0m, violets are \x1b[0;34mblue. Hope you enjoy terminal hue",
        variable:"Roses are \x1b[0;31mred\x1b[0m, violets are \x1b[0;34mblue. Hope you enjoy terminal hue",
        concatenated:"Roses are \x1b[0;31mred\x1b[0m, violets are \x1b[0;34mblue. Hope you enjoy terminal hueRoses are \x1b[0;31mred\x1b[0m, violets are \x1b[0;34mblue. Hope you enjoy terminal hue"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"But now...\\x1b[20Cfor my greatest trick...\\x1b[8m\"}",
    statement:"{ `literal`: 'But now...\x1b[20Cfor my greatest trick...\x1b[8m', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"But now...\x1b[20Cfor my greatest trick...\x1b[8m"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"But now...\x1b[20Cfor my greatest trick...\x1b[8m",
        variable:"But now...\x1b[20Cfor my greatest trick...\x1b[8m",
        concatenated:"But now...\x1b[20Cfor my greatest trick...\x1b[8mBut now...\x1b[20Cfor my greatest trick...\x1b[8m"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"The quic\\b\\b\\b\\b\\b\\bk brown fo\\a\\a\\a\\a\\a\\a\\a\\a\\a\\a\\ax... [Beeeep]\"}",
    statement:"{ `literal`: 'The quic\b\b\b\b\b\bk brown fo\a\a\a\a\a\a\a\a\a\a\ax... [Beeeep]', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"The quic\b\b\b\b\b\bk brown fo\a\a\a\a\a\a\a\a\a\a\ax... [Beeeep]"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"The quic\b\b\b\b\b\bk brown fo\a\a\a\a\a\a\a\a\a\a\ax... [Beeeep]",
        variable:"The quic\b\b\b\b\b\bk brown fo\a\a\a\a\a\a\a\a\a\a\ax... [Beeeep]",
        concatenated:"The quic\b\b\b\b\b\bk brown fo\a\a\a\a\a\a\a\a\a\a\ax... [Beeeep]The quic\b\b\b\b\b\bk brown fo\a\a\a\a\a\a\a\a\a\a\ax... [Beeeep]"
      }
    }
  },
  {
    name:"big list of naughty strings{str:\"Power\\u0644\\u064f\\u0644\\u064f\\u0635\\u0651\\u0628\\u064f\\u0644\\u064f\\u0644\\u0635\\u0651\\u0628\\u064f\\u0631\\u0631\\u064b \\u0963 \\u0963h \\u0963 \\u0963\\u5197\"}",
    statement:"{ `literal`: 'PowerŸÑŸèŸÑŸèÿµŸëÿ®ŸèŸÑŸèŸÑÿµŸëÿ®Ÿèÿ±ÿ±Ÿã ‡•£ ‡•£h ‡•£ ‡•£ÂÜó', `variable`: env_str, `concatenated`: env_str || env_str }",
    env:{
      env_str:"PowerŸÑŸèŸÑŸèÿµŸëÿ®ŸèŸÑŸèŸÑÿµŸëÿ®Ÿèÿ±ÿ±Ÿã ‡•£ ‡•£h ‡•£ ‡•£ÂÜó"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        literal:"PowerŸÑŸèŸÑŸèÿµŸëÿ®ŸèŸÑŸèŸÑÿµŸëÿ®Ÿèÿ±ÿ±Ÿã ‡•£ ‡•£h ‡•£ ‡•£ÂÜó",
        variable:"PowerŸÑŸèŸÑŸèÿµŸëÿ®ŸèŸÑŸèŸÑÿµŸëÿ®Ÿèÿ±ÿ±Ÿã ‡•£ ‡•£h ‡•£ ‡•£ÂÜó",
        concatenated:"PowerŸÑŸèŸÑŸèÿµŸëÿ®ŸèŸÑŸèŸÑÿµŸëÿ®Ÿèÿ±ÿ±Ÿã ‡•£ ‡•£h ‡•£ ‡•£ÂÜóPowerŸÑŸèŸÑŸèÿµŸëÿ®ŸèŸÑŸèŸÑÿµŸëÿ®Ÿèÿ±ÿ±Ÿã ‡•£ ‡•£h ‡•£ ‡•£ÂÜó"
      }
    }
  }
]
'null'::[
  {
    name:"null pass through{sql:\"`null.null`\",result:null}",
    statement:"`null.null`",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"null pass through{sql:\"`null.bool`\",result:null.bool}",
    statement:"`null.bool`",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null.bool
    }
  },
  {
    name:"null pass through{sql:\"`null.int`\",result:null.int}",
    statement:"`null.int`",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null.int
    }
  },
  {
    name:"null pass through{sql:\"`null.decimal`\",result:null.decimal}",
    statement:"`null.decimal`",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null.decimal
    }
  },
  {
    name:"null pass through{sql:\"`null.string`\",result:null.string}",
    statement:"`null.string`",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null.string
    }
  },
  {
    name:"null pass through{sql:\"`null.symbol`\",result:null.symbol}",
    statement:"`null.symbol`",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null.symbol
    }
  },
  {
    name:"null pass through{sql:\"`null.clob`\",result:null.clob}",
    statement:"`null.clob`",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null.clob
    }
  },
  {
    name:"null pass through{sql:\"`null.blob`\",result:null.blob}",
    statement:"`null.blob`",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null.blob
    }
  },
  {
    name:"null pass through{sql:\"`null.list`\",result:null.list}",
    statement:"`null.list`",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:[
      ]
    }
  },
  {
    name:"null pass through{sql:\"`null.struct`\",result:null.struct}",
    statement:"`null.struct`",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
      }
    }
  },
  {
    name:"null pass through{sql:\"`null.sexp`\",result:null.sexp}",
    statement:"`null.sexp`",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:(
      )
    }
  },
  {
    name:"null comparison{sql:\"NULL\",result:null}",
    statement:"NULL",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"null comparison{sql:\"MISSING\",result:missing::null}",
    statement:"MISSING",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"null comparison{sql:\"NULL IS NULL\",result:true}",
    statement:"NULL IS NULL",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"null comparison{sql:\"MISSING IS NULL\",result:true}",
    statement:"MISSING IS NULL",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"null comparison{sql:\"NULL IS MISSING\",result:false}",
    statement:"NULL IS MISSING",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"null comparison{sql:\"MISSING IS MISSING\",result:true}",
    statement:"MISSING IS MISSING",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"null comparison{sql:\"`null.null` IS NULL\",result:true}",
    statement:"`null.null` IS NULL",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"null comparison{sql:\"`null.bool` IS NULL\",result:true}",
    statement:"`null.bool` IS NULL",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"null comparison{sql:\"`null.int` IS NULL\",result:true}",
    statement:"`null.int` IS NULL",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"null comparison{sql:\"`null.decimal` IS NULL\",result:true}",
    statement:"`null.decimal` IS NULL",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"null comparison{sql:\"`null.string` IS NULL\",result:true}",
    statement:"`null.string` IS NULL",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"null comparison{sql:\"`null.symbol` IS NULL\",result:true}",
    statement:"`null.symbol` IS NULL",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"null comparison{sql:\"`null.clob` IS NULL\",result:true}",
    statement:"`null.clob` IS NULL",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"null comparison{sql:\"`null.blob` IS NULL\",result:true}",
    statement:"`null.blob` IS NULL",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"null comparison{sql:\"`null.list` IS NULL\",result:true}",
    statement:"`null.list` IS NULL",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"null comparison{sql:\"`null.struct` IS NULL\",result:true}",
    statement:"`null.struct` IS NULL",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"null comparison{sql:\"`null.sexp` IS NULL\",result:true}",
    statement:"`null.sexp` IS NULL",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"null comparison{sql:\"NULL = NULL\",result:null}",
    statement:"NULL = NULL",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"null comparison{sql:\"MISSING = NULL\",result:null}",
    statement:"MISSING = NULL",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"null comparison{sql:\"NULL = MISSING\",result:null}",
    statement:"NULL = MISSING",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"null comparison{sql:\"`null.null` = NULL\",result:null}",
    statement:"`null.null` = NULL",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"null comparison{sql:\"`null.bool` = NULL\",result:null}",
    statement:"`null.bool` = NULL",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"null comparison{sql:\"`null.int` = NULL\",result:null}",
    statement:"`null.int` = NULL",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"null comparison{sql:\"`null.decimal` = NULL\",result:null}",
    statement:"`null.decimal` = NULL",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"null comparison{sql:\"`null.string` = NULL\",result:null}",
    statement:"`null.string` = NULL",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"null comparison{sql:\"`null.symbol` = NULL\",result:null}",
    statement:"`null.symbol` = NULL",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"null comparison{sql:\"`null.clob` = NULL\",result:null}",
    statement:"`null.clob` = NULL",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"null comparison{sql:\"`null.blob` = NULL\",result:null}",
    statement:"`null.blob` = NULL",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"null comparison{sql:\"`null.list` = NULL\",result:null}",
    statement:"`null.list` = NULL",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"null comparison{sql:\"`null.struct` = NULL\",result:null}",
    statement:"`null.struct` = NULL",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"null comparison{sql:\"`null.sexp` = NULL\",result:null}",
    statement:"`null.sexp` = NULL",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"null comparison{sql:\"`null.null` = MISSING\",result:null}",
    statement:"`null.null` = MISSING",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"null comparison{sql:\"`null.bool` = MISSING\",result:null}",
    statement:"`null.bool` = MISSING",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"null comparison{sql:\"`null.int` = MISSING\",result:null}",
    statement:"`null.int` = MISSING",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"null comparison{sql:\"`null.decimal` = MISSING\",result:null}",
    statement:"`null.decimal` = MISSING",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"null comparison{sql:\"`null.string` = MISSING\",result:null}",
    statement:"`null.string` = MISSING",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"null comparison{sql:\"`null.symbol` = MISSING\",result:null}",
    statement:"`null.symbol` = MISSING",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"null comparison{sql:\"`null.clob` = MISSING\",result:null}",
    statement:"`null.clob` = MISSING",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"null comparison{sql:\"`null.blob` = MISSING\",result:null}",
    statement:"`null.blob` = MISSING",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"null comparison{sql:\"`null.list` = MISSING\",result:null}",
    statement:"`null.list` = MISSING",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"null comparison{sql:\"`null.struct` = MISSING\",result:null}",
    statement:"`null.struct` = MISSING",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"null comparison{sql:\"`null.sexp` = MISSING\",result:null}",
    statement:"`null.sexp` = MISSING",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  }
]
string::[
  {
    name:"concatenation with non-nulls{left:\"\",right:\"\",result:\"\"}",
    statement:"{ `concatenated_literals`: '' || '', `concatenated_variables`: env_left || env_right }",
    env:{
      env_left:"",
      env_right:""
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        concatenated_literals:"",
        concatenated_variables:""
      }
    }
  },
  {
    name:"concatenation with non-nulls{left:\"left\",right:\"\",result:\"left\"}",
    statement:"{ `concatenated_literals`: 'left' || '', `concatenated_variables`: env_left || env_right }",
    env:{
      env_left:"left",
      env_right:""
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        concatenated_literals:"left",
        concatenated_variables:"left"
      }
    }
  },
  {
    name:"concatenation with non-nulls{left:\"\",right:\"right\",result:\"right\"}",
    statement:"{ `concatenated_literals`: '' || 'right', `concatenated_variables`: env_left || env_right }",
    env:{
      env_left:"",
      env_right:"right"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        concatenated_literals:"right",
        concatenated_variables:"right"
      }
    }
  },
  {
    name:"concatenation with non-nulls{left:\"a\",right:\"b\",result:\"ab\"}",
    statement:"{ `concatenated_literals`: 'a' || 'b', `concatenated_variables`: env_left || env_right }",
    env:{
      env_left:"a",
      env_right:"b"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        concatenated_literals:"ab",
        concatenated_variables:"ab"
      }
    }
  },
  {
    name:"concatenation with non-nulls{left:\"hello\",right:\"world\",result:\"helloworld\"}",
    statement:"{ `concatenated_literals`: 'hello' || 'world', `concatenated_variables`: env_left || env_right }",
    env:{
      env_left:"hello",
      env_right:"world"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        concatenated_literals:"helloworld",
        concatenated_variables:"helloworld"
      }
    }
  },
  {
    name:"concatenation with non-nulls{left:\"o\",right:\"\\u0300\",result:\"o\\u0300\"}",
    statement:"{ `concatenated_literals`: 'o' || 'ÃÄ', `concatenated_variables`: env_left || env_right }",
    env:{
      env_left:"o",
      env_right:"ÃÄ"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        concatenated_literals:"oÃÄ",
        concatenated_variables:"oÃÄ"
      }
    }
  },
  {
    name:"concatenation with non-nulls{left:\"\\u8a71\\u5bb6\\u8eab\\u5727\\u8cbb\\u8c37\",right:\"\\u6599\\u6751\\u80fd\\u8a08\\u7a0e\\u91d1\",result:\"\\u8a71\\u5bb6\\u8eab\\u5727\\u8cbb\\u8c37\\u6599\\u6751\\u80fd\\u8a08\\u7a0e\\u91d1\"}",
    statement:"{ `concatenated_literals`: 'Ë©±ÂÆ∂Ë∫´ÂúßË≤ªË∞∑' || 'ÊñôÊùëËÉΩË®àÁ®éÈáë', `concatenated_variables`: env_left || env_right }",
    env:{
      env_left:"Ë©±ÂÆ∂Ë∫´ÂúßË≤ªË∞∑",
      env_right:"ÊñôÊùëËÉΩË®àÁ®éÈáë"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        concatenated_literals:"Ë©±ÂÆ∂Ë∫´ÂúßË≤ªË∞∑ÊñôÊùëËÉΩË®àÁ®éÈáë",
        concatenated_variables:"Ë©±ÂÆ∂Ë∫´ÂúßË≤ªË∞∑ÊñôÊùëËÉΩË®àÁ®éÈáë"
      }
    }
  },
  {
    name:"concatenation with non-nulls{left:\"\\u0401\\u0402\\u0403\\u0404\\u0405\\u0406\\u0407\\u0408\\u0409\\u040a\\u040b\\u040c\\u040d\\u040e\\u040f\\u0410\\u0411\\u0412\\u0413\\u0414\\u0415\\u0416\\u0417\\u0418\\u0419\\u041a\\u041b\\u041c\\u041d\\u041e\\u041f\\u0420\\u0421\",right:\"\\u0422\\u0423\\u0424\\u0425\\u0426\\u0427\\u0428\\u0429\\u042a\\u042b\\u042c\\u042d\\u042e\\u042f\\u0430\\u0431\\u0432\\u0433\\u0434\\u0435\\u0436\\u0437\\u0438\\u0439\\u043a\\u043b\\u043c\\u043d\\u043e\\u043f\\u0440\\u0441\\u0442\\u0443\\u0444\\u0445\\u0446\\u0447\\u0448\\u0449\\u044a\\u044b\\u044c\\u044d\\u044e\\u044f\",result:\"\\u0401\\u0402\\u0403\\u0404\\u0405\\u0406\\u0407\\u0408\\u0409\\u040a\\u040b\\u040c\\u040d\\u040e\\u040f\\u0410\\u0411\\u0412\\u0413\\u0414\\u0415\\u0416\\u0417\\u0418\\u0419\\u041a\\u041b\\u041c\\u041d\\u041e\\u041f\\u0420\\u0421\\u0422\\u0423\\u0424\\u0425\\u0426\\u0427\\u0428\\u0429\\u042a\\u042b\\u042c\\u042d\\u042e\\u042f\\u0430\\u0431\\u0432\\u0433\\u0434\\u0435\\u0436\\u0437\\u0438\\u0439\\u043a\\u043b\\u043c\\u043d\\u043e\\u043f\\u0440\\u0441\\u0442\\u0443\\u0444\\u0445\\u0446\\u0447\\u0448\\u0449\\u044a\\u044b\\u044c\\u044d\\u044e\\u044f\"}",
    statement:"{ `concatenated_literals`: '–Å–Ç–É–Ñ–Ö–Ü–á–à–â–ä–ã–å–ç–é–è–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°' || '–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è', `concatenated_variables`: env_left || env_right }",
    env:{
      env_left:"–Å–Ç–É–Ñ–Ö–Ü–á–à–â–ä–ã–å–ç–é–è–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°",
      env_right:"–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        concatenated_literals:"–Å–Ç–É–Ñ–Ö–Ü–á–à–â–ä–ã–å–ç–é–è–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è",
        concatenated_variables:"–Å–Ç–É–Ñ–Ö–Ü–á–à–â–ä–ã–å–ç–é–è–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è"
      }
    }
  },
  {
    name:"concatenation with non-nulls{left:\"\\U0001d42a\\U0001d42e\\U0001d422\\U0001d41c\\U0001d424 \\U0001d41b\\U0001d42b\\U0001d428\\U0001d430\\U0001d427 \\U0001d41f\\U0001d428\\U0001d431 \",right:\"\\U0001d423\\U0001d42e\\U0001d426\\U0001d429\\U0001d42c \\U0001d428\\U0001d42f\\U0001d41e\\U0001d42b\",result:\"\\U0001d42a\\U0001d42e\\U0001d422\\U0001d41c\\U0001d424 \\U0001d41b\\U0001d42b\\U0001d428\\U0001d430\\U0001d427 \\U0001d41f\\U0001d428\\U0001d431 \\U0001d423\\U0001d42e\\U0001d426\\U0001d429\\U0001d42c \\U0001d428\\U0001d42f\\U0001d41e\\U0001d42b\"}",
    statement:"{ `concatenated_literals`: 'ùê™ùêÆùê¢ùêúùê§ ùêõùê´ùê®ùê∞ùêß ùêüùê®ùê± ' || 'ùê£ùêÆùê¶ùê©ùê¨ ùê®ùêØùêûùê´', `concatenated_variables`: env_left || env_right }",
    env:{
      env_left:"ùê™ùêÆùê¢ùêúùê§ ùêõùê´ùê®ùê∞ùêß ùêüùê®ùê± ",
      env_right:"ùê£ùêÆùê¶ùê©ùê¨ ùê®ùêØùêûùê´"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        concatenated_literals:"ùê™ùêÆùê¢ùêúùê§ ùêõùê´ùê®ùê∞ùêß ùêüùê®ùê± ùê£ùêÆùê¶ùê©ùê¨ ùê®ùêØùêûùê´",
        concatenated_variables:"ùê™ùêÆùê¢ùêúùê§ ùêõùê´ùê®ùê∞ùêß ùêüùê®ùê± ùê£ùêÆùê¶ùê©ùê¨ ùê®ùêØùêûùê´"
      }
    }
  },
  {
    name:"concatenation with non-nulls{left:\"( \\u0361\\xb0 \\u035c\\u0296 \\u0361\\xb0)\\u252c\\u2500\\u252c\\u30ce\",right:\"( \\xba _ \\xba\\u30ce)\",result:\"( \\u0361\\xb0 \\u035c\\u0296 \\u0361\\xb0)\\u252c\\u2500\\u252c\\u30ce( \\xba _ \\xba\\u30ce)\"}",
    statement:"{ `concatenated_literals`: '( Õ°¬∞ Õú ñ Õ°¬∞)‚î¨‚îÄ‚î¨„Éé' || '( ¬∫ _ ¬∫„Éé)', `concatenated_variables`: env_left || env_right }",
    env:{
      env_left:"( Õ°¬∞ Õú ñ Õ°¬∞)‚î¨‚îÄ‚î¨„Éé",
      env_right:"( ¬∫ _ ¬∫„Éé)"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        concatenated_literals:"( Õ°¬∞ Õú ñ Õ°¬∞)‚î¨‚îÄ‚î¨„Éé( ¬∫ _ ¬∫„Éé)",
        concatenated_variables:"( Õ°¬∞ Õú ñ Õ°¬∞)‚î¨‚îÄ‚î¨„Éé( ¬∫ _ ¬∫„Éé)"
      }
    }
  },
  {
    name:"concatenation with non-nulls{left:\"\\U0001f60d\",right:\"\\U0001f60d\",result:\"\\U0001f60d\\U0001f60d\"}",
    statement:"{ `concatenated_literals`: 'üòç' || 'üòç', `concatenated_variables`: env_left || env_right }",
    env:{
      env_left:"üòç",
      env_right:"üòç"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        concatenated_literals:"üòçüòç",
        concatenated_variables:"üòçüòç"
      }
    }
  },
  {
    name:"concatenation with non-nulls{left:\"\\U0001f4a9\\U0001f4a9\",right:\"\\U0001f4a9\\U0001f4a9\",result:\"\\U0001f4a9\\U0001f4a9\\U0001f4a9\\U0001f4a9\"}",
    statement:"{ `concatenated_literals`: 'üí©üí©' || 'üí©üí©', `concatenated_variables`: env_left || env_right }",
    env:{
      env_left:"üí©üí©",
      env_right:"üí©üí©"
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        concatenated_literals:"üí©üí©üí©üí©",
        concatenated_variables:"üí©üí©üí©üí©"
      }
    }
  },
  {
    name:"concatenation with null values{left:\"NULL\",right:\"NULL\"}",
    statement:"NULL || NULL",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"concatenation with null values{left:\"MISSING\",right:\"MISSING\"}",
    statement:"MISSING || MISSING",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"concatenation with null values{left:\"''\",right:\"NULL\"}",
    statement:"'' || NULL",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"concatenation with null values{left:\"NULL\",right:\"''\"}",
    statement:"NULL || ''",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"concatenation with null values{left:\"''\",right:\"MISSING\"}",
    statement:"'' || MISSING",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"concatenation with null values{left:\"MISSING\",right:\"''\"}",
    statement:"MISSING || ''",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"concatenation with null values{left:\"'a'\",right:\"NULL\"}",
    statement:"'a' || NULL",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"concatenation with null values{left:\"NULL\",right:\"'b'\"}",
    statement:"NULL || 'b'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"concatenation with null values{left:\"'a'\",right:\"MISSING\"}",
    statement:"'a' || MISSING",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"concatenation with null values{left:\"MISSING\",right:\"'b'\"}",
    statement:"MISSING || 'b'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"concatenation with non-string values{left:\"'a'\",right:\"1\"}",
    statement:"'a' || 1",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"concatenation with non-string values{left:\"1\",right:\"'a'\"}",
    statement:"1 || 'a'",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"concatenation with non-string values{left:\"'a'\",right:\"true\"}",
    statement:"'a' || true",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"concatenation with non-string values{left:\"true\",right:\"'a'\"}",
    statement:"true || 'a'",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"concatenation with non-string values{left:\"'a'\",right:\"1.1\"}",
    statement:"'a' || 1.1",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"concatenation with non-string values{left:\"1.1\",right:\"'a'\"}",
    statement:"1.1 || 'a'",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"concatenation with non-string values{left:\"1\",right:\"1\"}",
    statement:"1 || 1",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"concatenation with non-string values{left:\"false\",right:\"true\"}",
    statement:"false || true",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"concatenation with non-string values{left:\"1.2\",right:\"1.1\"}",
    statement:"1.2 || 1.1",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  }
]
int::[
  envs::{
    max_int:9223372036854775807,
    min_int:-9223372036854775808,
    one_tenth_of_max_int:922337203685477580,
    one_tenth_of_min_int:-922337203685477580
  },
  {
    name:"negative zero equality",
    statement:"0 = 0 AND 0 = -0 AND -0 = 0 AND -0 = -0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"int pass-through{sql:\"1\",result:1}",
    statement:"1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"int pass-through{sql:\"-1\",result:-1}",
    statement:"-1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"int pass-through{sql:\"9223372036854775807\",result:9223372036854775807}",
    statement:"9223372036854775807",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:9223372036854775807
    }
  },
  {
    name:"int pass-through{sql:\"-9223372036854775808\",result:-9223372036854775808}",
    statement:"-9223372036854775808",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-9223372036854775808
    }
  },
  {
    name:"int arithmetic{sql:\"1 + 1\",result:2}",
    statement:"1 + 1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"int arithmetic{sql:\"1 * 1\",result:1}",
    statement:"1 * 1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"int arithmetic{sql:\"1 / 1\",result:1}",
    statement:"1 / 1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"int arithmetic{sql:\"1 - 1\",result:0}",
    statement:"1 - 1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"int arithmetic{sql:\"1 + 2\",result:3}",
    statement:"1 + 2",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3
    }
  },
  {
    name:"int arithmetic{sql:\"1 * 2\",result:2}",
    statement:"1 * 2",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"int arithmetic{sql:\"1 / 2\",result:0}",
    statement:"1 / 2",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"int arithmetic{sql:\"1 - 2\",result:-1}",
    statement:"1 - 2",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"int arithmetic{sql:\"10 % 1\",result:0}",
    statement:"10 % 1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"int arithmetic{sql:\"10 % 2\",result:0}",
    statement:"10 % 2",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"int arithmetic{sql:\"10 % 3\",result:1}",
    statement:"10 % 3",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"int arithmetic{sql:\"10 % 4\",result:2}",
    statement:"10 % 4",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"int arithmetic{sql:\"10 % 6\",result:4}",
    statement:"10 % 6",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"int arithmetic{sql:\"10 % 7\",result:3}",
    statement:"10 % 7",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3
    }
  },
  {
    name:"int arithmetic{sql:\"10 % 8\",result:2}",
    statement:"10 % 8",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"int arithmetic{sql:\"10 % 9\",result:1}",
    statement:"10 % 9",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"int arithmetic{sql:\"10 % 10\",result:0}",
    statement:"10 % 10",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"int arithmetic{sql:\"10 % 11\",result:10}",
    statement:"10 % 11",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:10
    }
  },
  {
    name:"int arithmetic{sql:\"-1 + 1\",result:0}",
    statement:"-1 + 1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"int arithmetic{sql:\"-1 * 1\",result:-1}",
    statement:"-1 * 1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"int arithmetic{sql:\"-1 / 1\",result:-1}",
    statement:"-1 / 1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"int arithmetic{sql:\"-1 - 1\",result:-2}",
    statement:"-1 - 1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-2
    }
  },
  {
    name:"int arithmetic{sql:\"-1 + 2\",result:1}",
    statement:"-1 + 2",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"int arithmetic{sql:\"-1 * 2\",result:-2}",
    statement:"-1 * 2",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-2
    }
  },
  {
    name:"int arithmetic{sql:\"-1 / 2\",result:0}",
    statement:"-1 / 2",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"int arithmetic{sql:\"-10 % 1\",result:0}",
    statement:"-10 % 1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"int arithmetic{sql:\"-10 % 2\",result:0}",
    statement:"-10 % 2",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"int arithmetic{sql:\"-10 % 3\",result:-1}",
    statement:"-10 % 3",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"int arithmetic{sql:\"-10 % 4\",result:-2}",
    statement:"-10 % 4",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-2
    }
  },
  {
    name:"int arithmetic{sql:\"-10 % 6\",result:-4}",
    statement:"-10 % 6",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-4
    }
  },
  {
    name:"int arithmetic{sql:\"-10 % 7\",result:-3}",
    statement:"-10 % 7",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-3
    }
  },
  {
    name:"int arithmetic{sql:\"-10 % 8\",result:-2}",
    statement:"-10 % 8",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-2
    }
  },
  {
    name:"int arithmetic{sql:\"-10 % 9\",result:-1}",
    statement:"-10 % 9",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"int arithmetic{sql:\"-10 % 10\",result:0}",
    statement:"-10 % 10",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"int arithmetic{sql:\"-10 % 11\",result:-10}",
    statement:"-10 % 11",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-10
    }
  },
  {
    name:"int arithmetic{sql:\"1 + -1\",result:0}",
    statement:"1 + -1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"int arithmetic{sql:\"1 * -1\",result:-1}",
    statement:"1 * -1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"int arithmetic{sql:\"1 / -1\",result:-1}",
    statement:"1 / -1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"int arithmetic{sql:\"1 - -1\",result:2}",
    statement:"1 - -1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"int arithmetic{sql:\"1 + -2\",result:-1}",
    statement:"1 + -2",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"int arithmetic{sql:\"1 * -2\",result:-2}",
    statement:"1 * -2",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-2
    }
  },
  {
    name:"int arithmetic{sql:\"1 / -2\",result:0}",
    statement:"1 / -2",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"int arithmetic{sql:\"10 % -1\",result:0}",
    statement:"10 % -1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"int arithmetic{sql:\"10 % -2\",result:0}",
    statement:"10 % -2",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"int arithmetic{sql:\"10 % -3\",result:1}",
    statement:"10 % -3",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"int arithmetic{sql:\"10 % -4\",result:2}",
    statement:"10 % -4",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"int arithmetic{sql:\"10 % -6\",result:4}",
    statement:"10 % -6",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"int arithmetic{sql:\"10 % -7\",result:3}",
    statement:"10 % -7",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3
    }
  },
  {
    name:"int arithmetic{sql:\"10 % -8\",result:2}",
    statement:"10 % -8",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"int arithmetic{sql:\"10 % -9\",result:1}",
    statement:"10 % -9",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"int arithmetic{sql:\"10 % -10\",result:0}",
    statement:"10 % -10",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"int arithmetic{sql:\"10 % -11\",result:10}",
    statement:"10 % -11",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:10
    }
  },
  {
    name:"int boundary arithmetic{sql:\"(max_int - 1) + 1\",result:9223372036854775807}",
    statement:"(max_int - 1) + 1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:9223372036854775807
    }
  },
  {
    name:"int boundary arithmetic{sql:\"(min_int + 1) - 1\",result:-9223372036854775808}",
    statement:"(min_int + 1) - 1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-9223372036854775808
    }
  },
  {
    name:"int overflow and underflow conditions{sql:\"9223372036854775808\"}",
    statement:"9223372036854775808",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"int overflow and underflow conditions{sql:\"-9223372036854775809\"}",
    statement:"-9223372036854775809",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"int overflow and underflow conditions{sql:\"max_int + 1\"}",
    statement:"max_int + 1",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"int overflow and underflow conditions{sql:\"min_int + -1\"}",
    statement:"min_int + -1",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"int overflow and underflow conditions{sql:\"min_int - 1\"}",
    statement:"min_int - 1",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"int overflow and underflow conditions{sql:\"max_int - -1\"}",
    statement:"max_int - -1",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"int overflow and underflow conditions{sql:\"one_tenth_of_max_int * 11\"}",
    statement:"one_tenth_of_max_int * 11",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"int overflow and underflow conditions{sql:\"one_tenth_of_min_int * -11\"}",
    statement:"one_tenth_of_min_int * -11",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"int overflow and underflow conditions{sql:\"min_int / - 1\"}",
    statement:"min_int / - 1",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"divide by zero{sql:\"1 / 0\"}",
    statement:"1 / 0",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"divide by zero{sql:\"1 % 0\"}",
    statement:"1 % 0",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"equality operator binary relations{x:1,y:1,z:1}",
    statement:"{ 'is_reflexive': (x = x) = (x = x), 'is_antisymmetric': (x = y) = (y = x), 'is_transitive': (x = y) = (y = z) and (x = y) = (x = z) }",
    env:{
      x:1,
      y:1,
      z:1
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        is_reflexive:true,
        is_antisymmetric:true,
        is_transitive:true
      }
    }
  },
  {
    name:"equality operator binary relations{x:1,y:2,z:3}",
    statement:"{ 'is_reflexive': (x = x) = (x = x), 'is_antisymmetric': (x = y) = (y = x), 'is_transitive': (x = y) = (y = z) and (x = y) = (x = z) }",
    env:{
      x:1,
      y:2,
      z:3
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        is_reflexive:true,
        is_antisymmetric:true,
        is_transitive:true
      }
    }
  },
  {
    name:"equality operator binary relations{x:3,y:2,z:1}",
    statement:"{ 'is_reflexive': (x = x) = (x = x), 'is_antisymmetric': (x = y) = (y = x), 'is_transitive': (x = y) = (y = z) and (x = y) = (x = z) }",
    env:{
      x:3,
      y:2,
      z:1
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        is_reflexive:true,
        is_antisymmetric:true,
        is_transitive:true
      }
    }
  },
  {
    name:"equality operator binary relations{x:-1,y:-1,z:-1}",
    statement:"{ 'is_reflexive': (x = x) = (x = x), 'is_antisymmetric': (x = y) = (y = x), 'is_transitive': (x = y) = (y = z) and (x = y) = (x = z) }",
    env:{
      x:-1,
      y:-1,
      z:-1
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        is_reflexive:true,
        is_antisymmetric:true,
        is_transitive:true
      }
    }
  },
  {
    name:"equality operator binary relations{x:-1,y:-2,z:-3}",
    statement:"{ 'is_reflexive': (x = x) = (x = x), 'is_antisymmetric': (x = y) = (y = x), 'is_transitive': (x = y) = (y = z) and (x = y) = (x = z) }",
    env:{
      x:-1,
      y:-2,
      z:-3
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        is_reflexive:true,
        is_antisymmetric:true,
        is_transitive:true
      }
    }
  },
  {
    name:"equality operator binary relations{x:-3,y:-2,z:-1}",
    statement:"{ 'is_reflexive': (x = x) = (x = x), 'is_antisymmetric': (x = y) = (y = x), 'is_transitive': (x = y) = (y = z) and (x = y) = (x = z) }",
    env:{
      x:-3,
      y:-2,
      z:-1
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        is_reflexive:true,
        is_antisymmetric:true,
        is_transitive:true
      }
    }
  },
  {
    name:"equality operator binary relations{x:-1,y:2,z:3}",
    statement:"{ 'is_reflexive': (x = x) = (x = x), 'is_antisymmetric': (x = y) = (y = x), 'is_transitive': (x = y) = (y = z) and (x = y) = (x = z) }",
    env:{
      x:-1,
      y:2,
      z:3
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        is_reflexive:true,
        is_antisymmetric:true,
        is_transitive:true
      }
    }
  },
  {
    name:"equality operator binary relations{x:-3,y:2,z:1}",
    statement:"{ 'is_reflexive': (x = x) = (x = x), 'is_antisymmetric': (x = y) = (y = x), 'is_transitive': (x = y) = (y = z) and (x = y) = (x = z) }",
    env:{
      x:-3,
      y:2,
      z:1
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        is_reflexive:true,
        is_antisymmetric:true,
        is_transitive:true
      }
    }
  },
  {
    name:"equality operator binary relations{x:1,y:2,z:-3}",
    statement:"{ 'is_reflexive': (x = x) = (x = x), 'is_antisymmetric': (x = y) = (y = x), 'is_transitive': (x = y) = (y = z) and (x = y) = (x = z) }",
    env:{
      x:1,
      y:2,
      z:-3
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        is_reflexive:true,
        is_antisymmetric:true,
        is_transitive:true
      }
    }
  },
  {
    name:"equality operator binary relations{x:3,y:2,z:-1}",
    statement:"{ 'is_reflexive': (x = x) = (x = x), 'is_antisymmetric': (x = y) = (y = x), 'is_transitive': (x = y) = (y = z) and (x = y) = (x = z) }",
    env:{
      x:3,
      y:2,
      z:-1
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        is_reflexive:true,
        is_antisymmetric:true,
        is_transitive:true
      }
    }
  },
  {
    name:"greater than and less than operator binary relations{x:-3,y:-2,z:-1}",
    statement:"{ 'gt_is_reflexive': (x > x) = (x > x), 'gt_is_antisymmetric': (x > y) = (y > x), 'gt_is_transitive': (x > y) = (y > z) and (x > y) = (x > z), 'lt_is_reflexive': (x < x) = (x < x), 'lt_is_antisymmetric': (x < y) = (y < x), 'lt_is_transitive': (x < y) = (y < z) and (x < y) = (x < z) }",
    env:{
      x:-3,
      y:-2,
      z:-1
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        gt_is_reflexive:true,
        gt_is_antisymmetric:false,
        gt_is_transitive:true,
        lt_is_reflexive:true,
        lt_is_antisymmetric:false,
        lt_is_transitive:true
      }
    }
  },
  {
    name:"greater than and less than operator binary relations{x:-2,y:-1,z:0}",
    statement:"{ 'gt_is_reflexive': (x > x) = (x > x), 'gt_is_antisymmetric': (x > y) = (y > x), 'gt_is_transitive': (x > y) = (y > z) and (x > y) = (x > z), 'lt_is_reflexive': (x < x) = (x < x), 'lt_is_antisymmetric': (x < y) = (y < x), 'lt_is_transitive': (x < y) = (y < z) and (x < y) = (x < z) }",
    env:{
      x:-2,
      y:-1,
      z:0
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        gt_is_reflexive:true,
        gt_is_antisymmetric:false,
        gt_is_transitive:true,
        lt_is_reflexive:true,
        lt_is_antisymmetric:false,
        lt_is_transitive:true
      }
    }
  },
  {
    name:"greater than and less than operator binary relations{x:-1,y:0,z:1}",
    statement:"{ 'gt_is_reflexive': (x > x) = (x > x), 'gt_is_antisymmetric': (x > y) = (y > x), 'gt_is_transitive': (x > y) = (y > z) and (x > y) = (x > z), 'lt_is_reflexive': (x < x) = (x < x), 'lt_is_antisymmetric': (x < y) = (y < x), 'lt_is_transitive': (x < y) = (y < z) and (x < y) = (x < z) }",
    env:{
      x:-1,
      y:0,
      z:1
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        gt_is_reflexive:true,
        gt_is_antisymmetric:false,
        gt_is_transitive:true,
        lt_is_reflexive:true,
        lt_is_antisymmetric:false,
        lt_is_transitive:true
      }
    }
  },
  {
    name:"greater than and less than operator binary relations{x:0,y:1,z:2}",
    statement:"{ 'gt_is_reflexive': (x > x) = (x > x), 'gt_is_antisymmetric': (x > y) = (y > x), 'gt_is_transitive': (x > y) = (y > z) and (x > y) = (x > z), 'lt_is_reflexive': (x < x) = (x < x), 'lt_is_antisymmetric': (x < y) = (y < x), 'lt_is_transitive': (x < y) = (y < z) and (x < y) = (x < z) }",
    env:{
      x:0,
      y:1,
      z:2
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        gt_is_reflexive:true,
        gt_is_antisymmetric:false,
        gt_is_transitive:true,
        lt_is_reflexive:true,
        lt_is_antisymmetric:false,
        lt_is_transitive:true
      }
    }
  },
  {
    name:"greater than and less than operator binary relations{x:1,y:2,z:3}",
    statement:"{ 'gt_is_reflexive': (x > x) = (x > x), 'gt_is_antisymmetric': (x > y) = (y > x), 'gt_is_transitive': (x > y) = (y > z) and (x > y) = (x > z), 'lt_is_reflexive': (x < x) = (x < x), 'lt_is_antisymmetric': (x < y) = (y < x), 'lt_is_transitive': (x < y) = (y < z) and (x < y) = (x < z) }",
    env:{
      x:1,
      y:2,
      z:3
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        gt_is_reflexive:true,
        gt_is_antisymmetric:false,
        gt_is_transitive:true,
        lt_is_reflexive:true,
        lt_is_antisymmetric:false,
        lt_is_transitive:true
      }
    }
  },
  {
    name:"greater than and less than operator binary relations{x:3,y:2,z:1}",
    statement:"{ 'gt_is_reflexive': (x > x) = (x > x), 'gt_is_antisymmetric': (x > y) = (y > x), 'gt_is_transitive': (x > y) = (y > z) and (x > y) = (x > z), 'lt_is_reflexive': (x < x) = (x < x), 'lt_is_antisymmetric': (x < y) = (y < x), 'lt_is_transitive': (x < y) = (y < z) and (x < y) = (x < z) }",
    env:{
      x:3,
      y:2,
      z:1
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        gt_is_reflexive:true,
        gt_is_antisymmetric:false,
        gt_is_transitive:true,
        lt_is_reflexive:true,
        lt_is_antisymmetric:false,
        lt_is_transitive:true
      }
    }
  },
  {
    name:"greater than and less than operator binary relations{x:2,y:1,z:0}",
    statement:"{ 'gt_is_reflexive': (x > x) = (x > x), 'gt_is_antisymmetric': (x > y) = (y > x), 'gt_is_transitive': (x > y) = (y > z) and (x > y) = (x > z), 'lt_is_reflexive': (x < x) = (x < x), 'lt_is_antisymmetric': (x < y) = (y < x), 'lt_is_transitive': (x < y) = (y < z) and (x < y) = (x < z) }",
    env:{
      x:2,
      y:1,
      z:0
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        gt_is_reflexive:true,
        gt_is_antisymmetric:false,
        gt_is_transitive:true,
        lt_is_reflexive:true,
        lt_is_antisymmetric:false,
        lt_is_transitive:true
      }
    }
  },
  {
    name:"greater than and less than operator binary relations{x:1,y:0,z:-1}",
    statement:"{ 'gt_is_reflexive': (x > x) = (x > x), 'gt_is_antisymmetric': (x > y) = (y > x), 'gt_is_transitive': (x > y) = (y > z) and (x > y) = (x > z), 'lt_is_reflexive': (x < x) = (x < x), 'lt_is_antisymmetric': (x < y) = (y < x), 'lt_is_transitive': (x < y) = (y < z) and (x < y) = (x < z) }",
    env:{
      x:1,
      y:0,
      z:-1
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        gt_is_reflexive:true,
        gt_is_antisymmetric:false,
        gt_is_transitive:true,
        lt_is_reflexive:true,
        lt_is_antisymmetric:false,
        lt_is_transitive:true
      }
    }
  },
  {
    name:"greater than and less than operator binary relations{x:0,y:-1,z:-2}",
    statement:"{ 'gt_is_reflexive': (x > x) = (x > x), 'gt_is_antisymmetric': (x > y) = (y > x), 'gt_is_transitive': (x > y) = (y > z) and (x > y) = (x > z), 'lt_is_reflexive': (x < x) = (x < x), 'lt_is_antisymmetric': (x < y) = (y < x), 'lt_is_transitive': (x < y) = (y < z) and (x < y) = (x < z) }",
    env:{
      x:0,
      y:-1,
      z:-2
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        gt_is_reflexive:true,
        gt_is_antisymmetric:false,
        gt_is_transitive:true,
        lt_is_reflexive:true,
        lt_is_antisymmetric:false,
        lt_is_transitive:true
      }
    }
  },
  {
    name:"greater than and less than operator binary relations{x:-1,y:-2,z:-3}",
    statement:"{ 'gt_is_reflexive': (x > x) = (x > x), 'gt_is_antisymmetric': (x > y) = (y > x), 'gt_is_transitive': (x > y) = (y > z) and (x > y) = (x > z), 'lt_is_reflexive': (x < x) = (x < x), 'lt_is_antisymmetric': (x < y) = (y < x), 'lt_is_transitive': (x < y) = (y < z) and (x < y) = (x < z) }",
    env:{
      x:-1,
      y:-2,
      z:-3
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:{
        gt_is_reflexive:true,
        gt_is_antisymmetric:false,
        gt_is_transitive:true,
        lt_is_reflexive:true,
        lt_is_antisymmetric:false,
        lt_is_transitive:true
      }
    }
  },
  {
    name:"equal and not equal{sql:\"0 = -0\",result:true}",
    statement:"0 = -0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"equal and not equal{sql:\"-0 = 0\",result:true}",
    statement:"-0 = 0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"equal and not equal{sql:\"0 = 0\",result:true}",
    statement:"0 = 0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"equal and not equal{sql:\"-0 = -0\",result:true}",
    statement:"-0 = -0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"equal and not equal{sql:\"1 = 0\",result:false}",
    statement:"1 = 0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"equal and not equal{sql:\"1 = -0\",result:false}",
    statement:"1 = -0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"equal and not equal{sql:\"1 = 1\",result:true}",
    statement:"1 = 1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"equal and not equal{sql:\"-1 = -1\",result:true}",
    statement:"-1 = -1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"equal and not equal{sql:\"max_int = max_int\",result:true}",
    statement:"max_int = max_int",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"equal and not equal{sql:\"max_int = min_int\",result:false}",
    statement:"max_int = min_int",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"equal and not equal{sql:\"min_int = max_int\",result:false}",
    statement:"min_int = max_int",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"equal and not equal{sql:\"min_int = min_int\",result:true}",
    statement:"min_int = min_int",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"equal and not equal{sql:\"0 <> 0\",result:false}",
    statement:"0 <> 0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"equal and not equal{sql:\"0 <> -0\",result:false}",
    statement:"0 <> -0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"equal and not equal{sql:\"-0 <> 0\",result:false}",
    statement:"-0 <> 0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"equal and not equal{sql:\"-0 <> -0\",result:false}",
    statement:"-0 <> -0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"equal and not equal{sql:\"1 <> 0\",result:true}",
    statement:"1 <> 0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"equal and not equal{sql:\"1 <> -0\",result:true}",
    statement:"1 <> -0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"equal and not equal{sql:\"max_int <> max_int\",result:false}",
    statement:"max_int <> max_int",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"equal and not equal{sql:\"max_int <> min_int\",result:true}",
    statement:"max_int <> min_int",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"equal and not equal{sql:\"min_int <> max_int\",result:true}",
    statement:"min_int <> max_int",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"equal and not equal{sql:\"min_int <> min_int\",result:false}",
    statement:"min_int <> min_int",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"comparison operators{sql:\"1 > 0\",result:true}",
    statement:"1 > 0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"comparison operators{sql:\"1 > 1\",result:false}",
    statement:"1 > 1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"comparison operators{sql:\"0 > 1\",result:false}",
    statement:"0 > 1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"comparison operators{sql:\"0 > 0\",result:false}",
    statement:"0 > 0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"comparison operators{sql:\"1 < 0\",result:false}",
    statement:"1 < 0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"comparison operators{sql:\"1 < 1\",result:false}",
    statement:"1 < 1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"comparison operators{sql:\"0 < 1\",result:true}",
    statement:"0 < 1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"comparison operators{sql:\"0 < 0\",result:false}",
    statement:"0 < 0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"comparison operators{sql:\"1   >   -0\",result:true}",
    statement:"1 > -0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"comparison operators{sql:\"-0  >   1\",result:false}",
    statement:"-0 > 1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"comparison operators{sql:\"-0  >   -0\",result:false}",
    statement:"-0 > -0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"comparison operators{sql:\"1   <   -0\",result:false}",
    statement:"1 < -0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"comparison operators{sql:\"-0  <   1\",result:true}",
    statement:"-0 < 1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"comparison operators{sql:\"-0  <   -0\",result:false}",
    statement:"-0 < -0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"comparison operators{sql:\"1       > min_int\",result:true}",
    statement:"1 > min_int",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"comparison operators{sql:\"min_int > 1\",result:false}",
    statement:"min_int > 1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"comparison operators{sql:\"min_int > min_int\",result:false}",
    statement:"min_int > min_int",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"comparison operators{sql:\"1       < min_int\",result:false}",
    statement:"1 < min_int",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"comparison operators{sql:\"min_int < 1\",result:true}",
    statement:"min_int < 1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"comparison operators{sql:\"min_int < 0\",result:true}",
    statement:"min_int < 0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"comparison operators{sql:\"min_int < -0\",result:true}",
    statement:"min_int < -0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"comparison operators{sql:\"1       < max_int\",result:true}",
    statement:"1 < max_int",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"comparison operators{sql:\"max_int < 1\",result:false}",
    statement:"max_int < 1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"comparison operators{sql:\"max_int < 0\",result:false}",
    statement:"max_int < 0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"comparison operators{sql:\"max_int < -0\",result:false}",
    statement:"max_int < -0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"comparison operators{sql:\"1 >= 0\",result:true}",
    statement:"1 >= 0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"comparison operators{sql:\"1 >= 1\",result:true}",
    statement:"1 >= 1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"comparison operators{sql:\"0 >= 1\",result:false}",
    statement:"0 >= 1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"comparison operators{sql:\"0 >= 0\",result:true}",
    statement:"0 >= 0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"comparison operators{sql:\"1 <= 0\",result:false}",
    statement:"1 <= 0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"comparison operators{sql:\"1 <= 1\",result:true}",
    statement:"1 <= 1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"comparison operators{sql:\"0 <= 1\",result:true}",
    statement:"0 <= 1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"comparison operators{sql:\"0 <= 0\",result:true}",
    statement:"0 <= 0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"comparison operators{sql:\"1   >=   -0\",result:true}",
    statement:"1 >= -0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"comparison operators{sql:\"-0  >=   1\",result:false}",
    statement:"-0 >= 1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"comparison operators{sql:\"-0  >=   -0\",result:true}",
    statement:"-0 >= -0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"comparison operators{sql:\"0   >=   -0\",result:true}",
    statement:"0 >= -0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"comparison operators{sql:\"-0  >=   0\",result:true}",
    statement:"-0 >= 0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"comparison operators{sql:\"1   <=   -0\",result:false}",
    statement:"1 <= -0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"comparison operators{sql:\"-0  <=   1\",result:true}",
    statement:"-0 <= 1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"comparison operators{sql:\"-0  <=   -0\",result:true}",
    statement:"-0 <= -0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"comparison operators{sql:\"0   <=   -0\",result:true}",
    statement:"0 <= -0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"comparison operators{sql:\"-0  <=   0\",result:true}",
    statement:"-0 <= 0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"comparison operators{sql:\"1       >= min_int\",result:true}",
    statement:"1 >= min_int",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"comparison operators{sql:\"min_int >= 1\",result:false}",
    statement:"min_int >= 1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"comparison operators{sql:\"min_int >= min_int\",result:true}",
    statement:"min_int >= min_int",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"comparison operators{sql:\"min_int >= 0\",result:false}",
    statement:"min_int >= 0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"comparison operators{sql:\"min_int >= -0\",result:false}",
    statement:"min_int >= -0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"comparison operators{sql:\"1       <= min_int\",result:false}",
    statement:"1 <= min_int",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"comparison operators{sql:\"min_int <= 1\",result:true}",
    statement:"min_int <= 1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"comparison operators{sql:\"min_int <= 0\",result:true}",
    statement:"min_int <= 0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"comparison operators{sql:\"min_int <= -0\",result:true}",
    statement:"min_int <= -0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"comparison operators{sql:\"1       <= max_int\",result:true}",
    statement:"1 <= max_int",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"comparison operators{sql:\"max_int <= 1\",result:false}",
    statement:"max_int <= 1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"comparison operators{sql:\"max_int <= 0\",result:false}",
    statement:"max_int <= 0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"comparison operators{sql:\"max_int <= -0\",result:false}",
    statement:"max_int <= -0",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"leading zeros{sql:\"01\",result:1}",
    statement:"01",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"leading zeros{sql:\"001\",result:1}",
    statement:"001",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"leading zeros{sql:\"0001\",result:1}",
    statement:"0001",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"leading zeros{sql:\"00001\",result:1}",
    statement:"00001",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"leading zeros{sql:\"000001\",result:1}",
    statement:"000001",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"leading zeros{sql:\"0000001\",result:1}",
    statement:"0000001",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"leading zeros{sql:\"00000001\",result:1}",
    statement:"00000001",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"leading zeros{sql:\"000000001\",result:1}",
    statement:"000000001",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"leading zeros{sql:\"0000000001\",result:1}",
    statement:"0000000001",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"leading zeros{sql:\"00000000001\",result:1}",
    statement:"00000000001",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"leading zeros{sql:\"000000000001\",result:1}",
    statement:"000000000001",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"leading zeros{sql:\"0000000000001\",result:1}",
    statement:"0000000000001",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"leading zeros{sql:\"00000000000001\",result:1}",
    statement:"00000000000001",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"leading zeros{sql:\"000000000000001\",result:1}",
    statement:"000000000000001",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"leading zeros{sql:\"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001\",result:1}",
    statement:"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"leading zeros{sql:\"-01\",result:-1}",
    statement:"-01",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"leading zeros{sql:\"-001\",result:-1}",
    statement:"-001",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"leading zeros{sql:\"-0001\",result:-1}",
    statement:"-0001",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"leading zeros{sql:\"-00001\",result:-1}",
    statement:"-00001",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"leading zeros{sql:\"-000001\",result:-1}",
    statement:"-000001",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"leading zeros{sql:\"-0000001\",result:-1}",
    statement:"-0000001",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"leading zeros{sql:\"-00000001\",result:-1}",
    statement:"-00000001",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"leading zeros{sql:\"-000000001\",result:-1}",
    statement:"-000000001",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"leading zeros{sql:\"-0000000001\",result:-1}",
    statement:"-0000000001",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"leading zeros{sql:\"-00000000001\",result:-1}",
    statement:"-00000000001",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"leading zeros{sql:\"-000000000001\",result:-1}",
    statement:"-000000000001",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"leading zeros{sql:\"-0000000000001\",result:-1}",
    statement:"-0000000000001",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"leading zeros{sql:\"-00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001\",result:-1}",
    statement:"-00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  }
]
bool::[
  {
    name:"boolean literals{sql:\"true\",r:true}",
    statement:"true",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  },
  {
    name:"boolean literals{sql:\"false\",r:false}",
    statement:"false",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"boolean literals{sql:\"NOT true\",r:false}",
    statement:"NOT true",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:false
    }
  },
  {
    name:"boolean literals{sql:\"NOT false\",r:true}",
    statement:"NOT false",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:true
    }
  }
]
'empty-symbol'::[
  {
    name:"Empty Symbol in table",
    statement:"SELECT \"\" FROM `{'': 1}`",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          '':1
        }
      ]
    }
  },
  {
    name:"Empty Symbol in globals",
    statement:"SELECT * FROM \"\"",
    env:{
      '':1
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:1
        }
      ]
    }
  },
  {
    name:"Empty Symbol in alias",
    statement:"SELECT t.v as \"\" FROM my_table as t",
    env:{
      my_table:{
        v:1
      }
    },
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          '':1
        }
      ]
    }
  }
]
'path-expressions'::[
  envs::{
    test_struct:{
      unambiguous_field:"this is unambiguous_field",
      ambiguous_field:"this is ambiguous_field (lowercase)",
      AMBIGUOUS_FIELD:"this is AMBIGUOUS_FIELD (uppercase)",
      unambiguous_lookup_field:"this is unambiguous_lookup_field",
      ambiguous_lookup_field:"this is ambiguous_lookup_field (lowercase)",
      AMBIGUOUS_LOOKUP_FIELD:"this is AMBIGUOUS_LOOKUP_FIELD (uppercase)"
    },
    unambiguous_variable:"unambiguous_lookup_field",
    ambiguous_case_variable:"ambiguous_lookup_field",
    AMBIGUOUS_CASE_VARIABLE:"AMBIGUOUS_LOOKUP_FIELD",
    table1:[
      {
        f:"this is from table1"
      }
    ],
    table2:[
      {
        f:"this is from table2"
      }
    ]
  },
  {
    name:"dotted path expression with unquoted identifiers accesses field unambiguous_field (lowercase)",
    statement:"test_struct.unambiguous_field",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"this is unambiguous_field"
    }
  },
  {
    name:"dotted path expression with unquoted identifiers accesses field UNAMBIGUOUS_FIELD (uppercase)",
    statement:"test_struct.UNAMBIGUOUS_FIELD",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"this is unambiguous_field"
    }
  },
  {
    name:"dotted path expression with quoted field name accesses field unambiguous_field (lowercase)",
    statement:"test_struct.\"unambiguous_field\"",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"this is unambiguous_field"
    }
  },
  {
    name:"dotted path expression with quoted field name accesses field UNAMBIGUOUS_FIELD (uppercase)",
    statement:"test_struct.\"UNAMBIGUOUS_FIELD\"",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
  {
    name:"dotted path expression with quoted field name accesses field ambiguous_field (lowercase)",
    statement:"test_struct.\"ambiguous_field\"",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"this is ambiguous_field (lowercase)"
    }
  },
  {
    name:"dotted path expression with quoted field name accesses field AMBIGUOUS_FIELD (uppercase)",
    statement:"test_struct.\"AMBIGUOUS_FIELD\"",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"this is AMBIGUOUS_FIELD (uppercase)"
    }
  },
  {
    name:"subscript with variable in lowercase",
    statement:"test_struct[unambiguous_variable]",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"this is unambiguous_lookup_field"
    }
  },
  {
    name:"subscript with variable in uppercase",
    statement:"test_struct[UNAMBIGUOUS_VARIABLE]",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"this is unambiguous_lookup_field"
    }
  },
  {
    name:"subscript with variable in mixed case",
    statement:"test_struct[uNaMbiGuOuS_VaRiAbLE]",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"this is unambiguous_lookup_field"
    }
  },
  {
    name:"subscript with literal string in lowercase",
    statement:"test_struct['ambiguous_lookup_field']",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"this is ambiguous_lookup_field (lowercase)"
    }
  },
  {
    name:"subscript with literal string in uppercase",
    statement:"test_struct['AMBIGUOUS_LOOKUP_FIELD']",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:"this is AMBIGUOUS_LOOKUP_FIELD (uppercase)"
    }
  },
  {
    name:"subscript with non-existent variable in lowercase",
    statement:"test_struct[unambiguous_field]",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"subscript with non-existent variable in uppercase",
    statement:"test_struct[TEST_FIELD]",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"path expression with table alias in uppercase",
    statement:"SELECT AN_ALIAS.f FROM table1 as an_alias",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          f:"this is from table1"
        }
      ]
    }
  },
  {
    name:"path expression with table alias in lowercase",
    statement:"SELECT an_alias.f FROM table1 as AN_ALIAS",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          f:"this is from table1"
        }
      ]
    }
  },
  {
    name:"path expression with ambiguous table alias (lowercase)",
    statement:"SELECT an_alias.f FROM table1 AS an_alias, table2 AS AN_ALIAS",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"path expression with mbiguous table alias (lowercase)",
    statement:"SELECT \"an_alias\".f FROM table1 AS an_alias, table2 AS AN_ALIAS",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          f:"this is from table1"
        }
      ]
    }
  },
  {
    name:"path expression with ambiguous table alias (uppercase)",
    statement:"SELECT \"AN_ALIAS\".f FROM table1 AS an_alias, table2 AS AN_ALIAS",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          f:"this is from table2"
        }
      ]
    }
  }
]
'simple-group-by'::[
  envs::{
    simple_1_col_1_group:[
      {
        col1:1
      },
      {
        col1:1
      }
    ],
    simple_1_col_2_groups:[
      {
        col1:1
      },
      {
        col1:1
      },
      {
        col1:2
      },
      {
        col1:2
      }
    ],
    simple_2_col_1_group:[
      {
        col1:1,
        col2:2
      },
      {
        col1:1,
        col2:2
      }
    ],
    sales_report:[
      {
        fiscal_year:2000T,
        rep:"Bob",
        total_sales:1.0
      },
      {
        fiscal_year:2000T,
        rep:"Jon",
        total_sales:2.0
      },
      {
        fiscal_year:2000T,
        rep:"Meg",
        total_sales:3.0
      },
      {
        fiscal_year:2001T,
        rep:"Bob",
        total_sales:10.0
      },
      {
        fiscal_year:2001T,
        rep:"Jon",
        total_sales:20.0
      },
      {
        fiscal_year:2001T,
        rep:"Meg",
        total_sales:30.0
      },
      {
        fiscal_year:2002T,
        rep:"Bob",
        total_sales:100.0
      },
      {
        fiscal_year:2002T,
        rep:"Jon",
        total_sales:200.0
      },
      {
        fiscal_year:2002T,
        rep:"Meg",
        total_sales:300.0
      }
    ],
    regional_sales_report:[
      {
        fiscal_year:2000T,
        region:"US",
        rep:"Bob",
        total_sales:1.0
      },
      {
        fiscal_year:2000T,
        region:"US",
        rep:"Jon",
        total_sales:2.0
      },
      {
        fiscal_year:2000T,
        region:"US",
        rep:"Meg",
        total_sales:3.0
      },
      {
        fiscal_year:2001T,
        region:"US",
        rep:"Bob",
        total_sales:10.0
      },
      {
        fiscal_year:2001T,
        region:"US",
        rep:"Jon",
        total_sales:20.0
      },
      {
        fiscal_year:2001T,
        region:"US",
        rep:"Meg",
        total_sales:30.0
      },
      {
        fiscal_year:2002T,
        region:"US",
        rep:"Bob",
        total_sales:100.0
      },
      {
        fiscal_year:2002T,
        region:"US",
        rep:"Jon",
        total_sales:200.0
      },
      {
        fiscal_year:2002T,
        region:"US",
        rep:"Meg",
        total_sales:300.0
      },
      {
        fiscal_year:2000T,
        region:"EU",
        rep:"Axl",
        total_sales:4.0
      },
      {
        fiscal_year:2000T,
        region:"EU",
        rep:"Sam",
        total_sales:5.0
      },
      {
        fiscal_year:2000T,
        region:"EU",
        rep:"Nya",
        total_sales:6.0
      },
      {
        fiscal_year:2001T,
        region:"EU",
        rep:"Axl",
        total_sales:40.0
      },
      {
        fiscal_year:2001T,
        region:"EU",
        rep:"Sam",
        total_sales:50.0
      },
      {
        fiscal_year:2001T,
        region:"EU",
        rep:"Nya",
        total_sales:60.0
      },
      {
        fiscal_year:2002T,
        region:"EU",
        rep:"Axl",
        total_sales:400.0
      },
      {
        fiscal_year:2002T,
        region:"EU",
        rep:"Sam",
        total_sales:500.0
      },
      {
        fiscal_year:2002T,
        region:"EU",
        rep:"Nya",
        total_sales:600.0
      }
    ],
    simple_sensor_data:[
      {
        station:1,
        sensor_readings:[
          1.1,
          1.2,
          1.3
        ]
      },
      {
        station:2,
        sensor_readings:[
          2.1,
          2.2,
          2.3
        ]
      },
      {
        station:3,
        sensor_readings:[
          3.1,
          3.2,
          3.3
        ]
      }
    ]
  },
  {
    name:"group by - 1 columm",
    statement:"SELECT col1 FROM simple_1_col_1_group GROUP BY col1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          col1:1
        }
      ]
    }
  },
  {
    name:"group by with group as that is not in select list - 1 column",
    statement:"SELECT col1 FROM simple_1_col_1_group GROUP BY col1 GROUP AS g",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          col1:1
        }
      ]
    }
  },
  {
    name:"group by with group as - 1 columm",
    statement:"SELECT col1, g FROM simple_1_col_1_group GROUP BY col1 GROUP AS g",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          col1:1,
          g:$bag::[
            {
              simple_1_col_1_group:{
                col1:1
              }
            },
            {
              simple_1_col_1_group:{
                col1:1
              }
            }
          ]
        }
      ]
    }
  },
  {
    name:"group by - 2 columms",
    statement:"SELECT col1, col2 FROM simple_2_col_1_group GROUP BY col1, col2",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          col1:1,
          col2:2
        }
      ]
    }
  },
  {
    name:"group by with group as variable that is not selected - 1 column",
    statement:"SELECT col1 FROM simple_1_col_1_group GROUP BY col1 GROUP AS g",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          col1:1
        }
      ]
    }
  },
  {
    name:"aliased from source group by with group as - 1 column",
    statement:"SELECT col1, g FROM simple_1_col_1_group AS src GROUP BY col1 GROUP AS g",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          col1:1,
          g:$bag::[
            {
              src:{
                col1:1
              }
            },
            {
              src:{
                col1:1
              }
            }
          ]
        }
      ]
    }
  },
  {
    name:"group by with group as - 2 columns",
    statement:"SELECT col1, col2, g FROM simple_2_col_1_group GROUP BY col1, col2 GROUP AS g",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          col1:1,
          col2:2,
          g:$bag::[
            {
              simple_2_col_1_group:{
                col1:1,
                col2:2
              }
            },
            {
              simple_2_col_1_group:{
                col1:1,
                col2:2
              }
            }
          ]
        }
      ]
    }
  },
  {
    name:"aliased from source group by with group as - 2 columns",
    statement:"SELECT col1, col2, g FROM simple_2_col_1_group AS src GROUP BY col1, col2 GROUP AS g",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          col1:1,
          col2:2,
          g:$bag::[
            {
              src:{
                col1:1,
                col2:2
              }
            },
            {
              src:{
                col1:1,
                col2:2
              }
            }
          ]
        }
      ]
    }
  },
  {
    name:"group by with count(*) - 1 column",
    statement:"SELECT col1, COUNT(*) as c FROM simple_1_col_1_group GROUP BY col1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          col1:1,
          c:2
        }
      ]
    }
  },
  {
    name:"group by with COUNT(*) - 2 columns",
    statement:"SELECT col1, col2, COUNT(*) as c FROM simple_2_col_1_group GROUP BY col1, col2",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          col1:1,
          col2:2,
          c:2
        }
      ]
    }
  },
  {
    name:"group by with MIN() - 1 column",
    statement:"SELECT rep, MIN(total_sales) as m FROM sales_report GROUP BY rep",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          rep:"Bob",
          m:1.0
        },
        {
          rep:"Jon",
          m:2.0
        },
        {
          rep:"Meg",
          m:3.0
        }
      ]
    }
  },
  {
    name:"simple group by with MAX() - 1 column",
    statement:"SELECT rep, MAX(total_sales) as m FROM sales_report GROUP BY rep",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          rep:"Bob",
          m:100.0
        },
        {
          rep:"Jon",
          m:200.0
        },
        {
          rep:"Meg",
          m:300.0
        }
      ]
    }
  },
  {
    name:"simple group by with MIN() - 2 column",
    statement:"SELECT fiscal_year, region, MIN(total_sales) as m FROM regional_sales_report GROUP BY \"fiscal_year\", region",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          fiscal_year:2000T,
          region:"US",
          m:1.0
        },
        {
          fiscal_year:2001T,
          region:"US",
          m:10.0
        },
        {
          fiscal_year:2002T,
          region:"US",
          m:100.0
        },
        {
          fiscal_year:2000T,
          region:"EU",
          m:4.0
        },
        {
          fiscal_year:2001T,
          region:"EU",
          m:40.0
        },
        {
          fiscal_year:2002T,
          region:"EU",
          m:400.0
        }
      ]
    }
  },
  {
    name:"simple group by with MAX() - 2 column",
    statement:"SELECT fiscal_year, region, MAX(total_sales) as m FROM regional_sales_report GROUP BY fiscal_year, region",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          fiscal_year:2000T,
          region:"US",
          m:3.0
        },
        {
          fiscal_year:2001T,
          region:"US",
          m:30.0
        },
        {
          fiscal_year:2002T,
          region:"US",
          m:300.0
        },
        {
          fiscal_year:2000T,
          region:"EU",
          m:6.0
        },
        {
          fiscal_year:2001T,
          region:"EU",
          m:60.0
        },
        {
          fiscal_year:2002T,
          region:"EU",
          m:600.0
        }
      ]
    }
  },
  {
    name:"group by with SUM() - 1 column",
    statement:"SELECT fiscal_year, SUM(total_sales) as total FROM sales_report GROUP BY fiscal_year",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          fiscal_year:2000T,
          total:6.0
        },
        {
          fiscal_year:2001T,
          total:60.0
        },
        {
          fiscal_year:2002T,
          total:600.0
        }
      ]
    }
  },
  {
    name:"group by with SUM() - 2 column",
    statement:"SELECT fiscal_year, region, SUM(total_sales) as total FROM regional_sales_report GROUP BY fiscal_year, region",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          fiscal_year:2000T,
          region:"US",
          total:6.0
        },
        {
          fiscal_year:2001T,
          region:"US",
          total:60.0
        },
        {
          fiscal_year:2002T,
          region:"US",
          total:600.0
        },
        {
          fiscal_year:2000T,
          region:"EU",
          total:15.0
        },
        {
          fiscal_year:2001T,
          region:"EU",
          total:150.0
        },
        {
          fiscal_year:2002T,
          region:"EU",
          total:1500.0
        }
      ]
    }
  },
  {
    name:"group by with group as (sales_report.fiscal_year)",
    statement:"SELECT fiscal_year, g FROM sales_report GROUP BY fiscal_year GROUP AS g",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          fiscal_year:2000T,
          g:$bag::[
            {
              sales_report:{
                fiscal_year:2000T,
                rep:"Bob",
                total_sales:1.0
              }
            },
            {
              sales_report:{
                fiscal_year:2000T,
                rep:"Jon",
                total_sales:2.0
              }
            },
            {
              sales_report:{
                fiscal_year:2000T,
                rep:"Meg",
                total_sales:3.0
              }
            }
          ]
        },
        {
          fiscal_year:2001T,
          g:$bag::[
            {
              sales_report:{
                fiscal_year:2001T,
                rep:"Bob",
                total_sales:10.0
              }
            },
            {
              sales_report:{
                fiscal_year:2001T,
                rep:"Jon",
                total_sales:20.0
              }
            },
            {
              sales_report:{
                fiscal_year:2001T,
                rep:"Meg",
                total_sales:30.0
              }
            }
          ]
        },
        {
          fiscal_year:2002T,
          g:$bag::[
            {
              sales_report:{
                fiscal_year:2002T,
                rep:"Bob",
                total_sales:100.0
              }
            },
            {
              sales_report:{
                fiscal_year:2002T,
                rep:"Jon",
                total_sales:200.0
              }
            },
            {
              sales_report:{
                fiscal_year:2002T,
                rep:"Meg",
                total_sales:300.0
              }
            }
          ]
        }
      ]
    }
  },
  {
    name:"group by with where",
    statement:"SELECT rep, SUM(total_sales) as total FROM sales_report WHERE fiscal_year >= `2001T` GROUP BY rep",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          rep:"Bob",
          total:110.0
        },
        {
          rep:"Jon",
          total:220.0
        },
        {
          rep:"Meg",
          total:330.0
        }
      ]
    }
  },
  {
    name:"group by with group as and where",
    statement:"SELECT rep, g FROM sales_report WHERE fiscal_year >= `2001T` GROUP BY rep GROUP AS g",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          rep:"Bob",
          g:$bag::[
            {
              sales_report:{
                fiscal_year:2001T,
                rep:"Bob",
                total_sales:10.0
              }
            },
            {
              sales_report:{
                fiscal_year:2002T,
                rep:"Bob",
                total_sales:100.0
              }
            }
          ]
        },
        {
          rep:"Jon",
          g:$bag::[
            {
              sales_report:{
                fiscal_year:2001T,
                rep:"Jon",
                total_sales:20.0
              }
            },
            {
              sales_report:{
                fiscal_year:2002T,
                rep:"Jon",
                total_sales:200.0
              }
            }
          ]
        },
        {
          rep:"Meg",
          g:$bag::[
            {
              sales_report:{
                fiscal_year:2001T,
                rep:"Meg",
                total_sales:30.0
              }
            },
            {
              sales_report:{
                fiscal_year:2002T,
                rep:"Meg",
                total_sales:300.0
              }
            }
          ]
        }
      ]
    }
  },
  {
    name:"group by with having and aggregate",
    statement:"SELECT rep FROM sales_report GROUP BY rep HAVING SUM(total_sales) > 300",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          rep:"Meg"
        }
      ]
    }
  },
  {
    name:"group by with having expression",
    statement:"SELECT sales_person, SUM(total_sales) as total FROM sales_report GROUP BY rep as sales_person HAVING sales_person IN ('Jon', 'Meg')",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          sales_person:"Jon",
          total:222.0
        },
        {
          sales_person:"Meg",
          total:333.0
        }
      ]
    }
  },
  {
    name:"group by with aliased group expression and having",
    statement:"SELECT changed FROM sales_report GROUP BY rep || '_changed' as changed HAVING changed = 'Meg_changed'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          changed:"Meg_changed"
        }
      ]
    }
  },
  {
    name:"GROUP BY bindings shadow FROM clause bindings",
    statement:"SELECT shadow_me FROM sales_report AS shadow_me GROUP BY shadow_me.rep || '_shadowed' AS shadow_me",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          shadow_me:"Bob_shadowed"
        },
        {
          shadow_me:"Jon_shadowed"
        },
        {
          shadow_me:"Meg_shadowed"
        }
      ]
    }
  },
  {
    name:"GROUP BY bindings shadow global variables",
    statement:"SELECT sales_report FROM sales_report AS origin GROUP BY origin.rep || '_shadowed' as sales_report",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          sales_report:"Bob_shadowed"
        },
        {
          sales_report:"Jon_shadowed"
        },
        {
          sales_report:"Meg_shadowed"
        }
      ]
    }
  },
  {
    name:"group by with shadowing aliased group expression",
    statement:"SELECT rep FROM sales_report GROUP BY rep || '_changed' as rep --Note: \"rep\" shadows sales_report.rep HAVING rep = 'Meg_changed'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          rep:"Meg_changed"
        }
      ]
    }
  },
  {
    name:"GROUP BY without GROUP AS and select list references table alias and column",
    statement:"SELECT origin.col1 FROM simple_1_col_1_group AS origin GROUP BY origin.col1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          col1:1
        }
      ]
    }
  },
  {
    name:"GROUP BY with GROUP AS and select list references table alias and column",
    statement:"SELECT origin.col1 FROM simple_1_col_1_group as origin GROUP BY origin.col1 GROUP AS grp",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          col1:1
        }
      ]
    }
  },
  {
    name:"SELECT * with GROUP BY",
    statement:"SELECT * FROM simple_1_col_1_group GROUP BY col1",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          col1:1
        }
      ]
    }
  },
  {
    name:"SELECT * with GROUP BY and GROUP AS",
    statement:"SELECT * FROM simple_1_col_1_group GROUP BY col1 GROUP AS grp",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          col1:1,
          grp:$bag::[
            {
              simple_1_col_1_group:{
                col1:1
              }
            },
            {
              simple_1_col_1_group:{
                col1:1
              }
            }
          ]
        }
      ]
    }
  },
  {
    name:"having without group by",
    statement:"SELECT rep, SUM(total_sales) as total FROM sales_report HAVING rep = \"Meg\"",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"GROUP BY binding referenced in FROM clause",
    statement:"SELECT * FROM sales_report, gb_binding WHERE fiscal_year >= `2001T` GROUP BY rep AS gb_binding",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"GROUP BY binding referenced in WHERE clause",
    statement:"SELECT * FROM sales_report, gb_binding WHERE gb_binding = 1 GROUP BY rep AS gb_binding",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"GROUP AS binding referenced in FROM clause",
    statement:"SELECT * FROM sales_report, gba_binding WHERE fiscal_year >= `2001T` GROUP BY rep GROUP AS gba_binding",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"GROUP AS binding referenced in WHERE clause",
    statement:"SELECT * FROM sales_report, gba_binding WHERE gba_binding = 1 GROUP BY rep GROUP AS gba_binding",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  }
]
'select-distinct'::[
  envs::{
    myTable:[
      {
        a:1,
        b:1
      },
      {
        a:2
      },
      {
        a:1
      },
      {
        a:1
      },
      {
        a:1
      }
    ]
  },
  {
    name:"distinct star single table",
    statement:"SELECT DISTINCT * FROM myTable",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:1,
          b:1
        },
        {
          a:2
        },
        {
          a:1
        }
      ]
    }
  },
  {
    name:"distinct column single table",
    statement:"SELECT DISTINCT a FROM myTable",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:1
        },
        {
          a:2
        }
      ]
    }
  }
]
'select-star'::[
  envs::{
    personnel:[
      {
        first_name:"Jean Luc",
        last_name:"Picard"
      }
    ],
    ships:[
      {
        id:Enterprise,
        registry:"NCC-1701-D"
      }
    ],
    ranks:{
      commander:{
        first_name:"William",
        last_name:"Riker"
      }
    }
  },
  {
    name:"* with no aliases on a single table (personnel)",
    statement:"SELECT * FROM personnel",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          first_name:"Jean Luc",
          last_name:"Picard"
        }
      ]
    }
  },
  {
    name:"* with no aliases on a single table (ships)",
    statement:"SELECT * FROM ships",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          id:Enterprise,
          registry:"NCC-1701-D"
        }
      ]
    }
  },
  {
    name:"* with multiple tables",
    statement:"SELECT * FROM personnel, ships",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          first_name:"Jean Luc",
          last_name:"Picard",
          id:Enterprise,
          registry:"NCC-1701-D"
        }
      ]
    }
  },
  {
    name:"alias.* on a single table (personnel)",
    statement:"SELECT p.* FROM personnel AS p",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          first_name:"Jean Luc",
          last_name:"Picard"
        }
      ]
    }
  },
  {
    name:"alias.* on a single table (ships)",
    statement:"SELECT s.* FROM ships AS s",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          id:Enterprise,
          registry:"NCC-1701-D"
        }
      ]
    }
  },
  {
    name:"alias.* with multiple tables",
    statement:"SELECT p.*, s.* FROM ships AS s, personnel AS p",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          first_name:"Jean Luc",
          last_name:"Picard",
          id:Enterprise,
          registry:"NCC-1701-D"
        }
      ]
    }
  },
  {
    name:"Two alias.* on a single table",
    statement:"SELECT s.*, s.* FROM ships AS s",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          id:'Enterprise", registry: "NCC-1701-D',
          id:Enterprise,
          registry:"NCC-1701-D"
        }
      ]
    }
  },
  {
    name:"Doubled alias.* with multiple tables",
    statement:"SELECT p.*, p.*, s.*, s.* FROM ships AS s, personnel AS p",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          first_name:"Jean Luc",
          last_name:"Picard",
          id:'Enterprise", registry: "NCC-1701-D',
          first_name:"Jean Luc",
          last_name:"Picard",
          id:Enterprise,
          registry:"NCC-1701-D"
        }
      ]
    }
  },
  {
    name:"alias1.alias2.*",
    statement:"SELECT r.commander.* FROM ranks as r",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          first_name:"William",
          last_name:"Riker"
        }
      ]
    }
  },
  {
    name:"foo[*] is disallowed",
    statement:"SELECT foo[*] FROM foo",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"foo.*.bar is disallowed",
    statement:"SELECT foo.*.bar FROM foo",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"foo['a'].* is disallowed",
    statement:"SELECT foo['a'].* FROM foo",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"foo[a].* is disallowed",
    statement:"SELECT foo[a].* FROM foo",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"foo[1].* is disallowed",
    statement:"SELECT foo[1].* FROM foo",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"disallowed uses of *, *",
    statement:"SELECT *, * FROM <<1>>",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"disallowed uses of *, alias.*",
    statement:"SELECT *, foo.* FROM <<{ a: 1 }>> as foo",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"disallowed uses of alias.*, *",
    statement:"SELECT foo.*, * FROM <<{ a: 1 }>> as foo",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"disallowed uses of <expr>, *",
    statement:"SELECT 1, * FROM <<{ a: 1 }>>",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"disallowed uses of *, <expr>",
    statement:"SELECT *, 1 FROM <<{ a: 1 }>>",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  }
]
'select-distinct-value'::[
  envs::{
    myList:[
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      2
    ]
  },
  {
    name:"distinct value single table",
    statement:"SELECT DISTINCT VALUE l FROM myList l",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        1,
        2
      ]
    }
  }
]
like::[
  envs::{
    course:[
      {
        sid:"S1",
        grade:"90%"
      },
      {
        sid:"S2",
        grade:"80%"
      }
    ]
  },
  {
    name:"null value on any of the 3 inputs returns false{likeExpr:\" null  LIKE null ESCAPE null \"}",
    statement:"SELECT * FROM course AS d WHERE null LIKE null ESCAPE null",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"null value on any of the 3 inputs returns false{likeExpr:\" d.sid LIKE null ESCAPE null \"}",
    statement:"SELECT * FROM course AS d WHERE d.sid LIKE null ESCAPE null",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"null value on any of the 3 inputs returns false{likeExpr:\" null  LIKE 'S1' ESCAPE null \"}",
    statement:"SELECT * FROM course AS d WHERE null LIKE 'S1' ESCAPE null",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"null value on any of the 3 inputs returns false{likeExpr:\" null  LIKE null ESCAPE '['  \"}",
    statement:"SELECT * FROM course AS d WHERE null LIKE null ESCAPE '['",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"null value on any of the 3 inputs returns false{likeExpr:\" null  LIKE 'S1' ESCAPE '['  \"}",
    statement:"SELECT * FROM course AS d WHERE null LIKE 'S1' ESCAPE '['",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"null value on any of the 3 inputs returns false{likeExpr:\" d.sid LIKE null ESCAPE '['  \"}",
    statement:"SELECT * FROM course AS d WHERE d.sid LIKE null ESCAPE '['",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"null value on any of the 3 inputs returns false{likeExpr:\" d.sid LIKE 'S1' ESCAPE null \"}",
    statement:"SELECT * FROM course AS d WHERE d.sid LIKE 'S1' ESCAPE null",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"null value on any of the 3 inputs returns false{likeExpr:\" null  LIKE null \"}",
    statement:"SELECT * FROM course AS d WHERE null LIKE null",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"null value on any of the 3 inputs returns false{likeExpr:\" d.sid LIKE null \"}",
    statement:"SELECT * FROM course AS d WHERE d.sid LIKE null",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"null value on any of the 3 inputs returns false{likeExpr:\" null  LIKE 'S1' \"}",
    statement:"SELECT * FROM course AS d WHERE null LIKE 'S1'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"empty string value on any of the 2 inputs (text and/or pattern){likeExpr:\" ''    LIKE null \",result:(bag)}",
    statement:"SELECT * FROM course AS d WHERE '' LIKE null",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"empty string value on any of the 2 inputs (text and/or pattern){likeExpr:\" null  LIKE ''   \",result:(bag)}",
    statement:"SELECT * FROM course AS d WHERE null LIKE ''",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"empty string value on any of the 2 inputs (text and/or pattern){likeExpr:\" d.sid LIKE ''   \",result:(bag)}",
    statement:"SELECT * FROM course AS d WHERE d.sid LIKE ''",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"empty string value on any of the 2 inputs (text and/or pattern){likeExpr:\" ''    LIKE 'S1' \",result:(bag)}",
    statement:"SELECT * FROM course AS d WHERE '' LIKE 'S1'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"empty string value on any of the 2 inputs (text and/or pattern){likeExpr:\" ''    LIKE '_'  \",result:(bag)}",
    statement:"SELECT * FROM course AS d WHERE '' LIKE '_'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"empty string value on any of the 2 inputs (text and/or pattern){likeExpr:\" ''    LIKE '%' \",result:(bag {sid:\"S1\",grade:\"90%\"} {sid:\"S2\",grade:\"80%\"})}",
    statement:"SELECT * FROM course AS d WHERE '' LIKE '%'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          sid:"S1",
          grade:"90%"
        },
        {
          sid:"S2",
          grade:"80%"
        }
      ]
    }
  },
  {
    name:"empty string value on any of the 2 inputs (text and/or pattern){likeExpr:\" ''    LIKE '' \",result:(bag {sid:\"S1\",grade:\"90%\"} {sid:\"S2\",grade:\"80%\"})}",
    statement:"SELECT * FROM course AS d WHERE '' LIKE ''",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          sid:"S1",
          grade:"90%"
        },
        {
          sid:"S2",
          grade:"80%"
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" '_'         \",pattern:\" '_'          \"}",
    statement:"SELECT * FROM `[true]` WHERE '_' LIKE '_'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" '_'         \",pattern:\" '%'          \"}",
    statement:"SELECT * FROM `[true]` WHERE '_' LIKE '%'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" '%'         \",pattern:\" '_'          \"}",
    statement:"SELECT * FROM `[true]` WHERE '%' LIKE '_'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" '%'         \",pattern:\" '%'          \"}",
    statement:"SELECT * FROM `[true]` WHERE '%' LIKE '%'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" 'A'         \",pattern:\" 'A'          \"}",
    statement:"SELECT * FROM `[true]` WHERE 'A' LIKE 'A'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" '\\\\'        \",pattern:\" '\\\\'         \"}",
    statement:"SELECT * FROM `[true]` WHERE '\\' LIKE '\\'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" ''        \",pattern:\" ''         \"}",
    statement:"SELECT * FROM `[true]` WHERE '$$' LIKE '$$'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" 'ABC'       \",pattern:\" '_BC'        \"}",
    statement:"SELECT * FROM `[true]` WHERE 'ABC' LIKE '_BC'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" 'ABC'       \",pattern:\" 'A_C'        \"}",
    statement:"SELECT * FROM `[true]` WHERE 'ABC' LIKE 'A_C'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" 'ABC'       \",pattern:\" 'AB_'        \"}",
    statement:"SELECT * FROM `[true]` WHERE 'ABC' LIKE 'AB_'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" 'ABC'       \",pattern:\" '___'        \"}",
    statement:"SELECT * FROM `[true]` WHERE 'ABC' LIKE '___'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" 'ABC'       \",pattern:\" 'A__'        \"}",
    statement:"SELECT * FROM `[true]` WHERE 'ABC' LIKE 'A__'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" 'ABC'       \",pattern:\" '__C'        \"}",
    statement:"SELECT * FROM `[true]` WHERE 'ABC' LIKE '__C'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" 'ABC'       \",pattern:\" '%'          \"}",
    statement:"SELECT * FROM `[true]` WHERE 'ABC' LIKE '%'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" 'ABC'       \",pattern:\" '%%%%'       \"}",
    statement:"SELECT * FROM `[true]` WHERE 'ABC' LIKE '%%%%'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" 'ABC'       \",pattern:\" '%ABC'       \"}",
    statement:"SELECT * FROM `[true]` WHERE 'ABC' LIKE '%ABC'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" 'ABC'       \",pattern:\" '%BC'        \"}",
    statement:"SELECT * FROM `[true]` WHERE 'ABC' LIKE '%BC'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" 'ABC'       \",pattern:\" '%C'         \"}",
    statement:"SELECT * FROM `[true]` WHERE 'ABC' LIKE '%C'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" 'ABC'       \",pattern:\" 'ABC%'       \"}",
    statement:"SELECT * FROM `[true]` WHERE 'ABC' LIKE 'ABC%'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" 'ABC'       \",pattern:\" 'AB%'        \"}",
    statement:"SELECT * FROM `[true]` WHERE 'ABC' LIKE 'AB%'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" 'ABC'       \",pattern:\" 'A%'         \"}",
    statement:"SELECT * FROM `[true]` WHERE 'ABC' LIKE 'A%'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" 'ABC'       \",pattern:\" 'A%%%'       \"}",
    statement:"SELECT * FROM `[true]` WHERE 'ABC' LIKE 'A%%%'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" 'ABC'       \",pattern:\" 'A%C'        \"}",
    statement:"SELECT * FROM `[true]` WHERE 'ABC' LIKE 'A%C'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" 'AAaBBbCCc' \",pattern:\" 'A%c'        \"}",
    statement:"SELECT * FROM `[true]` WHERE 'AAaBBbCCc' LIKE 'A%c'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" 'AAaBBbCCc' \",pattern:\" 'A%%c'       \"}",
    statement:"SELECT * FROM `[true]` WHERE 'AAaBBbCCc' LIKE 'A%%c'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" 'AAaBBbCCc' \",pattern:\" 'A%B%c'      \"}",
    statement:"SELECT * FROM `[true]` WHERE 'AAaBBbCCc' LIKE 'A%B%c'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" 'AAaBBbCCc' \",pattern:\" 'A%%B%%c'    \"}",
    statement:"SELECT * FROM `[true]` WHERE 'AAaBBbCCc' LIKE 'A%%B%%c'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" 'AAaBBbCCc' \",pattern:\" 'A%A%c'      \"}",
    statement:"SELECT * FROM `[true]` WHERE 'AAaBBbCCc' LIKE 'A%A%c'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" 'AAaBBbCCc' \",pattern:\" 'A%%%A%%%%c' \"}",
    statement:"SELECT * FROM `[true]` WHERE 'AAaBBbCCc' LIKE 'A%%%A%%%%c'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" 'AAaBBbCCc' \",pattern:\" 'A%Aa%c'     \"}",
    statement:"SELECT * FROM `[true]` WHERE 'AAaBBbCCc' LIKE 'A%Aa%c'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" 'AAaBBbCCc' \",pattern:\" 'A%%'        \"}",
    statement:"SELECT * FROM `[true]` WHERE 'AAaBBbCCc' LIKE 'A%%'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" 'AAaBBbCCc' \",pattern:\" '%B%C%'      \"}",
    statement:"SELECT * FROM `[true]` WHERE 'AAaBBbCCc' LIKE '%B%C%'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" 'AAaBBbCCc' \",pattern:\" '%B%C%%'     \"}",
    statement:"SELECT * FROM `[true]` WHERE 'AAaBBbCCc' LIKE '%B%C%%'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" 'AAaBBbCCc' \",pattern:\" '%bC%'       \"}",
    statement:"SELECT * FROM `[true]` WHERE 'AAaBBbCCc' LIKE '%bC%'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" 'AAaBBbCCc' \",pattern:\" '%b%C%'      \"}",
    statement:"SELECT * FROM `[true]` WHERE 'AAaBBbCCc' LIKE '%b%C%'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" 'ABC'       \",pattern:\" '%_%_%_%'    \"}",
    statement:"SELECT * FROM `[true]` WHERE 'ABC' LIKE '%_%_%_%'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" 'ABC'       \",pattern:\" '_%_%_%'     \"}",
    statement:"SELECT * FROM `[true]` WHERE 'ABC' LIKE '_%_%_%'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" 'ABC'       \",pattern:\" '%_%_%_'     \"}",
    statement:"SELECT * FROM `[true]` WHERE 'ABC' LIKE '%_%_%_'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" 'ABC'       \",pattern:\" '_%_%_'      \"}",
    statement:"SELECT * FROM `[true]` WHERE 'ABC' LIKE '_%_%_'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" 'ABC'       \",pattern:\" '_%%_%%%_'   \"}",
    statement:"SELECT * FROM `[true]` WHERE 'ABC' LIKE '_%%_%%%_'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" 'ABC'       \",pattern:\" '_%%B%%%_'   \"}",
    statement:"SELECT * FROM `[true]` WHERE 'ABC' LIKE '_%%B%%%_'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that match{text:\" 'AAaBBbCCc' \",pattern:\" '%__b%C_%'   \"}",
    statement:"SELECT * FROM `[true]` WHERE 'AAaBBbCCc' LIKE '%__b%C_%'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that DO NOT match{text:\" 'A'         \",pattern:\" 'a'          \"}",
    statement:"SELECT * FROM `[true]` WHERE 'A' LIKE 'a'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that DO NOT match{text:\" '\\\\'        \",pattern:\" '/'         \"}",
    statement:"SELECT * FROM `[true]` WHERE '\\' LIKE '/'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that DO NOT match{text:\" ''        \",pattern:\" '^'        \"}",
    statement:"SELECT * FROM `[true]` WHERE '$$' LIKE '^$$'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that DO NOT match{text:\" 'ABC'       \",pattern:\" '_AC'        \"}",
    statement:"SELECT * FROM `[true]` WHERE 'ABC' LIKE '_AC'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that DO NOT match{text:\" 'ABC'       \",pattern:\" 'A_B'        \"}",
    statement:"SELECT * FROM `[true]` WHERE 'ABC' LIKE 'A_B'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that DO NOT match{text:\" 'ABC'       \",pattern:\" 'AB_C'       \"}",
    statement:"SELECT * FROM `[true]` WHERE 'ABC' LIKE 'AB_C'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that DO NOT match{text:\" 'ABC'       \",pattern:\" '_ABC'       \"}",
    statement:"SELECT * FROM `[true]` WHERE 'ABC' LIKE '_ABC'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that DO NOT match{text:\" 'ABC'       \",pattern:\" 'ABC_'       \"}",
    statement:"SELECT * FROM `[true]` WHERE 'ABC' LIKE 'ABC_'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that DO NOT match{text:\" 'ABC'       \",pattern:\" '__'         \"}",
    statement:"SELECT * FROM `[true]` WHERE 'ABC' LIKE '__'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that DO NOT match{text:\" 'ABC'       \",pattern:\" '____'       \"}",
    statement:"SELECT * FROM `[true]` WHERE 'ABC' LIKE '____'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that DO NOT match{text:\" 'ABC'       \",pattern:\" 'B%'         \"}",
    statement:"SELECT * FROM `[true]` WHERE 'ABC' LIKE 'B%'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that DO NOT match{text:\" 'ABC'       \",pattern:\" '%B'         \"}",
    statement:"SELECT * FROM `[true]` WHERE 'ABC' LIKE '%B'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that DO NOT match{text:\" 'ABC'       \",pattern:\" '%BCD'       \"}",
    statement:"SELECT * FROM `[true]` WHERE 'ABC' LIKE '%BCD'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that DO NOT match{text:\" 'ABC'       \",pattern:\" 'B%C'        \"}",
    statement:"SELECT * FROM `[true]` WHERE 'ABC' LIKE 'B%C'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that DO NOT match{text:\" 'AAaBBbCCc' \",pattern:\" 'A%Xc'       \"}",
    statement:"SELECT * FROM `[true]` WHERE 'AAaBBbCCc' LIKE 'A%Xc'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that DO NOT match{text:\" 'AAaBBbCCc' \",pattern:\" 'AX%c'       \"}",
    statement:"SELECT * FROM `[true]` WHERE 'AAaBBbCCc' LIKE 'AX%c'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that DO NOT match{text:\" 'AAaBBbCCc' \",pattern:\" 'A%X%c'      \"}",
    statement:"SELECT * FROM `[true]` WHERE 'AAaBBbCCc' LIKE 'A%X%c'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that DO NOT match{text:\" 'AAaBBbCCc' \",pattern:\" 'A%%X%%c'    \"}",
    statement:"SELECT * FROM `[true]` WHERE 'AAaBBbCCc' LIKE 'A%%X%%c'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that DO NOT match{text:\" 'AAaBBbCCc' \",pattern:\" 'A%%%X%%%%c' \"}",
    statement:"SELECT * FROM `[true]` WHERE 'AAaBBbCCc' LIKE 'A%%%X%%%%c'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that DO NOT match{text:\" 'AAaBBbCCc' \",pattern:\" 'A%Aba%c'    \"}",
    statement:"SELECT * FROM `[true]` WHERE 'AAaBBbCCc' LIKE 'A%Aba%c'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that DO NOT match{text:\" 'AAaBBbCCc' \",pattern:\" 'X%%'        \"}",
    statement:"SELECT * FROM `[true]` WHERE 'AAaBBbCCc' LIKE 'X%%'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"non-empty strings for text and pattern that DO NOT match{text:\" 'ABC'       \",pattern:\" '%_%_%_%_%'  \"}",
    statement:"SELECT * FROM `[true]` WHERE 'ABC' LIKE '%_%_%_%_%'",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"like-expression with ESCAPE specified that match{text:\" '_'          \",pattern:\" '[_'            \"}",
    statement:"SELECT * FROM `[true]` WHERE '_' LIKE '[_' ESCAPE '['",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"like-expression with ESCAPE specified that match{text:\" '%'          \",pattern:\" '[%'            \"}",
    statement:"SELECT * FROM `[true]` WHERE '%' LIKE '[%' ESCAPE '['",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"like-expression with ESCAPE specified that match{text:\" '100%'       \",pattern:\" '100[%'         \"}",
    statement:"SELECT * FROM `[true]` WHERE '100%' LIKE '100[%' ESCAPE '['",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"like-expression with ESCAPE specified that match{text:\" '100%'       \",pattern:\" '%[%'           \"}",
    statement:"SELECT * FROM `[true]` WHERE '100%' LIKE '%[%' ESCAPE '['",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"like-expression with ESCAPE specified that match{text:\" '100%'       \",pattern:\" '1__[%'         \"}",
    statement:"SELECT * FROM `[true]` WHERE '100%' LIKE '1__[%' ESCAPE '['",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"like-expression with ESCAPE specified that match{text:\" '100%'       \",pattern:\" '1%[%'          \"}",
    statement:"SELECT * FROM `[true]` WHERE '100%' LIKE '1%[%' ESCAPE '['",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"like-expression with ESCAPE specified that match{text:\" '11%22%33%'  \",pattern:\" '1%[%2%[%3%[%'  \"}",
    statement:"SELECT * FROM `[true]` WHERE '11%22%33%' LIKE '1%[%2%[%3%[%' ESCAPE '['",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"like-expression with ESCAPE specified that match{text:\" '11%22%33%'  \",pattern:\" '1_[%2%[%3_[%'  \"}",
    statement:"SELECT * FROM `[true]` WHERE '11%22%33%' LIKE '1_[%2%[%3_[%' ESCAPE '['",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"like-expression with ESCAPE specified that match{text:\" '11%22%33%'  \",pattern:\" '%[%%[%%[%'     \"}",
    statement:"SELECT * FROM `[true]` WHERE '11%22%33%' LIKE '%[%%[%%[%' ESCAPE '['",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"like-expression with ESCAPE specified that match{text:\" '11%22%33%'  \",pattern:\" '__[%__[%__[%'  \"}",
    statement:"SELECT * FROM `[true]` WHERE '11%22%33%' LIKE '__[%__[%__[%' ESCAPE '['",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"like-expression with ESCAPE specified that match{text:\" '1_000_000%' \",pattern:\" '1[_000[_000[%' \"}",
    statement:"SELECT * FROM `[true]` WHERE '1_000_000%' LIKE '1[_000[_000[%' ESCAPE '['",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"like-expression with ESCAPE specified that match{text:\" '1_000_000%' \",pattern:\" '_[_000[_000[%' \"}",
    statement:"SELECT * FROM `[true]` WHERE '1_000_000%' LIKE '_[_000[_000[%' ESCAPE '['",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"like-expression with ESCAPE specified that match{text:\" '1_000_000%' \",pattern:\" '%[_000[_000[%' \"}",
    statement:"SELECT * FROM `[true]` WHERE '1_000_000%' LIKE '%[_000[_000[%' ESCAPE '['",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"like-expression with ESCAPE specified that match{text:\" '1_000_000%' \",pattern:\" '%[_0_0[_000[%' \"}",
    statement:"SELECT * FROM `[true]` WHERE '1_000_000%' LIKE '%[_0_0[_000[%' ESCAPE '['",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"like-expression with ESCAPE specified that match{text:\" '1_000_000%' \",pattern:\" '%[_0%0[_000[%' \"}",
    statement:"SELECT * FROM `[true]` WHERE '1_000_000%' LIKE '%[_0%0[_000[%' ESCAPE '['",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"like-expression with ESCAPE specified that match{text:\" '1_000_000%' \",pattern:\" '%[_0%0[__%_[%' \"}",
    statement:"SELECT * FROM `[true]` WHERE '1_000_000%' LIKE '%[_0%0[__%_[%' ESCAPE '['",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"like-expression with ESCAPE specified that match{text:\" '100%'       \",pattern:\" '1_%'           \"}",
    statement:"SELECT * FROM `[true]` WHERE '100%' LIKE '1_%' ESCAPE '['",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          _1:true
        }
      ]
    }
  },
  {
    name:"like-expression with ESCAPE specified that DO NOT match{text:\" '_'    \",pattern:\" '[_[_'   \"}",
    statement:"SELECT * FROM `[true]` WHERE '_' LIKE '[_[_' ESCAPE '['",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"like-expression with ESCAPE specified that DO NOT match{text:\" '_'    \",pattern:\" '_[_'    \"}",
    statement:"SELECT * FROM `[true]` WHERE '_' LIKE '_[_' ESCAPE '['",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"like-expression with ESCAPE specified that DO NOT match{text:\" '%'    \",pattern:\" '[%[%'   \"}",
    statement:"SELECT * FROM `[true]` WHERE '%' LIKE '[%[%' ESCAPE '['",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"like-expression with ESCAPE specified that DO NOT match{text:\" '100%' \",pattern:\" '1000[%' \"}",
    statement:"SELECT * FROM `[true]` WHERE '100%' LIKE '1000[%' ESCAPE '['",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"like-expression with ESCAPE specified that DO NOT match{text:\" '100%' \",pattern:\" '[%100'  \"}",
    statement:"SELECT * FROM `[true]` WHERE '100%' LIKE '[%100' ESCAPE '['",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"like-expression with ESCAPE specified that DO NOT match{text:\" '100%' \",pattern:\" '1_[%_'  \"}",
    statement:"SELECT * FROM `[true]` WHERE '100%' LIKE '1_[%_' ESCAPE '['",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"like-expression with ESCAPE specified that DO NOT match{text:\" '100%' \",pattern:\" '1%_[%1' \"}",
    statement:"SELECT * FROM `[true]` WHERE '100%' LIKE '1%_[%1' ESCAPE '['",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"Incorrect type for text",
    statement:"SELECT * FROM `[true]` WHERE 1 LIKE '1'",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"Incorrect type for pattern",
    statement:"SELECT * FROM `[true]` WHERE 'a' LIKE 2",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"Incorrect type for Escape",
    statement:"SELECT * FROM `[true]` WHERE 'a' LIKE 'a' ESCAPE 3",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"More than one character given for ESCAPE",
    statement:"SELECT * FROM `[true]` WHERE 'a' LIKE 'a' ESCAPE 'aa'",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  }
]
'repeated-field-on-struct'::[
  {
    name:"repeated field on struct is ambiguous{identifier:\"REPEATED\",cn:9,bn:\"REPEATED\"}",
    statement:"SELECT REPEATED FROM `[{repeated:1, repeated:2}]`",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  },
  {
    name:"repeated field on struct is ambiguous{identifier:\" \\\"repeated\\\" \",cn:10,bn:\"repeated\"}",
    statement:"SELECT \"repeated\" FROM `[{repeated:1, repeated:2}]`",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ]
  }
]
'empty-string-for-like-pattern'::[
  envs::{
    people:[
      {
        first_name:"John",
        last_name:"Doe"
      }
    ]
  },
  {
    name:"Empty String for LIKE pattern evaluates to false",
    statement:"SELECT * FROM people AS p WHERE p.first_name LIKE ''",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
      ]
    }
  },
  {
    name:"Empty String for LIKE pattern and text evaluates to true",
    statement:"SELECT * FROM people AS p WHERE '' LIKE ''",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          first_name:"John",
          last_name:"Doe"
        }
      ]
    }
  }
]
max::[
  envs::{
    data:[
      1,
      1,
      1,
      2
    ]
  },
  {
    name:"max top level{agg:'MAX(data)',result:(success 2)}",
    statement:"MAX(data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"max top level{agg:'MAX(ALL data)',result:(success 2)}",
    statement:"MAX(ALL data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"max top level{agg:'MAX(DISTINCT data)',result:(success 2)}",
    statement:"MAX(DISTINCT data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"max select{agg:'MAX(d)',result:2}",
    statement:"SELECT MAX(d) AS a FROM data d",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:2
        }
      ]
    }
  },
  {
    name:"max select{agg:'MAX(ALL d)',result:2}",
    statement:"SELECT MAX(ALL d) AS a FROM data d",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:2
        }
      ]
    }
  },
  {
    name:"max select{agg:'MAX(DISTINCT d)',result:2}",
    statement:"SELECT MAX(DISTINCT d) AS a FROM data d",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:2
        }
      ]
    }
  },
  {
    name:"max group by{agg:'MAX(t.b)',expectedF1:2,expectedF2:4}",
    statement:"SELECT t.a, MAX(t.b) as c FROM << {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 2}, {'a': 'f2', 'b': 2}, {'a': 'f2', 'b': 4} >> AS t GROUP BY t.a",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:"f1",
          c:2
        },
        {
          a:"f2",
          c:4
        }
      ]
    }
  },
  {
    name:"max group by{agg:'MAX(ALL t.b)',expectedF1:2,expectedF2:4}",
    statement:"SELECT t.a, MAX(ALL t.b) as c FROM << {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 2}, {'a': 'f2', 'b': 2}, {'a': 'f2', 'b': 4} >> AS t GROUP BY t.a",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:"f1",
          c:2
        },
        {
          a:"f2",
          c:4
        }
      ]
    }
  },
  {
    name:"max group by{agg:'MAX(DISTINCT t.b)',expectedF1:2,expectedF2:4}",
    statement:"SELECT t.a, MAX(DISTINCT t.b) as c FROM << {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 2}, {'a': 'f2', 'b': 2}, {'a': 'f2', 'b': 4} >> AS t GROUP BY t.a",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:"f1",
          c:2
        },
        {
          a:"f2",
          c:4
        }
      ]
    }
  }
]
avg::[
  envs::{
    data:[
      1,
      1,
      1,
      2
    ]
  },
  {
    name:"avg top level{agg:'AVG(data)',result:(success 1.25)}",
    statement:"AVG(data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1.25
    }
  },
  {
    name:"avg top level{agg:'AVG(ALL data)',result:(success 1.25)}",
    statement:"AVG(ALL data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1.25
    }
  },
  {
    name:"avg top level{agg:'AVG(DISTINCT data)',result:(success 1.5)}",
    statement:"AVG(DISTINCT data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1.5
    }
  },
  {
    name:"avg select{agg:'AVG(d)',result:1.25}",
    statement:"SELECT AVG(d) AS a FROM data d",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:1.25
        }
      ]
    }
  },
  {
    name:"avg select{agg:'AVG(ALL d)',result:1.25}",
    statement:"SELECT AVG(ALL d) AS a FROM data d",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:1.25
        }
      ]
    }
  },
  {
    name:"avg select{agg:'AVG(DISTINCT d)',result:1.5}",
    statement:"SELECT AVG(DISTINCT d) AS a FROM data d",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:1.5
        }
      ]
    }
  },
  {
    name:"avg group by{agg:'AVG(t.b)',expectedF1:1.25,expectedF2:3.}",
    statement:"SELECT t.a, AVG(t.b) as c FROM << {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 2}, {'a': 'f2', 'b': 2}, {'a': 'f2', 'b': 4} >> AS t GROUP BY t.a",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:"f1",
          c:1.25
        },
        {
          a:"f2",
          c:3.
        }
      ]
    }
  },
  {
    name:"avg group by{agg:'AVG(ALL t.b)',expectedF1:1.25,expectedF2:3.}",
    statement:"SELECT t.a, AVG(ALL t.b) as c FROM << {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 2}, {'a': 'f2', 'b': 2}, {'a': 'f2', 'b': 4} >> AS t GROUP BY t.a",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:"f1",
          c:1.25
        },
        {
          a:"f2",
          c:3.
        }
      ]
    }
  },
  {
    name:"avg group by{agg:'AVG(DISTINCT t.b)',expectedF1:1.5,expectedF2:3.}",
    statement:"SELECT t.a, AVG(DISTINCT t.b) as c FROM << {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 2}, {'a': 'f2', 'b': 2}, {'a': 'f2', 'b': 4} >> AS t GROUP BY t.a",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:"f1",
          c:1.5
        },
        {
          a:"f2",
          c:3.
        }
      ]
    }
  }
]
count::[
  envs::{
    data:[
      1,
      1,
      1,
      2
    ]
  },
  {
    name:"count top level{agg:'COUNT(data)',result:(success 4)}",
    statement:"COUNT(data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"count top level{agg:'COUNT(ALL data)',result:(success 4)}",
    statement:"COUNT(ALL data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"count top level{agg:'COUNT(DISTINCT data)',result:(success 2)}",
    statement:"COUNT(DISTINCT data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"count select{agg:'COUNT(d)',result:4}",
    statement:"SELECT COUNT(d) AS a FROM data d",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:4
        }
      ]
    }
  },
  {
    name:"count select{agg:'COUNT(ALL d)',result:4}",
    statement:"SELECT COUNT(ALL d) AS a FROM data d",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:4
        }
      ]
    }
  },
  {
    name:"count select{agg:'COUNT(DISTINCT d)',result:2}",
    statement:"SELECT COUNT(DISTINCT d) AS a FROM data d",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:2
        }
      ]
    }
  },
  {
    name:"count group by{agg:'COUNT(t.b)',expectedF1:4,expectedF2:2}",
    statement:"SELECT t.a, COUNT(t.b) as c FROM << {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 2}, {'a': 'f2', 'b': 2}, {'a': 'f2', 'b': 4} >> AS t GROUP BY t.a",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:"f1",
          c:4
        },
        {
          a:"f2",
          c:2
        }
      ]
    }
  },
  {
    name:"count group by{agg:'COUNT(ALL t.b)',expectedF1:4,expectedF2:2}",
    statement:"SELECT t.a, COUNT(ALL t.b) as c FROM << {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 2}, {'a': 'f2', 'b': 2}, {'a': 'f2', 'b': 4} >> AS t GROUP BY t.a",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:"f1",
          c:4
        },
        {
          a:"f2",
          c:2
        }
      ]
    }
  },
  {
    name:"count group by{agg:'COUNT(DISTINCT t.b)',expectedF1:2,expectedF2:2}",
    statement:"SELECT t.a, COUNT(DISTINCT t.b) as c FROM << {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 2}, {'a': 'f2', 'b': 2}, {'a': 'f2', 'b': 4} >> AS t GROUP BY t.a",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:"f1",
          c:2
        },
        {
          a:"f2",
          c:2
        }
      ]
    }
  }
]
sum::[
  envs::{
    data:[
      1,
      1,
      1,
      2
    ]
  },
  {
    name:"sum top level{agg:'SUM(data)',result:(success 5)}",
    statement:"SUM(data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"sum top level{agg:'SUM(ALL data)',result:(success 5)}",
    statement:"SUM(ALL data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"sum top level{agg:'SUM(DISTINCT data)',result:(success 3)}",
    statement:"SUM(DISTINCT data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3
    }
  },
  {
    name:"sum select{agg:'SUM(d)',result:5}",
    statement:"SELECT SUM(d) AS a FROM data d",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:5
        }
      ]
    }
  },
  {
    name:"sum select{agg:'SUM(ALL d)',result:5}",
    statement:"SELECT SUM(ALL d) AS a FROM data d",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:5
        }
      ]
    }
  },
  {
    name:"sum select{agg:'SUM(DISTINCT d)',result:3}",
    statement:"SELECT SUM(DISTINCT d) AS a FROM data d",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:3
        }
      ]
    }
  },
  {
    name:"sum group by{agg:'SUM(t.b)',expectedF1:5,expectedF2:6}",
    statement:"SELECT t.a, SUM(t.b) as c FROM << {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 2}, {'a': 'f2', 'b': 2}, {'a': 'f2', 'b': 4} >> AS t GROUP BY t.a",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:"f1",
          c:5
        },
        {
          a:"f2",
          c:6
        }
      ]
    }
  },
  {
    name:"sum group by{agg:'SUM(ALL t.b)',expectedF1:5,expectedF2:6}",
    statement:"SELECT t.a, SUM(ALL t.b) as c FROM << {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 2}, {'a': 'f2', 'b': 2}, {'a': 'f2', 'b': 4} >> AS t GROUP BY t.a",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:"f1",
          c:5
        },
        {
          a:"f2",
          c:6
        }
      ]
    }
  },
  {
    name:"sum group by{agg:'SUM(DISTINCT t.b)',expectedF1:3,expectedF2:6}",
    statement:"SELECT t.a, SUM(DISTINCT t.b) as c FROM << {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 2}, {'a': 'f2', 'b': 2}, {'a': 'f2', 'b': 4} >> AS t GROUP BY t.a",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:"f1",
          c:3
        },
        {
          a:"f2",
          c:6
        }
      ]
    }
  }
]
min::[
  envs::{
    data:[
      1,
      1,
      1,
      2
    ]
  },
  {
    name:"min top level{agg:'MIN(data)',result:(success 1)}",
    statement:"MIN(data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"min top level{agg:'MIN(ALL data)',result:(success 1)}",
    statement:"MIN(ALL data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"min top level{agg:'MIN(DISTINCT data)',result:(success 1)}",
    statement:"MIN(DISTINCT data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"min select{agg:'MIN(d)',result:1}",
    statement:"SELECT MIN(d) AS a FROM data d",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:1
        }
      ]
    }
  },
  {
    name:"min select{agg:'MIN(ALL d)',result:1}",
    statement:"SELECT MIN(ALL d) AS a FROM data d",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:1
        }
      ]
    }
  },
  {
    name:"min select{agg:'MIN(DISTINCT d)',result:1}",
    statement:"SELECT MIN(DISTINCT d) AS a FROM data d",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:1
        }
      ]
    }
  },
  {
    name:"min group by{agg:'MIN(t.b)',expectedF1:1,expectedF2:2}",
    statement:"SELECT t.a, MIN(t.b) as c FROM << {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 2}, {'a': 'f2', 'b': 2}, {'a': 'f2', 'b': 4} >> AS t GROUP BY t.a",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:"f1",
          c:1
        },
        {
          a:"f2",
          c:2
        }
      ]
    }
  },
  {
    name:"min group by{agg:'MIN(ALL t.b)',expectedF1:1,expectedF2:2}",
    statement:"SELECT t.a, MIN(ALL t.b) as c FROM << {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 2}, {'a': 'f2', 'b': 2}, {'a': 'f2', 'b': 4} >> AS t GROUP BY t.a",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:"f1",
          c:1
        },
        {
          a:"f2",
          c:2
        }
      ]
    }
  },
  {
    name:"min group by{agg:'MIN(DISTINCT t.b)',expectedF1:1,expectedF2:2}",
    statement:"SELECT t.a, MIN(DISTINCT t.b) as c FROM << {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 2}, {'a': 'f2', 'b': 2}, {'a': 'f2', 'b': 4} >> AS t GROUP BY t.a",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:"f1",
          c:1
        },
        {
          a:"f2",
          c:2
        }
      ]
    }
  }
]