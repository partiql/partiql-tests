envs::{
  data:[
    1,
    1,
    1,
    2
  ],
  numbers:[
    1,
    2.0,
    3e0,
    4,
    5.
  ],
}

coll_max::[
  {
    name:"max top level{agg:'COLL_MAX(data)',result:(success 2)}",
    statement:"COLL_MAX(data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"coll_max top level{agg:'COLL_MAX(ALL data)',result:(success 2)}",
    statement:"COLL_MAX(ALL data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"coll_max top level{agg:'COLL_MAX(DISTINCT data)',result:(success 2)}",
    statement:"COLL_MAX(DISTINCT data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"topLevelCollMax",
    statement:"COLL_MAX(numbers)",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:5.
    }
  },
  {
    name:"topLevelDistinctCollMax",
    statement:"COLL_MAX(DISTINCT numbers)",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:5.
    }
  },
  {
    name:"topLevelAllCollMax",
    statement:"COLL_MAX(ALL numbers)",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:5.
    }
  },
]

coll_avg::[
  {
    name:"coll_avg top level{agg:'COLL_AVG(data)',result:(success 1.25)}",
    statement:"COLL_AVG(data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1.25
    }
  },
  {
    name:"coll_avg top level{agg:'COLL_AVG(ALL data)',result:(success 1.25)}",
    statement:"COLL_AVG(ALL data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1.25
    }
  },
  {
    name:"coll_avg top level{agg:'COLL_AVG(DISTINCT data)',result:(success 1.5)}",
    statement:"COLL_AVG(DISTINCT data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1.5
    }
  },
  {
    name:"topLevelCollAvg",
    statement:"COLL_AVG(numbers)",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:3.0
    }
  },
  {
    name:"topLevelDistinctCollAvg",
    statement:"COLL_AVG(DISTINCT [1,1,1,1,1,3])",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:2.
    }
  },
  {
    name:"topLevelCollAvgOnlyInt",
    statement:"COLL_AVG([2,2,2,4])",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:2.5
    }
  },
]

coll_count::[
  {
    name:"coll_count top level{agg:'COLL_COUNT(data)',result:(success 4)}",
    statement:"COLL_COUNT(data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"coll_count top level{agg:'COLL_COUNT(ALL data)',result:(success 4)}",
    statement:"COLL_COUNT(ALL data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"coll_count top level{agg:'COLL_COUNT(DISTINCT data)',result:(success 2)}",
    statement:"COLL_COUNT(DISTINCT data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"topLevelCollCountDistinct",
    statement:"COLL_COUNT(DISTINCT [1,1,1,1,2])",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:2
    }
  },
  {
    name:"topLevelCollCount",
    statement:"COLL_COUNT(numbers)",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:5
    }
  },
  {
    name:"topLevelAllCollCount",
    statement:"COLL_COUNT(ALL numbers)",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:5
    }
  },
]

coll_sum::[
  {
    name:"coll_sum top level{agg:'COLL_SUM(data)',result:(success 5)}",
    statement:"COLL_SUM(data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"coll_sum top level{agg:'COLL_SUM(ALL data)',result:(success 5)}",
    statement:"COLL_SUM(ALL data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"coll_sum top level{agg:'COLL_SUM(DISTINCT data)',result:(success 3)}",
    statement:"COLL_SUM(DISTINCT data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3
    }
  },
  {
    name:"topLevelCollSum",
    statement:"COLL_SUM(numbers)",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:15.0
    }
  },
  {
    name:"topLevelAllCollSum",
    statement:"COLL_SUM(ALL numbers)",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:15.0
    }
  },
  {
    name:"topLevelDistinctCollSum",
    statement:"COLL_SUM(DISTINCT [1,1,1,1,1,1,1,2])",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:3
    }
  },
]

coll_min::[
  {
    name:"coll_min top level{agg:'COLL_MIN(data)',result:(success 1)}",
    statement:"COLL_MIN(data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"coll_min top level{agg:'COLL_MIN(ALL data)',result:(success 1)}",
    statement:"COLL_MIN(ALL data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"coll_min top level{agg:'COLL_MIN(DISTINCT data)',result:(success 1)}",
    statement:"COLL_MIN(DISTINCT data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"topLevelCollMin",
    statement:"COLL_MIN(numbers)",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:1
    }
  },
  {
    name:"topLevelDistinctCollMin",
    statement:"COLL_MIN(DISTINCT numbers)",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:1
    }
  },
  {
    name:"topLevelAllCollMin",
    statement:"COLL_MIN(ALL numbers)",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:1
    }
  },
]

coll_agg_in_select::[
  {
    name:"selectValueCollAggregate",
    statement:"SELECT VALUE COLL_COUNT(v) + COLL_SUM(v) FROM <<numbers, numbers>> AS v",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:$bag::[
        20.0,
        20.0
      ]
    }
  },
]
