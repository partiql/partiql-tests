envs::{
  numbers:[
    1,
    2.0,
    3e0,
    4,
    5.
  ],
}

aggregates::[
  {
    name:"topLevelCollCountDistinct",
    statement:"COLL_COUNT(DISTINCT [1,1,1,1,2])",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:2
    }
  },
  {
    name:"topLevelCollCount",
    statement:"COLL_COUNT(numbers)",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:5
    }
  },
  {
    name:"topLevelAllCollCount",
    statement:"COLL_COUNT(ALL numbers)",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:5
    }
  },
  {
    name:"topLevelCollSum",
    statement:"COLL_SUM(numbers)",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:15.0
    }
  },
  {
    name:"topLevelAllCollSum",
    statement:"COLL_SUM(ALL numbers)",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:15.0
    }
  },
  {
    name:"topLevelDistinctCollSum",
    statement:"COLL_SUM(DISTINCT [1,1,1,1,1,1,1,2])",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:3
    }
  },
  {
    name:"topLevelCollMin",
    statement:"COLL_MIN(numbers)",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:1
    }
  },
  {
    name:"topLevelDistinctCollMin",
    statement:"COLL_MIN(DISTINCT numbers)",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:1
    }
  },
  {
    name:"topLevelAllCollMin",
    statement:"COLL_MIN(ALL numbers)",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:1
    }
  },
  {
    name:"topLevelCollMax",
    statement:"COLL_MAX(numbers)",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:5.
    }
  },
  {
    name:"topLevelDistinctCollMax",
    statement:"COLL_MAX(DISTINCT numbers)",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:5.
    }
  },
  {
    name:"topLevelAllCollMax",
    statement:"COLL_MAX(ALL numbers)",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:5.
    }
  },
  {
    name:"topLevelCollAvg",
    statement:"COLL_AVG(numbers)",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:3.0
    }
  },
  {
    name:"topLevelDistinctCollAvg",
    statement:"COLL_AVG(DISTINCT [1,1,1,1,1,3])",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:2.
    }
  },
  {
    name:"topLevelCollAvgOnlyInt",
    statement:"COLL_AVG([2,2,2,4])",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:2.5
    }
  },
  {
    name:"selectValueAggregate",
    statement:"SELECT VALUE COLL_COUNT(v) + COLL_SUM(v) FROM <<numbers, numbers>> AS v",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:$bag::[
        20.0,
        20.0
      ]
    }
  },
  {
    name:"selectListCountStar",
    statement:"SELECT COUNT(*) AS c FROM <<numbers, numbers>> AS v",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:$bag::[
        {
          c:2
        }
      ]
    }
  },
  {
    name:"selectListCountVariable",
    statement:"SELECT COUNT(v) AS c FROM <<numbers, numbers>> AS v",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:$bag::[
        {
          c:2
        }
      ]
    }
  },
  {
    name:"selectListMultipleAggregates",
    statement:"SELECT COUNT(*) AS c, AVG(v * 2) + SUM(v + v) AS result FROM numbers AS v",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:$bag::[
        {
          c:5,
          result:36.0
        }
      ]
    }
  },
  {
    name:"selectListMultipleAggregatesNestedQuery",
    statement:"SELECT VALUE (SELECT MAX(v2 * v2) + MIN(v2 * 2) * v1 AS result FROM numbers AS v2) FROM numbers AS v1",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:$bag::[
        $bag::[
          {
            result:27.
          }
        ],
        $bag::[
          {
            result:29.0
          }
        ],
        $bag::[
          {
            result:31.
          }
        ],
        $bag::[
          {
            result:33.
          }
        ],
        $bag::[
          {
            result:35.
          }
        ]
      ]
    }
  },
  {
    name:"aggregateInSubqueryOfSelect",
    statement:"SELECT foo.cnt FROM (SELECT COUNT(*) AS cnt FROM [1, 2, 3]) AS foo",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:$bag::[
        {
          cnt:3
        }
      ]
    }
  },
  {
    name:"aggregateInSubqueryOfSelectValue",
    statement:"SELECT VALUE foo.cnt FROM (SELECT COUNT(*) AS cnt FROM [1, 2, 3]) AS foo",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:$bag::[
        3
      ]
    }
  },
  {
    name:"aggregateWithAliasingInSubqueryOfSelectValue",
    statement:"SELECT VALUE foo.cnt FROM (SELECT COUNT(baz.bar) AS cnt FROM << { 'bar': 1 }, { 'bar': 2 } >> AS baz) AS foo",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:$bag::[
        2
      ]
    }
  }
]

max::[
  envs::{
    data:[
      1,
      1,
      1,
      2
    ]
  },
  {
    name:"max top level{agg:'COLL_MAX(data)',result:(success 2)}",
    statement:"COLL_MAX(data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"coll_max top level{agg:'COLL_MAX(ALL data)',result:(success 2)}",
    statement:"COLL_MAX(ALL data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"coll_max top level{agg:'COLL_MAX(DISTINCT data)',result:(success 2)}",
    statement:"COLL_MAX(DISTINCT data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"max select{agg:'MAX(d)',result:2}",
    statement:"SELECT MAX(d) AS a FROM data d",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:2
        }
      ]
    }
  },
  {
    name:"max select{agg:'MAX(ALL d)',result:2}",
    statement:"SELECT MAX(ALL d) AS a FROM data d",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:2
        }
      ]
    }
  },
  {
    name:"max select{agg:'MAX(DISTINCT d)',result:2}",
    statement:"SELECT MAX(DISTINCT d) AS a FROM data d",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:2
        }
      ]
    }
  },
  {
    name:"max group by{agg:'MAX(t.b)',expectedF1:2,expectedF2:4}",
    statement:"SELECT t.a, MAX(t.b) as c FROM << {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 2}, {'a': 'f2', 'b': 2}, {'a': 'f2', 'b': 4} >> AS t GROUP BY t.a",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:"f1",
          c:2
        },
        {
          a:"f2",
          c:4
        }
      ]
    }
  },
  {
    name:"max group by{agg:'MAX(ALL t.b)',expectedF1:2,expectedF2:4}",
    statement:"SELECT t.a, MAX(ALL t.b) as c FROM << {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 2}, {'a': 'f2', 'b': 2}, {'a': 'f2', 'b': 4} >> AS t GROUP BY t.a",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:"f1",
          c:2
        },
        {
          a:"f2",
          c:4
        }
      ]
    }
  },
  {
    name:"max group by{agg:'MAX(DISTINCT t.b)',expectedF1:2,expectedF2:4}",
    statement:"SELECT t.a, MAX(DISTINCT t.b) as c FROM << {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 2}, {'a': 'f2', 'b': 2}, {'a': 'f2', 'b': 4} >> AS t GROUP BY t.a",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:"f1",
          c:2
        },
        {
          a:"f2",
          c:4
        }
      ]
    }
  }
]

avg::[
  envs::{
    data:[
      1,
      1,
      1,
      2
    ]
  },
  {
    name:"coll_avg top level{agg:'COLL_AVG(data)',result:(success 1.25)}",
    statement:"COLL_AVG(data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1.25
    }
  },
  {
    name:"coll_avg top level{agg:'COLL_AVG(ALL data)',result:(success 1.25)}",
    statement:"COLL_AVG(ALL data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1.25
    }
  },
  {
    name:"coll_avg top level{agg:'COLL_AVG(DISTINCT data)',result:(success 1.5)}",
    statement:"COLL_AVG(DISTINCT data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1.5
    }
  },
  {
    name:"avg select{agg:'AVG(d)',result:1.25}",
    statement:"SELECT AVG(d) AS a FROM data d",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:1.25
        }
      ]
    }
  },
  {
    name:"avg select{agg:'AVG(ALL d)',result:1.25}",
    statement:"SELECT AVG(ALL d) AS a FROM data d",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:1.25
        }
      ]
    }
  },
  {
    name:"avg select{agg:'AVG(DISTINCT d)',result:1.5}",
    statement:"SELECT AVG(DISTINCT d) AS a FROM data d",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:1.5
        }
      ]
    }
  },
  {
    name:"avg group by{agg:'AVG(t.b)',expectedF1:1.25,expectedF2:3.}",
    statement:"SELECT t.a, AVG(t.b) as c FROM << {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 2}, {'a': 'f2', 'b': 2}, {'a': 'f2', 'b': 4} >> AS t GROUP BY t.a",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:"f1",
          c:1.25
        },
        {
          a:"f2",
          c:3.
        }
      ]
    }
  },
  {
    name:"avg group by{agg:'AVG(ALL t.b)',expectedF1:1.25,expectedF2:3.}",
    statement:"SELECT t.a, AVG(ALL t.b) as c FROM << {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 2}, {'a': 'f2', 'b': 2}, {'a': 'f2', 'b': 4} >> AS t GROUP BY t.a",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:"f1",
          c:1.25
        },
        {
          a:"f2",
          c:3.
        }
      ]
    }
  },
  {
    name:"avg group by{agg:'AVG(DISTINCT t.b)',expectedF1:1.5,expectedF2:3.}",
    statement:"SELECT t.a, AVG(DISTINCT t.b) as c FROM << {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 2}, {'a': 'f2', 'b': 2}, {'a': 'f2', 'b': 4} >> AS t GROUP BY t.a",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:"f1",
          c:1.5
        },
        {
          a:"f2",
          c:3.
        }
      ]
    }
  }
]

count::[
  envs::{
    data:[
      1,
      1,
      1,
      2
    ]
  },
  {
    name:"coll_count top level{agg:'COLL_COUNT(data)',result:(success 4)}",
    statement:"COLL_COUNT(data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"coll_count top level{agg:'COLL_COUNT(ALL data)',result:(success 4)}",
    statement:"COLL_COUNT(ALL data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:4
    }
  },
  {
    name:"coll_count top level{agg:'COLL_COUNT(DISTINCT data)',result:(success 2)}",
    statement:"COLL_COUNT(DISTINCT data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"count select{agg:'COUNT(d)',result:4}",
    statement:"SELECT COUNT(d) AS a FROM data d",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:4
        }
      ]
    }
  },
  {
    name:"count select{agg:'COUNT(ALL d)',result:4}",
    statement:"SELECT COUNT(ALL d) AS a FROM data d",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:4
        }
      ]
    }
  },
  {
    name:"count select{agg:'COUNT(DISTINCT d)',result:2}",
    statement:"SELECT COUNT(DISTINCT d) AS a FROM data d",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:2
        }
      ]
    }
  },
  {
    name:"count group by{agg:'COUNT(t.b)',expectedF1:4,expectedF2:2}",
    statement:"SELECT t.a, COUNT(t.b) as c FROM << {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 2}, {'a': 'f2', 'b': 2}, {'a': 'f2', 'b': 4} >> AS t GROUP BY t.a",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:"f1",
          c:4
        },
        {
          a:"f2",
          c:2
        }
      ]
    }
  },
  {
    name:"count group by{agg:'COUNT(ALL t.b)',expectedF1:4,expectedF2:2}",
    statement:"SELECT t.a, COUNT(ALL t.b) as c FROM << {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 2}, {'a': 'f2', 'b': 2}, {'a': 'f2', 'b': 4} >> AS t GROUP BY t.a",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:"f1",
          c:4
        },
        {
          a:"f2",
          c:2
        }
      ]
    }
  },
  {
    name:"count group by{agg:'COUNT(DISTINCT t.b)',expectedF1:2,expectedF2:2}",
    statement:"SELECT t.a, COUNT(DISTINCT t.b) as c FROM << {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 2}, {'a': 'f2', 'b': 2}, {'a': 'f2', 'b': 4} >> AS t GROUP BY t.a",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:"f1",
          c:2
        },
        {
          a:"f2",
          c:2
        }
      ]
    }
  }
]

sum::[
  envs::{
    data:[
      1,
      1,
      1,
      2
    ]
  },
  {
    name:"coll_sum top level{agg:'COLL_SUM(data)',result:(success 5)}",
    statement:"COLL_SUM(data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"coll_sum top level{agg:'COLL_SUM(ALL data)',result:(success 5)}",
    statement:"COLL_SUM(ALL data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:5
    }
  },
  {
    name:"coll_sum top level{agg:'COLL_SUM(DISTINCT data)',result:(success 3)}",
    statement:"COLL_SUM(DISTINCT data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3
    }
  },
  {
    name:"sum select{agg:'SUM(d)',result:5}",
    statement:"SELECT SUM(d) AS a FROM data d",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:5
        }
      ]
    }
  },
  {
    name:"sum select{agg:'SUM(ALL d)',result:5}",
    statement:"SELECT SUM(ALL d) AS a FROM data d",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:5
        }
      ]
    }
  },
  {
    name:"sum select{agg:'SUM(DISTINCT d)',result:3}",
    statement:"SELECT SUM(DISTINCT d) AS a FROM data d",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:3
        }
      ]
    }
  },
  {
    name:"sum group by{agg:'SUM(t.b)',expectedF1:5,expectedF2:6}",
    statement:"SELECT t.a, SUM(t.b) as c FROM << {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 2}, {'a': 'f2', 'b': 2}, {'a': 'f2', 'b': 4} >> AS t GROUP BY t.a",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:"f1",
          c:5
        },
        {
          a:"f2",
          c:6
        }
      ]
    }
  },
  {
    name:"sum group by{agg:'SUM(ALL t.b)',expectedF1:5,expectedF2:6}",
    statement:"SELECT t.a, SUM(ALL t.b) as c FROM << {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 2}, {'a': 'f2', 'b': 2}, {'a': 'f2', 'b': 4} >> AS t GROUP BY t.a",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:"f1",
          c:5
        },
        {
          a:"f2",
          c:6
        }
      ]
    }
  },
  {
    name:"sum group by{agg:'SUM(DISTINCT t.b)',expectedF1:3,expectedF2:6}",
    statement:"SELECT t.a, SUM(DISTINCT t.b) as c FROM << {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 2}, {'a': 'f2', 'b': 2}, {'a': 'f2', 'b': 4} >> AS t GROUP BY t.a",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:"f1",
          c:3
        },
        {
          a:"f2",
          c:6
        }
      ]
    }
  }
]

min::[
  envs::{
    data:[
      1,
      1,
      1,
      2
    ]
  },
  {
    name:"coll_min top level{agg:'COLL_MIN(data)',result:(success 1)}",
    statement:"COLL_MIN(data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"coll_min top level{agg:'COLL_MIN(ALL data)',result:(success 1)}",
    statement:"COLL_MIN(ALL data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"coll_min top level{agg:'COLL_MIN(DISTINCT data)',result:(success 1)}",
    statement:"COLL_MIN(DISTINCT data)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"min select{agg:'MIN(d)',result:1}",
    statement:"SELECT MIN(d) AS a FROM data d",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:1
        }
      ]
    }
  },
  {
    name:"min select{agg:'MIN(ALL d)',result:1}",
    statement:"SELECT MIN(ALL d) AS a FROM data d",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:1
        }
      ]
    }
  },
  {
    name:"min select{agg:'MIN(DISTINCT d)',result:1}",
    statement:"SELECT MIN(DISTINCT d) AS a FROM data d",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:1
        }
      ]
    }
  },
  {
    name:"min group by{agg:'MIN(t.b)',expectedF1:1,expectedF2:2}",
    statement:"SELECT t.a, MIN(t.b) as c FROM << {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 2}, {'a': 'f2', 'b': 2}, {'a': 'f2', 'b': 4} >> AS t GROUP BY t.a",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:"f1",
          c:1
        },
        {
          a:"f2",
          c:2
        }
      ]
    }
  },
  {
    name:"min group by{agg:'MIN(ALL t.b)',expectedF1:1,expectedF2:2}",
    statement:"SELECT t.a, MIN(ALL t.b) as c FROM << {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 2}, {'a': 'f2', 'b': 2}, {'a': 'f2', 'b': 4} >> AS t GROUP BY t.a",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:"f1",
          c:1
        },
        {
          a:"f2",
          c:2
        }
      ]
    }
  },
  {
    name:"min group by{agg:'MIN(DISTINCT t.b)',expectedF1:1,expectedF2:2}",
    statement:"SELECT t.a, MIN(DISTINCT t.b) as c FROM << {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 1}, {'a': 'f1', 'b': 2}, {'a': 'f2', 'b': 2}, {'a': 'f2', 'b': 4} >> AS t GROUP BY t.a",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$bag::[
        {
          a:"f1",
          c:1
        },
        {
          a:"f2",
          c:2
        }
      ]
    }
  }
]
