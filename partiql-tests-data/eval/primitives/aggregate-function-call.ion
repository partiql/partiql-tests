envs::{
  numbers:[
    1,
    2.0,
    3e0,
    4,
    5.
  ],
}

aggregates::[
  {
    name:"topLevelCountDistinct",
    statement:"COUNT(DISTINCT [1,1,1,1,2])",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:2
    }
  },
  {
    name:"topLevelCount",
    statement:"COUNT(numbers)",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:5
    }
  },
  {
    name:"topLevelAllCount",
    statement:"COUNT(ALL numbers)",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:5
    }
  },
  {
    name:"topLevelSum",
    statement:"SUM(numbers)",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:15.0
    }
  },
  {
    name:"topLevelAllSum",
    statement:"SUM(ALL numbers)",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:15.0
    }
  },
  {
    name:"topLevelDistinctSum",
    statement:"SUM(DISTINCT [1,1,1,1,1,1,1,2])",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:3
    }
  },
  {
    name:"topLevelMin",
    statement:"MIN(numbers)",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:1
    }
  },
  {
    name:"topLevelDistinctMin",
    statement:"MIN(DISTINCT numbers)",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:1
    }
  },
  {
    name:"topLevelAllMin",
    statement:"MIN(ALL numbers)",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:1
    }
  },
  {
    name:"topLevelMax",
    statement:"MAX(numbers)",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:5.
    }
  },
  {
    name:"topLevelDistinctMax",
    statement:"MAX(DISTINCT numbers)",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:5.
    }
  },
  {
    name:"topLevelAllMax",
    statement:"MAX(ALL numbers)",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:5.
    }
  },
  {
    name:"topLevelAvg",
    statement:"AVG(numbers)",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:3.0
    }
  },
  {
    name:"topLevelDistinctAvg",
    statement:"AVG(DISTINCT [1,1,1,1,1,3])",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:2.
    }
  },
  {
    name:"topLevelAvgOnlyInt",
    statement:"AVG([2,2,2,4])",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:2.5
    }
  },
  {
    name:"selectValueAggregate",
    statement:"SELECT VALUE COUNT(v) + SUM(v) FROM <<numbers, numbers>> AS v",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:$bag::[
        20.0,
        20.0
      ]
    }
  },
  {
    name:"selectListCountStar",
    statement:"SELECT COUNT(*) AS c FROM <<numbers, numbers>> AS v",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:$bag::[
        {
          c:2
        }
      ]
    }
  },
  {
    name:"selectListCountVariable",
    statement:"SELECT COUNT(v) AS c FROM <<numbers, numbers>> AS v",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:$bag::[
        {
          c:2
        }
      ]
    }
  },
  {
    name:"selectListMultipleAggregates",
    statement:"SELECT COUNT(*) AS c, AVG(v * 2) + SUM(v + v) AS result FROM numbers AS v",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:$bag::[
        {
          c:5,
          result:36.0
        }
      ]
    }
  },
  {
    name:"selectListMultipleAggregatesNestedQuery",
    statement:"SELECT VALUE (SELECT MAX(v2 * v2) + MIN(v2 * 2) * v1 AS result FROM numbers AS v2) FROM numbers AS v1",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:$bag::[
        $bag::[
          {
            result:27.
          }
        ],
        $bag::[
          {
            result:29.0
          }
        ],
        $bag::[
          {
            result:31.
          }
        ],
        $bag::[
          {
            result:33.
          }
        ],
        $bag::[
          {
            result:35.
          }
        ]
      ]
    }
  },
  {
    name:"aggregateInSubqueryOfSelect",
    statement:"SELECT foo.cnt FROM (SELECT COUNT(*) AS cnt FROM [1, 2, 3]) AS foo",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:$bag::[
        {
          cnt:3
        }
      ]
    }
  },
  {
    name:"aggregateInSubqueryOfSelectValue",
    statement:"SELECT VALUE foo.cnt FROM (SELECT COUNT(*) AS cnt FROM [1, 2, 3]) AS foo",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:$bag::[
        3
      ]
    }
  },
  {
    name:"aggregateWithAliasingInSubqueryOfSelectValue",
    statement:"SELECT VALUE foo.cnt FROM (SELECT COUNT(baz.bar) AS cnt FROM << { 'bar': 1 }, { 'bar': 2 } >> AS baz) AS foo",
    assert:{
      evalMode:[EvalModeCoerce, EvalModeError],
      result:EvaluationSuccess,
      output:$bag::[
        2
      ]
    }
  }
]
