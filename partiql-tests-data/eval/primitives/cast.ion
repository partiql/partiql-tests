'cast-to-missing'::[
  {
    name:"cast to MISSING valid cases{value:\"NULL\"}",
    statement:"cast(NULL as MISSING)",
    assert:{
      result:EvaluationFail,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
    }
  },
  {
    name:"cast to MISSING valid cases{value:\"MISSING\"}",
    statement:"cast(MISSING as MISSING)",
    assert:{
      result:EvaluationFail,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
    }
  }
]

'cast-to-int'::[
  {
    name:"cast to int valid cases{value:\"true\",result:1}",
    statement:"cast(true as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"cast to int valid cases{value:\"false\",result:0}",
    statement:"cast(false as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"cast to int valid cases{value:\"1\",result:1}",
    statement:"cast(1 as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"cast to int valid cases{value:\"0\",result:0}",
    statement:"cast(0 as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"cast to int valid cases{value:\"-1\",result:-1}",
    statement:"cast(-1 as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"cast to int valid cases{value:\"9223372036854775807\",result:9223372036854775807}",
    statement:"cast(9223372036854775807 as BIGINT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:9223372036854775807
    }
  },
  {
    name:"cast to int valid cases{value:\"-9223372036854775808\",result:-9223372036854775808}",
    statement:"cast(-9223372036854775808 as BIGINT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-9223372036854775808
    }
  },
  {
    name:"cast to int valid cases{value:\"9223372036854775807.0\",result:9223372036854775807}",
    statement:"cast(9223372036854775807.0 as BIGINT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:9223372036854775807
    }
  },
  {
    name:"cast to int valid cases{value:\"-9223372036854775808.0\",result:-9223372036854775808}",
    statement:"cast(-9223372036854775808.0 as BIGINT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-9223372036854775808
    }
  },
  {
    name:"cast to int valid cases{value:\"'1'\",result:1}",
    statement:"cast('1' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"cast to int valid cases{value:\"'01'\",result:1}",
    statement:"cast('01' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"cast to int valid cases{value:\"'+1'\",result:1}",
    statement:"cast('+1' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"cast to int valid cases{value:\"'+01'\",result:1}",
    statement:"cast('+01' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"cast to int valid cases{value:\"'-1'\",result:-1}",
    statement:"cast('-1' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"cast to int valid cases{value:\"'-01'\",result:-1}",
    statement:"cast('-01' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"cast to int valid cases{value:\"'0'\",result:0}",
    statement:"cast('0' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"cast to int valid cases{value:\"'00'\",result:0}",
    statement:"cast('00' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"cast to int valid cases{value:\"'+0'\",result:0}",
    statement:"cast('+0' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"cast to int valid cases{value:\"'+00'\",result:0}",
    statement:"cast('+00' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"cast to int valid cases{value:\"'-0'\",result:0}",
    statement:"cast('-0' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"cast to int valid cases{value:\"'-00'\",result:0}",
    statement:"cast('-00' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"cast to int valid cases{value:\"'0b10'\",result:2}",
    statement:"cast('0b10' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"cast to int valid cases{value:\"'0B10'\",result:2}",
    statement:"cast('0B10' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"cast to int valid cases{value:\"'0b010'\",result:2}",
    statement:"cast('0b010' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"cast to int valid cases{value:\"'+0b10'\",result:2}",
    statement:"cast('+0b10' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"cast to int valid cases{value:\"'+0b010'\",result:2}",
    statement:"cast('+0b010' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"cast to int valid cases{value:\"'-0b10'\",result:-2}",
    statement:"cast('-0b10' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-2
    }
  },
  {
    name:"cast to int valid cases{value:\"'-0b010'\",result:-2}",
    statement:"cast('-0b010' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-2
    }
  },
  {
    name:"cast to int valid cases{value:\"'0xA'\",result:10}",
    statement:"cast('0xA' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:10
    }
  },
  {
    name:"cast to int valid cases{value:\"'0XA'\",result:10}",
    statement:"cast('0XA' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:10
    }
  },
  {
    name:"cast to int valid cases{value:\"'0x0A'\",result:10}",
    statement:"cast('0x0A' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:10
    }
  },
  {
    name:"cast to int valid cases{value:\"'+0xA'\",result:10}",
    statement:"cast('+0xA' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:10
    }
  },
  {
    name:"cast to int valid cases{value:\"'+0x0A'\",result:10}",
    statement:"cast('+0x0A' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:10
    }
  },
  {
    name:"cast to int valid cases{value:\"'-0xA'\",result:-10}",
    statement:"cast('-0xA' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-10
    }
  },
  {
    name:"cast to int valid cases{value:\"'-0x0A'\",result:-10}",
    statement:"cast('-0x0A' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-10
    }
  },
]

'cast-to-datetime'::[
  {
    name:"cast to date valid cases{value:\"'2024-02-29'\"}",
    statement:"cast('2024-02-29' as DATE)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$date::{
        year:2024,
        month:2,
        day:29,
      }
    }
  },
  {
    name: "cast to time valid cases{value:\"'12:34:56'\"}",
    statement: "cast('12:34:56' as TIME)",
    assert: {
      result: EvaluationSuccess,
      evalMode: [
        EvalModeCoerce,
        EvalModeError
      ],
      output: $time::{
        hour: 12,
        minute: 34,
        second: 56.0,
        offset: null.int
      }
    }
  },
  {
    name: "cast to time with time zone valid cases{value:\"'12:34:56.789+05:30'\"}",
    statement: "cast('12:34:56.789+05:30' as TIME WITH TIME ZONE)",
    assert: {
      result: EvaluationSuccess,
      evalMode: [
        EvalModeCoerce,
        EvalModeError
      ],
      output: $time::{
        hour: 12,
        minute: 34,
        second: 56.789,
        offset: 330
      }
    }
  },
  {
    name: "cast to timestamp valid cases{value:\"'2024-02-29 12:34:56'\"}",
    statement: "cast('2024-02-29 12:34:56' as TIMESTAMP)",
    assert: {
      result: EvaluationSuccess,
      evalMode: [
        EvalModeCoerce,
        EvalModeError
      ],
      output: $timestamp::{
        year:2024,
        month:2,
        day:29,
        hour: 12,
        minute: 34,
        second: 56.0,
        offset: null.int
      }
    }
  },
  {
    name: "cast to timestamp with time zone valid cases{value:\"'2024-02-29 12:34:56.789+05:30'\"}",
    statement: "cast('2024-02-29 12:34:56.789+05:30' as TIMESTAMP WITH TIME ZONE)",
    assert: {
      result: EvaluationSuccess,
      evalMode: [
        EvalModeCoerce,
        EvalModeError
      ],
      output: $timestamp::{
        year:2024,
        month:2,
        day:29,
        hour: 12,
        minute: 34,
        second: 56.789,
        offset: 330
      }
    }
  },
]

'cast-to-null'::[
  {
    name:"cast to NULL valid cases{value:\"NULL\"}",
    statement:"cast(NULL as NULL)",
    assert:{
      result:EvaluationFail,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
    }
  },
  {
    name:"cast to NULL valid cases{value:\"MISSING\"}",
    statement:"cast(MISSING as NULL)",
    assert:{
      result:EvaluationFail,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
    }
  }
]

cast_invalid::[
  {
    name:"cast to int invalid values{value:\"'hello'\",target:\"STRING\"}",
    statement:"cast('hello' as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ],
  },
  {
    name:"cast to int invalid values{value:\"'123456A'\",target:\"STRING\"}",
    statement:"cast('123456A' as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ],
  },
  {
    name:"cast to int invalid values{value:\"'00xA'\",target:\"STRING\"}",
    statement:"cast('00xA' as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ],
  },
  {
    name:"cast to int invalid values{value:\"'00b10'\",target:\"STRING\"}",
    statement:"cast('00b10' as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ],
  },
  {
    name:"cast to int invalid values{value:\"'2e10'\",target:\"STRING\"}",
    statement:"cast('2e10' as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ],
  },
  {
    name:"cast to int invalid target type{value:\"[1, 2]\",target:\"LIST\"}",
    statement:"cast([1, 2] as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ],
  },
  {
    name:"cast to int invalid target type{value:\"[1]\",target:\"LIST\"}",
    statement:"cast([1] as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ],
  },
  {
    name:"cast to int invalid target type{value:\"[]\",target:\"LIST\"}",
    statement:"cast([] as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ],
  },
  {
    name:"cast to int invalid target type{value:\"{'a': 1}\",target:\"STRUCT\"}",
    statement:"cast({'a': 1} as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ],
  },
  {
    name:"cast to int invalid target type{value:\"{'a': '12'}\",target:\"STRUCT\"}",
    statement:"cast({'a': '12'} as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ],
  },
  {
    name:"cast to int invalid target type{value:\"{}\",target:\"STRUCT\"}",
    statement:"cast({} as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ],
  },
  {
    name:"cast to int invalid target type{value:\"<<1, 2>>\",target:\"BAG\"}",
    statement:"cast(<<1, 2>> as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ],
  },
  {
    name:"cast to int invalid target type{value:\"<<1>>\",target:\"BAG\"}",
    statement:"cast(<<1>> as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ],
  },
  {
    name:"cast to int invalid target type{value:\"<<>>\",target:\"BAG\"}",
    statement:"cast(<<>> as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ],
  },
  {
    name:"cast to int invalid target type{value:\"'2024-02-29'\",target:\"DATE\"}",
    statement:"cast('2024-02-29' as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ],
  },
  {
    name:"cast to int invalid target type{value:\"'12:34:56'\",target:\"TIME\"}",
    statement:"cast('12:34:56' as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ],
  },
  {
    name:"cast to int invalid target type{value:\"'12:34:56.789+05:30'\",target:\"TIME WITH TIME ZONE\"}",
    statement:"cast('12:34:56.789+05:30' as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ],
  },
  {
    name:"cast to int invalid target type{value:\"'2024-02-29 12:34:56'\",target:\"TIMESTAMP\"}",
    statement:"cast('2024-02-29 12:34:56' as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ],
  },
  {
    name:"cast to int invalid target type{value:\"'2024-02-29 12:34:56.789+05:30'\",target:\"TIMESTAMP WITH TIME ZONE\"}",
    statement:"cast('2024-02-29 12:34:56.789+05:30' as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ],
  }
]
