'cast-to-missing'::[
  {
    name:"cast to MISSING valid cases{value:\"NULL\"}",
    statement:"cast(NULL as MISSING)",
    assert:{
      result:EvaluationFail,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
    }
  },
  {
    name:"cast to MISSING valid cases{value:\"MISSING\"}",
    statement:"cast(MISSING as MISSING)",
    assert:{
      result:EvaluationFail,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
    }
  }
]

'cast-to-int'::[
  {
    name:"cast to int valid cases{value:\"true\",result:1}",
    statement:"cast(true as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"cast to int valid cases{value:\"false\",result:0}",
    statement:"cast(false as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"cast to int valid cases{value:\"1\",result:1}",
    statement:"cast(1 as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"cast to int valid cases{value:\"0\",result:0}",
    statement:"cast(0 as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"cast to int valid cases{value:\"-1\",result:-1}",
    statement:"cast(-1 as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"cast to int valid cases{value:\"9223372036854775807\",result:9223372036854775807}",
    statement:"cast(9223372036854775807 as BIGINT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:9223372036854775807
    }
  },
  {
    name:"cast to int valid cases{value:\"-9223372036854775808\",result:-9223372036854775808}",
    statement:"cast(-9223372036854775808 as BIGINT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-9223372036854775808
    }
  },
  {
    name:"cast to int valid cases{value:\"9223372036854775807.0\",result:9223372036854775807}",
    statement:"cast(9223372036854775807.0 as BIGINT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:9223372036854775807
    }
  },
  {
    name:"cast to int valid cases{value:\"-9223372036854775808.0\",result:-9223372036854775808}",
    statement:"cast(-9223372036854775808.0 as BIGINT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-9223372036854775808
    }
  },
  {
    name:"cast to int valid cases{value:\"'1'\",result:1}",
    statement:"cast('1' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"cast to int valid cases{value:\"'01'\",result:1}",
    statement:"cast('01' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"cast to int valid cases{value:\"'+1'\",result:1}",
    statement:"cast('+1' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"cast to int valid cases{value:\"'+01'\",result:1}",
    statement:"cast('+01' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"cast to int valid cases{value:\"'-1'\",result:-1}",
    statement:"cast('-1' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"cast to int valid cases{value:\"'-01'\",result:-1}",
    statement:"cast('-01' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-1
    }
  },
  {
    name:"cast to int valid cases{value:\"'0'\",result:0}",
    statement:"cast('0' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"cast to int valid cases{value:\"'00'\",result:0}",
    statement:"cast('00' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"cast to int valid cases{value:\"'+0'\",result:0}",
    statement:"cast('+0' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"cast to int valid cases{value:\"'+00'\",result:0}",
    statement:"cast('+00' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"cast to int valid cases{value:\"'-0'\",result:0}",
    statement:"cast('-0' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"cast to int valid cases{value:\"'-00'\",result:0}",
    statement:"cast('-00' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"cast to int valid cases{value:\"'0b10'\",result:2}",
    statement:"cast('0b10' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"cast to int valid cases{value:\"'0B10'\",result:2}",
    statement:"cast('0B10' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"cast to int valid cases{value:\"'0b010'\",result:2}",
    statement:"cast('0b010' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"cast to int valid cases{value:\"'+0b10'\",result:2}",
    statement:"cast('+0b10' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"cast to int valid cases{value:\"'+0b010'\",result:2}",
    statement:"cast('+0b010' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"cast to int valid cases{value:\"'-0b10'\",result:-2}",
    statement:"cast('-0b10' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-2
    }
  },
  {
    name:"cast to int valid cases{value:\"'-0b010'\",result:-2}",
    statement:"cast('-0b010' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-2
    }
  },
  {
    name:"cast to int valid cases{value:\"'0xA'\",result:10}",
    statement:"cast('0xA' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:10
    }
  },
  {
    name:"cast to int valid cases{value:\"'0XA'\",result:10}",
    statement:"cast('0XA' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:10
    }
  },
  {
    name:"cast to int valid cases{value:\"'0x0A'\",result:10}",
    statement:"cast('0x0A' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:10
    }
  },
  {
    name:"cast to int valid cases{value:\"'+0xA'\",result:10}",
    statement:"cast('+0xA' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:10
    }
  },
  {
    name:"cast to int valid cases{value:\"'+0x0A'\",result:10}",
    statement:"cast('+0x0A' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:10
    }
  },
  {
    name:"cast to int valid cases{value:\"'-0xA'\",result:-10}",
    statement:"cast('-0xA' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-10
    }
  },
  {
    name:"cast to int valid cases{value:\"'-0x0A'\",result:-10}",
    statement:"cast('-0x0A' as INT)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:-10
    }
  },
]

'cast-to-null'::[
  {
    name:"cast to NULL valid cases{value:\"NULL\"}",
    statement:"cast(NULL as NULL)",
    assert:{
      result:EvaluationFail,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
    }
  },
  {
    name:"cast to NULL valid cases{value:\"MISSING\"}",
    statement:"cast(MISSING as NULL)",
    assert:{
      result:EvaluationFail,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
    }
  }
]

cast_invalid::[
  {
    name:"cast to int invalid values{value:\"'hello'\",target:\"STRING\"}",
    statement:"cast('hello' as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ],
  },
  {
    name:"cast to int invalid values{value:\"'123456A'\",target:\"STRING\"}",
    statement:"cast('123456A' as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ],
  },
  {
    name:"cast to int invalid values{value:\"'00xA'\",target:\"STRING\"}",
    statement:"cast('00xA' as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ],
  },
  {
    name:"cast to int invalid values{value:\"'00b10'\",target:\"STRING\"}",
    statement:"cast('00b10' as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ],
  },
  {
    name:"cast to int invalid values{value:\"'2e10'\",target:\"STRING\"}",
    statement:"cast('2e10' as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ],
  },
  {
    name:"cast to int invalid target type{value:\"[1, 2]\",target:\"LIST\"}",
    statement:"cast([1, 2] as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ],
  },
  {
    name:"cast to int invalid target type{value:\"[1]\",target:\"LIST\"}",
    statement:"cast([1] as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ],
  },
  {
    name:"cast to int invalid target type{value:\"[]\",target:\"LIST\"}",
    statement:"cast([] as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ],
  },
  {
    name:"cast to int invalid target type{value:\"{'a': 1}\",target:\"STRUCT\"}",
    statement:"cast({'a': 1} as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ],
  },
  {
    name:"cast to int invalid target type{value:\"{'a': '12'}\",target:\"STRUCT\"}",
    statement:"cast({'a': '12'} as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ],
  },
  {
    name:"cast to int invalid target type{value:\"{}\",target:\"STRUCT\"}",
    statement:"cast({} as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ],
  },
  {
    name:"cast to int invalid target type{value:\"<<1, 2>>\",target:\"BAG\"}",
    statement:"cast(<<1, 2>> as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ],
  },
  {
    name:"cast to int invalid target type{value:\"<<1>>\",target:\"BAG\"}",
    statement:"cast(<<1>> as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ],
  },
  {
    name:"cast to int invalid target type{value:\"<<>>\",target:\"BAG\"}",
    statement:"cast(<<>> as INT)",
    assert:[
      {
        evalMode:EvalModeError,
        result:EvaluationFail
      },
      {
        result:EvaluationSuccess,
        evalMode:EvalModeCoerce,
        output:$missing::null
      }
    ],
  },
  // Year-Month interval same-family casts (precision adjustments)
  {
    name: "CAST INTERVAL YEAR to INTERVAL YEAR with precision",
    statement: "CAST(INTERVAL '1' YEAR AS INTERVAL YEAR(3))",
    assert: {
      result: EvaluationSuccess,
      evalMode: [EvalModeCoerce, EvalModeError],
      output: $interval_ym::{ sign: "+", years: 1, months: 0 }
    }
  },
  {
    name: "CAST INTERVAL MONTH to INTERVAL YEAR TO MONTH",
    statement: "CAST(INTERVAL '13' MONTH AS INTERVAL YEAR TO MONTH)",
    assert: {
      result: EvaluationSuccess,
      evalMode: [EvalModeCoerce, EvalModeError],
      output: $interval_ym::{ sign: "+", years: 1, months: 1 }
    }
  },
  // Day-Time interval same-family casts (precision adjustments)
  {
    name: "CAST INTERVAL DAY to INTERVAL DAY with precision",
    statement: "CAST(INTERVAL '1' DAY AS INTERVAL DAY(5))",
    assert: {
      result: EvaluationSuccess,
      evalMode: [EvalModeCoerce, EvalModeError],
      output: $interval_dt::{ sign: "+", days: 1, hours: 0, minutes: 0, seconds: 0, nanos: 0 }
    }
  },
  {
    name: "CAST INTERVAL HOUR to INTERVAL DAY TO HOUR",
    statement: "CAST(INTERVAL '25' HOUR AS INTERVAL DAY TO HOUR)",
    assert: {
      result: EvaluationSuccess,
      evalMode: [EvalModeCoerce, EvalModeError],
      output: $interval_dt::{ sign: "+", days: 1, hours: 1, minutes: 0, seconds: 0, nanos: 0 }
    }
  },
  {
    name: "CAST INTERVAL SECOND with fractional precision",
    statement: "CAST(INTERVAL '1.123456789' SECOND AS INTERVAL SECOND(3, 3))",
    assert: {
      result: EvaluationSuccess,
      evalMode: [EvalModeCoerce, EvalModeError],
      output: $interval_dt::{ sign: "+", days: 0, hours: 0, minutes: 0, seconds: 1, nanos: 123000000 }
    }
  }
]
