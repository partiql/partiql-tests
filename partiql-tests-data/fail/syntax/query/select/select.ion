{
    name: "SFW without WHERE expression",
    statement: "SELECT * FROM foo WHERE",
    assert: {
        result: SyntaxFail
    },
}

{
    name: "SELECT without comma between projection items",
    statement: "SELECT a b  data",
    assert: {
        result: SyntaxFail
    },
}

{
    name: "AT before AS alias",
    statement: "SELECT ord, val FROM table1 AT ord AS val",
    assert: {
        result: SyntaxFail
    },
}

{
    name: "SELECT missing projection",
    statement: "SELECT FROM table1",
    assert: {
        result: SyntaxFail
    },
}

{
    name: "SELECT list with extra comma",
    statement: "SELECT a, FROM {'a' : 1}",
    assert: {
        result: SyntaxFail
    },
}

{
    name: "SELECT projection with empty parens",
    statement: "SELECT () FROM data",
    assert: {
        result: SyntaxFail
    },
}

{
    name: "expected identifier for AS alias",
    statement: "SELECT a AS true FROM data",
    assert: {
        result: SyntaxFail
    },
}

{
    name: "expected identifier for AT alias",
    statement: "SELECT a FROM data AT true",
    assert: {
        result: SyntaxFail
    },
}

'select-star'::[
  {
    name:"disallowed uses of *, *",
    statement:"SELECT *, * FROM <<1>>",
    assert: {
      result: SyntaxFail
    },
  },
  {
    name:"disallowed uses of *, alias.*",
    statement:"SELECT *, foo.* FROM <<{ a: 1 }>> as foo",
    assert: {
      result: SyntaxFail
    },
  },
  {
    name:"disallowed uses of alias.*, *",
    statement:"SELECT foo.*, * FROM <<{ a: 1 }>> as foo",
    assert: {
      result: SyntaxFail
    },
  },
  {
    name:"disallowed uses of <expr>, *",
    statement:"SELECT 1, * FROM <<{ a: 1 }>>",
    assert: {
      result: SyntaxFail
    },
  },
  {
    name:"disallowed uses of *, <expr>",
    statement:"SELECT *, 1 FROM <<{ a: 1 }>>",
    assert: {
      result: SyntaxFail
    },
  }
]

'projection-pathing'::[
  {
    name:"foo[*] is disallowed",
    statement:"SELECT foo[*] FROM foo",
    assert: {
      result: SyntaxFail
    },
  },
  {
    name:"foo.*.bar is disallowed",
    statement:"SELECT foo.*.bar FROM foo",
    assert: {
      result: SyntaxFail
    },
  },
  {
    name:"foo['a'].* is disallowed",
    statement:"SELECT foo['a'].* FROM foo",
    assert: {
      result: SyntaxFail
    },
  },
  {
    name:"foo[a].* is disallowed",
    statement:"SELECT foo[a].* FROM foo",
    assert: {
      result: SyntaxFail
    },
  },
  {
    name:"foo[1].* is disallowed",
    statement:"SELECT foo[1].* FROM foo",
    assert: {
      result: SyntaxFail
    },
  },
]
