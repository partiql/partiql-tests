wrong_num_function_args::[
  char_length::[
    {
      name:"char_length wrong number of arguments{sql:\"char_length()\"}",
      statement:"char_length()",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"char_length wrong number of arguments{sql:\"char_length('', '')\"}",
      statement:"char_length('', '')",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"char_length wrong number of arguments{sql:\"char_length('', 1)\"}",
      statement:"char_length('', 1)",
      assert: {
        result: StaticAnalysisFail
      },
    }
  ],
  
  date_add::[
    {
      name:"date_add wrong number of arguments{sql:\"date_add()\"}",
      statement:"date_add()",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"date_add wrong number of arguments{sql:\"date_add(year)\"}",
      statement:"date_add(year)",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"date_add wrong number of arguments{sql:\"date_add(year, 1)\"}",
      statement:"date_add(year, 1)",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"date_add wrong number of arguments{sql:\"date_add(year, 1, `2017T`, 1)\"}",
      statement:"date_add(year, 1, `2017T`, 1)",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"date_add wrong number of arguments{sql:\"date_add(year, 1, `2017T`, `2017T`)\"}",
      statement:"date_add(year, 1, `2017T`, `2017T`)",
      assert: {
        result: StaticAnalysisFail
      },
    }
  ],
  
  exists::[
    {
      name:"exists wrong number of arguments{sql:\"exists()\"}",
      statement:"exists()",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"exists wrong number of arguments{sql:\"exists(`[]`, 1)\"}",
      statement:"exists(`[]`, 1)",
      assert: {
        result: StaticAnalysisFail
      },
    }
  ],
  
  trim::[
    {
      name:"trim wrong number of arguments{sql:\"trim()\"}",
      statement:"trim()",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"trim wrong number of arguments{sql:\"trim('', '')\"}",
      statement:"trim('', '')",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"trim wrong number of arguments{sql:\"trim(leading '')\"}",
      statement:"trim(leading '')",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"trim wrong number of arguments{sql:\"trim(foobar from '')\"}",
      statement:"trim(foobar from '')",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"trim wrong number of arguments{spec:\"1\",to_remove:\"''\",target:\"''\"}",
      statement:"trim(1 '' from '')",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"trim wrong number of arguments{spec:\"foobar\",to_remove:\"''\",target:\"''\"}",
      statement:"trim(foobar '' from '')",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"trim wrong number of arguments{spec:\"'foobar'\",to_remove:\"''\",target:\"''\"}",
      statement:"trim('foobar' '' from '')",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"trim wrong number of arguments{spec:\"leading\",to_remove:\"1\",target:\"''\"}",
      statement:"trim(leading 1 from '')",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"trim wrong number of arguments{spec:\"leading\",to_remove:\"foobar\",target:\"''\"}",
      statement:"trim(leading foobar from '')",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"trim wrong number of arguments{spec:\"leading\",to_remove:\"''\",target:\"1\"}",
      statement:"trim(leading '' from 1)",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"trim wrong number of arguments{spec:\"leading\",to_remove:\"''\",target:\"foobar\"}",
      statement:"trim(leading '' from foobar)",
      assert: {
        result: StaticAnalysisFail
      },
    }
  ],
  
  coalesce::[
    {
      name:"coalesce wrong number of arguments",
      statement:"coalesce()",
      assert: {
        result: StaticAnalysisFail
      },
    }
  ],
  
  substring::[
    {
      name:"substring wrong number of arguments{sql:\"substring('')\"}",
      statement:"substring('')",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"substring wrong number of arguments{sql:\"substring('', 1, 1, 1)\"}",
      statement:"substring('', 1, 1, 1)",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"substring wrong number of arguments{sql:\"substring('', 1, 1, '')\"}",
      statement:"substring('', 1, 1, '')",
      assert: {
        result: StaticAnalysisFail
      },
    },
  ],
  
  nullif::[
    {
      name:"nullif wrong number of arguments{sql:\"nullif()\"}",
      statement:"nullif()",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"nullif wrong number of arguments{sql:\"nullif(1)\"}",
      statement:"nullif(1)",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"nullif wrong number of arguments{sql:\"nullif(1, 1, 1)\"}",
      statement:"nullif(1, 1, 1)",
      assert: {
        result: StaticAnalysisFail
      },
    }
  ],
  
  upper::[
    {
      name:"upper wrong number of arguments{sql:\"upper()\"}",
      statement:"upper()",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"upper wrong number of arguments{sql:\"upper('', '')\"}",
      statement:"upper('', '')",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"upper wrong number of arguments{sql:\"upper('', 1)\"}",
      statement:"upper('', 1)",
      assert: {
        result: StaticAnalysisFail
      },
    },
  ],
  
  lower::[
    {
      name:"lower wrong number of arguments{sql:\"lower()\"}",
      statement:"lower()",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"lower wrong number of arguments{sql:\"lower('', '')\"}",
      statement:"lower('', '')",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"lower wrong number of arguments{sql:\"lower('', 1)\"}",
      statement:"lower('', 1)",
      assert: {
        result: StaticAnalysisFail
      },
    },
  ],
  
  to_timestamp::[
    {
      name:"to_timestamp wrong number of arguments{sql:\"to_timestamp()\"}",
      statement:"to_timestamp()",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"to_timestamp wrong number of arguments{sql:\"to_timestamp('', 'y', '')\"}",
      statement:"to_timestamp('', 'y', '')",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"to_timestamp wrong number of arguments{sql:\"to_timestamp('', 'y', 1)\"}",
      statement:"to_timestamp('', 'y', 1)",
      assert: {
        result: StaticAnalysisFail
      },
    },
  ],
  
  size::[
    {
      name:"size wrong number of arguments{sql:\"size()\"}",
      statement:"size()",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"size wrong number of arguments{sql:\"size(`[]`, `[]`)\"}",
      statement:"size(`[]`, `[]`)",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"size wrong number of arguments{sql:\"size(`[]`, 1)\"}",
      statement:"size(`[]`, 1)",
      assert: {
        result: StaticAnalysisFail
      },
    },
  ],
  
  date_diff::[
    {
      name:"date_diff wrong number of arguments{sql:\"date_diff()\"}",
      statement:"date_diff()",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"date_diff wrong number of arguments{sql:\"date_diff(year)\"}",
      statement:"date_diff(year)",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"date_diff wrong number of arguments{sql:\"date_diff(year, `2017T`)\"}",
      statement:"date_diff(year, `2017T`)",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"date_diff wrong number of arguments{sql:\"date_diff(year, `2017T`, `2017T`, `2017T`)\"}",
      statement:"date_diff(year, `2017T`, `2017T`, `2017T`)",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"date_diff wrong number of arguments{sql:\"date_diff(year, `2017T`, `2017T`, 1)\"}",
      statement:"date_diff(year, `2017T`, `2017T`, 1)",
      assert: {
        result: StaticAnalysisFail
      },
    },
  ],
  
  extract::[
    {
      name:"extract wrong number of arguments{sql:\"extract()\"}",
      statement:"extract()",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"extract wrong number of arguments{sql:\"extract(year)\"}",
      statement:"extract(year)",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"extract wrong number of arguments{sql:\"extract(year from)\"}",
      statement:"extract(year from)",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"extract wrong number of arguments{sql:\"extract(`2017T`)\"}",
      statement:"extract(`2017T`)",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"extract wrong number of arguments{sql:\"extract(from `2017T`)\"}",
      statement:"extract(from `2017T`)",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"extract wrong number of arguments{sql:\"extract(year from `2017T`, 1)\"}",
      statement:"extract(year from `2017T`, 1)",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"extract wrong number of arguments{sql:\"extract(year, `2017T`)\"}",
      statement:"extract(year, `2017T`)",
      assert: {
        result: StaticAnalysisFail
      },
    },
  ],
  
  to_string::[
    {
      name:"to_string wrong number of arguments{sql:\"to_string()\"}",
      statement:"to_string()",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"to_string wrong number of arguments{sql:\"to_string(`2017T`)\"}",
      statement:"to_string(`2017T`)",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"to_string wrong number of arguments{sql:\"to_string(`2017T`, 'y', 1)\"}",
      statement:"to_string(`2017T`, 'y', 1)",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"to_string wrong number of arguments{sql:\"to_string(`2017T`, 'y', 'y')\"}",
      statement:"to_string(`2017T`, 'y', 'y')",
      assert: {
        result: StaticAnalysisFail
      },
    }
  ]
]

invalid_function_args::[
  date_add::[
    {
      name:"date_add invalid time part{time_part:\"'foobar'\"}",
      statement:"date_add('foobar', 1, `1986T`)",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"date_add invalid time part{time_part:1}",
      statement:"date_add(1, 1, `1986T`)",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"date_add invalid time part{time_part:[]}",
      statement:"date_add([], 1, `1986T`)",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"date_add invalid time part{time_part:\"timezone_hour\"}",
      statement:"date_add(timezone_hour, 1, `1986T`)",
      assert: {
        result: StaticAnalysisFail
      },
    },
    {
      name:"date_add invalid time part{time_part:\"timezone_minute\"}",
      statement:"date_add(timezone_minute, 1, `1986T`)",
      assert: {
        result: StaticAnalysisFail
      },
    },
  ],
  date_diff::[
    {
      name:"date_diff wrong type of arguments{time_part:\"1\",left:\"`2017T`\",right:\"`2017T`\"}",
      statement:"date_diff(1, `2017T`, `2017T`)",
      assert:[
        {
          evalMode:EvalModeError,
          result:EvaluationFail
        },
        {
          result:EvaluationSuccess,
          evalMode:EvalModeCoerce,
          output:$missing::null
        }
      ]
    },
    {
      name:"date_diff wrong type of arguments{time_part:\"year\",left:\"1\",right:\"`2017T`\"}",
      statement:"date_diff(year, 1, `2017T`)",
      assert:[
        {
          evalMode:EvalModeError,
          result:EvaluationFail
        },
        {
          result:EvaluationSuccess,
          evalMode:EvalModeCoerce,
          output:$missing::null
        }
      ]
    },
    {
      name:"date_diff wrong type of arguments{time_part:\"year\",left:\"`2017T`\",right:\"1\"}",
      statement:"date_diff(year, `2017T`, 1)",
      assert:[
        {
          evalMode:EvalModeError,
          result:EvaluationFail
        },
        {
          result:EvaluationSuccess,
          evalMode:EvalModeCoerce,
          output:$missing::null
        }
      ]
    },
    {
      name:"date_diff invalid arguments{time_part:\"'foobar'\"}",
      statement:"date_diff('foobar', `2001T`, `1986T`)",
      assert:[
        {
          evalMode:EvalModeError,
          result:EvaluationFail
        },
        {
          result:EvaluationSuccess,
          evalMode:EvalModeCoerce,
          output:$missing::null
        }
      ]
    },
    {
      name:"date_diff invalid arguments{time_part:1}",
      statement:"date_diff(1, `2001T`, `1986T`)",
      assert:[
        {
          evalMode:EvalModeError,
          result:EvaluationFail
        },
        {
          result:EvaluationSuccess,
          evalMode:EvalModeCoerce,
          output:$missing::null
        }
      ]
    },
    {
      name:"date_diff invalid arguments{time_part:[]}",
      statement:"date_diff([], `2001T`, `1986T`)",
      assert:[
        {
          evalMode:EvalModeError,
          result:EvaluationFail
        },
        {
          result:EvaluationSuccess,
          evalMode:EvalModeCoerce,
          output:$missing::null
        }
      ]
    },
  ],
  extract::[
    {
      name:"extract wrong type of arguments{first:\"year\",second:\"1\"}",
      statement:"extract(year from 1)",
      assert:[
        {
          evalMode:EvalModeError,
          result:EvaluationFail
        },
        {
          result:EvaluationSuccess,
          evalMode:EvalModeCoerce,
          output:$missing::null
        }
      ]
    },
    {
      name:"extract wrong type of arguments{first:1,second:\"`2017T`\"}",
      statement:"extract(1 from `2017T`)",
      assert:[
        {
          evalMode:EvalModeError,
          result:EvaluationFail
        },
        {
          result:EvaluationSuccess,
          evalMode:EvalModeCoerce,
          output:$missing::null
        }
      ]
    },
    {
      name:"extract invalid time part{time_part:\"foo\",tt:\"IDENTIFIER\",tv:foo}",
      statement:"extract(foo from `2017T`)",
      assert:[
        {
          evalMode:EvalModeError,
          result:EvaluationFail
        },
        {
          result:EvaluationSuccess,
          evalMode:EvalModeCoerce,
          output:$missing::null
        }
      ]
    },
    {
      name:"extract invalid time part{time_part:\"null\",tt:\"NULL\",tv:null}",
      statement:"extract(null from `2017T`)",
      assert:[
        {
          evalMode:EvalModeError,
          result:EvaluationFail
        },
        {
          result:EvaluationSuccess,
          evalMode:EvalModeCoerce,
          output:$missing::null
        }
      ]
    },
    {
      name:"extract invalid time part{time_part:\"missing\",tt:\"MISSING\",tv:null}",
      statement:"extract(missing from `2017T`)",
      assert:[
        {
          evalMode:EvalModeError,
          result:EvaluationFail
        },
        {
          result:EvaluationSuccess,
          evalMode:EvalModeCoerce,
          output:$missing::null
        }
      ]
    }
  ],
  like::[
    {
      name:"Incorrect type for text",
      statement:"SELECT * FROM `[true]` WHERE 1 LIKE '1'",
      assert:[
        {
          evalMode:EvalModeError,
          result:EvaluationFail
        },
        {
          result:EvaluationSuccess,
          evalMode:EvalModeCoerce,
          output:$missing::null
        }
      ]
    },
    {
      name:"Incorrect type for pattern",
      statement:"SELECT * FROM `[true]` WHERE 'a' LIKE 2",
      assert:[
        {
          evalMode:EvalModeError,
          result:EvaluationFail
        },
        {
          result:EvaluationSuccess,
          evalMode:EvalModeCoerce,
          output:$missing::null
        }
      ]
    },
    {
      name:"Incorrect type for Escape",
      statement:"SELECT * FROM `[true]` WHERE 'a' LIKE 'a' ESCAPE 3",
      assert:[
        {
          evalMode:EvalModeError,
          result:EvaluationFail
        },
        {
          result:EvaluationSuccess,
          evalMode:EvalModeCoerce,
          output:$missing::null
        }
      ]
    },
  ]
]
