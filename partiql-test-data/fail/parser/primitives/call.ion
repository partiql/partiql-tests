substring::[
    sql92::[
        parse::{
            name: "SUBSTRING sql92 syntax missing left paren",
            statement: "SELECT SUBSTRING FROM 'asdf' FOR 1) FROM foo",
            assert: {
                result: ParseError
            },
        },
        parse::{
            name: "SUBSTRING sql92 syntax missing FROM or comma",
            statement: "SELECT SUBSTRING('str' 1) FROM foo",
            assert: {
                result: ParseError
            },
        },
        parse::{
            name: "SUBSTRING sql92 syntax without length and missing right paren",
            statement: "SELECT SUBSTRING('str' FROM 1 FROM foo",
            assert: {
                result: ParseError
            },
        },
        parse::{
            name: "SUBSTRING sql92 syntax with length missing right paren",
            statement: "SELECT SUBSTRING('str' FROM 1 FOR 1 FROM foo",
            assert: {
                result: ParseError
            },
        }
    ],
    partiql::[
        parse::{
            name: "SUBSTRING without length missing right paren",
            statement: "SELECT SUBSTRING('str', 1 FROM foo",
            assert: {
                result: ParseError
            },
        },
        parse::{
            name: "SUBSTRING missing right paren",
            statement: "SELECT SUBSTRING('str', 1, 1 FROM foo",
            assert: {
                result: ParseError
            },
        }
    ]
]

trim::[
    parse::{
        name: "TRIM no left paren",
        statement: "TRIM ' ')",
        assert: {
            result: ParseError
        },
    },
    parse::{
        name: "TRIM too many arguments",
        statement: "TRIM(BOTH ' ' FROM 'test' 2)",
        assert: {
            result: ParseError
        },
    },
    parse::{
        name: "TRIM with BOTH missing FROM",
        statement: "TRIM(BOTH 'test')",
        assert: {
            result: ParseError
        },
    },
    parse::{
        name: "TRIM and remove without FROM",
        statement: "trim(both '' 'test')",
        assert: {
            result: ParseError
        },
    },
    parse::{
        name: "TRIM without string",
        statement: "TRIM(FROM)",
        assert: {
            result: ParseError
        },
    },
    parse::{
        name: "TRIM no args",
        statement: "TRIM()",
        assert: {
            result: ParseError
        },
    },
    parse::{
        name: "TRIM with TRAILING missing FROM",
        statement: "TRIM(trailing '')",
        assert: {
            result: ParseError
        },
    },
    parse::{
        name: "TRIM all args but string",
        statement: "TRIM(TRAILING '' FROM)",
        assert: {
            result: ParseError
        },
    },
    parse::{
        name: "TRIM two args no FROM",
        statement: "TRIM(' ' '   1   ')",
        assert: {
            result: ParseError
        },
    },
    parse::{
        name: "TRIM spec and FROM no string",
        statement: "TRIM(TRAILING FROM)",
        assert: {
            result: ParseError
        },
    },
]

extract::[
    parse::{
        name: "EXTRACT missing FROM",
        statement: "EXTRACT(YEAR b)",
        assert: {
            result: ParseError
        },
    },
    parse::{
        name: "EXTRACT missing FROM with comma",
        statement: "EXTRACT(YEAR, b)",
        assert: {
            result: ParseError
        },
    },
    parse::{
        name: "EXTRACT missing second argument",
        statement: "EXTRACT(YEAR from)",
        assert: {
            result: ParseError
        },
    },
    parse::{
        name: "EXTRACT missing date time part",
        statement: "EXTRACT(FROM b)",
        assert: {
            result: ParseError
        },
    },
    parse::{
        name: "EXTRACT with only second argument",
        statement: "EXTRACT(b)",
        assert: {
            result: ParseError
        },
    },
    parse::{
        name: "EXTRACT with only date time part",
        statement: "EXTRACT(YEAR)",
        assert: {
            result: ParseError
        },
    },
]

parse::{
    name: "function call not COUNT with star",
    statement: "F(*)",
    assert: {
        result: ParseError
    },
}
