size::[
  {
    name:"size valid cases{param:\"`[]`\",result:0}",
    statement:"size(`[]`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"size valid cases{param:\"<<>>\",result:0}",
    statement:"size(<<>>)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"size valid cases{param:\"`{}`\",result:0}",
    statement:"size(`{}`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:0
    }
  },
  {
    name:"size valid cases{param:\"`[1]`\",result:1}",
    statement:"size(`[1]`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"size valid cases{param:\"<<1>>\",result:1}",
    statement:"size(<<1>>)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"size valid cases{param:\"`{a: 1}`\",result:1}",
    statement:"size(`{a: 1}`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"size valid cases{param:\"`[1, 1.0]`\",result:2}",
    statement:"size(`[1, 1.0]`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"size valid cases{param:\"<<1, 2, 3>>\",result:3}",
    statement:"size(<<1, 2, 3>>)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3
    }
  },
  {
    name:"size valid cases{param:\"`{a: 1, b: foo}`\",result:2}",
    statement:"size(`{a: 1, b: foo}`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"size valid cases{param:\"`[[], [1,2,3,4,[5,6], ()], ({a: 1, b: 2})]`\",result:3}",
    statement:"size(`[[], [1,2,3,4,[5,6], ()], ({a: 1, b: 2})]`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:3
    }
  },
  {
    name:"size valid cases{param:\"`{a: 1, a: 2}`\",result:2}",
    statement:"size(`{a: 1, a: 2}`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:2
    }
  },
  {
    name:"size valid cases{param:\"`[null]`\",result:1}",
    statement:"size(`[null]`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"size valid cases{param:\"<<null>>\",result:1}",
    statement:"size(<<null>>)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"size valid cases{param:\"`{a: null}`\",result:1}",
    statement:"size(`{a: null}`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"size valid cases{param:\"`[missing]`\",result:1}",
    statement:"size(`[missing]`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"size valid cases{param:\"<<missing>>\",result:1}",
    statement:"size(<<missing>>)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"size valid cases{param:\"`{a: missing}`\",result:1}",
    statement:"size(`{a: missing}`)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:1
    }
  },
  {
    name:"size null and missing propagation{param:\"null\"}",
    statement:"size(null)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:null
    }
  },
  {
    name:"size null and missing propagation{param:\"missing\"}",
    statement:"size(missing)",
    assert:{
      result:EvaluationSuccess,
      evalMode:[
        EvalModeCoerce,
        EvalModeError
      ],
      output:$missing::null
    }
  },
]
